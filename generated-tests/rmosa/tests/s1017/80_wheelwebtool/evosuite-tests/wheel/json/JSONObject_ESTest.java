/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:00:51 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.quote(",/q\n");
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.getNames((Object) null);
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.quote(">,\n");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean(">,\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">,\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>(124);
      jSONArray0.put((Map) hashMap0);
      JSONObject.valueToString(jSONArray0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-702.36663));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("Null pointer");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Q4^#W");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = JSONObject.quote("<nxU.g?DFX O");
      assertEquals("\"<nxU.g?DFX O\"", string0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(2913);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string1 = jSONObject0.toString(14, 2913);
      assertEquals("{}", string1);
      
      String string2 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.quote("Ex@eced a K:' aftArwa key");
      JSONObject.quote((String) null);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(17);
      int int0 = 75;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ex@eced a K:' aftArwa key";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.putOpt("Q=_^y]_Vu#Rs6R=K1:/", (Object) null);
      jSONObject0.optDouble("wgzs~jS?a@+`c1H", 494.4355);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Q4^#W");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.quote(";/^%,5;;&jTocfPq0");
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject(";/^%,5;;&jTocfPq0");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put(" of ", (Map) null);
      jSONObject0.optJSONObject("Q4^#W");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = JSONObject.quote("$oi;@(wigGVZP qb");
      Byte byte0 = new Byte((byte) (-90));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$oi;@(wigGVZP qb";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("java.lang.Long@00000000040", "java.lang.Long@00000000040");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "Q=_^y]_Vu#Rs6R=K1:/";
      JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"Q=_^y]_Vu#Rs6R=K1:/\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"Q=_^y]_Vu#Rs6R=K1:/\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4118191793225021
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\f", "\f");
      jSONObject0.optJSONArray("\f");
      try { 
        jSONObject0.getDouble("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2677660408775657
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject.quote(",q\n");
      Double double0 = Double.valueOf(506.274);
      Double.isFinite(506.274);
      JSONObject jSONObject0 = new JSONObject(double0);
      Short short0 = new Short((short)1);
      jSONObject0.putOpt(",q\n", short0);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("null");
      assertEquals("\"null\"", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "^";
      jSONObject0.put("^", (Object) "^");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.getInt("^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = JSONObject.quote(",q\n");
      assertEquals("\",q\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 337, 337);
      assertEquals("[]", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 337, 337);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((long) (-2187));
      jSONObject0.optDouble("null", 2937.854);
      jSONObject0.has("null");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("null", jSONArray0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("?Y]pKE");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("Q=_^y]_Vu#Rs6R=K1:/", 0L);
      jSONObject0.optJSONObject("Q4^#W");
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("null");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = JSONObject.quote(";/^%c5;4Tfq0");
      assertEquals("\";/^%c5;4Tfq0\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string1 = jSONObject0.toString((-26), (-26));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JSONObject.quote("]|S-JXF(%Uu ?cK/6N");
      Byte byte0 = new Byte((byte)34);
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = JSONObject.quote(";/^%c5;J4jTcfPq0");
      Short short0 = new Short((short)25);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0, (-38689130), (-38689130));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject.quote((String) null);
      Double double0 = new Double(179.164354);
      Double.isFinite(Double.NaN);
      Double double1 = new Double((-775.2));
      JSONObject jSONObject0 = new JSONObject(double1);
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (-1082L));
      jSONObject1.optDouble("\"\"", (-890.9286429554));
      jSONObject0.toString((-2169), (-1431));
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer(12);
      Integer.min(12, 12);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = jSONObject0.optString("G.\"gDBh-ktT!s3)1");
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("!pL.7w*V4?\"m?k");
      JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      jSONObject0.optJSONObject("Q4^#W");
      JSONObject.testValidity("Q=_^y]_Vu#Rs6R=K1:/");
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a Boolean.");
      assertEquals("\"] is not a Boolean.\"", string0);
      
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.FALSE;
      BiFunction<Object, Boolean, Boolean> biFunction0 = (BiFunction<Object, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONArray0, boolean0, biFunction0);
      String string1 = JSONObject.valueToString(jSONObject0, 16, 16);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      hashMap0.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("java.lang.Float@00000000010");
      assertNull(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject.quote("$:i;0@(< gG+ZPb");
      Double double0 = new Double(Double.NaN);
      Double.isFinite((-369.09675393056));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.names();
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "p@#[pV[K-<<8[2sI5e";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONTokener jSONTokener0 = new JSONTokener("{pLu5v5y^kxZ.y;Fg|");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {pLu5v5y^kxZ.y;Fg|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.quote(";/^%c5;J4jTcfPq0");
      assertEquals("\";/^%c5;J4jTcfPq0\"", string0);
      
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("4ZxL^K4isR7WbV", (-1.0));
      assertEquals((-1.0), double0, 0.01);
      
      String string1 = jSONObject0.toString(2394, 88);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0129128916305705);
      assertEquals("1.0129128916305705", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2008));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = JSONObject.quote("`\"W h`:Pd");
      assertEquals("\"`\\\"W h`:Pd\"", string0);
      
      Integer integer0 = new Integer((-2746));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string1 = jSONObject0.toString(2, 659);
      String string2 = jSONObject0.toString(2, 125);
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3341923457408336
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = JSONObject.quote(";/^%c5;J4jTcfPq0");
      assertEquals("\";/^%c5;J4jTcfPq0\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\";/^%c5;J4jTcfPq0\"");
      jSONObject0.toString((-2337), (-2337));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalOr(false, false);
      String string0 = JSONObject.valueToString(boolean0);
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 25, 25);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote("Q=_^y]_Vu#Rs6R=K1:/");
      Byte byte0 = new Byte((byte)5);
      String string1 = JSONObject.valueToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((String) null, jSONObject0);
      String string0 = "LF#g7mL{\\J";
      Short short0 = new Short((short) (-2282));
      Short short1 = new Short((short) (-2282));
      jSONObject0.putOpt((String) null, short1);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 107;
      try { 
        jSONArray0.getJSONObject(107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[107] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.quote(";/^%,5;;&jTocfPq0");
      assertEquals("\";/^%,5;;&jTocfPq0\"", string0);
      
      String string1 = JSONObject.valueToString(";/^%,5;;&jTocfPq0");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject.quote("$:i;0@(< gG+ZPb");
      Double double0 = new Double(Double.NaN);
      Double.isFinite((-369.09675393056));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("$:i;0@(< gG+ZPb", (-3176L));
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"$:i;0@(< gG+ZPb\"");
      assertEquals("\"\\\"$:i;0@(< gG+ZPb\\\"\"", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.575832360384573
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject.quote("Q=y]_Vu#Rs6R=K1:/");
      JSONObject jSONObject0 = new JSONObject((Object) "\"Q=y]_Vu#Rs6R=K1:/\"");
      jSONObject0.optLong("Null pointer");
      JSONObject.testValidity(jSONObject0);
      JSONObject.testValidity("Null pointer");
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("nam", jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.optString("$xG<04", "$xG<04");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject2.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextValue();
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject.quote("Unclosed comment");
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5002692973717837
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSONObject.quote("Q=y]_Vu#Rs6R=K1:/");
      JSONObject jSONObject0 = new JSONObject((Object) "\"Q=y]_Vu#Rs6R=K1:/\"");
      JSONObject.getNames(jSONObject0);
      Short short0 = new Short((short)48);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5109032860203158
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "\\f";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\f", 59);
      try { 
        jSONObject0.append("\f", "\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\f] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7j";
      stringArray0[1] = "java.lang.Short@0000000001.";
      stringArray0[2] = "Je}8[ec%!f";
      stringArray0[3] = "_*.<5LLMj5ON";
      stringArray0[2] = "toH";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = "2NHr";
      jSONObject0.put("Unterminated string", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("_*.<5LLMj5ON");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Unterminated string
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.clear();
      hashMap0.put(",</7eEx~", ",</7eEx~");
      hashMap0.put(".g ", ".g ");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.quote(",q\n");
      assertEquals("\",q\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) ",q\n");
      jSONObject0.toString(9, 9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 5, 5);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.isFinite((-369.09675393056));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("$:i;0@(< gG+ZPb", 1);
      Double.min(0.0, 0.0);
      jSONObject0.optLong("$:i;0@(< gG+ZPb", (-3176L));
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", (Object) ".");
      jSONObject1.put("0", (Object) jSONObject0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        jSONObject1.getJSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte) (-92));
      JSONObject.testValidity(byte0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("^NK[3*1Y&<Iwj_c~", float0);
      jSONObject0.optInt("^NK[3*1Y&<Iwj_c~", (int) (byte) (-92));
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = new Long(873L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("w2NHr", (Object) "w2NHr");
      String string0 = "";
      jSONObject1.optBoolean("");
      jSONObject1.optBoolean("w2NHr", true);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      try { 
        Long.valueOf("w2NHr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"w2NHr\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7582858357186
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject0.optBoolean("p@#[pV[K-<<[2sI5e", true);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(142);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "p@#[pV[K-<<[2sI5e", 142, 142);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 9;
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(2048.0369F);
      Boolean boolean0 = Boolean.FALSE;
      BiFunction<Object, Boolean, Boolean> biFunction0 = (BiFunction<Object, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(biFunction0).apply(any() , anyBoolean());
      hashMap0.compute(float0, biFunction0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(85, (double) 85);
      jSONArray0.getString(10);
      try { 
        jSONArray0.getBoolean(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[9] is not a Boolean.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{psLu5vy^=xZ.y;g:");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 16 of {psLu5vy^=xZ.y;g:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONTokener jSONTokener0 = new JSONTokener("{pLuc@5y^=W?.y>,. g|");
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 20 of {pLuc@5y^=W?.y>,. g|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{pLu5vy^=JxZ.y;Fg|");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 18 of {pLu5vy^=JxZ.y;Fg|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{pLu5vy^=J}.y;|");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      Double double0 = new Double(1.0);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-468L));
      JSONObject.valueToString(long0, (-2187), 7);
      JSONObject.valueToString("java.lang.Long@0000000001", (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject(jSONArray0);
      jSONObject2.isNull(":_f69-[vRUN7fr@Y");
      jSONObject2.isNull("gluU'7m:FG.KG<*8LT");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList1);
      jSONArray0.put((-468L));
      JSONObject.valueToString("\"java.lang.String@0000000002\"", (-1559), (-1559));
      Short short0 = new Short((short)111);
      JSONObject.valueToString(short0, 18, 34);
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject4 = new JSONObject(jSONObject3);
      try { 
        Byte.valueOf("gluU'7m:FG.KG<*8LT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"gluU'7m:FG.KG<*8LT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("isjoin", jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.quote("isjoin");
      try { 
        jSONObject1.getLong("isjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjoin\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      jSONObject0.put("", true);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte.valueOf((byte)19);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(37);
      stringWriter0.write((String) null);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "\f");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("\f", (Collection) linkedList0);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("isshortValue", biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("isshortValue", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "C.E0Z";
      jSONObject0.put("C.E0Z", (Object) "C.E0Z");
      try { 
        jSONObject0.getJSONArray("C.E0Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C.E0Z\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", (Object) ".");
      Short.compare((short)17, (short)17);
      Long long0 = new Long((short)17);
      JSONObject jSONObject2 = jSONObject0.putOpt(".", long0);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float((double) (short)17);
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      jSONObject0.accumulate(".", jSONObject1);
      JSONArray jSONArray0 = jSONObject2.getJSONArray(".");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("p@#[+V[K-<<[2sI5", object0);
      Integer integer0 = new Integer((-19));
      JSONObject.quote("p@#[+V[K-<<[2sI5");
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      jSONObject0.optString("p@#[+V[K-<<[2sI5", "\"p@#[+V[K-<<[2sI5\"");
      JSONObject.testValidity("p@#[+V[K-<<[2sI5");
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("*An");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of *An
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("p@#[pV[K-<<8[2sI5e", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject1.append("p@#[pV[K-<<8[2sI5e", "p@#[pV[K-<<8[2sI5e");
      int int0 = (-2008);
      try { 
        Double.valueOf("RH>@L{X{y,&5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\f", 59);
      jSONObject0.optJSONArray("\f");
      jSONObject0.getDouble("\f");
      try { 
        jSONObject1.getDouble("KwJV55,?.mG+_2I0^I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KwJV55,?.mG+_2I0^I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("isfomat", (Collection) linkedList0);
      jSONObject1.accumulate("isfomat", "isfomat");
      HashMap<JSONObject, Byte> hashMap2 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject2 = new JSONObject();
      Short short0 = new Short((short)26);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.quote("X.8BgBnPANa5wsN");
      Double double0 = Double.valueOf(0.0);
      Double.max(0.0, 0.0);
      Double.isFinite((-879.1));
      JSONObject jSONObject0 = new JSONObject((Object) "X.8BgBnPANa5wsN");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"X.8BgBnPANa5wsN\"", 1, 10);
      jSONObject0.write(stringWriter1);
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      HashMap<JSONObject, Double> hashMap2 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = "000";
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.put("000", (Object) boolean0);
      String string1 = "";
      jSONObject0.optBoolean("000", false);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "false";
      stringArray0[0] = "val";
      stringArray0[4] = "x|UX{cq=OoQ!W9q";
      stringArray0[5] = "val";
      JSONObject jSONObject0 = new JSONObject(jSONArray1, stringArray0);
      jSONObject0.put("x|UX{cq=OoQ!W9q", (Object) "false");
      jSONObject0.optBoolean("x|UX{cq=OoQ!W9q", true);
      JSONArray jSONArray2 = new JSONArray();
      try { 
        Long.valueOf("val");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"val\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", (Object) ".");
      jSONObject1.put(".", (Object) jSONObject0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject1.getJSONObject(".");
      String string0 = JSONObject.valueToString(jSONObject1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", boolean0);
      jSONObject1.optBoolean("p@#[pV[K-<<[2sI5e", true);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(142);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "p@#[pV[K-<<[2sI5e", 120, 120);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-38689130));
      assertEquals("-3.868913E7", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Long long0 = new Long((-1147L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "true");
      jSONObject1.toString();
      JSONObject.valueToString(long0);
      jSONObject0.optBoolean("true", true);
      assertEquals(2, jSONObject0.length());
      
      JSONObject.testValidity((Object) null);
      JSONObject.doubleToString(0.0);
      Double double0 = new Double((-1147L));
      JSONObject.testValidity("tFS}5V~[G+z");
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer((-2187));
      jSONArray0.optDouble((-2187), (-2535.2830908059));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("Uzp;'=7s", jSONObject0);
      hashMap0.getOrDefault("Uzp;'=7s", jSONArray0);
      jSONObject0.put("Uzp;'=7s", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Uzp;'=7s");
      assertNotNull(jSONObject1);
      
      Boolean boolean0 = Boolean.valueOf("Uzp;'=7s");
      JSONObject.testValidity(boolean0);
      String string0 = JSONObject.doubleToString((byte)21);
      assertEquals("21", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.quote(";/^%c5;J4jTcfPq0");
      assertEquals("\";/^%c5;J4jTcfPq0\"", string0);
      
      String string1 = JSONObject.quote("</ud|&6uk+~");
      assertEquals("\"<\\/ud|&6uk+~\"", string1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "{pLu5vy6=?=xZ.y;Fg|";
      JSONTokener jSONTokener0 = new JSONTokener("{pLu5vy6=?=xZ.y;Fg|");
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {pLu5vy6=?=xZ.y;Fg|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
