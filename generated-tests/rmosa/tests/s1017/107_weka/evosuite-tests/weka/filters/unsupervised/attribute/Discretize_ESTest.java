/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:20:57 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("y8M8[nr;$?*M@ecb4g");
      discretize0.globalInfo();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useEqualFrequencyTipText();
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[1];
      String[] stringArray0 = new String[0];
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = 295;
      discretize0.getCutPoints(295);
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0695316709044738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 5);
      arrayList0.clone();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      discretize0.m_IgnoreClass = true;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray1[6] = (double) 4;
      discretize0.m_MakeBinary = true;
      attribute0.setWeight(4);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.setOutputFormat();
      binarySparseInstance0.toString(2);
      int int0 = 276;
      int int1 = (-3348);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("#mdfT[9KT&?9_p");
      discretize0.m_IgnoreClass = true;
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1816.2397665), (double[]) null, intArray0, (-1362));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Discretize.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2429732264381474
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(false);
      discretize0.setOptions((String[]) null);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(1273);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("sAO-v<TNKSJ?ldm");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("sAO-v<TNKSJ?ldm");
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Random.setNextRandom(5227);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.133628922152431
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      boolean boolean0 = true;
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("-R");
      discretize0.m_MakeBinary = true;
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 95;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tUnsets the class index temporarily before the filter is\n\tapplied to the data.\n\t(default: no)";
      stringArray0[1] = "p_pQD5<g%)";
      stringArray0[2] = "-M";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p_pQD5<g%)");
      stringArray0[3] = "7t-nfd'lm{Jr";
      stringArray0[4] = "xb7";
      stringArray0[5] = "7t-nfd'lm{Jr";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7341976517373596
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      boolean boolean0 = true;
      AllFilter allFilter0 = new AllFilter();
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " doesn't seem to exist!";
      stringArray0[1] = "-R";
      stringArray0[2] = " doesn't seem to exist!";
      Filter.runFilter(discretize0, stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("o|k@v|Jo0w", 9);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("\nClass values and labels of instances:\n");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 1092.47617632131;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[6] = (-6.496288184227789);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1092.47617632131;
      doubleArray3[2] = 0.0;
      doubleArray3[4] = 892.0;
      doubleArray3[5] = 1092.47617632131;
      doubleArray1[3] = (-6.496288184227789);
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[1] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -861
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("F");
      Locale.getISOCountries();
      AllFilter allFilter0 = new AllFilter();
      discretize0.m_NumBins = 123;
      discretize0.getCapabilities();
      discretize0.m_IgnoreClass = true;
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8041400714636096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(1795.87);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = (-8);
      Attribute attribute0 = new Attribute((String) null, (-8));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1849);
      binarySparseInstance1.setDataset(instances0);
      discretize0.input(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      discretize0.input(binarySparseInstance1);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1014));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9170035073264322
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute((String) null, 27);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1821);
      discretize0.setInputFormat(instances0);
      discretize0.setIgnoreClass(false);
      discretize0.setBins(1837);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(3);
      binarySparseInstance1.setDataset(instances0);
      binarySparseInstance0.copy();
      discretize0.input(binarySparseInstance1);
      System.setCurrentTimeMillis(0L);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2490));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2490
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.497200696923035
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("R1K5X", arrayList0, 709);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      discretize0.convertInstance(binarySparseInstance0);
      discretize0.calculateCutPoints();
      discretize0.calculateCutPoints();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9105451333674952
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 27);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.setUseEqualFrequency(false);
      discretize0.setBins(1849);
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray1[0] = (double) 4;
      doubleArray1[5] = 2230.335723048333;
      doubleArray1[6] = (double) 2;
      attribute0.setWeight(5996.69507);
      doubleArray1[8] = 0.06053724277974304;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1849);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1);
      discretize0.getBinRangesString(1);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A nominal attribute (null) cannot have duplicate labels ('(0-0]').
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.147875267561006
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      arrayList0.clone();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 5;
      intArray0[2] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, 1710);
      instances0.checkInstance(binarySparseInstance0);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.m_MakeBinary = true;
      attribute0.setWeight(4);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)46;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.setOutputFormat();
      binarySparseInstance1.toString(2);
      Random.setNextRandom(attribute0.NOMINAL);
      discretize0.convertInstance(binarySparseInstance1);
      int int0 = 8;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.45861830444182
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "tize0n.#o9abYjM<c");
      Attribute attribute0 = new Attribute((String) null, 20);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1877);
      binarySparseInstance1.copy();
      binarySparseInstance1.setDataset(instances0);
      BinarySparseInstance binarySparseInstance2 = (BinarySparseInstance)binarySparseInstance1.copy();
      binarySparseInstance2.setWeight(3934.9618349174857);
      discretize0.input(binarySparseInstance1);
      binarySparseInstance2.copy();
      discretize0.input(binarySparseInstance1);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.setOutputFormat();
      discretize0.convertInstance(binarySparseInstance0);
      System.setCurrentTimeMillis(1394L);
      System.setCurrentTimeMillis(3);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, (String) null, 9);
      Attribute.typeToString(2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 44);
      discretize0.setUseEqualFrequency(true);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      discretize0.calculateCutPoints();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("o|k@v|Jo0w", 9);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      int int0 = (-1192);
      String[] stringArray0 = new String[0];
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, (-19));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 1);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      discretize1.m_MakeBinary = true;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-19));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 1803);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      Attribute.main(stringArray0);
      arrayList0.add(attribute0);
      discretize0.m_MakeBinary = true;
      attribute0.setWeight(4);
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      System.setCurrentTimeMillis((-290L));
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      discretize0.getBinRangesString(2);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 12);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      attribute0.copy(".arff");
      arrayList0.add(attribute0);
      discretize0.setBins(1836);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 1803);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      discretize0.setInvertSelection(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      Attribute.main(stringArray0);
      arrayList0.add(attribute0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.m_MakeBinary = true;
      attribute0.setWeight(4);
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      System.setCurrentTimeMillis((-290L));
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.595698796531246
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 27);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.setUseEqualFrequency(false);
      discretize0.setBins(1849);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-180.6406031408594);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 2230.335723048333;
      doubleArray1[6] = (double) 2;
      doubleArray1[8] = 0.06053724277974304;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1849);
      binarySparseInstance1.copy();
      discretize0.batchFinished();
      discretize0.input(binarySparseInstance1);
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("o|k@v|Jo0w", 9);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      discretize0.convertInstance(denseInstance0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("wMy rbN<Ya.!L=");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("real", arrayList1);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.batchFinished();
      discretize0.convertInstance(binarySparseInstance0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      Attribute attribute0 = new Attribute("", 7);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1848);
      discretize0.batchFinished();
      discretize0.input(binarySparseInstance0);
      discretize0.batchFinished();
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4694533729842758
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute((String) null, 27);
      discretize0.setInvertSelection(true);
      discretize0.setBins(1867);
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[14];
      doubleArray1[6] = (double) 2;
      doubleArray1[8] = 0.06053724277974304;
      attribute0.copy((String) null);
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1867);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      discretize0.getBinRangesString(1);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 5);
      arrayList0.clone();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      discretize0.m_MakeBinary = false;
      attribute0.setWeight(4);
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.setOutputFormat();
      binarySparseInstance0.toString(2);
      Random.setNextRandom(attribute0.NOMINAL);
      discretize0.convertInstance(binarySparseInstance0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 12);
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      discretize0.setBins(2147483645);
      // Undeclared exception!
      discretize0.batchFinished();
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 1803);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      Attribute.main(stringArray0);
      arrayList0.add(attribute0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.m_MakeBinary = true;
      attribute0.setWeight(4);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      discretize0.m_CutPoints = doubleArray0;
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      System.setCurrentTimeMillis((-290L));
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 12);
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances("wwV22{l}&/aO!n", arrayList0, 2);
      arrayList0.add(attribute0);
      discretize0.setUseEqualFrequency(true);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      Filter.makeCopy(discretize0);
      discretize0.getOptions();
      boolean boolean0 = false;
      AllFilter allFilter0 = new AllFilter();
      try { 
        Filter.wekaStaticWrapper(allFilter0, "", (Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute((String) null, 1803);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1821);
      instances0.setClassIndex(0);
      discretize0.setInputFormat(instances0);
      discretize0.setIgnoreClass(false);
      discretize0.calculateCutPoints();
      attribute0.setWeight((-82.316406021643));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(405);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 405
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 27);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.setUseEqualFrequency(false);
      discretize0.batchFinished();
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[5] = 2230.335723048333;
      doubleArray1[8] = 0.06053724277974304;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      DenseInstance denseInstance0 = new DenseInstance(1);
      discretize0.convertInstance(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, (-8));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      binarySparseInstance1.setDataset(instances0);
      discretize0.input(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      discretize0.input(binarySparseInstance1);
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 5);
      arrayList0.clone();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      arrayList0.add(attribute0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.m_MakeBinary = true;
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 5);
      arrayList0.clone();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray1[6] = (double) 4;
      discretize0.m_MakeBinary = true;
      attribute0.setWeight(4);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.setOutputFormat();
      binarySparseInstance0.toString(2);
      Random.setNextRandom(attribute0.NOMINAL);
      discretize0.convertInstance(binarySparseInstance0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      arrayList0.clone();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      int[] intArray0 = new int[3];
      intArray0[1] = 5;
      intArray0[2] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, 1710);
      instances0.setClass(attribute0);
      instances0.checkInstance(binarySparseInstance0);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][9];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.m_MakeBinary = true;
      attribute0.setWeight(4);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)46;
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.setOutputFormat();
      binarySparseInstance1.toString(2);
      Random.setNextRandom(attribute0.NOMINAL);
      discretize0.convertInstance(binarySparseInstance1);
      int int0 = 8;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "tize0n.#o9abYjM<c");
      Attribute attribute0 = new Attribute((String) null, 27);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1849);
      binarySparseInstance1.copy();
      binarySparseInstance1.setDataset(instances0);
      BinarySparseInstance binarySparseInstance2 = (BinarySparseInstance)binarySparseInstance1.copy();
      binarySparseInstance2.setWeight(3934.9618349174857);
      discretize0.input(binarySparseInstance1);
      binarySparseInstance2.copy();
      discretize0.input(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)instances0.lastInstance();
      discretize0.input(binarySparseInstance3);
      System.setCurrentTimeMillis(0L);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1820);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1820
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "tize0n.#o9abYjM<c");
      Attribute attribute0 = new Attribute((String) null, 27);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      binarySparseInstance1.copy();
      binarySparseInstance1.setDataset(instances0);
      binarySparseInstance0.setWeight(3934.9618349174857);
      discretize0.input(binarySparseInstance1);
      binarySparseInstance1.copy();
      discretize0.input(binarySparseInstance1);
      Instance instance0 = instances0.lastInstance();
      discretize0.input(instance0);
      System.setCurrentTimeMillis(0L);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1820);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1820
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
