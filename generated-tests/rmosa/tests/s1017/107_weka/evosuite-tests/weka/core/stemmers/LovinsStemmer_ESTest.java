/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:10:30 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.886696431854348
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("$`0#;o'v0|$ nHaR");
      assertEquals("$`0#;o'v0|$ nhar", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0712732248565715
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.stem("ross quinlanher");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0297806514715506
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("bookensher");
      assertEquals("bookenshes", string0);
      
      String string1 = lovinsStemmer0.stemString(">g~E;g6[YU=.fO2VS[");
      assertEquals(">g~e;g6[yu=.fo2v[", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("ygar");
      assertEquals("ygar", string3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.802055016673
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("YEAR");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("$`0#;o'v0|$ nHaR");
      assertEquals("$`0#;o'v0|$ nhar", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.844703399344479
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("MASTERSTHESIS");
      assertEquals("mastersthes", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("$`0#;o'v0|$ nHaR");
      assertEquals("$`0#;o'v0|$ nhar", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8147797526426859
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("bookletuad");
      assertEquals("bookletuas", string0);
      
      String string1 = lovinsStemmer0.stem("bookletuas");
      assertEquals("bookletu", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0131913494858544
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Th organization that sponsors a conference or that publishes a manual.");
      assertEquals("th organ that sponsor a confer or that publish a manu.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Th organization that sponsors a conference or that publishes a manual.");
      String string1 = lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      assertEquals("th organ that spons a confer or that publ a manu.", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9070630681426808
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ietal");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("ies");
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.844703399344479
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("$`0#;o'v0|$ nHaR");
      assertEquals("$`0#;o'v0|$ nhar", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("$`0#;o'v0|$ nHaR");
      assertEquals("$`0#;o'v0|$ nhar", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0012301267355768
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer1.stemString("isatmion");
      assertEquals("isatm", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0660011761664636
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("2kz\"EWbxL-97QRyl");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1258471628013564
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ejCq@|T{");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("tImOg;lcyl");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("timog;lcyl");
      String string1 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string1);
      
      String string2 = lovinsStemmer1.stemString("WABO&r&U|t :z{AP!q");
      assertEquals("wab&r&u|t :z{ap!q", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8243638458810152
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("booklet");
      assertEquals("bookles", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9941814492125127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("The year of publication or, or an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, or an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0405643551619077
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("4,TSsQ]Kn&f'8'wo&");
      lovinsStemmer0.stem("4,TSsQ]Kn&f'8'wo&");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("vaDd");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("b[S-O$MFzUM{,+{ja9");
      assertEquals("b[s-o$mfzum{,+{ja9", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9746415911927695
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("mit");
      String string0 = lovinsStemmer0.stemString("LANGUAGE");
      assertEquals("langu", string0);
      
      lovinsStemmer0.stem("vM*f60xB2}oD)Ha~1Ri");
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9496815359418065
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("dex");
      lovinsStemmer0.stem("ietal");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0078385794716358
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pand");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("vM*f60xB2}oD)Ha~1Ri");
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9860069426482669
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ieutal");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("lovinsstemmeracrud");
      lovinsStemmer0.stem("yz");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9368216872516988
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("6");
      String string0 = lovinsStemmer0.stemString("iqlud");
      assertEquals("iqlus", string0);
      
      String string1 = lovinsStemmer0.stemString("iqlus");
      assertEquals("iqlus", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.016256084623069
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.getRevision();
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("QyLA");
      assertEquals("qyl", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("ediKtor");
      assertEquals("edikt", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.802055016673
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("$`0#;o'v0|$ nharix");
      assertEquals("$`0#;o'v0|$ nharic", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("$`0#;o'v0|$ nHaR");
      assertEquals("$`0#;o'v0|$ nhar", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0078385794716358
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("vM*f60xB2}oD)Ha~1Ri");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("8034ert");
      assertEquals("8034ers", string0);
      
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("bex");
      assertEquals("bic", string0);
      
      String string1 = lovinsStemmer0.stem("nsoqcid");
      assertEquals("nsoqcis", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9746415911927695
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(" fo/s r?(}xklux");
      assertEquals(" fo/s r?(}xkluc", string0);
      
      lovinsStemmer0.stem("vM*f60xB2}oD)Ha~1Ri");
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("iteness");
      String string0 = lovinsStemmer0.stemString("iteness");
      assertEquals("it", string0);
      
      lovinsStemmer0.stemString("size");
      String string1 = lovinsStemmer1.stemString(")'4^:#+#OeBB/w!U");
      assertEquals(")'4^:#+#oeb/w!u", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("izing");
      assertEquals("izing", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A part of a book having its own title.");
      assertEquals("a part of a book hav it own titl.", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9746415911927695
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("vm*f60xb2}od)ha~1ryt");
      assertEquals("vm*f60xb2}od)ha~1rys", string0);
      
      lovinsStemmer0.stem("vM*f60xB2}oD)Ha~1Ri");
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0852430602637115
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      String string1 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string1);
      
      String string2 = lovinsStemmer0.stemString("a;2Io1Fen");
      assertEquals("a;2io1f", string2);
      
      String string3 = lovinsStemmer0.stemString("c}+6r");
      assertEquals("c}+6r", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9834317264626641
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("vM*f60xB2}oD)Ha~1Ri");
      String string0 = lovinsStemmer0.stem("lovinsstemmerax");
      assertEquals("lovinsstemmerac", string0);
      
      String string1 = lovinsStemmer0.stem("vM*f60xB2}oD)Ha~1Ri");
      String string2 = lovinsStemmer0.stemString("vm*f60xb2}od)ha~1r");
      assertTrue(string2.equals((Object)string1));
      
      String string3 = lovinsStemmer0.stemString("AiJUS?9tkkp");
      assertEquals("aijus?9tkkp", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.025705671073174
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("mit");
      assertEquals("mis", string1);
      
      String string2 = lovinsStemmer0.stemString("iston");
      assertEquals("ist", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.036738350388952
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("pex");
      assertEquals("pic", string0);
      
      lovinsStemmer1.stemString("Freund, Y. and Mason, L.");
      String string1 = lovinsStemmer0.stemString("pic");
      assertEquals("pic", string1);
      
      String string2 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string2);
      
      String string3 = lovinsStemmer0.stemString("vasend");
      assertEquals("vasens", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("8rHg+GaPPi:I<=;ta");
      assertEquals("8rhg+gap:i<=;ta", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0472665798410326
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("iettex");
      assertEquals("iettic", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("5.55555 rounded to 2 decimal places: ");
      assertEquals("5.55555 round to 2 decim plac: ", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.103238305462365
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("'j");
      String[] stringArray0 = new String[7];
      stringArray0[6] = "vad";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("ticend");
      assertEquals("ticens", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Q,{VaB@F6`&~6IiJAr&");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.054581911391662
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Crk$Nzno!eXs#o`xt");
      assertEquals("crk$nzn!ec#o`xt", string0);
      
      lovinsStemmer0.stem(" fO/s r?(}xK");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString(" fO/s r?(}xK");
      String string1 = lovinsStemmer0.stem("fulness");
      assertEquals("fl", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9100174452958452
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ental");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("otlid");
      assertEquals("otlis", string0);
      
      String string1 = lovinsStemmer0.stemString("ical");
      assertEquals("ical", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.092031379282898
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem(" fO/s r?(}xK");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("erid");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString(" fO/s r?(}xK");
      assertEquals(" fo/s r?(}xk", string0);
      
      String string1 = lovinsStemmer0.stem("fulness");
      assertEquals("fl", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.049241132357144
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("iental");
      lovinsStemmer0.stem("?5C55");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("Quote parse error.");
      lovinsStemmer1.stemString("iental");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("end");
      assertEquals("ens", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1408371152434216
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dex";
      stringArray0[1] = "1;i*=j";
      stringArray0[2] = "akjv";
      stringArray0[3] = "aric";
      stringArray0[4] = "";
      stringArray0[5] = "+vVO;";
      String string0 = "$I&_^p\\uIt^@P86tCx+";
      stringArray0[6] = string0;
      stringArray0[7] = "C4.5: Programs for Machine Learning";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("ientond");
      assertEquals("ientons", string1);
      
      lovinsStemmer0.stemString("!,^)=");
      String string2 = lovinsStemmer0.stemString(" nt+nQ!UrT~X");
      assertEquals(" nt+nq!urt~x", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ross quinlanhesyz");
      assertEquals("ross quinlanhesys", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "BOOKLET";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("istr");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ation");
      assertEquals("ation", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0926286662805518
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string1);
      
      String string2 = lovinsStemmer0.stem("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalid cvs revision - not enough parts separated by dots!", string2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0623507255502964
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0RE/|A&>fmu";
      stringArray0[1] = "lovinsstemmeruad";
      stringArray0[2] = "BD3O";
      lovinsStemmer0.toString();
      stringArray0[3] = "ex*5&dfq5sJ\"q";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("`f%'cG!v");
      String string0 = lovinsStemmer0.stemString("`f%'cg!v");
      assertEquals("`f%'cg!v", string0);
      
      String string1 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string1);
      
      String string2 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9377713584953233
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "mit";
      stringArray0[1] = ":'@UyvDIcm#S=+}lPf^";
      stringArray0[2] = "Ewa+a#uk)vR,Jvx";
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      stringArray0[3] = "<J,?,Oy";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("bookletuad");
      String string1 = lovinsStemmer0.stemString("bookletuad");
      assertEquals("bookletuas", string1);
      
      String string2 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("iental");
      assertEquals("ient", string0);
      
      lovinsStemmer0.stem("?5C55");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("encies");
      assertEquals("enci", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0641682339798832
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("'j");
      String[] stringArray0 = new String[7];
      stringArray0[6] = "vad";
      String string0 = lovinsStemmer0.stemString("allically");
      assertEquals("al", string0);
      
      String string1 = lovinsStemmer0.stemString("Q,{VaB@F6`&~6IiJAr&");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("vM*f6WxB<>oD)HQ~1RRi");
      String string1 = lovinsStemmer0.stem("vm*f6wxb<>od)hq~1r");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9785214102713589
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "idend";
      stringArray0[1] = "7#%9Jf-b\"f'=";
      stringArray0[2] = "idert";
      stringArray0[3] = "rud";
      stringArray0[4] = "";
      stringArray0[5] = "weka.core.TechnicalInformation$Type";
      stringArray0[6] = "cRAMTy";
      stringArray0[7] = "_yHAiUe%l>k^.Gq}W";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("6iofuM");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("et");
      assertEquals("et", string0);
      
      lovinsStemmer2.stem("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      String string1 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string1);
      
      String string2 = lovinsStemmer2.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it vol and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("SVl}{JU)I7IkGG)fK>");
      assertEquals("svl}{ju)i7ikg)fk>", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("$(CqN");
      assertEquals("$(cqn", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("vM*f60xB2}oD)Ha~1Ri");
      assertEquals("vm*f60xb2}od)ha~1r", string0);
      
      String string1 = lovinsStemmer0.stemString("iether");
      assertEquals("iether", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("?bHQ3wl(nJ+[{tSUM");
      assertEquals("?bhq3wl(nj+[{tsum", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("qgoul|nUh(^DLdYLv");
      assertEquals("qgoul|nuh(^dldylv", string2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("eta");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("QyLA");
      assertEquals("qyl", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("proceedings");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("proceedings");
      assertEquals("proceed", string0);
      
      String string1 = lovinsStemmer0.stemString("proceed");
      assertEquals("proceed", string1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("masonet");
      String string0 = lovinsStemmer0.stemString("masonet");
      assertEquals("masonet", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("!,^)=");
      assertEquals("!,^)=", string0);
      
      String string1 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string1);
      
      String string2 = lovinsStemmer0.stemString("meter");
      assertEquals("meter", string2);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lingupex");
      String string0 = lovinsStemmer0.stemString("lingupex");
      assertEquals("lingupic", string0);
      
      String string1 = lovinsStemmer0.stemString("ement");
      assertEquals("ement", string1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem(" fO/s r?(}xK");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("$VALUES");
      assertEquals("$valu", string0);
      
      String string1 = lovinsStemmer0.stemString(" fO/s r?(}xK");
      assertEquals(" fo/s r?(}xk", string1);
      
      String string2 = lovinsStemmer0.stem("ulness");
      assertEquals("l", string2);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Q,{VaB@F6`&~6IiiAr&");
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("+ieal");
      assertEquals("+ie", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("8034");
      assertTrue(string2.equals((Object)string0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0299691667808861
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("rudvad");
      assertEquals("rudvas", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer1.stemString("MRNUM[BER");
      assertEquals("mrn[ber", string2);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("ietal");
      assertEquals("ies", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("9tkkpher");
      assertEquals("9tkkpher", string1);
  }
}
