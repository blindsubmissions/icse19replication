/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:12:26 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindMain;
import freemind.modes.MapAdapter;
import freemind.modes.browsemode.BrowseNodeModel;
import freemind.modes.filemode.FileController;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.schememode.SchemeController;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.DirectColorModel;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.time.DateTimeException;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.format.ResolverStyle;
import java.time.temporal.TemporalField;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JWindow;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import org.apache.batik.bridge.SVGDescElementBridge;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemExtensionDecl;
import org.apache.xerces.parsers.XML11NonValidatingConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      Button button0 = null;
      try {
        button0 = new Button("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.570320951240733
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getFloatingColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(2, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3267, 3267, 3267, 3267, '=');
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      SystemColor systemColor0 = SystemColor.textInactiveText;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3267;
      floatArray0[1] = (float) 3267;
      floatArray0[2] = (float) 3267;
      floatArray0[3] = (float) 3267;
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.669103344325365
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.calendar = null;
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1356), 127L, 2566, (-2919), 'i');
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-56), 27, 10126, 27, '=');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 3251;
      int int1 = (-56);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3251, 3251, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, mockPrintStream0, 1631, (-56));
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      jDayChooser0.setDay(779);
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getMinSelectableDate();
      int int0 = (-4228);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-4228));
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("freemind.controller.actions.generated.instance.CollaborationHello");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6717601208463124
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setMaxDayCharacters((-1184));
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Rectangle rectangle0 = new Rectangle(34, 34);
      jDayChooser0.setBounds(rectangle0);
      jDayChooser0.setAutoscrolls(true);
      jDayChooser0.setLocale(locale0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(34);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 20, 181L, 20, 2471, ':', 2745);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.keyTyped((KeyEvent) null);
      java.sql.Date date0 = new java.sql.Date(0L);
      // Undeclared exception!
      try { 
        java.sql.Date.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-2734), "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentListeners();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getX();
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.setMonth(28);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6513516076108075
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setBackground((Color) null);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setEnabled(true);
      System.setCurrentTimeMillis((-2508L));
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.619994235517992
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isOptimizedDrawingEnabled();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster1, (MouseMotionListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.addInputMethodListener(aWTEventMulticaster1);
      jDayChooser0.getDaysInMonth();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDay((-986));
      jDayChooser0.updateUI();
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(253);
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration(symbolTable0, xMLGrammarPoolImpl0);
      Locale locale0 = xML11NonValidatingConfiguration0.getLocale();
      Locale locale1 = jDayChooser0.getLocale();
      locale0.getDisplayLanguage(locale1);
      jDayChooser1.setLocale(locale0);
      jDayChooser1.setDayBordersVisible(true);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser1, 3786, 1372L, 10, 253, 't', 19520);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(164, (-1102), 974);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      SVGDescElementBridge sVGDescElementBridge0 = new SVGDescElementBridge();
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PanelUI panelUI0 = jDayChooser0.getUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(panelUI0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.validate();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.firePropertyChange("", 2912.3743597913, 2912.3743597913);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Insets insets0 = jDayChooser0.getInsets();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.right);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.bottom);
      assertNotNull(insets0);
      
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("#yg)Egff] 2_lsRJ}s");
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertNotNull(jCheckBoxMenuItem0);
      
      KeyStroke keyStroke0 = jCheckBoxMenuItem0.getAccelerator();
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertNull(keyStroke0);
      
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setDecorationBordersVisible(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.keyReleased((KeyEvent) null);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser_DecoratorButton0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.validate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.firePropertyChange("", 2912.3743597913, 2912.3743597913);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("#yg)Egff] 2_lsRJ}s");
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertNotNull(jCheckBoxMenuItem0);
      
      KeyStroke keyStroke0 = jCheckBoxMenuItem0.getAccelerator();
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertNull(keyStroke0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNull(jButton0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<~L<");
      assertFalse(boolean0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
      assertEquals(238, color0.getBlue());
      assertEquals(228, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      String string0 = "26";
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3389.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3495.0425F);
      floatArray0[4] = 3389.0F;
      floatArray0[1] = 0.0F;
      floatArray0[6] = 0.0F;
      // Undeclared exception!
      try { 
        color0.getComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.72442085395284
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.list();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 1830L, 38, 38, 'D');
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(8576, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(38, keyEvent0.getModifiers());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(1830L, keyEvent0.getWhen());
      assertEquals(38, keyEvent0.getID());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(8576, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(38, keyEvent0.getModifiers());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(1830L, keyEvent0.getWhen());
      assertEquals(38, keyEvent0.getID());
      
      jDayChooser0.setMonth(32);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      System.setCurrentTimeMillis(32);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(1, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      assertNull(jYearChooser0);
      
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      System.setCurrentTimeMillis((-1250L));
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(8576, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(38, keyEvent0.getModifiers());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(1830L, keyEvent0.getWhen());
      assertEquals(38, keyEvent0.getID());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(8576, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(38, keyEvent0.getModifiers());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(1830L, keyEvent0.getWhen());
      assertEquals(38, keyEvent0.getID());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(35);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(4294977024L);
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(19, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.selectedColor;
      assertEquals(160, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(160, color0.getGreen());
      assertEquals((-6250336), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(160, color0.getRed());
      assertNotNull(color0);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("lS02jC9y[ai0", vetoableChangeListener0);
      assertEquals("lS02jC9y[ai0", vetoableChangeListenerProxy0.getPropertyName());
      assertNotNull(vetoableChangeListenerProxy0);
      
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(19, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("lS02jC9y[ai0", vetoableChangeListenerProxy0.getPropertyName());
      
      Color color1 = Color.getColor("YDb>L", color0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(19, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(160, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(160, color0.getGreen());
      assertEquals((-6250336), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(160, color0.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(160, color1.getBlue());
      assertEquals(160, color1.getGreen());
      assertEquals((-6250336), color1.getRGB());
      assertEquals(160, color1.getRed());
      assertSame(color0, color1);
      assertSame(color1, color0);
      assertNotNull(color1);
      
      jDayChooser0.setSundayForeground(color0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(19, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(160, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(160, color0.getGreen());
      assertEquals((-6250336), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(160, color0.getRed());
      assertSame(color0, color1);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        color1.getColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "West");
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setYear(8);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = true;
      try { 
        jDayChooser0.getMousePosition();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(90, color0.getGreen());
      assertEquals(164, color0.getBlue());
      assertEquals((-16754012), color0.getRGB());
      assertNotNull(color0);
      
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      assertNotNull(menuSelectionManager0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      MockDate mockDate0 = new MockDate(1982, 1982, 1982, 1982, 181);
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser1.setMaxSelectableDate(mockDate0);
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals("Wed Oct 23 17:01:00 GMT 4052", mockDate0.toString());
      assertEquals("Wed Oct 23 17:01:00 GMT 4052", date0.toString());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      assertNotNull(date0);
      
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      assertNotNull(metalToolBarUI0);
      
      Color color0 = metalToolBarUI0.getFloatingColor();
      assertNull(color0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      Color color0 = null;
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      // Undeclared exception!
      try { 
        ZoneOffset.ofHours(1410);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 1410 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Color color0 = Color.BLACK;
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(3, directColorModel0.getTransferType());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertNotNull(directColorModel0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-154));
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(focusEvent0.isTemporary());
      assertEquals((-154), focusEvent0.getID());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(focusEvent0.isTemporary());
      assertEquals((-154), focusEvent0.getID());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.weekOfYearVisible = false;
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 33;
      int int1 = 22;
      MenuElement[] menuElementArray0 = new MenuElement[9];
      JMenu jMenu0 = new JMenu();
      assertFalse(jMenu0.isFocusCycleRoot());
      assertFalse(jMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jMenu0.getIgnoreRepaint());
      assertTrue(jMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jMenu0.isFocusTraversalPolicySet());
      assertNotNull(jMenu0);
      
      menuElementArray0[0] = (MenuElement) jMenu0;
      FileMode fileMode0 = new FileMode();
      assertEquals("File", fileMode0.toString());
      assertNotNull(fileMode0);
      
      SchemeController schemeController0 = null;
      try {
        schemeController0 = new SchemeController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 41, false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(41, focusEvent0.getID());
      assertNotNull(focusEvent0);
      
      focusEvent0.setSource("day");
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(41, focusEvent0.getID());
      
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(41, focusEvent0.getID());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      KeyListener[] keyListenerArray0 = jDayChooser0.getKeyListeners();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, keyListenerArray0.length);
      assertNotNull(keyListenerArray0);
      
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = true;
      jDayChooser0.initialized = true;
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      try { 
        JOptionPane.getFrameForComponent(jDayChooser0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.611479906446705
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isOptimizedDrawingEnabled();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(boolean0);
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      assertNotNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertNull(inputMethodListener2);
      
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      assertSame(inputMethodListener1, inputMethodListener3);
      assertSame(inputMethodListener3, inputMethodListener1);
      assertNotNull(inputMethodListener3);
      
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertSame(inputMethodListener1, inputMethodListener3);
      assertNull(inputMethodListener4);
      
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener5);
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, int0);
      
      jDayChooser0.firePropertyChange("Pool size is less than 1!", (float) 28, 0.0F);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      ActionMap actionMap0 = jDayChooser1.getActionMap();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotNull(actionMap0);
      
      jDayChooser1.setDay((-986));
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters((-986));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      jDayChooser0.setDay((-986));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      jDayChooser0.setDay(28);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6359016899712038
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(2);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      assertNotNull(basicToolBarUI0);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(17, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      FreeMindMain freeMindMain0 = null;
      FileMode fileMode0 = new FileMode();
      assertEquals("File", fileMode0.toString());
      assertNotNull(fileMode0);
      
      FileController fileController0 = null;
      try {
        fileController0 = new FileController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isOptimizedDrawingEnabled();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean0);
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      assertNotNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertNull(inputMethodListener2);
      
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertNull(inputMethodListener3);
      
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener4);
      
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener5);
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(28, int0);
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser0.setDay(18);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(18, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      java.sql.Date date0 = new java.sql.Date((-986));
      assertNotNull(date0);
      
      jDayChooser1.setSelectableDateRange((Date) null, date0);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay(785);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, int0);
      
      int int1 = jDayChooser0.getX();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      HierarchyListener[] hierarchyListenerArray0 = jDayChooser0.getHierarchyListeners();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, hierarchyListenerArray0.length);
      assertNotNull(hierarchyListenerArray0);
      
      jDayChooser0.setMonth(28);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.698555534979564
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.requestFocusInWindow();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
      
      boolean boolean1 = jDayChooser0.isFocusOwner();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, true, true);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertNotNull(jInternalFrame0);
      
      FocusListener[] focusListenerArray0 = jInternalFrame0.getFocusListeners();
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertEquals(0, focusListenerArray0.length);
      assertNotNull(focusListenerArray0);
      
      Point point0 = new Point(399, 945);
      assertEquals(945.0, point0.getY(), 0.01);
      assertEquals(399.0, point0.getX(), 0.01);
      assertEquals(945, point0.y);
      assertEquals(399, point0.x);
      assertNotNull(point0);
      
      jDayChooser0.weekPanel = null;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jInternalFrame0.setLocation(point0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertEquals(945.0, point0.getY(), 0.01);
      assertEquals(399.0, point0.getX(), 0.01);
      assertEquals(945, point0.y);
      assertEquals(399, point0.x);
      
      Point point1 = new Point();
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertNotNull(point1);
      
      KeyEvent keyEvent0 = new KeyEvent(jInternalFrame0, 945, 0L, 77, 36, 'I');
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals('I', keyEvent0.getKeyChar());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(945, keyEvent0.getID());
      assertEquals(36, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(13, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isControlDown());
      assertNotNull(keyEvent0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser1.keyPressed(keyEvent0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals('I', keyEvent0.getKeyChar());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(945, keyEvent0.getID());
      assertEquals(36, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(13, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      System.setCurrentTimeMillis(0L);
      jDayChooser1.setDay((-1372));
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(1, jDayChooser1.getDay());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-56), (-56), 22, 37, 'U');
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertEquals((-56L), keyEvent0.getWhen());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('U', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(22, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(1408, keyEvent0.getModifiersEx());
      assertEquals((-56), keyEvent0.getID());
      assertNotNull(keyEvent0);
      
      keyEvent0.consume();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isConsumed());
      assertEquals((-56L), keyEvent0.getWhen());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('U', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(22, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(1408, keyEvent0.getModifiersEx());
      assertEquals((-56), keyEvent0.getID());
      
      int int0 = keyEvent0.getExtendedKeyCode();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isConsumed());
      assertEquals((-56L), keyEvent0.getWhen());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('U', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(22, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(1408, keyEvent0.getModifiersEx());
      assertEquals((-56), keyEvent0.getID());
      assertEquals(0, int0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(13, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isConsumed());
      assertEquals((-56L), keyEvent0.getWhen());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('U', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(22, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(1408, keyEvent0.getModifiersEx());
      assertEquals((-56), keyEvent0.getID());
      
      JInternalFrame jInternalFrame0 = new JInternalFrame("kd@<A70jZ,)r=)O", true, true, true, false);
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(jInternalFrame0);
      
      FocusListener[] focusListenerArray0 = jInternalFrame0.getFocusListeners();
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(0, focusListenerArray0.length);
      assertNotNull(focusListenerArray0);
      
      KeyEvent keyEvent1 = new KeyEvent(jInternalFrame0, 37, 37, (-3134), (-644), 'U');
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals((-3136), keyEvent1.getModifiersEx());
      assertEquals((-2147483646), keyEvent1.getModifiers());
      assertFalse(keyEvent1.isAltDown());
      assertFalse(keyEvent1.isAltGraphDown());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertFalse(keyEvent1.isActionKey());
      assertEquals((-644), keyEvent1.getKeyCode());
      assertFalse(keyEvent1.isConsumed());
      assertEquals('U', keyEvent1.getKeyChar());
      assertFalse(keyEvent1.isShiftDown());
      assertEquals(37, keyEvent1.getID());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals(37L, keyEvent1.getWhen());
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertNotNull(keyEvent1);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(12, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isConsumed());
      assertEquals((-56L), keyEvent0.getWhen());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('U', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(22, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(1408, keyEvent0.getModifiersEx());
      assertEquals((-56), keyEvent0.getID());
      assertFalse(keyEvent0.equals((Object)keyEvent1));
      assertNotSame(keyEvent0, keyEvent1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7245232524096474
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = (-27);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'p', 'p', (-27), 34, 'p');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(112L, keyEvent0.getWhen());
      assertEquals((-2147483611), keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(34, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('p', keyEvent0.getKeyChar());
      assertEquals(112, keyEvent0.getID());
      assertEquals((-64), keyEvent0.getModifiersEx());
      assertNotNull(keyEvent0);
      
      String string0 = InputEvent.getModifiersExText((-27));
      assertNotNull(string0);
      assertEquals("Meta+Ctrl+Alt+Shift+Alt Graph+Button1+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20", string0);
      
      keyEvent0.setSource(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(112L, keyEvent0.getWhen());
      assertEquals((-2147483611), keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(34, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('p', keyEvent0.getKeyChar());
      assertEquals(112, keyEvent0.getID());
      assertEquals((-64), keyEvent0.getModifiersEx());
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, 21, 309L, 90, 1041, (-1783), 3014, true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(1041, mouseEvent0.getX());
      assertTrue(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isConsumed());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals((-1783), mouseEvent0.getY());
      assertFalse(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isMetaDown());
      assertTrue(mouseEvent0.isControlDown());
      assertEquals(21, mouseEvent0.getID());
      assertEquals(309L, mouseEvent0.getWhen());
      assertEquals(26, mouseEvent0.getModifiers());
      assertEquals(3014, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertNotNull(mouseEvent0);
      
      String string0 = MouseEvent.getMouseModifiersText((-3111));
      assertNotNull(string0);
      assertEquals("Alt+Shift+Button1+Button2+Button3", string0);
      
      Point point0 = jDayChooser0.getPopupLocation(mouseEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(1041, mouseEvent0.getX());
      assertTrue(mouseEvent0.isAltDown());
      assertFalse(mouseEvent0.isConsumed());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals((-1783), mouseEvent0.getY());
      assertFalse(mouseEvent0.isShiftDown());
      assertFalse(mouseEvent0.isMetaDown());
      assertTrue(mouseEvent0.isControlDown());
      assertEquals(21, mouseEvent0.getID());
      assertEquals(309L, mouseEvent0.getWhen());
      assertEquals(26, mouseEvent0.getModifiers());
      assertEquals(3014, mouseEvent0.getClickCount());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertNull(point0);
      
      jDayChooser0.setDay(18);
      assertEquals(18, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.updateUI();
      assertEquals(18, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 895, 604799992L, 684, 40, '7');
      assertEquals(18, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(895, keyEvent0.getID());
      assertEquals('7', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(604799992L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(44, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(895, keyEvent0.getID());
      assertEquals('7', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(604799992L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(640, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(44, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean0 = jDayChooser0.isOptimizedDrawingEnabled();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(boolean0);
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      assertNotNull(menuSelectionManager0);
      
      jDayChooser0.setMaxDayCharacters(4);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SVGDescElementBridge sVGDescElementBridge0 = new SVGDescElementBridge();
      assertEquals(0.0F, sVGDescElementBridge0.getFontSize(), 0.01F);
      assertEquals("desc", sVGDescElementBridge0.getLocalName());
      assertEquals("http://www.w3.org/2000/svg", sVGDescElementBridge0.getNamespaceURI());
      assertNotNull(sVGDescElementBridge0);
      
      jDayChooser0.setDay(4);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(4, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(4, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = (-27);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'p', 'p', (-27), 33, 'p');
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('p', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-2147483611), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-64), keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(112, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(112L, keyEvent0.getWhen());
      assertNotNull(keyEvent0);
      
      String string0 = InputEvent.getModifiersExText((-27));
      assertNotNull(string0);
      assertEquals("Meta+Ctrl+Alt+Shift+Alt Graph+Button1+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20", string0);
      
      keyEvent0.setSource(jDayChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('p', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-2147483611), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-64), keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(112, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(112L, keyEvent0.getWhen());
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay(785);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 785, 785, (-481), 35, '+');
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(785L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-2147483617), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(35, keyEvent0.getKeyCode());
      assertEquals((-512), keyEvent0.getModifiersEx());
      assertEquals(785, keyEvent0.getID());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(785L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-2147483617), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(35, keyEvent0.getKeyCode());
      assertEquals((-512), keyEvent0.getModifiersEx());
      assertEquals(785, keyEvent0.getID());
      
      jDayChooser0.setMonth(592);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      
      System.setCurrentTimeMillis(785);
      System.setCurrentTimeMillis(212L);
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(785L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-2147483617), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(35, keyEvent0.getKeyCode());
      assertEquals((-512), keyEvent0.getModifiersEx());
      assertEquals(785, keyEvent0.getID());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay(785);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, jDayChooser0.getDay());
      
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertNotNull(jInternalFrame0);
      
      String string0 = InputEvent.getModifiersExText((-1));
      assertNotNull(string0);
      assertEquals("Meta+Ctrl+Alt+Shift+Alt Graph+Button1+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20", string0);
      
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      assertNotNull(menuSelectionManager0);
      
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jInternalFrame0, 1937, 1937, 12, 12, 'Y', (MenuElement[]) null, menuSelectionManager0);
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isControlDown());
      assertEquals('Y', menuKeyEvent0.getKeyChar());
      assertTrue(menuKeyEvent0.isAltDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(1937L, menuKeyEvent0.getWhen());
      assertEquals(768, menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertEquals(1937, menuKeyEvent0.getID());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(12, menuKeyEvent0.getKeyCode());
      assertTrue(menuKeyEvent0.isMetaDown());
      assertEquals(12, menuKeyEvent0.getModifiers());
      assertNotNull(menuKeyEvent0);
      
      menuKeyEvent0.setSource("day");
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isControlDown());
      assertEquals('Y', menuKeyEvent0.getKeyChar());
      assertTrue(menuKeyEvent0.isAltDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(1937L, menuKeyEvent0.getWhen());
      assertEquals(768, menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertEquals(1937, menuKeyEvent0.getID());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(12, menuKeyEvent0.getKeyCode());
      assertTrue(menuKeyEvent0.isMetaDown());
      assertEquals(12, menuKeyEvent0.getModifiers());
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, 12, 785, 1937, (-1), 'T', (MenuElement[]) null, menuSelectionManager0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals((-1), menuKeyEvent1.getKeyCode());
      assertFalse(menuKeyEvent1.isAltDown());
      assertEquals(1920, menuKeyEvent1.getModifiersEx());
      assertFalse(menuKeyEvent1.isMetaDown());
      assertEquals('T', menuKeyEvent1.getKeyChar());
      assertEquals(12, menuKeyEvent1.getID());
      assertFalse(menuKeyEvent1.isControlDown());
      assertEquals(17, menuKeyEvent1.getModifiers());
      assertFalse(menuKeyEvent1.isConsumed());
      assertTrue(menuKeyEvent1.isShiftDown());
      assertFalse(menuKeyEvent1.isActionKey());
      assertEquals(0, menuKeyEvent1.getKeyLocation());
      assertFalse(menuKeyEvent1.isAltGraphDown());
      assertEquals(785L, menuKeyEvent1.getWhen());
      assertFalse(menuKeyEvent1.equals((Object)menuKeyEvent0));
      assertNotNull(menuKeyEvent1);
      
      jDayChooser0.keyPressed(menuKeyEvent1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals((-1), menuKeyEvent1.getKeyCode());
      assertFalse(menuKeyEvent1.isAltDown());
      assertEquals(1920, menuKeyEvent1.getModifiersEx());
      assertFalse(menuKeyEvent1.isMetaDown());
      assertEquals('T', menuKeyEvent1.getKeyChar());
      assertEquals(12, menuKeyEvent1.getID());
      assertFalse(menuKeyEvent1.isControlDown());
      assertEquals(17, menuKeyEvent1.getModifiers());
      assertFalse(menuKeyEvent1.isConsumed());
      assertTrue(menuKeyEvent1.isShiftDown());
      assertFalse(menuKeyEvent1.isActionKey());
      assertEquals(0, menuKeyEvent1.getKeyLocation());
      assertFalse(menuKeyEvent1.isAltGraphDown());
      assertEquals(785L, menuKeyEvent1.getWhen());
      assertFalse(menuKeyEvent1.equals((Object)menuKeyEvent0));
      assertNotSame(menuKeyEvent1, menuKeyEvent0);
      
      jDayChooser0.setMonth((-1));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isControlDown());
      assertEquals('Y', menuKeyEvent0.getKeyChar());
      assertTrue(menuKeyEvent0.isAltDown());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(1937L, menuKeyEvent0.getWhen());
      assertEquals(768, menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isActionKey());
      assertEquals(1937, menuKeyEvent0.getID());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(12, menuKeyEvent0.getKeyCode());
      assertTrue(menuKeyEvent0.isMetaDown());
      assertEquals(12, menuKeyEvent0.getModifiers());
      assertFalse(menuKeyEvent0.equals((Object)menuKeyEvent1));
      assertNotSame(menuKeyEvent0, menuKeyEvent1);
      
      jDayChooser0.keyPressed(menuKeyEvent1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals((-1), menuKeyEvent1.getKeyCode());
      assertFalse(menuKeyEvent1.isAltDown());
      assertEquals(1920, menuKeyEvent1.getModifiersEx());
      assertFalse(menuKeyEvent1.isMetaDown());
      assertEquals('T', menuKeyEvent1.getKeyChar());
      assertEquals(12, menuKeyEvent1.getID());
      assertFalse(menuKeyEvent1.isControlDown());
      assertEquals(17, menuKeyEvent1.getModifiers());
      assertFalse(menuKeyEvent1.isConsumed());
      assertTrue(menuKeyEvent1.isShiftDown());
      assertFalse(menuKeyEvent1.isActionKey());
      assertEquals(0, menuKeyEvent1.getKeyLocation());
      assertFalse(menuKeyEvent1.isAltGraphDown());
      assertEquals(785L, menuKeyEvent1.getWhen());
      assertFalse(menuKeyEvent1.equals((Object)menuKeyEvent0));
      assertNotSame(menuKeyEvent1, menuKeyEvent0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 1830L, 40, 40, 'D');
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8704, keyEvent0.getModifiersEx());
      assertEquals(40, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(1830L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(40, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(21, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8704, keyEvent0.getModifiersEx());
      assertEquals(40, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(1830L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(40, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      
      jDayChooser0.setMonth(32);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(21, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis((-1250L));
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8704, keyEvent0.getModifiersEx());
      assertEquals(40, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(1830L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(40, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8704, keyEvent0.getModifiersEx());
      assertEquals(40, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(1830L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(40, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.selectedDay.isFocusCycleRoot());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.selectedDay.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.selectedDay.getIgnoreRepaint());
      
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(17, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      JDayChooser jDayChooser2 = new JDayChooser(false);
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(17, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser2);
      
      jDayChooser0.setDay(1038);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
      
      jDayChooser1.updateUI();
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(17, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      jDayChooser1.drawDays();
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(17, jDayChooser1.getDay());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.equals((Object)jDayChooser2));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser2);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser0.equals((Object)jDayChooser2));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser0, jDayChooser2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.701663842613756
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      assertNotNull(basicToolBarUI0);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(17, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      System.setCurrentTimeMillis(609L);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 247, 1L, 36, 36, 's');
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(8448, keyEvent0.getModifiersEx());
      assertEquals(36, keyEvent0.getModifiers());
      assertEquals(247, keyEvent0.getID());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(36, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('s', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(1L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotNull(keyEvent0);
      
      jDayChooser1.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(1, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(8448, keyEvent0.getModifiersEx());
      assertEquals(36, keyEvent0.getModifiers());
      assertEquals(247, keyEvent0.getID());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(36, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('s', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(1L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      assertNotNull(basicToolBarUI0);
      
      Color color0 = basicToolBarUI0.getFloatingColor();
      assertNull(color0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, (-324L), (-1), 39, ';');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(';', keyEvent0.getKeyChar());
      assertEquals((-64), keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals((-2147483585), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(39, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(39, keyEvent0.getID());
      assertEquals((-324L), keyEvent0.getWhen());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(3, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(';', keyEvent0.getKeyChar());
      assertEquals((-64), keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals((-2147483585), keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(39, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(39, keyEvent0.getID());
      assertEquals((-324L), keyEvent0.getWhen());
      
      System.setCurrentTimeMillis((-9223372036854775808L));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      assertNotNull(basicToolBarUI0);
      
      jDayChooser0.setDay((-1603));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(223.0, dimension0.getWidth(), 0.01);
      assertEquals(140.0, dimension0.getHeight(), 0.01);
      assertEquals(140, dimension0.height);
      assertEquals(223, dimension0.width);
      assertNotNull(dimension0);
      
      jDayChooser0.updateUI();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      JButton[] jButtonArray0 = new JButton[1];
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNull(jButton0);
      
      jButtonArray0[0] = null;
      boolean boolean0 = jDayChooser0.contains(140, 140);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(boolean0);
      
      jDayChooser0.days = jButtonArray0;
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setEnabled(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setEnabled(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      SystemColor systemColor0 = SystemColor.control;
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertNotNull(systemColor0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      Button button0 = null;
      try {
        button0 = new Button("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
