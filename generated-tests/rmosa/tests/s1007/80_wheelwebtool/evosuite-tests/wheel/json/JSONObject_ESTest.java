/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:05:08 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "ZV4 AX/HkOX";
      JSONObject.quote("ZV4 AX/HkOX");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"ZV4 AX/HkOX\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"ZV4 AX/HkOX\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("ZV4 AX/HkOX");
      JSONTokener jSONTokener0 = new JSONTokener("ZV4 AX/HkOX");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ZV4 AX/HkOX
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject.quote(";\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONObject");
      try { 
        jSONObject0.getBoolean("\";\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\";\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject.quote("ZV4 AX/HkOX");
      JSONObject jSONObject0 = new JSONObject((Object) "ZV4 AX/HkOX");
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"ZV4 AX/HkOX\"");
      assertEquals("\"\\\"ZV4 AX/HkOX\\\"\"", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject.quote("L6g9U+/AtPl");
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>(1160);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("\"L6g9U+/AtPl\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"L6g9U+/AtPl\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject.quote("L6g9U+/AtPl");
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("] is not a JSONObject.", 2317.5565971);
      JSONTokener jSONTokener0 = new JSONTokener("}wU-}ZY13");
      JSONTokener jSONTokener1 = new JSONTokener((String) null);
      assertFalse(jSONTokener1.equals((Object)jSONTokener0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JSONObject.quote("3E\"");
      assertEquals("\"3E\\\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(9, (-754));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(34);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{l8");
      String string0 = "Unterminated string";
      Integer.getInteger("Unterminated string");
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(853.8);
      Double.max(853.8, 0.0);
      hashMap0.put(double0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("jcLVD", (Object) "jcLVD");
      JSONObject.getNames(jSONObject0);
      String string0 = "A JSONArray text must start with '['";
      Object object0 = new Object();
      try { 
        jSONObject0.getBoolean("jcLVD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jcLVD\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = JSONObject.quote("' and instead saw '");
      assertEquals("\"' and instead saw '\"", string0);
      
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(0.0);
      Integer integer0 = Integer.valueOf(1166);
      hashMap0.remove((Object) float0);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-1188), (-1188));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("is");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3247643021871367
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject.quote("ZV4 AX/HkOX");
      JSONObject jSONObject0 = new JSONObject((Object) "ZV4 AX/HkOX");
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(",\n");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject.quote(",\n");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-4614L));
      jSONObject0.append(",\n", long0);
      try { 
        jSONObject0.getBoolean("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 445L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = JSONObject.quote("L6g9U+/AtPl");
      assertEquals("\"L6g9U+/AtPl\"", string0);
      
      String string1 = JSONObject.valueToString("\"L6g9U+/AtPl\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-774.26327));
      jSONObject0.put("] not found.", (Object) float0);
      jSONObject0.optLong("] not found.", (-1089L));
      jSONObject0.optDouble("] not found.", 2317.5565971);
      JSONTokener jSONTokener0 = new JSONTokener("] not found.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.lang.Long@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of java.lang.Long@00000000030
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "jcLVD";
      JSONObject jSONObject1 = jSONObject0.put("jcLVD", (Object) "jcLVD");
      try { 
        jSONObject1.getJSONObject("jcLVD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jcLVD\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray1.toJSONObject(jSONArray0);
      hashMap0.putIfAbsent((JSONObject) null, "5pu9{SSz");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
      
      String string1 = JSONObject.valueToString((Object) null);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = JSONObject.quote("ZV4 AX/HkOX");
      Short short0 = new Short((short) (-282));
      String string1 = JSONObject.valueToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7677103011358952
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("jcLVD", (Object) "jcLVD");
      jSONObject1.put("jcLVD", 1981.677936993);
      jSONObject1.optInt("jcLVD");
      String string0 = "A JSONArray text must start with '['";
      Object object0 = new Object();
      try { 
        jSONObject0.getBoolean("jcLVD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jcLVD\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = JSONObject.quote("p8/kz3)5Y5}OJ3U");
      assertEquals("\"p8/kz3)5Y5}OJ3U\"", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = JSONObject.quote("L6g9U+/AtPl");
      assertEquals("\"L6g9U+/AtPl\"", string0);
      
      Double double0 = new Double((-318.225599741));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-101), (-101));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.438180636739496
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = JSONObject.quote("ZV4 AX/HkOX");
      assertEquals("\"ZV4 AX/HkOX\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"ZV4 AX/HkOX\"");
      jSONObject0.toString(123, 17);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString(17);
      assertEquals("17", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-3288), (-3288));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0, 123, 127);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = JSONObject.quote("ZV AX/HkOX");
      assertEquals("\"ZV AX/HkOX\"", string0);
      
      String string1 = JSONObject.valueToString("ZV AX/HkOX", (-74023248), (-74023248));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6731233014736997
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject.quote("' and instead saw '");
      Float float0 = new Float((-1146.116F));
      Float.sum(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-1146.116F));
      assertEquals("-1146.115966796875", string0);
      
      String string1 = JSONObject.quote(",KK ,H='*'");
      assertEquals("\",KK ,H='*'\"", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("jcLVD", (Object) "jcLVD");
      jSONObject1.optBoolean("jcLVD", true);
      String string0 = "A JSONArray text must start with '['";
      Object object0 = new Object();
      try { 
        jSONObject0.getBoolean("jcLVD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jcLVD\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7502240195160248
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = ",\n";
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(",\n", stringArray0);
      jSONObject0.optBoolean("HdRjeMcv[gx");
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String string1 = "ybsK@a$\"P&";
      JSONObject jSONObject1 = new JSONObject();
      hashMap0.remove((Object) jSONObject1, (Object) ",\n");
      JSONObject jSONObject2 = jSONObject1.put("ybsK@a$\"P&", (Object) "000");
      Boolean boolean0 = new Boolean(false);
      try { 
        jSONObject2.getBoolean("ybsK@a$\"P&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ybsK@a$\\\"P&\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 4425, 4425);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject.quote("L6g9U+/AtPl");
      String string0 = JSONObject.quote("L6g9U+/AtPl");
      assertEquals("\"L6g9U+/AtPl\"", string0);
      
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0, 8, (-1108));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = new Float((-42.7));
      String string0 = jSONObject0.optString("r#e'");
      assertEquals("", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      String string0 = JSONObject.valueToString(hashMap0, 97, (-177));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject.quote(",VKI\n");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-511));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      try { 
        jSONObject0.getBoolean("+>Pj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+>Pj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "3E\"";
      JSONObject.quote("3E\"");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject((JSONArray) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3E\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] not found.", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("de");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of de
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1645.8939283159);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("jcLVD", (Object) "jcLVD");
      jSONObject0.accumulate("jcLVD", (Object) null);
      String string0 = "A JSONArray text must start with '['";
      Object object0 = new Object();
      try { 
        jSONObject0.getBoolean("jcLVD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jcLVD\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4272189210536856
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject.quote("\n");
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      String string0 = JSONObject.quote("\"\n\"");
      assertEquals("\"\\\"\\n\\\"\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7971247221835693
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Double double0 = new Double((-2111.9991906931));
      Long long0 = new Long(0L);
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("is", "is");
      jSONObject0.put("O", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(120);
      stringWriter0.append((CharSequence) "is");
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject0.optString("", ".");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Double double0 = new Double(122);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3341923457408336
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = JSONObject.quote("?..jK/2;)`");
      assertEquals("\"?..jK/2;)`\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"?..jK/2;)`\"");
      jSONObject0.toString(738, (-3567));
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("NuyH");
      assertEquals("\"NuyH\"", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.quote("Missing value");
      JSONObject jSONObject0 = new JSONObject((Object) "Missing value");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"Missing value\"");
      assertEquals("\"\\\"Missing value\\\"\"", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString(5, 5);
      Long long0 = new Long(5);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("jcLV?", (Object) "jcLV?");
      try { 
        jSONObject1.getInt("jcLV?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jcLV?\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optLong("");
      jSONObject0.optLong("Null key.");
      jSONObject0.optLong("2jo%\"s<apWYl2z*kc");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      JSONObject jSONObject2 = jSONObject1.put("2jo%\"s<apWYl2z*kc", (Map) hashMap2);
      hashMap0.put("wheel.json.JSONException", "");
      hashMap1.put("uqXq8_+K jU&%", "f0F)b");
      jSONObject2.keys();
      jSONObject0.keys();
      hashMap0.put("a3", "co");
      hashMap1.put("2jo%\"s<apWYl2z*kc", (String) null);
      hashMap2.put("wheel.json.JSONException", "`b/uA");
      hashMap0.put("EJj", "log");
      jSONObject2.put("gethashCode", (Map) hashMap0);
      jSONObject2.isNull(",\n");
      try { 
        jSONObject0.getBoolean("&PL#}mo3c+<y+W)G$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&PL#}mo3c+<y+W)G$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.48509409130221154
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 17, 17);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.474108380099098
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject.quote(",\n");
      Boolean boolean0 = Boolean.valueOf("7-`bA");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7-`bA";
      stringArray0[1] = ",\n";
      stringArray0[2] = ",\n";
      stringArray0[3] = "\",\n\"";
      stringArray0[4] = "7-`bA";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Long long0 = new Long(0L);
      jSONObject0.putOpt("\",\n\"", long0);
      jSONObject0.toString((-153), 1483);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("-*");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 6L);
      jSONObject1.getDouble("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(86, false);
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = (-3204);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      jSONArray0.put((Map) hashMap0);
      jSONArray0.optBoolean(86, false);
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = (-3204);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("1pq6>@xSP^IKLe3ql", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6953605153886686
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = ",\n";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(",\n", stringArray0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "{l8";
      JSONTokener jSONTokener0 = new JSONTokener("{l8");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {l8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "jcLVD";
      JSONObject jSONObject1 = jSONObject0.put("jcLVD", (Object) "jcLVD");
      Float float0 = new Float(0.0);
      try { 
        jSONObject1.append("jcLVD", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[jcLVD] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "jcLVD";
      jSONObject0.put("jcLVD", (Object) "jcLVD");
      String string1 = "A JSONArray text must start with '['";
      try { 
        jSONObject0.getLong("jcLVD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jcLVD\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(".", ".");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optJSONArray(".");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", ",\n");
      Float float0 = new Float((double) (short)6);
      Float.isFinite(0.0F);
      jSONObject0.accumulate(",\n", float0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject.numberToString(float0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray(",\n");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{!ER=4W/^Snl&");
      jSONTokener0.back();
      String string0 = JSONObject.quote("y8v`O|V;U@qc</yd");
      assertEquals("\"y8v`O|V;U@qc<\\/yd\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", jSONArray0);
      Float float0 = new Float((double) (short)6);
      Object object0 = new Object();
      jSONObject1.accumulate(",\n", object0);
      Float.min((short)6, (short)6);
      String string0 = JSONObject.numberToString(float0);
      String string1 = JSONObject.numberToString(float0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject.testValidity("geHtsuv");
      JSONObject.valueToString("geHtsuv");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("geHtsuv", "\"java.lang.String@0000000001\"");
      jSONObject0.append("geHtsuv", (Object) null);
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1434, (long) 1434);
      jSONArray0.optBoolean(7);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Map) hashMap0);
      JSONObject.doubleToString((-1916.0594011067158));
      JSONObject jSONObject2 = jSONObject1.optJSONObject(",\n");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.put("1", (Map) hashMap0);
      jSONObject0.getJSONObject("1");
      JSONTokener jSONTokener0 = new JSONTokener("1");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-48733664));
      assertEquals("-4.8733664E7", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7766623382398494
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(",\n", stringArray0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put((Integer) null, boolean0);
      jSONObject1.put(",\n", true);
      jSONObject0.getBoolean(",\n");
      String string0 = JSONObject.quote(",\n");
      Integer integer0 = new Integer(59);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("jcLVD", (Object) "jcLVD");
      jSONObject1.put("jcLVD", false);
      Object object0 = new Object();
      jSONObject0.getBoolean("jcLVD");
      JSONObject.testValidity("A JSONArray text must start with '['");
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{!ER=;W/^Snl&");
      jSONTokener0.back();
      jSONTokener0.toString();
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 5 of {!ER=;W/^Snl&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{ER=tc^;F");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {ER=tc^;F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = "{R=4@^n";
      JSONTokener jSONTokener0 = new JSONTokener("{R=4@^n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 7 of {R=4@^n
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{R:=@^n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 3 of {R:=@^n
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      jSONObject0.keys();
      jSONObject0.put("KOpW", (Object) "true");
      Object object0 = JSONObject.NULL;
      jSONObject0.getBoolean("KOpW");
      assertEquals(4, jSONObject0.length());
      
      JSONObject.testValidity("KOpW");
      String string0 = JSONObject.quote("true");
      assertEquals("\"true\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{ER=tcK}rF");
      String string0 = jSONObject0.toString(102, 102);
      String string1 = jSONObject0.toString(1987, (-3312));
      assertTrue(string1.equals((Object)string0));
      
      jSONObject0.keys();
      JSONObject.valueToString(jSONObject0);
      String string2 = JSONObject.doubleToString(0.0);
      assertEquals("0", string2);
  }
}
