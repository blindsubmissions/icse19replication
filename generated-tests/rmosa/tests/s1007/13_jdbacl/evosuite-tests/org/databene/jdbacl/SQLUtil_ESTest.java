/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:05:10 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.store.access.btree.BTreeCostController;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputBinary;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;
import org.postgresql.jdbc4.Jdbc4Connection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("E+#tRyP9dn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.renderValue("&DgS9KwSCdzN$s%");
      assertEquals("'&DgS9KwSCdzN$s%'", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5140966973399504
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SQLUtil.normalize("h$RWa+Y}!T~~%m", true);
      assertEquals("h $ RWa + Y } ! T ~ ~ % m", string0);
      
      String string1 = SQLUtil.normalize("LOCK TABLE ", true);
      assertEquals("LOCK TABLE", string1);
      
      boolean boolean0 = SQLUtil.isQuery("/!iGiD$6!F.B64+@D");
      assertFalse(boolean0);
      
      String string2 = SQLUtil.removeComments("LOCK TABLE");
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "[A2H|HV{$X_X<5Amo$:";
      DBCatalog dBCatalog0 = new DBCatalog("[A2H|HV{$X_X<5Amo$:");
      DBSchema dBSchema0 = new DBSchema("[A2H|HV{$X_X<5Amo$:", dBCatalog0);
      dBSchema0.setDoc("");
      dBSchema0.getTable("[A2H|HV{$X_X<5Amo$:");
      int int0 = (-2061584299);
      DBDataType.getInstance((-2061584299), "inner");
      String string1 = null;
      String[] stringArray0 = new String[2];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("inner");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'inner' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("renamexec");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select");
      Integer integer0 = RawTransaction.COMMIT;
      Random.setNextRandom((-241927590));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("getNextRowCore");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("getNextRowCore");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("g9/y9.{42-i", false);
      assertEquals("g9 / y9. { 42 - i", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("co-sd!acnt", false);
      assertEquals("co - sd ! acnt", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("exece.", (String[]) null, "O#q6J{?'|tiAn", "O#q6J{?'|tiAn", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[5] = "";
      String string0 = SQLUtil.leftJoin(stringArray0[0], stringArray0, "", "iPlIH<Z=!<RUW)T4", stringArray0);
      assertEquals("left join  as iPlIH<Z=!<RUW)T4 on null.null = iPlIH<Z=!<RUW)T4.null and null.null = iPlIH<Z=!<RUW)T4.null and null.null = iPlIH<Z=!<RUW)T4.null and null.null = iPlIH<Z=!<RUW)T4.null and null.null = iPlIH<Z=!<RUW)T4.null and null. = iPlIH<Z=!<RUW)T4. and null.null = iPlIH<Z=!<RUW)T4.null", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("x.%");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table x.%", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index[vmfe<'", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      int int0 = 659;
      StringBuilder stringBuilder0 = new StringBuilder(659);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-591), 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -591
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("wku6l+c1Ht");
      String string0 = null;
      tableContainer0.getTable((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wku6l+c1Ht";
      tableContainer0.getSchema();
      stringArray0[2] = "wku6l+c1Ht";
      stringArray0[3] = null;
      stringArray0[5] = "wku6l+c1Ht";
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8587543173837988
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pn2w3l7Gk");
      String string0 = SQLUtil.normalize("j@,i%3BAc/;+", true);
      assertEquals("j @, i % 3BAc / ; +", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j@,i%3BAc/;+";
      stringArray0[1] = "pn2w3l7Gk";
      stringArray0[2] = "pn2w3l7Gk";
      stringArray0[3] = "j@,i%3BAc/;+";
      stringArray0[4] = "j@,i%3BAc/;+";
      stringArray0[5] = "j @, i % 3  BAc / ; +";
      stringArray0[6] = "pn2w3l7Gk";
      stringArray0[7] = "j @, i % 3  BAc / ; +";
      stringArray0[8] = "pn2w3l7Gk";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "pn2w3l7Gk", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT pn2w3l7Gk PRIMARY KEY (j@,i%3BAc/;+, pn2w3l7Gk, pn2w3l7Gk, j@,i%3BAc/;+, j@,i%3BAc/;+, j @, i % 3  BAc / ; +, pn2w3l7Gk, j @, i % 3  BAc / ; +, pn2w3l7Gk)", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = stringArray0[2];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(stringArray0[4], dBCatalog0);
      DBSequence dBSequence0 = new DBSequence(stringArray0[6], dBSchema0);
      dBSchema0.setDoc((String) null);
      dBCatalog0.getComponents();
      dBSequence0.getIncrementIfNotDefault();
      dBSchema0.getTriggers();
      dBSequence0.isIdentical(dBSchema0);
      SQLUtil.ownerDotComponent(dBSequence0);
      dBSchema0.getTables();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName(stringArray0[0]);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertEquals(3, (int)integer0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4709001279172663
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.normalize("=Kn<E8*+1qAD!60,r", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "= Kn  < E8 * + 1qAD ! 60, r";
      stringArray0[1] = "DZLTE";
      stringArray0[2] = "DZLTE";
      stringArray0[3] = "=Kn<E8*+1qAD!60,r";
      stringArray0[4] = "=Kn<E8*+1qAD!60,r";
      stringArray0[5] = "DZLTE";
      stringArray0[6] = "DZLTE";
      stringArray0[7] = "=Kn<E8*+1qAD!60,r";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DZLTE", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(2799);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.delete(2, 9);
      StringBuilder stringBuilder3 = stringBuilder2.insert(9, (CharSequence) "DZLTE");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("j@,i%3BAc/;+", false);
      assertEquals("j @, i % 3BAc / ; +", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      char[] charArray0 = new char[6];
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[5] = 'j';
      int int0 = 188;
      String string0 = null;
      // Undeclared exception!
      try { 
        DBDataType.getInstance((int) 'j', (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.7371823152157604
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.normalize("=Kn<E8*+1qAD!60,r", true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "=Kn<E8*+1qAD!60,r";
      stringArray0[1] = "= Kn  < E8 * + 1qAD ! 60, r";
      stringArray0[2] = "= Kn  < E8 * + 1qAD ! 60, r";
      stringArray0[3] = "=Kn<E8*+1qAD!60,r";
      stringArray0[4] = "=Kn<E8*+1qAD!60,r";
      stringArray0[5] = "=Kn<E8*+1qAD!60,r";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("= Kn  < E8 * + 1qAD ! 60, r", true, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("qZm,'N)?Bn:u0mVk]U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'qZm,'N)?Bn:u0mVk]U' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SQLUtil.removeComments("epiZSG@A5R,A");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("epiZSG@A5R,A", "epiZSG@A5R,A");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("epiZSG@A5R,A");
      Locale locale0 = Locale.GERMANY;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "deleteupg<oa?p>gs}pm", (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSchema();
      tableContainer0.getTable("D005");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FILTER";
      stringArray0[1] = "D005";
      stringArray0[2] = "D005";
      stringArray0[3] = "D005";
      SQLUtil.join("", "D005", stringArray0, stringArray0[4], "){PvVb=UcE]Fu=", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "null as ){PvVb=UcE]Fu= on D005.FILTER = ){PvVb=UcE]Fu=.FILTER and D005.D005 = ){PvVb=UcE]Fu=.D005 and D005.D005 = ){PvVb=UcE]Fu=.D005 and D005.D005 = ){PvVb=UcE]Fu=.D005 and D005.null = ){PvVb=UcE]Fu=.null and D005.null = ){PvVb=UcE]Fu=.null");
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = ',';
      charArray0[2] = '+';
      charArray0[3] = ',';
      charArray0[4] = 'l';
      charArray0[5] = '^';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[6] = 'H';
      charArray0[7] = 'f';
      charArray0[8] = 'c';
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xec");
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("xec", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setName("Z?eje4}?");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertEquals(3, (int)integer0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "6(+$NJ\\uCJ=\\`VyN";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(",=sN", defaultDBTable0, 113, string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 6(+$NJ\\uCJ=\\`VyN
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("GI;S)^73", true);
      assertEquals("GI ; S) ^ 73", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("select into* 'm4h-;zz;/64*o@by'", false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder("X");
      SQLUtil.addRequiredCondition("X", stringBuilder0);
      Object object0 = new Object();
      BTreeCostController bTreeCostController0 = new BTreeCostController();
      assertTrue(bTreeCostController0.isClosed());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("pele");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ft6+", dBSchema0);
      int int0 = 69;
      DBDataType dBDataType0 = DBDataType.getInstance(69, "(7j{smWMcU");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ft6+", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      char[] charArray0 = new char[6];
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("D/*PO2u|0");
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(9);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("`)<#qAys>K`8;qYR", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-3), 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("drop matrialid view");
      Object object0 = new Object();
      SQLUtil.addOptionalCondition("drop matrialid view", stringBuilder0);
      assertEquals("drop matrialid view or drop matrialid view", stringBuilder0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.isDML("create materialized view@qeav:}wtv");
      Object object0 = new Object();
      SQLUtil.normalize("create materialized view@qeav:}wtv", false);
      String string0 = "--";
      DBCatalog dBCatalog0 = new DBCatalog("create materialized view@qeav:}wtv");
      DBSchema dBSchema0 = new DBSchema("52D", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("52D", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kW]7g/#[r", defaultDBTable0, (DBDataType) null, (Integer) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create materialized view@qeav:}wtv";
      stringArray0[1] = "create materialized view@qeav:}wtv";
      stringArray0[2] = "kW]7g/#[r";
      stringArray0[3] = "create materialized view@qeav:}wtv";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("{ak]~eT($~=4E", false);
      assertEquals("{ ak ] ~ eT ($ ~ = 4E", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.32450838693107065
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("=Kn<E8*+1qAD!60,r", true);
      assertEquals("= Kn  < E8 * + 1qAD ! 60, r", string0);
      
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesStructure("\n");
      assertFalse(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\n");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\n", defaultDBTable0, (DBDataType) null, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("\n", defaultDBTable0, (DBDataType) null, (Integer) null);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("\n", defaultDBTable0, (DBDataType) null, integer1, (Integer) null);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn1.setDoc("\n");
      DBColumn dBColumn0 = defaultDBTable0.getColumn("\n");
      dBColumnArray0[3] = dBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("\n, \n, \n, \n", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%\"9FQ[=Bhr3", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("%\"9FQ[=Bhr3", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("%\"9FQ[=Bhr3", defaultDBTable0, (-4786), "updateAsciiStream(int, InputStream)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";xX[>ET");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Prepare called with current xid", true, "n]Fy$hTp[Fky", "executegetnextrowcore");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setCYursorName");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("j@,i%3BAc/;+", true, defaultDBTable0, "setCYursorName");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK setCYursorName", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select into* 'm4h-;zz;/64*o@by'", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setName("select into* 'm4h-;zz;/64*o@by'");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertEquals(3, (int)integer0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("s{\"H", true);
      assertEquals("s { \"H\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CHAR_OCTET_LENGTH";
      stringArray0[1] = "CHAR_OCTET_LENGTH";
      stringArray0[3] = "SUM ";
      stringArray0[4] = "CHAR_OCTET_LENGTH";
      stringArray0[0] = "SUM ";
      stringArray0[6] = "CHAR_OCTET_LENGTH";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SUM ", false, stringArray0);
      defaultDBTable0.toString();
      dBPrimaryKeyConstraint0.setDoc("CHAR_OCTET_LENGTH");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Object object0 = new Object();
      SQLUtil.addOptionalCondition("drop matrialid view", stringBuilder0);
      assertEquals("drop matrialid view", stringBuilder0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("exec", true);
      assertEquals("exec", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("etMetaDQ5ta()");
      jdbcClob jdbcClob0 = new jdbcClob("etMetaDQ5ta()");
      TableContainer tableContainer0 = new TableContainer("etMetaDQ5ta()");
      tableContainer0.getTable("etMetaDQ5ta()");
      tableContainer0.isIdentical(dBCatalog0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("etMetaDQ5ta()", (DBTable) null, 48, "etMetaDQ5ta()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "CHAR_OCTET_LENGTH";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CHAR_OCTET_LENGTH";
      stringArray0[6] = "CHAR_OCTET_LENGTH";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[3], false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(stringArray0[4], "CHAR_OCTET_LENGTH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CHAR_OCTET_LENGTH
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBDataType.getInstance(90117, "|c_6w[<&v%>vT2_Ex");
      Character character0 = Character.valueOf('U');
      SQLUtil.renderValue(character0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'U'");
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.mutatesDataOrStructure("alter session");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(30L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = SQLUtil.normalize("-- ERROR: unknown operation ", false);
      assertEquals("-- ERROR : unknown operation", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.7071094627648349
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("$J-^%", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%\"9FQ[=Bhr3", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$J-^%", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$J-^%", defaultDBTable0, (-4786), "$ J - ^ %");
      defaultDBColumn0.setTable(defaultDBTable0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5739083469703632
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = SQLUtil.normalize("=Kn<E8*+1qAD!60,r", false);
      assertEquals("= Kn  < E8 * + 1qAD ! 60, r", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "= Kn  < E8 * + 1qAD ! 60, r";
      stringArray0[1] = "= Kn  < E8 * + 1qAD ! 60, r";
      stringArray0[2] = "DZLTE";
      stringArray0[1] = "=Kn<E8*+1qAD!60,r";
      stringArray0[5] = "DZLTE";
      stringArray0[6] = "DZLTE";
      stringArray0[7] = "=Kn<E8*+1qAD!60,r";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DZLTE", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputText rowOutputText0 = new RowOutputText("", "!H;Iug_W'g{M(uwo", "e}!XRJi&'XZ'yt'", false, "=Kn<E8*+1qAD!60,r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      mockPrintWriter0.println(true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "=Kn<E8*+1qAD!60,r");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.removeComments("DZLTE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DZLTE", defaultDBTable0, 622, "DZLTE");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DZLTE DZLTE NULL", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = SQLUtil.normalize("\n/* group sorted */", false);
      assertEquals("/* group sorted */", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DBDataType dBDataType0 = DBDataType.getInstance((-102527625), "");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.removeComments("");
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.removeComments("");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("(0)", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("alter materialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, ")", true, "");
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals(" NOT NULL", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("$J-^%", false);
      assertEquals("$ J - ^ %", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%\"9FQ[=Bhor3", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$J-^%", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1108), "$J-^%");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$J-^%", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("truncatecons1tre(", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("truncatecons1tre(");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("truncatecons1tre( $J-^% NULL", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(14);
      PipedReader pipedReader1 = new PipedReader(14);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader1);
      streamTokenizer0.nval = (double) 14;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("14", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.5735160760972796
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("$J-^%", false);
      assertEquals("$ J - ^ %", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%\"9FQ[=Bhr3", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$J-^%", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$J-^%", defaultDBTable0, (-4786), "$ J - ^ %");
      defaultDBColumn0.setDefaultValue("e");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("$J-^% $ J - ^ % DEFAULT e NULL", string1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=Kn<E8*+1qAD!60,r");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[18];
      stringArray0[1] = "=Kn<E8*+1qAD!60,r";
      stringArray0[3] = "=Kn<E8*+1qAD!60,r";
      stringArray0[5] = "FOREIGN KEY ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=Kn<E8*+1qAD!60,r", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("=Kn<E8*+1qAD!60,r", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      Random.setNextRandom(758);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Random.setNextRandom(34);
      DBDataType dBDataType0 = DBDataType.getInstance(34, "DATE");
      Integer integer0 = new Integer(3);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-4uVVX#pkU{ $", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom((-3));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.32450838693107065
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5yx_nXpLtV )");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Boolean boolean0 = new Boolean("5yx_nXpLtV )");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("executeexec", 34);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.nval = (-278.5143993417097);
      streamTokenizer0.resetSyntax();
      SQLUtil.renderNumber(streamTokenizer0);
      CharBuffer.allocate(39);
      SQLUtil.normalize("- 278.5143993417097", true);
      Random.setNextRandom((-4));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5x_nXpLt )");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2319.596879535625;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("2319.596879535625", string0);
      
      System.setCurrentTimeMillis((-4));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[1] = null;
      stringArray0[2] = "g-*sgQmeuCOGQ";
      stringArray0[4] = "5x_nXpLt )";
      stringArray0[5] = ".xaKkP6S'sW)s";
      stringArray0[6] = ".xaKkP6S'sW)s";
      stringArray0[7] = "2319.596879535625";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ".xaKkP6S'sW)s", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5x_nXpLt )", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(":(9Tp}", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBTable0.addForeignKey(dBForeignKeyConstraint0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, dBTable0, "tR");
      String string1 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      System.setCurrentTimeMillis((-1572L));
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(39);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " lastBufDataBytes: ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " lastBufDataBytes: ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" lastBufDataBytes: ", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(0);
      SQLUtil.typeAndName(defaultDBTable0);
      System.setCurrentTimeMillis(4L);
      Random.setNextRandom(39);
      SQLUtil.normalize("MOD", false);
      Random.setNextRandom(4);
      Random.setNextRandom(32770);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = SQLUtil.removeComments("\n/* group sorted */");
      assertEquals("\n", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = SQLUtil.normalize("$J-^%", false);
      assertEquals("$ J - ^ %", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%\"9FQ[=Bhr3", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$J-^%", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$J-^%", defaultDBTable0, (-4786), "$ J - ^ %");
      defaultDBColumn0.setOwner(defaultDBTable0);
      defaultDBColumn0.setNullable(false);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("$J-^% $ J - ^ % NOT NULL", string1);
  }
}
