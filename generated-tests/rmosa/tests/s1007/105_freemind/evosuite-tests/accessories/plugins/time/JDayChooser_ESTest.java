/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:08:38 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.MenuBar;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.schememode.SchemeMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Menu;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import plugins.collaboration.socket.MindMapMaster;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.decorationBordersVisible = true;
      jDayChooser0.getDayPanel();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getSundayForeground();
      MockDate mockDate0 = new MockDate((-95), 228, 228);
      mockDate0.toInstant();
      // Undeclared exception!
      try { 
        mockDate0.before((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.97193209656322
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 2038, 0L, 38, 38, '+', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(menuKeyEvent0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, '+', 38, 39, 'M');
      MultiListUI multiListUI0 = new MultiListUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setDayBordersVisible(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      Color color0 = Color.gray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Locale locale0 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale0);
      System.setCurrentTimeMillis(38);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.setEnabled(false);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(2038);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOpaque();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getInputMap();
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-2031));
      jDayChooser0.isDecorationBackgroundVisible();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6741970408327744
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 951, (-4021L), 951, 31, 'y', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(31);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAncestorListeners();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.toZonedDateTime();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(29116800000L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setDayBordersVisible(false);
      System.setCurrentTimeMillis(1188L);
      System.setCurrentTimeMillis(5270400000L);
      System.setCurrentTimeMillis(5270400000L);
      jDayChooser0.drawDays();
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        jTabbedPane0.getBackgroundAt(905);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 905, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOpaque();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDaysInMonth();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 0, 0, 0, 0, 'C');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getAncestorListeners();
      Locale locale0 = null;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("day", "9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHeight();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 43, 0, (-2345), 43, 'w');
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(238, color0.getBlue());
      
      Class<Object> class0 = Object.class;
      BasicHelpUI.getIcon(class0, "day");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", (Icon) null);
      jDayChooser0.updateUI();
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MouseListener mouseListener0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "darkslategray";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "!}{~zQI'\"";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(10125);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.608820614830946
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-29));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.770581544706131
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser_DecoratorButton0.getRolloverSelectedIcon();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser_DecoratorButton0.setFocusPainted(true);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.drawDays();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.addKeyListener(jDayChooser1);
      jDayChooser0.createVolatileImage(42, 42);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser_DecoratorButton0.getInheritsPopupMenu();
      jDayChooser_DecoratorButton0.isSelected();
      jDayChooser1.getAccessibleContext();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 42, false);
      jDayChooser1.focusLost(focusEvent0);
      jDayChooser1.setDayBordersVisible(false);
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      Locale locale0 = Locale.TAIWAN;
      System.setCurrentTimeMillis(42);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.855567530018315
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHeight();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 48, 34, 'w');
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 13, 0L, 15, 1017, 'G');
      jDayChooser0.keyPressed(keyEvent1);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8241197465864096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHeight();
      jDayChooser0.firePropertyChange("p", (short) (-4290), (short) (-4290));
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      jDayChooser0.setDebugGraphicsOptions(0);
      jDayChooser0.getMinimumSize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setYear(0);
      jDayChooser0.setFocus();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1151), (-1151), 1554, (-311), 'D');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(140);
      jDayChooser0.drawDays();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setDecorationBackgroundColor(systemColor0);
      jDayChooser2.keyPressed(keyEvent0);
      jDayChooser1.updateUI();
      jDayChooser0.setDay((-2175));
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser2.updateUI();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-61), 28, (-61), 3759, 'S');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        locale0.getDisplayLanguage((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.transferFocus();
      JYearChooser jYearChooser1 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser1.dayChooser;
      jDayChooser0.setWeekOfYearVisible(true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        locale0.getDisplayLanguage((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputMap();
      jDayChooser0.addKeyListener(jDayChooser0);
      jDayChooser0.createVolatileImage(42, 501);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-217), false);
      jDayChooser0.setMonth((-217));
      jDayChooser0.focusGained(focusEvent0);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setDay(10);
      assertEquals(10, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7428539560334118
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHeight();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMonthChooser0, 38, 38, (short) (-4290), 38, '+', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      KeyEvent.getExtendedKeyCodeForChar(38);
      menuKeyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(7, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-869));
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(menuKeyEvent0);
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.732563771232962
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8850, (-344L), 8850, 8850, 'm');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxSelectableDate((Date) null);
      Frame frame0 = null;
      try {
        frame0 = new Frame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setEnabled(true);
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = AbstractButton.HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY;
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6377326264225034
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Color color0 = Color.gray;
      Locale locale0 = Locale.ITALIAN;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getToolkit();
      System.setCurrentTimeMillis((-9223372036854775792L));
      jDayChooser0.drawDays();
      FontInfo fontInfo0 = new FontInfo();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawDays();
      jDayChooser1.setDay(10009);
      assertEquals(31, jDayChooser1.getDay());
      
      jDayChooser0.drawDays();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuSelectionManager.defaultManager();
      MenuSelectionManager.defaultManager();
      jDayChooser0.setDay(36);
      jDayChooser0.setMonth(2179);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 41;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 41, 41, (-2892), 41, '/');
      int int1 = 37;
      keyEvent0.setKeyCode(37);
      keyEvent0.setKeyChar('/');
      jDayChooser0.keyPressed(keyEvent0);
      HsqlProperties hsqlProperties0 = new HsqlProperties("day");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 2038, 0L, 38, 38, '+', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, '+', 38, 39, 'M');
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHeight();
      Color color0 = Color.yellow;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)40;
      floatArray0[1] = (float) 41;
      floatArray0[2] = (float) 41;
      color0.getRGBColorComponents(floatArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (short)40, (-1986L), 0, (short)40, 'O');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuSelectionManager.defaultManager();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, '+', 39, 38, 39, '+');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(16, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, '+', 38, 39, 'M');
      assertEquals(14, jDayChooser0.getDay());
      
      MultiListUI multiListUI0 = new MultiListUI();
      MenuSelectionManager.defaultManager();
      KeyEvent.getKeyModifiersText(2038);
      KeyEvent.getExtendedKeyCodeForChar((-869));
      InputEvent.getModifiersExText((-869));
      jDayChooser0.setDay(2665);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      KeyEvent keyEvent0 = new KeyEvent(jTableHeader0, 36, 36, 2358, 36, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 9758, 2358, 36, 9318, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, (-3023L), 1145, 33, 'L');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = jDayChooser0.selectedDay;
      jButtonArray0[0] = null;
      jButtonArray0[1] = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser0.days = jButtonArray0;
      jDayChooser0.setEnabled(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.drawDays();
      jDayChooser1.drawDays();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHeight();
      jDayChooser0.firePropertyChange("p", (short) (-4290), (short) (-4290));
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp((short) (-4290));
      jDayChooser1.setSelectableDateRange((Date) null, timestamp0);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-230), 2626L, (-230), (-230), 'g', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      KeyEvent.getExtendedKeyCodeForChar(4);
      menuKeyEvent0.getExtendedKeyCode();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-869), 600000L, 1816, 35, 'L');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(8);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(8, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initialized = false;
      byte[] byteArray0 = new byte[5];
      jDayChooser0.getUI();
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)25;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.print(debugGraphics0);
      jDayChooser0.setDayBordersVisible(false);
      int int0 = 184;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      // Undeclared exception!
      try { 
        debugGraphics0.draw3DRect((byte)25, (byte)85, 40, (byte)0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOpaque();
      jDayChooser0.isDayBordersVisible();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.enableInputMethods(true);
      jDayChooser_DecoratorButton0.addMouseListener(defaultCaret0);
      jDayChooser0.isDecorationBordersVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 0, 0, 0, 0, 'C');
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(true);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      System.setCurrentTimeMillis((-9223372036854775792L));
      FontInfo fontInfo0 = new FontInfo();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawDays();
      jDayChooser1.setDay((-762));
      jDayChooser1.drawDays();
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      KeyEvent.getExtendedKeyCodeForChar((-869));
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-869), 9223372036854775807L, 10026, (-869), '6', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setDay(0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(menuKeyEvent0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Color color0 = Color.gray;
      Locale locale0 = Locale.ITALIAN;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setLocale(locale0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setYear(0);
      jDayChooser0.setFocus();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMaxDayCharacters();
      ActionEvent actionEvent0 = new ActionEvent(locale0, 232, "day");
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(0L);
      jDayChooser0.setMinSelectableDate(mockDate0);
      System.setCurrentTimeMillis(9223372036854775807L);
      jDayChooser0.drawDays();
      FontInfo fontInfo0 = new FontInfo();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawDays();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser1.update(pDFDocumentGraphics2D0);
      jDayChooser1.setDay(10009);
      jDayChooser1.drawDays();
  }
}
