/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:07:34 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation");
      assertEquals("wek.cor.technicalinform", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.stem("Fatal error.");
      String string1 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("p{x)h;[q");
      assertEquals("p{x)h;[q", string0);
      
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.stem("Fatal error.");
      String string1 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9241248502933976
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer1.stem("otide");
      assertEquals("ot", string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.898595507248501
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("nesses");
      assertEquals("nes", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("null");
      assertEquals("nl", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8866964318543479
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Fatal error.");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Fatal error.");
      assertEquals("fat error.", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.stem("Fatal error.");
      String string1 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9761415500086328
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(2p78aizer|}yz";
      stringArray0[1] = "is";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("(2p78aizer|}yz");
      assertEquals("(2p78a|}yz", string1);
      
      String string2 = lovinsStemmer1.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string2);
      
      String string3 = lovinsStemmer1.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9749176803182715
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Fk7atal errtor.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("62yd^rr/,mqet");
      assertEquals("62yd^rr/,mqes", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Fk7atal errtor.");
      assertEquals("fk7at errt.", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9906684352060358
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A part of a book having its own title.");
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9476584078190949
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.";
      stringArray0[1] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.";
      stringArray0[2] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.";
      stringArray0[3] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.";
      stringArray0[4] = "yz";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in thecit command and at th begin of th databas entr.", string0);
      
      String string1 = lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in thecit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in thecit command and at th begin of th datab entr.", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("null");
      assertEquals("nl", string0);
      
      String string1 = lovinsStemmer0.stem("end");
      assertEquals("ens", string1);
      
      String string2 = lovinsStemmer0.stem("(i#Z");
      assertEquals("(i#z", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0637780667758143
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("aging");
      String string1 = lovinsStemmer0.stemString("manual");
      assertEquals("manu", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.844703399344479
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("~x=p2ljl{.lxs pex");
      assertEquals("~x=p2ljl{.lxs pic", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.stem("Fatal error.");
      String string2 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0742149743370615
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("njurud");
      String string0 = lovinsStemmer0.stemString("e;ogAr[K}~Ub");
      assertEquals("e;ogar[k}~ub", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.098300554392209
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string0 = lovinsStemmer0.stemString("probtologodds: probability must be in [0,1] pand");
      assertEquals("probtologod: prob must be in [0,1] pans", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string2 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.stemString("ePoMAr[K}~Ub");
      assertEquals("epomar[k}~ub", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("musttex");
      assertEquals("musttic", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Fatal error.");
      String string1 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9660425037953516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lingulud");
      assertEquals("lingulus", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.898595507248501
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("flagond");
      assertEquals("flagons", string1);
      
      String string2 = lovinsStemmer0.stem("null");
      assertEquals("nl", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9213504589806485
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0099873524659075
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vas";
      stringArray0[1] = "vad";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[7] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0230346812124345
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("uad");
      assertEquals("uas", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("manual");
      assertEquals("manu", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9634961879042461
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("uptvm3dex");
      assertEquals("uptvm3dic", string0);
      
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9634961879042461
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("PROCEEDINGS");
      assertEquals("proceed", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("proceed");
      assertEquals("proceed", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1339170330810344
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("nlbex");
      assertEquals("nlbic", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("First option split up:");
      assertEquals("first opt split up:", string2);
      
      String string3 = lovinsStemmer0.stemString("first opt split up:");
      assertEquals("first opt split up:", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9568695775492988
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("8034");
      stringArray0[0] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.";
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.");
      lovinsStemmer0.stem("dY@>=mJH9=''>'Oum");
      lovinsStemmer0.stem("vblyz");
      lovinsStemmer0.stem(" Gs~,_j");
      String string1 = lovinsStemmer0.stemString("vblyz");
      assertEquals("vblys", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1254545505387297
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("nlex");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
      
      String string2 = lovinsStemmer0.stemString("gV`:FF7C");
      assertEquals("gv`:ff7c", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0169245121878099
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stemString("flsensyt");
      stringArray0[0] = "hk8umyz";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("flsend");
      assertEquals("flsens", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9280501512082178
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string1);
      
      lovinsStemmer0.stem("Fatal error.");
      String string2 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1180945544874894
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("81-106");
      lovinsStemmer0.stem("81-106");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("ishix");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("ful");
      assertEquals("fl", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1245214249041275
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from th cur record ar inherit from th field being cros refer.", string0);
      
      String string1 = lovinsStemmer0.stemString("vBUL+");
      assertEquals("vbl+", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString(":8sa*]2Gg");
      assertEquals(":8s*]2g", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0742149743370615
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("series");
      assertEquals("ser", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("e;ogAr[K}~Ub");
      assertEquals("e;ogar[k}~ub", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ancies");
      assertEquals("anci", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0266856854795656
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("erid");
      assertEquals("eris", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ement");
      assertEquals("ement", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.8837550252316446
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("F8i=~p~2TBR~#pm");
      assertEquals("f8=~p~2tbr~#pm", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.stem("iqine");
      assertEquals("iq", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0772359570578434
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Ftal errt.");
      assertEquals("ftal errt.", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9757674911398136
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string0 = lovinsStemmer0.stemString("entrax");
      assertEquals("entrac", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string1 = lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1139795535003996
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "her";
      stringArray0[1] = "5P )";
      stringArray0[2] = "ates";
      stringArray0[3] = " Owl_NPo{d^Xlr";
      stringArray0[4] = "p";
      stringArray0[5] = "`oS";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("=sSlYL)}VI~");
      assertEquals("=sslyl)}vi~", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("8K4O%|3Gg0PP)iP#b");
      assertEquals("8k4%|3gg0p)ip#b", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("azNz7KjxLV$dH?h ");
      lovinsStemmer0.stemString("a}");
      String string1 = lovinsStemmer0.stemString("Z@zS}\u0002A;I^q");
      assertEquals("z@zs}\u0002a;i^q", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9816527780230586
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$V");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("ogaron");
      assertEquals("ogaron", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0683292309445813
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.stemString("/nalid CVS revson - not dts");
      assertEquals("/nalis cv revson - not dt", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("\tUses lowercase strings.");
      assertEquals("\tus lowercas string.", string0);
      
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("ull");
      assertEquals("l", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("7Ixbb;52@9zoLZ");
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("rpt");
      String[] stringArray0 = new String[6];
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("U5&.TC,Tb@T");
      assertEquals("u5&.tc,tb@t", string0);
      
      String string1 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(2p78aizer|}yz";
      stringArray0[1] = "(2p78aizer|}yz";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("(2p78aizer|}yz");
      assertEquals("(2p78a|}yz", string0);
      
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      
      String string2 = lovinsStemmer0.stemString("tupher");
      assertEquals("tupher", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ation");
      assertEquals("ation", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0530822116869787
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("Mcine Learking");
      assertEquals("mcin leark", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string0);
      
      lovinsStemmer0.stemString("ief");
      String string1 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("HNyL=z5C\"7(!;");
      assertEquals("hn=z5c\"7(!;", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("%'74wmmN8pRum-");
      assertEquals("%'74wmmn8pr-", string2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Used for alphabeizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be onfused with the key that appears in the cite command and at the beginning of the database entry.");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("organet");
      assertEquals("organet", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("A link to a PDF file.");
      assertEquals("a link to a pdf fil.", string0);
      
      lovinsStemmer0.stemString("Get flag -f: ");
      lovinsStemmer0.stem("Get flag -f: ");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("get flag -f: ");
      assertEquals("ges flag -f: ", string1);
      
      String string2 = lovinsStemmer0.stemString("5rYl#2F+r");
      assertEquals("5r#2f+r", string2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stemString("volume");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string2 = lovinsStemmer1.stemString("volum");
      assertEquals("vol", string2);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.toString();
      String string3 = lovinsStemmer2.stemString("ORGANIZATION");
      assertEquals("organ", string3);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("The sponsoring institution of a technical report.");
      assertEquals("th sponsor institut of a techn report.", string0);
      
      String string1 = lovinsStemmer0.stemString("th sponsor institut of a techn report.");
      assertEquals("th spons institut of a techn report.", string1);
  }
}
