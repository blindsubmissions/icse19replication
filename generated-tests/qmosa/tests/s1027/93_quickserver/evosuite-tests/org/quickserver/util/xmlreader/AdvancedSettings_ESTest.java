/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:02:38 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "}EW iB)uHH&-qMb";
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("qWJsk@&,fV,4");
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("qWJsk@&,fV,4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qWJsk@&,fV,4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesConnectionTime(814);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize(814);
      advancedSettings0.setPerformancePreferencesConnectionTime(1596);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setByteBufferSize(608);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketSendBufferSize(608);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(814);
      advancedSettings0.toXML("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth(2078);
      advancedSettings0.setBacklog(814);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(608, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite((-1170));
      advancedSettings0.setSocketLinger((-1170));
      advancedSettings0.setBacklog(0);
      advancedSettings0.toXML("");
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesBandwidth((-1170));
      advancedSettings0.setCharset("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setDebugNonBlockingMode(false);
      assertEquals("ISO-8859-1", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite((-4951));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setSocketLinger(3238);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      assertEquals(0, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setCharset((String) null);
      int int0 = 0;
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      String string0 = "%D:Sz]}G[/c+J<Hrb";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("%D:Sz]}G[/c+J<Hrb");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %D:Sz]}G[/c+J<Hrb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-375));
      advancedSettings0.setBacklog((-375));
      advancedSettings0.setPerformancePreferencesLatency(912);
      advancedSettings0.toXML("\t<client-socket-send-buffer-size>");
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals(1, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.214496050675049
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1836));
      advancedSettings0.setSocketLinger((-844));
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.toXML("wa~zwN(");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketSendBufferSize((-844));
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals((-1836), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = (-1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getCharset();
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.319419301952094
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1918);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth(1918);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(1918);
      advancedSettings0.setPerformancePreferencesLatency(1918);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2719));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(1918);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setPerformancePreferencesLatency((-47));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker("`y6;2]oPQHp#z'+k)8d");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog((-47));
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
  }
}
