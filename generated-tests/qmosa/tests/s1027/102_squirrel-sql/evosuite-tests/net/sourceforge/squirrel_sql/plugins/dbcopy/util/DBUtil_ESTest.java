/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:45:47 GMT 2018
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.CallableStatementWrapper;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverProperty;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string0 = "Null 'tasks' argument.";
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "Null 'tasks' argument.", "Null 'tasks' argument.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = " and catalog ";
      DBUtil.setLastStatement(" and catalog ");
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBUtil.setLastStatementValues("OOF^y1i?fJdngY.k8k");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString() , anyInt() , anyInt());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      int int0 = 1003;
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("0L=771)", 1003, 1263);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      DBUtil.typesAreEquivalent(0, (-6));
      IDatabaseObjectInfo iDatabaseObjectInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("E{8:E#9.Fwr5", "bC,W@,$rJElX`Pvk6", "bC,W@,$rJElX`Pvk6", "", 3, "E{8:E#9.Fwr5", 3, 1231, 3, 50, "", "scyvq hX9z75fr@s", 1077, 3338, "");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBUtil.getLastStatement();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType(2273, tableColumnInfo0, (ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "3?", "bC,W@,$rJElX`Pvk6", " ALTER COLUMN ", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBUtil.getLastStatement();
      DBUtil dBUtil0 = new DBUtil();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      schemaInfo0.getSQLDatabaseMetaData();
      TableInfo tableInfo0 = null;
      try {
        tableInfo0 = new TableInfo(" for that time period. Duplicates are not ", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "/;1j-%k+u.Q[J;nv=", (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBUtil.getLastStatementValues();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, (String) null, "`@9r=F:?)}<Lw", "Nfk%aytI5_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "";
      String string1 = "";
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      String string2 = "i7cI>";
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = " from ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " from ");
      int int0 = (-6);
      DBUtil.typesAreEquivalent((-6), (-6));
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        dBCopyPlugin0.getGlobalPreferencePanels();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.gui.PreferencesPanel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "", "");
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "kP";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("E{8:E#9.Fwr5", "bC,W@,$rJElX`Pvk6", "bC,W@,$rJElX`Pvk6", "kP", 7, "E{8:E#9.Fwr5", 7, 1231, 7, 50, "kP", "scyvq hX9z75fr@s", 1077, 3338, "kP");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBUtil.getLastStatement();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType(2273, tableColumnInfo0, (ISession) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ITableInfo iTableInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin1, "3?", (ITableInfo) null, 360);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "=+FBKo :KNfv{|`";
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, ". Using 'max'", "=+FBKo :KNfv{|`");
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 2004);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.setSourceSession((ISession) null);
      dBCopyPlugin1.getDestSession();
      DBUtil.fixCase((ISession) null, "");
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBCopyPreferenceBean dBCopyPreferenceBean1 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean1.setWriteScript(true);
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "7;c", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = " TOP ? ";
      String string1 = "DBUtil.er!or.nocolumns";
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".BS");
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.typesAreEquivalent(2131, 400);
      String string0 = "Ignoring attempt to add an existent listener.";
      String string1 = "PreferencesPanel.copyBufferSizeToolTip";
      String string2 = "gTM~h)~n";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(",", ",", "Ignoring attempt to add an existent listener.", "PreferencesPanel.copyBufferSizeToolTip", 151, "gTM~h)~n", 16, (-817), (-817), 16, "gTM~h)~n", "'", 16, 16, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      // Undeclared exception!
      try { 
        dBCopyPlugin0.load((IApplication) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null IApplication passed
         //
         verifyException("net.sourceforge.squirrel_sql.client.plugin.DefaultPlugin", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "", 64, "", 64, 64, 64, 0, "", "", 64, 1157, (String) null);
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "(", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-1737));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("E{8:E#9.Fwr5", "bC,W@,$rJElX`Pvk6", "bC,W@,$rJElX`Pvk6", "E{8:E#9.Fwr5", 7, "E{8:E#9.Fwr5", 7, 1231, 7, 50, "E{8:E#9.Fwr5", "scyv0 hX9T75fr@s", 1077, 3338, "E{8:E#9.Fwr5");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DBUtil.getLastStatement();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType(2273, tableColumnInfo0, (ISession) null);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[3];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) tableColumnInfo0;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) tableColumnInfo0;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) tableColumnInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9433483923290393
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBUtil.typesAreEquivalent((-7), (-3));
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "4@pXuJR2t>G^3sgY", "", "bC,W@,$rJElX`Pvk6", 7, "kP", 12, (-1), (-760), 2254, "", "c'/{seKy", (-2493), (-430), "E{8:E#9.Fwr5");
      DBUtil.isBinaryType(tableColumnInfo0);
      dBCopyPlugin0.getSourceSession();
      String string0 = "i=IeS3G\\H";
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "i=IeS3GH", "Unexpected exception while attempting to determine if a table (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      DBUtil dBUtil0 = new DBUtil();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.clone();
      DBUtil.convertTableToObjectList(arrayList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "y/0(KBGFXxU", "", "", 1563, " bxH89|&", (byte) (-4), (byte) (-4), 977, (byte) (-2), "?)!", "+<Oc>;p#<J 7f00", (byte)16, 977, "");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("E{8:E#9.Fwr5", "bC,W@,$rJElX`Pvk6", "bC,W@,$rJElX`Pvk6", "kP", 7, "E{8:E#9.Fwr5", 7, 1238, 7, 50, "kP", "scyvq hX9z75fr@s", 1063, 3338, "kP");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBUtil.getLastStatement();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginJarFilePath();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType(2100, tableColumnInfo0, (ISession) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      DBUtil.typesAreEquivalent(26, 2100);
      DBUtil.typesAreEquivalent(1, 1558);
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, (String) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)39;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.setSourceSession((ISession) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("{rBw+XeOJU|##", "blob", "{rBw+XeOJU|##", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 2, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 212, 300, 2, 300, "{rBw+XeOJU|##", "ALTER TABLE ", (-1043), 300, "ALTER TABLE ");
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertEquals("blob", string0);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBUtil.typesAreEquivalent((-7), (-3));
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDatabaseDriversFile();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("iD+URs)uh\r=O<k5S /", "W", (String) null, " bxH89|&", (-7), "Couldn't find an exact match for destination table ", (-3), (-2070), 1856, 458, " bxH89|&", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-3), (-3207), "Use default metal theme");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[8];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.setDestSession((ISession) null);
      tableColumnInfoArray0[6] = tableColumnInfo0;
      tableColumnInfoArray0[7] = tableColumnInfo0;
      DBUtil.getColumnList(tableColumnInfoArray0);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "0(?r@b5fl'q8{IeLt.", "0(?r@b5fl'q8{IeLt.", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = null;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, 0, (String) null, 0, 0, 0, 0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 0, 0, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType((String) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      dBCopyPlugin0.getSourceSession();
      DBUtil.fixCase((ISession) null, (String) null);
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      // Undeclared exception!
      try { 
        dBCopyPlugin0.getGlobalPreferencePanels();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.gui.PreferencesPanel", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[8];
      DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString() , anyInt() , anyInt());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("Unquoted count of quotes is invalid", (-899), (-899));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "K+&k9HXaSUzeK\"uGT", "i=I2S3Gk");
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "i=I2S3Gk");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" z", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "i=I2S3Gk", "An d#q}||\"~V", (byte) (-108), " z", (-2693), (byte) (-108), (byte) (-108), 3229, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "?", 2958465, 4000, "i=I2S3Gk");
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql((SessionInfoProvider) null, tableColumnInfo0, "i=IeS3GH", "In]J7qZ4*C8[n-z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("s", "%5x%@Nq8jnCm['peq", (String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-4), " NOT NULL", 92, 544, 788, (-1049), "Null 'serialDate' argument.", "s", 3338, 3632, "u_`^");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.VIEW;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginJarFilePath();
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType((-3), tableColumnInfo0, (ISession) null);
      assertEquals((-3), int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      DBUtil.typesAreEquivalent(2135, (-4));
      boolean boolean1 = DBUtil.typesAreEquivalent(1478, 788);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      stack0.clone();
      stack0.add((ITableInfo) null);
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList(stack0);
      DBUtil.convertObjectToTableList(list0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      String string0 = "sA{#bbL^A\"k{Xt";
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "{rBw+XeOJU|##";
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin0.setSourceSession((ISession) null);
      String string1 = ":oJ";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", ">VTmoZn", ":oJ", "*O_", 1111, "org.apache.log4j.ProvisionNode", (byte)39, (byte) (-58), (byte)39, (byte)39, ">VTmoZn", "{rBw+XeOJU|##", (byte) (-58), 16, ">VTmoZn");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DBUtil.isBinaryType(tableColumnInfo0);
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("~tHZUq2*[W,sg0lKu", "i=I2S3Gk", "s", " NOT NULL", 3292, ">Ys", 7, (-6), (-2788), (-2788), "Js@dU3bOcsO:5L$bcM", "/a`&)A79ad:ke)Z", 2, (-341), "G\"");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginJarFilePath();
      dBCopyPlugin0.getDestSession();
      Integer integer0 = new Integer(8300);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 436);
      boolean boolean1 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6869615765973234
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Yv,_T'M", "\"^/Ib+!}i' ", "org.jfree.data.xy.DefaultIntervalXYDataset", "s", 2000, "Js@dU3bOcsO:5L$bcM", 125, 2000, 23514, (-564), "$i3v~hLq5&v", "net.sourceoresquirrl_sql.plugins.dbcopy.dbcopy", 2000, 3338, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginJarFilePath();
      dBCopyPlugin0.getDestSession();
      Integer integer0 = new Integer(125);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      boolean boolean1 = DBUtil.typesAreEquivalent(125, 2958465);
      assertFalse(boolean1);
      
      boolean boolean2 = DBUtil.typesAreEquivalent(16, (-2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      boolean boolean1 = DBUtil.typesAreEquivalent((-2), (-190));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("TRUNCATE TABLE ", "TRUNCATE TABLE ", " )", " )", (-2), (String) null, 4267, (-2), (-615), 2, (String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 22, (-2556), "yX{X-tnVO ;;M|Kl6");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getPluginJarFilePath();
      dBCopyPlugin0.getDestSession();
      Integer integer0 = new Integer((-2475));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      boolean boolean0 = DBUtil.typesAreEquivalent(22, (-6));
      boolean boolean1 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getPluginJarFilePath();
      DBUtil.getLastStatement();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getPluginJarFilePath();
      dBCopyPlugin0.getDestSession();
      Integer integer0 = new Integer((-3));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      boolean boolean0 = DBUtil.typesAreEquivalent(8300, (-3));
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "LU@}?q7C8@FF]6iX'a?", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "/home/ubuntu/evosuite_readability_gen/projects/102_squirrel-sql/plugins/dbcopy.jar", (-3), "-DmigratePreferences was specified, but file ", 1000, (-3), 64, (-3), " that matched ", "JmN(|P0", 64, 8300, "/home/ubuntu/evosuite_readability_gen/projects/102_squirrel-sql/plugins/dbcopy.jar");
      boolean boolean1 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3292, 2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      boolean boolean1 = DBUtil.typesAreEquivalent(2, 3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(") REFERENCES ", ") REFERENCES ", "", "sF1P:U37['JJi", 547, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1, 547, 547, 547, "", ") REFERENCES ", 1, 1, "Encountered unexpected exception while attempting to determine if schemas are used in table definitions");
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "Encountered unexpected exception while attempting to determine if schemas are used in table definitions", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBUtil.typesAreEquivalent((-7), 15);
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL((SessionInfoProvider) null, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.unload();
      dBCopyPlugin1.getPluginJarFilePath();
      dBCopyPlugin1.getDestSession();
      Integer integer0 = new Integer((-7));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      boolean boolean0 = DBUtil.typesAreEquivalent(2958465, 2958465);
      boolean boolean1 = DBUtil.typesAreEquivalent((-7), 16);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }
}
