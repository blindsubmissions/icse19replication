/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:57:10 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 0;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement((-148));
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(0, 0, 1.0000000002328306);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0000000002328306;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.getRevision();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      int int0 = 0;
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(509);
      optimization_DynamicIntArray0.addElement(3214);
      optimization_DynamicIntArray0.size();
      int int1 = 0;
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.size();
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(3214, 0, 1385.1904597);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        weka.core.matrix.Matrix.identity(10, (-164));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.matrix.Matrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.getRevision();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 0);
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray1, (-2760), 486);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      double[] doubleArray2 = Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray0);
      assertEquals(0, doubleArray2.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1132.6199359017198;
      doubleArray1[1] = 1.0000000000000036;
      doubleArray1[2] = 1724.6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1724.6;
      doubleArray3[1] = 1132.6199359017198;
      doubleArray3[2] = 1.0000000000000036;
      doubleArray3[3] = 1132.6199359017198;
      doubleArray3[4] = 1.0000000000000036;
      doubleArray3[5] = 1132.6199359017198;
      doubleArray3[6] = 1132.6199359017198;
      doubleArray3[7] = 1724.6;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1724.6;
      doubleArray4[1] = 3240.17192;
      doubleArray4[2] = 1.0000000000000036;
      doubleArray4[3] = 1132.6199359017198;
      doubleArray4[4] = 1724.6;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 1724.6;
      doubleArray5[1] = 3240.17192;
      doubleArray5[2] = 3240.17192;
      doubleArray5[3] = 1724.6;
      doubleArray5[4] = 1132.6199359017198;
      doubleArray5[5] = 1132.6199359017198;
      doubleArray5[6] = 1.0000000000000036;
      doubleArray5[7] = 1.0000000000000036;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 1.0000000000000036;
      doubleArray6[1] = (-931.0917804026035);
      doubleArray6[2] = 1724.6;
      doubleArray6[3] = 1724.6;
      doubleArray6[4] = 3240.17192;
      doubleArray6[5] = 1724.6;
      doubleArray6[6] = 1724.6;
      doubleArray6[7] = 3240.17192;
      doubleArray6[8] = 1132.6199359017198;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 25, 25);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray6, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1132.6199359017198;
      doubleArray1[1] = 1.0000000000000036;
      doubleArray1[2] = 1724.6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1724.6;
      doubleArray3[1] = 1132.6199359017198;
      doubleArray3[2] = 1.0000000000000036;
      doubleArray3[3] = 1132.6199359017198;
      doubleArray3[4] = 1.0000000000000036;
      doubleArray3[5] = 1132.6199359017198;
      doubleArray3[6] = 1132.6199359017198;
      doubleArray3[7] = 1724.6;
      doubleArray0[2] = doubleArray3;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1601, 1601);
      Optimization.solveTriangle(matrix0, doubleArray1, true, (boolean[]) null);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1601);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(1);
      optimization_DynamicIntArray0.getRevision();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(1601);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1284, 0, 0.9);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1284;
      doubleArray0[1] = (-93.181014425374);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.9;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 0.9;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[3];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 200, 1827);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1132.6199359017198;
      doubleArray1[1] = 1.0000000000000036;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 25, (-1209));
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray0, 7, 25);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 25;
      doubleArray2[1] = 1.0000000000000036;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 7;
      doubleArray2[4] = 1.0000000000000036;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      double[] doubleArray3 = Optimization.solveTriangle(matrix1, doubleArray2, false, booleanArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.POSITIVE_INFINITY}, doubleArray3, 0.01);
  }
}
