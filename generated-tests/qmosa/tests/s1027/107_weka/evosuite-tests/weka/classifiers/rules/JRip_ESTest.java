/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:46:22 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      AbstractClassifier.makeCopies(jRip0, 80);
      jRip0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8118";
      stringArray0[1] = "8118";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      jRip0.listOptions();
      jRip_NumericAntd0.getMaxInfoGain();
      jRip_NumericAntd0.getSplitPoint();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("9[g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9[g not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 0.0;
      double double0 = jRip0.getMinNo();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, double0, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setSeed(1458L);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      jRip0.getRevision();
      try { 
        jRip0.classifyInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      jRip0.getCapabilities();
      jRip0.toString();
      long long0 = 120L;
      jRip0.setSeed(120L);
      jRip0.optimizationsTipText();
      jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-1106));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      AbstractClassifier.makeCopy(multilayerPerceptron0);
      jRip0.setMinNo((-2.0));
      jRip0.getSeed();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      JRip jRip1 = null;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 196;
      intArray0[3] = 10;
      intArray0[4] = (-597);
      intArray0[5] = (-1701);
      intArray0[6] = 3460;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(301.055, intArray0, 70);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(1277);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      jRip0.getRevision();
      jRip0.usePruningTipText();
      jRip0.optimizationsTipText();
      jRip0.enumerateMeasures();
      JRip jRip1 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("jcyW2!Rd/}", arrayList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3294.324523), doubleArray0);
      try { 
        inputMappedClassifier0.constructMappedInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "measureMaxCoordsPerPoint";
      stringArray0[1] = "Large margin classification using the perceptron algorithm";
      stringArray0[2] = "";
      stringArray0[3] = "CVz%\"(#rEIy-1ej";
      stringArray0[4] = "Stanford University";
      jRip0.setDebug(true);
      stringArray0[5] = "";
      stringArray0[6] = "";
      Utils.SMALL = 1722.860452158;
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.checkErrorRateTipText();
      Attribute attribute0 = new Attribute(">t'Jz,", "", 0);
      attribute0.indexOfValue((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(0L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = " instances";
      stringArray0[2] = "";
      stringArray0[3] = "    attValues = new FastVector();\n";
      stringArray0[4] = "Whether pruning is performed.";
      stringArray0[5] = "\tSet number of folds for REP\n\tOne fold is used as pruning set.\n\t(default 3)";
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      AbstractClassifier.makeCopy(jRip0);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getConsequent();
      jRip0.setMinNo((-1.0));
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      jRip0.minNoTipText();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.debugTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      jRip0.setMinNo((-1310.1942));
      jRip0.optimizationsTipText();
      jRip0.getCapabilities();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("03bvd=Ldx[2", list0, 83);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.getSeed();
      jRip0.setCheckErrorRate(true);
      assertEquals((-1310.1942), jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setFolds(1841);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1841;
      doubleArray0[1] = (double) 1841;
      doubleArray0[2] = (double) 1841;
      DenseInstance denseInstance0 = new DenseInstance(1841, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      denseInstance0.toStringMaxDecimalDigits(121);
      // Undeclared exception!
      try { 
        sparseInstance0.equalHeaders(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_\"S+&%dF8O,}Ne>^=";
      stringArray0[1] = "QU)'o4pmMgp'e";
      stringArray0[2] = "3\u0001a";
      stringArray0[3] = "weka.classifiers.rules.JRip$NumericAntd";
      stringArray0[4] = "] == null)\n";
      stringArray0[5] = " not supported (RIPPER)";
      stringArray0[6] = " | ";
      stringArray0[7] = "Test of '";
      stringArray0[8] = "pzbc";
      jRip0.setOptions(stringArray0);
      jRip0.setDebug(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.setConsequent(0.0);
      long long0 = jRip0.getSeed();
      assertTrue(jRip0.getDebug());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 0;
      jRip0.setDebug(false);
      jRip0.setOptimizations(0);
      jRip0.getCheckErrorRate();
      jRip0.debugTipText();
      Attribute attribute0 = null;
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      jRip0.setCheckErrorRate(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      attribute0.copy();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      attribute0.setStringValue((String) null);
      jRip_NumericAntd0.copy();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(3, 0, intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      boolean boolean0 = true;
      jRip1.setUsePruning(true);
      jRip1.getOptions();
      jRip0.getCapabilities();
      jRip0.toString();
      jRip1.setSeed(120L);
      jRip1.optimizationsTipText();
      jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-1106));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      stringArray0[3] = "NC";
      stringArray0[4] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("F&[");
      Instances instances0 = new Instances("-", arrayList0, 0);
      Instances instances1 = new Instances(instances0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      jRip_NominalAntd0.splitData(instances1, (-4.57826535), 1.0);
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.prune(instances0, false);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 0);
      jRip_NominalAntd0.maxInfoGain = (double) 1;
      Instances instances1 = new Instances(instances0, 2);
      jRip0.setOptions(stringArray0);
      jRip0.getDebug();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Instances instances2 = null;
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 0);
      jRip_NominalAntd0.maxInfoGain = (double) 1;
      Instances instances1 = new Instances(instances0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      jRip0.getOptimizations();
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute("@relation", "+f.TgL", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Object object0 = jRip_RipperRule0.copy();
      properties0.replace((Object) arrayList0, object0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("d#ZiG2.h", arrayList0, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.add("date");
      jRip_NominalAntd0.copy();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getAttrValue();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.getCapabilities();
      jRip0.toString();
      jRip0.toString();
      JRip jRip1 = new JRip();
      jRip1.setOptions(stringArray0);
      jRip1.setDebug(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip1.checkErrorRateTipText();
      jRip0.minNoTipText();
      DenseInstance denseInstance0 = new DenseInstance(8);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertTrue(boolean0);
      
      boolean boolean1 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", arrayList0, 11);
      Attribute attribute1 = attribute0.copy("JRIP: No model built yet.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (-3362.686799879728);
      SparseInstance sparseInstance0 = new SparseInstance(254.25744687696576, doubleArray0);
      jRip_NumericAntd0.covers(sparseInstance0);
      boolean boolean2 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean2 == boolean1);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      stringArray0[3] = "NC";
      stringArray0[4] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("F&[");
      Instances instances0 = new Instances("-", arrayList0, 0);
      Instances instances1 = new Instances(instances0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance1);
      assertFalse(boolean0);
      
      jRip_NominalAntd0.splitData(instances1, (-4.57826535), 1.0);
      double double0 = jRip_NominalAntd0.maxInfoGain;
      assertEquals(0.0, double0, 0.01);
      
      double double1 = jRip_NominalAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Object object0 = jRip_RipperRule0.copy();
      properties0.replace((Object) arrayList0, object0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("d#ZiG2.h", arrayList0, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.add("date");
      jRip_NominalAntd0.copy();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getAttrValue();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.196755797914435
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NC";
      naiveBayes0.setUseKernelEstimator(false);
      stringArray0[1] = "";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("dm$8)fLIkMPT&ecu");
      Instances instances0 = new Instances("", arrayList0, 4);
      Instances instances1 = new Instances(instances0, 10001);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(4, doubleArray0);
      binarySparseInstance0.dataset();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 777.114, 121);
      jRip_NominalAntd0.getAccuRate();
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = 0.0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "?h]e`<2TI&]%!_7*}";
      jRip0.setOptions(stringArray0);
      Utils.SMALL = 0.0;
      jRip0.seedTipText();
      jRip0.toString();
      JRip jRip1 = new JRip();
      jRip1.getRevision();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip1.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Utils.SMALL = 1567.43;
      jRip0.globalInfo();
      jRip_RipperRule0.hasAntds();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1567.43;
      doubleArray0[1] = 1960.75843818;
      doubleArray0[2] = 1567.43;
      doubleArray0[3] = 1567.43;
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 1709;
      intArray0[4] = 80;
      intArray0[5] = 3174;
      intArray0[6] = 79;
      SparseInstance sparseInstance0 = new SparseInstance(1567.43, doubleArray0, intArray0, 3);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      boolean boolean1 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("E4G,aj'4:O^BmR $");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      String string1 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("8118", string1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip jRip1 = new JRip();
      try { 
        jRip0.rulesetForOneClass(0.0, (Instances) null, 0.0, (-4405.467743217));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = 1.0;
      jRip0.setMinNo(1.0);
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-2003L));
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.equals((Object) null);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Sorted classes:", (List<String>) null, protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("acc", arrayList0, 106);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      protectedProperties1.values();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(sparseInstance0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd2 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd1.splitData(instances0, 121, 3);
      Attribute attribute1 = new Attribute("date", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd3 = jRip1.new NominalAntd(attribute1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot((int[]) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      jRip0.setDebug(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      jRip0.getOptions();
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(":GhN\fwLrr", linkedList0, protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(":GhN\fwLrr", arrayList0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(4);
      Attribute attribute1 = new Attribute(".arff", linkedList0, 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      SparseInstance sparseInstance0 = new SparseInstance(98);
      jRip_NumericAntd0.covers(sparseInstance0);
      binarySparseInstance0.dataset();
      try { 
        Filter.useFilter((Instances) null, (Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = (double) (-1464);
      jRip_RipperRule0.setConsequent((-1464.0));
      doubleArray0[1] = (double) (-2605);
      doubleArray0[2] = (double) (-2605);
      doubleArray0[3] = (double) (-2605);
      doubleArray0[4] = (double) (-1464);
      doubleArray0[5] = (double) (-2605);
      doubleArray0[6] = (double) (-1464);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1930);
      intArray0[1] = (-2605);
      intArray0[2] = (-2605);
      intArray0[3] = (-1464);
      intArray0[4] = (-2605);
      intArray0[5] = (-1464);
      intArray0[6] = (-1464);
      intArray0[7] = (-1464);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }
}
