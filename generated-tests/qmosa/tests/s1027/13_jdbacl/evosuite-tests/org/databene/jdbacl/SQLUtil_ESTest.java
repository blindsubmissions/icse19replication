/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:23:58 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.raw.data.BaseDataFileFactoryJ4;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBCachedBlob;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("R6as!4*K");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R6as!4*K";
      stringArray0[1] = ",mL;8=)";
      stringArray0[2] = null;
      stringArray0[3] = "R6as!4*K";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("R6as!4*K", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT R6as!4*K FOREIGN KEY (R6as!4*K, ,mL;8=), , R6as!4*K) REFERENCES null(R6as!4*K, ,mL;8=), , R6as!4*K)", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      SQLUtil.isDML("");
      String string1 = "SELECT RDB$TRANSACTION_ID, RDB$TRANSACTION_DESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1";
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin("SELECT RDB$TRANSACTION_ID, RDB$TRANSACTION_DESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1", stringArray0, "SELECT RDB$TRANSACTION_ID, RDB$TRANSACTION_DESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1", "", stringArray0);
      DBObject dBObject0 = null;
      SQLUtil.typeAndName((DBObject) null);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "SELECT RDB$TRANSACTION_ID, RDB$TRANSACTION_DESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1", true, "SELECT RDB$TRANSACTION_ID, RDB$TRANSACTION_DESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1 as  on ");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.normalize("dE~]", false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "dE~]";
      stringArray0[1] = "dE~]";
      stringArray0[2] = "dE~]";
      stringArray0[3] = "dE~]";
      stringArray0[4] = "bHK38p0[l";
      stringArray0[5] = "dE~]";
      stringArray0[6] = "d  E ~ ]";
      SQLUtil.join(".h2.db", "dE~]", stringArray0, "-;k", "dE~]", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("R?WbD+?u|UloH'");
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("", stringArray0, "", "R?WbD+?u|UloH'", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Unable to create SAXResult for SQLXML.");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Unable to create SAXResult for SQLXML.", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("left join  as R?WbD+?u|UloH' on ", defaultDBTable0, (DBDataType) null, integer0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      int int0 = (-449);
      String string0 = "org.firebirdsql.jdbc.AbstractCallableStatement";
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("PRIMARY KEY ", defaultDBTable0, (-449), "org.firebirdsql.jdbc.AbstractCallableStatement");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("SELECT * FROM Unable to create SAXResult for SQLXML. WHERE ", defaultDBTable0, (DBDataType) null, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("R?WbD+?u|UloH'", defaultDBTable0, (-449), "Unable to create SAXResult for SQLXML.");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'Unable to create SAXResult for SQLXML.'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SQLUtil.leftJoin("", stringArray0, "", "~AE!%Kx3A", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      StringBuilder stringBuilder2 = stringBuilder1.append('8');
      StringBuilder stringBuilder3 = stringBuilder2.append((-2123.419603351821));
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = '8';
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, charArray0);
      SQLUtil.addOptionalCondition("", stringBuilder4);
      assertEquals("88888888null8-2123.419603351821 or ", stringBuilder3.toString());
      assertEquals("88888888null8-2123.419603351821 or ", stringBuilder4.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ";=a=c*yxbr$";
      SQLUtil.normalize(";=a=c*yxbr$", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("; = a = c * yxbr $", (DBSchema) null);
      String string1 = "S";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'S' not found in table '; = a = c * yxbr $'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4zKZ'U0B";
      stringArray0[1] = "}4zKZ'U0B";
      stringArray0[2] = "}4zKZ'U0B";
      SQLUtil.renderColumnListWithTableName("}4zKZ'U0B", stringArray0);
      SQLUtil.join("", "}4zKZ'U0B", stringArray0, "}4zKZ'U0B", "}4zKZ'U0B", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.leftJoin("Z(wX+jQ2/G", stringArray0, "}4zKZ'U0B", (String) null, stringArray0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d=Ldx[2g?)+0*jF{Cs", defaultDBTable0, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("-`", compositeDBObject0);
      tableContainer0.getTable("-`");
      DBDataType dBDataType0 = DBDataType.getInstance((-695), "-`");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("80220011-010c-bc85-060d-000000109ab8", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = new Integer(2799);
      Integer integer1 = Integer.valueOf(2799);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("80220011-010c-bc85-060d-000000109ab8", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("org.h2.command.dml.ScriptCommand$3", (DBTable) null, (-695), "org.h2.command.dml.ScriptCommand$3");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("", (DBTable) null, 309, "");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("JSp jZ:", (DBTable) null, dBDataType0);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("80220011-010c-bc85-060d-000000109ab8, 80220011-010c-bc85-060d-000000109ab8, org.h2.command.dml.ScriptCommand$3, , JSp jZ:", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TABLETYPES", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TABLETYPES", defaultDBTable0, 1865, "TABLETYPES");
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("column TABLETYPES", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.substituteMarkers("|BH2DETG,a=;EFg*\"", "|BH2DETG,a=;EFg*\"", (Object) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|BH2DETG,a=;EFg*\"";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = "null";
      stringArray0[5] = "|BH2DETG,a=;EFg*\"";
      stringArray0[6] = "null";
      stringArray0[7] = "|BH2DETG,a=;EFg*\"";
      stringArray0[8] = "null";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      boolean boolean0 = false;
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yY>g:6?jb(r!", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-1743));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8XQ-+p4X";
      stringArray0[1] = "8XQ-+p4X";
      String string0 = SQLUtil.innerJoin("8XQ-+p4X", stringArray0, "uIu1:KI,9~z7", "uIu1:KI,9~z7", stringArray0);
      assertEquals("uIu1:KI,9~z7 as uIu1:KI,9~z7 on 8XQ-+p4X.8XQ-+p4X = uIu1:KI,9~z7.8XQ-+p4X and 8XQ-+p4X.8XQ-+p4X = uIu1:KI,9~z7.8XQ-+p4X", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("5|Z3?2qK?jN1");
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(db=", dBSchema0);
      DBSequence dBSequence0 = new DBSequence("uIu1:KI,9~z7 as uIu1:KI,9~z7 on 8XQ-+p4X.8XQ-+p4X = uIu1:KI,9~z7.8XQ-+p4X and 8XQ-+p4X.8XQ-+p4X = uIu1:KI,9~z7.8XQ-+p4X", "SJIS", "");
      dBSchema0.addSequence(dBSequence0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "uIu1:KI,9~z7", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT uIu1:KI,9~z7 PRIMARY KEY (8XQ-+p4X, 8XQ-+p4X)", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.isDDL("R6as!4*K");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R6as!4*K";
      String string0 = ",mL;8=)";
      stringArray0[1] = ",mL;8=)";
      stringArray0[2] = null;
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.parseColumnTypeAndSize("rename");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "8XQ-+p4X";
      SQLUtil.innerJoin("8XQ-+p4X", stringArray0, "uIu1:KI,9~z7", "uIu1:KI,9~z7", stringArray0);
      DBSequence dBSequence0 = new DBSequence("uIu1:KI,9~z7 as uIu1:KI,9~z7 on 8XQ-+p4X.null = uIu1:KI,9~z7.null and 8XQ-+p4X.8XQ-+p4X = uIu1:KI,9~z7.8XQ-+p4X", "SJIS", "");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0751393240053735
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.isDDL("R6as!4*K");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R6as!4*K";
      stringArray0[1] = ",mL;8=)";
      stringArray0[2] = null;
      SQLUtil.parseColumnTypeAndSize("rename");
      SQLUtil.normalize(",mL;8=)", false);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("@<Se%`06LDO<Sc");
      assertNull(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2326944771870663
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("}4zKZ'U0B");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}4zKZ'U0B";
      stringArray0[1] = "uIu1:KI,9~z7";
      stringArray0[2] = "uIu1:KI,9~z7";
      stringArray0[3] = "uIu1:KI,9~z7";
      stringArray0[4] = "}4zKZ'U0B";
      String string0 = SQLUtil.innerJoin("uIu1:KI,9~z7", stringArray0, "Zs`:;?t4:`", "}4zKZ'U0B", stringArray0);
      assertEquals("Zs`:;?t4:` as }4zKZ'U0B on uIu1:KI,9~z7.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B and uIu1:KI,9~z7.uIu1:KI,9~z7 = }4zKZ'U0B.uIu1:KI,9~z7 and uIu1:KI,9~z7.uIu1:KI,9~z7 = }4zKZ'U0B.uIu1:KI,9~z7 and uIu1:KI,9~z7.uIu1:KI,9~z7 = }4zKZ'U0B.uIu1:KI,9~z7 and uIu1:KI,9~z7.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("CWc&>_Ef+Vk/}[{X\"xU");
      DBSchema dBSchema0 = new DBSchema("}4zKZ'U0B", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}4zKZ'U0B", dBSchema0);
      DBSequence dBSequence0 = new DBSequence("call", "Zs`:;?t4:` as }4zKZ'U0B on uIu1:KI,9~z7.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B and uIu1:KI,9~z7.uIu1:KI,9~z7 = }4zKZ'U0B.uIu1:KI,9~z7 and uIu1:KI,9~z7.uIu1:KI,9~z7 = }4zKZ'U0B.uIu1:KI,9~z7 and uIu1:KI,9~z7.uIu1:KI,9~z7 = }4zKZ'U0B.uIu1:KI,9~z7 and uIu1:KI,9~z7.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B", "y");
      dBSchema0.addSequence(dBSequence0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "}4zKZ'U0B";
      stringArray1[1] = "SJIS";
      stringArray1[2] = null;
      stringArray1[3] = "uIu1:KI,9~z7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Whg+", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (}4zKZ'U0B, SJIS, , uIu1:KI,9~z7)", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("$#,", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec}4zkz'u0b", dBSchema0);
      String string0 = "vQH!!\"W M}w[ftMn<{";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vQH!!\"W M}w[ftMn<{", defaultDBTable0, (-3188), "r3/vgS");
      SQLUtil.mutatesDataOrStructure("drop table");
      String string1 = "mkzEt$HH1s~4k==(TP";
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2045373092));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.243618513741878
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("}4zKZ'U0B");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop table", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TABLETYPES", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}4zKZ'U0B", defaultDBTable0, 32, "drop table");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}4zKZ'U0B";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("v6I-:xW&R>", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (}4zKZ'U0B) REFERENCES TABLETYPES(}4zKZ'U0B)", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "A1JZNXhs\"Bc";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.normalize("A1JZNXhs\"Bc", true);
      SQLUtil.removeComments("A1JZNXhs\"Bc");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1700483464601645
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("}4zKZ'U0B");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop table", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TABLETYPES", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}4zKZ'U0B", defaultDBTable0, 32, "drop table");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "TABLETYPES";
      stringArray0[1] = "}/PI^dU:+&}1Ca}4[";
      stringArray0[2] = "}4zKZ'U0B";
      stringArray0[3] = "}4zKZ'U0B";
      stringArray0[4] = "drop table";
      stringArray0[5] = "}4zKZ'U0B";
      stringArray0[6] = "TABLETYPES";
      stringArray0[7] = "";
      stringArray0[8] = "PYGaFLxy|)c";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("}4zKZ'U0B", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (TABLETYPES, }/PI^dU:+&}1Ca}4[, }4zKZ'U0B, }4zKZ'U0B, drop table, }4zKZ'U0B, TABLETYPES, , PYGaFLxy|)c) REFERENCES TABLETYPES(TABLETYPES, }/PI^dU:+&}1Ca}4[, }4zKZ'U0B, }4zKZ'U0B, drop table, }4zKZ'U0B, TABLETYPES, , PYGaFLxy|)c)", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.innerJoin("uIu1:KI,9~z7", stringArray0, "uIu1:KI,9~z7", "(g5=}-x[YMj$x", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("uIu1:KI,9~z7 as (g5=}-x[YMj$x on uIu1:KI,9~z7.null = (g5=}-x[YMj$x.null and uIu1:KI,9~z7.null = (g5=}-x[YMj$x.null and uIu1:KI,9~z7.null = (g5=}-x[YMj$x.null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: uIu1:KI,9~z7 as (g5=}-x[YMj$x on uIu1:KI,9~z7.null = (g5=}-x[YMj$x.null and uIu1:KI,9~z7.null = (g5=}-x[YMj$x.null and uIu1:KI,9~z7.null = (g5=}-x[YMj$x.null
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8201022980949626
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "org.h2.result.RowList";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("org.h2.result.RowList");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("org.h2", false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uIu1:KI,9~z7");
      SQLUtil.isQuery("select into");
      SQLUtil.mutatesDataOrStructure("execorg.h2.result.rowlist");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      String string0 = "gkS2i-zm";
      String string1 = "/{seKy/v6Cc`7nx";
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("execorg.h2.result.rowlist", "*", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("execorg.h2.result.rowlist", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'execorg.h2.result.rowlist'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1626416509453747
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "}4zKZ'U0B";
      stringArray0[1] = "}4zKZ'U0B";
      stringArray0[2] = "}4zKZ'U0B";
      SQLUtil.renderColumnListWithTableName("}4zKZ'U0B", stringArray0);
      SQLUtil.join("", "}4zKZ'U0B", stringArray0, "}4zKZ'U0B", "}4zKZ'U0B", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.leftJoin("Z(wX8CjQ2/G", stringArray0, "}4zKZ'U0B", (String) null, stringArray0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d=Ldx[2g?)+0*jF{Cs", defaultDBTable0, (DBDataType) null, integer0);
      SQLUtil.normalize("}4zKZ'U0B as }4zKZ'U0B on }4zKZ'U0B.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B and }4zKZ'U0B.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B and }4zKZ'U0B.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null", false);
      String string0 = "Illegal column type format: ";
      String string1 = "C.COLUMN_NAME FIELD, C.TYPE_NAME || '(' || C.NUMERIC_PRECISION || ')' TYPE, C.IS_NULLABLE \"NULL\", CASE (SELECT MAX(I.INDEX_TYPE_NAME) FROM INFORMATION_SCHEMA.INDEXES I WHERE I.TABLE_SCHEMA=C.TABLE_SCHEMA AND I.TABLE_NAME=C.TABLE_NAME AND I.COLUMN_NAME=C.COLUMN_NAME)WHEN 'PRIMARY KEY' THEN 'PRI' WHEN 'UNIQUE INDEX' THEN 'UNI' ELSE '' END KEY, IFNULL(COLUMN_DEFAULT, 'NULL') DEFAULT FROM INFORMATION_SCHEMA.COLUMNS C WHERE C.TABLE_NAME=? AND C.TABLE_SCHEMA=? ORDER BY C.ORDINAL_POSITION";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(40, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 40
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "[-p4.aU&4!I9hJ>";
      SQLUtil.normalize("deleteorg.h2.result.rowlist", false);
      String string0 = SQLUtil.normalize("}", true);
      assertEquals("}", string0);
      
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setServerName("deleteorg.h2.result.rowlist");
      String string1 = SQLUtil.normalize("[-p4.aU&4!I9hJ>", false);
      assertEquals("[ - p4.aU & 4 ! I9hJ >", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4zKZ'U0B";
      stringArray0[1] = "}4zKZ'U0B";
      stringArray0[2] = "}4zKZ'U0B";
      SQLUtil.renderColumnListWithTableName("}4zKZ'U0B", stringArray0);
      SQLUtil.join("", "}4zKZ'U0B", stringArray0, "}4zKZ'U0B", "}4zKZ'U0B", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID("D013");
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, (String) null, basicUUID0, false);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("n7*rLYsE", stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer("|");
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      stringBuilder0.deleteCharAt(8);
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(8);
      StringBuilder stringBuilder4 = stringBuilder3.insert(8, '3');
      stringBuilder4.reverse();
      StringBuilder stringBuilder5 = stringBuilder4.insert(8, "9B");
      SQLUtil.addRequiredCondition("delete", stringBuilder5);
      assertEquals("\b3EsYLr*9B7n and delete", stringBuilder5.toString());
      assertEquals("\b3EsYLr*9B7n and delete", stringBuilder0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9405033993510545
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("uIu1:KI,9~z7");
      assertNull(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.removeComments("uIu1:KI,9~z7");
      String string0 = SQLUtil.normalize("]|WBCH=`Kcoq02(n", false);
      assertEquals("] | WBCH = ` Kcoq02 (n", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8043716191528454
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[-p4.aU&4!I9hJ>";
      stringArray0[1] = "(g5=}-xMH[YMj$x";
      SQLUtil.renderColumnListWithTableName("[-p4.aU&4!I9hJ>", stringArray0);
      SQLUtil.join("", "[-p4.aU&4!I9hJ>.[-p4.aU&4!I9hJ>, [-p4.aU&4!I9hJ>.(g5=}-xMH[YMj$x", stringArray0, "", "`8M 9NkIZ%", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.h2.resul", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID("");
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "`8M 9NkIZ%", "([-p4.aU&4!I9hJ>, (g5=}-xMH[YMj$x)", basicUUID0, true);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.22371807606583377
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SELECT * FROM ");
      Boolean.valueOf("}4zKPZ'U0B");
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("}4zKPZ'U0B", false);
      SQLUtil.normalize("/;soFR&yv(v\"pM@g", false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setDatabaseName("/ ; soFR & y  v (v \"pM@g\"");
      pGConnectionPoolDataSource0.setServerName("}4zKPZ'U0B");
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "create unique index";
      stringArray0[1] = "create unique index";
      stringArray0[2] = "create unique index";
      stringArray0[3] = "create unique index";
      stringArray0[4] = "iBEB}bP~~";
      stringArray0[5] = "create unique index";
      stringArray0[6] = "create unique index";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "- ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "- ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = null;
      try {
        basicUUID0 = new BasicUUID((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.isDML("J");
      SQLUtil.normalize("SELECT RDB$TRANSACTION_Ia, RDB$TRANSACTION_*ESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1", false);
      SQLUtil.mutatesDataOrStructure("SELECT RDB$TRANSACTION_Ia, RDB$TRANSACTION_*ESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.removeComments("delete");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Boolean.valueOf("}4zKPZ'U0B");
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}4zKPZ'U0B";
      stringArray0[1] = "TABLETYPE^S";
      stringArray0[2] = "}4zKPZ'U0B";
      stringArray0[3] = "derby.__deleteOnCreate";
      stringArray0[4] = "5hgl)y:*";
      stringArray0[5] = "TABLETYPE^S";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("DATE", false);
      SQLUtil.mutatesDataOrStructure("derby.__deleteOnCreate");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.removeComments("5hgl)y:*");
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.__deleteOnCreate", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1490655835), "}4zKPZ'U0B");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5hgl)y:*", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean.valueOf("}4zKPZ'U0B");
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("$SYfHL\"!,n 8x", dBCatalog0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setServerName("\u0001\u0179");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$SYfHL\"!,n 8x");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("$SYfHL\"!,n 8x.null", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4799555205445176
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(81, "K!_+cq?3");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K!_+cq?3", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      defaultDBColumn0.setType(dBDataType0);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("K!_+cq?3 : K!_+CQ?3", string0);
      
      String[] stringArray0 = new String[5];
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      stringArray0[0] = "K!_+cq?3";
      stringArray0[1] = " NULL";
      DBCatalog dBCatalog0 = new DBCatalog("`a ");
      DBSchema dBSchema0 = new DBSchema("K!_+cq?3 : K!_+CQ?3", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("K!_+cq?3", dBSchema0);
      dBSchema0.getSequences(false);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("dG_])XAm),e", defaultDBTable0, 539, "K!_+cq?3");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("@?.a!;,-");
      assertNull(boolean0);
      
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
      
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string2 = SQLUtil.renderColumnNames(list0);
      assertEquals("K!_+cq?3, dG_])XAm),e", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter session";
      stringArray0[1] = "derby.__deleteOnCreate";
      stringArray0[2] = "alter session";
      stringArray0[3] = "alter session";
      stringArray0[4] = "derby.__deleteOnCreate";
      stringArray0[7] = "alter session";
      stringArray0[6] = "derby.__deleteOnCreate";
      stringArray0[7] = "alter session";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = SQLUtil.normalize("alter session", false);
      SQLUtil.mutatesDataOrStructure("alter session");
      StringBuilder stringBuilder0 = new StringBuilder();
      String string1 = SQLUtil.removeComments("@");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select", true, "insertorg.h2.result.rowlist", "select");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      System.setCurrentTimeMillis(0L);
      SQLUtil.parseColumnTypeAndSize("CONSTRAINT selectCHECK select");
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex("alter materialized view", false, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("org.h2.result.RowList");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.removeComments("org.h2.result.RowList");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("42XA1", true, "org.apacNe.derby.vti.RestriQteVTI", "HEXTORAW");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT 42XA1 ", stringBuilder0.toString());
      
      SQLUtil.typeAndName(dBCheckConstraint0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("HEXTORAW", "alter indexorg.h2.result.rowlist", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("HEXTORAW", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("\"u0T", dBCatalog0);
      dBSchema0.getTable("alter indexorg.h2.result.rowlist");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.result.RowList", (DBTable) null, 32, "5OP65,cOgdNs");
      SQLUtil.renderColumn(defaultDBColumn0);
      Character character0 = new Character('8');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'8'", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.019814992492946
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Boolean.valueOf("}4zKPZ'U0B");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("$YfHL\"`!,n 8_x", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$YfHL\"`!,n 8_x", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "TABLETYPES";
      stringArray0[1] = "$YfHL\"`!,n 8_x";
      stringArray0[2] = "{0[qNXd";
      stringArray0[3] = "ms.A<<Z>mD*~wYUL;";
      stringArray0[4] = "TABLETYPES";
      stringArray0[5] = "N!s}<|]9US&7Jo%";
      stringArray0[6] = "$YfHL\"`!,n 8_x";
      stringArray0[7] = "N!s}<|]9US&7Jo%";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "N!s}<|]9US&7Jo%", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.parseColumnTypeAndSize("[DfP;AE{WTy");
      String string1 = SQLUtil.removeComments("N!s}<|]9US&7Jo%");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("[-p4.aU&4!I9hJ>", dBCatalog0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setServerName("[-p4.aU&4!I9hJ>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[-p4.aU&4!I9hJ>");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executeorg.h2.result.rowlist", dBSchema0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5941666991180168
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}*zK>'U0B";
      stringArray0[1] = "}*zK>'U0B";
      String string0 = SQLUtil.join("execute@?.a!;,-", "ljp2\":!,>Ug3gyN", stringArray0, "execute@?.a!;,-", "ljp2\":!,>Ug3gyN", stringArray0);
      assertEquals("execute@?.a!;,- join execute@?.a!;,- as ljp2\":!,>Ug3gyN on ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.null = ljp2\":!,>Ug3gyN.null", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(}*zK>'U0B, }*zK>'U0B, )", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = SQLUtil.leftJoin("create materialized view", stringArray0, "execute@?.a!;,- join execute@?.a!;,- as ljp2\":!,>Ug3gyN on ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.null = ljp2\":!,>Ug3gyN.null", "execute@?.a!;,-", stringArray0);
      assertEquals("left join execute@?.a!;,- join execute@?.a!;,- as ljp2\":!,>Ug3gyN on ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.null = ljp2\":!,>Ug3gyN.null as execute@?.a!;,- on create materialized view.}*zK>'U0B = execute@?.a!;,-.}*zK>'U0B and create materialized view.}*zK>'U0B = execute@?.a!;,-.}*zK>'U0B and create materialized view.null = execute@?.a!;,-.null", string2);
      
      String string3 = SQLUtil.normalize("left join execute@?.a!;,- join execute@?.a!;,- as ljp2\":!,>Ug3gyN on ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.null = ljp2\":!,>Ug3gyN.null as execute@?.a!;,- on create materialized view.}*zK>'U0B = execute@?.a!;,-.}*zK>'U0B and create materialized view.}*zK>'U0B = execute@?.a!;,-.}*zK>'U0B and create materialized view.null = execute@?.a!;,-.null", false);
      assertEquals("left join execute @ ?.a ! ;, - join execute @ ?.a ! ;, - as ljp2 \":!,>Ug3gyN on ljp2\" : !, > Ug3gyN.} * zK > 'U0B = ljp2\":!,>Ug3gyN.}*zK>' U0B and ljp2 \":!,>Ug3gyN.}*zK>'U0B = ljp2\" : !, > Ug3gyN.} * zK > 'U0B and ljp2\":!,>Ug3gyN.null = ljp2\":!,>Ug3gyN.null as execute@?.a!;,- on create materialized view.}*zK>' U0B = execute @ ?.a ! ;, -.} * zK > 'U0B and create materialized view.}*zK>' U0B = execute @ ?.a ! ;, -.} * zK > 'U0B and create materialized view.null = execute@?.a!;,-.null'", string3);
      
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setServerName("create materialized view");
      SQLUtil.normalize("}*zK>'U0B", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("}*zK>'U0B", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string4 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string4);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(81, "p");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("p", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      defaultDBColumn1.setType(dBDataType0);
      SQLUtil.renderValue(defaultDBColumn1);
      defaultDBColumn1.isEquivalent(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, 19, "3");
      StreamTokenizer streamTokenizer0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}*zK>'U0B";
      stringArray0[1] = "}*zK>'U0B";
      SQLUtil.join("execute@?.a!;,-", "ljp2\":!,>Ug3gyN", stringArray0, "execute@?.a!;,-", "ljp2\":!,>Ug3gyN", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.leftJoin("create materialized view", stringArray0, "execute@?.a!;,- join execute@?.a!;,- as ljp2\":!,>Ug3gyN on ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.}*zK>'U0B = ljp2\":!,>Ug3gyN.}*zK>'U0B and ljp2\":!,>Ug3gyN.null = ljp2\":!,>Ug3gyN.null", "execute@?.a!;,-", stringArray0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("xA9h]KAMR|$", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DataStore dataStore0 = new DataStore((String) null);
      VirtualFile virtualFile0 = new VirtualFile("execute@?.a!;,-", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      mockPrintWriter0.append('a');
      PrintWriter printWriter0 = mockPrintWriter0.format("H=O&sR f)Y|U6", (Object[]) stringArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.2337916587064593
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("[-p4.aU&4!I9hJ>", dBCatalog0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setServerName("[-p4.aU&4!I9hJ>");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executeorg.h2.result.rowlist", dBSchema0);
      String string0 = SQLUtil.normalize("create materialized view--", false);
      assertEquals("create materialized view --", string0);
  }
}
