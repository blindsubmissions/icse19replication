/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:22:03 GMT 2018
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Hashtable<InputStream, String> hashtable0 = new Hashtable<InputStream, String>();
      Enumeration<InputStream> enumeration0 = hashtable0.keys();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(sequenceInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2154);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, byteArrayOutputStream0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "c [,%|?/!IU5EO`rKZ";
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      base64Decoder0.setStatusObject(integer0);
      stringArray0[1] = "";
      base64Decoder0.setStatusObject("");
      hashtable0.values();
      stringArray0[2] = "Just wrote carriage return";
      stringArray0[3] = "Kf";
      stringArray0[4] = "Test Frame";
      Newzgrabber.main(stringArray0);
      base64Decoder0.updateProgress();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      hashtable0.keySet();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertFalse(base64Decoder0.ProgressSet);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Hashtable<InputStream, String> hashtable0 = new Hashtable<InputStream, String>();
      Enumeration<InputStream> enumeration0 = hashtable0.keys();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(sequenceInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2154);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, byteArrayOutputStream0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "c [,%|?/!IU5EO`rKZ";
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream((InputStream) null, false);
      Newzgrabber.verbose = true;
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream1, byteArrayOutputStream1);
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream1, byteArrayOutputStream0);
      base64Decoder2.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder1.decodeStream();
      assertNotSame(base64Decoder1, base64Decoder0);
  }
}
