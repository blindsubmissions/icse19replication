/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:47:34 GMT 2018
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.awt.Point;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.net.Proxy;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import messages.global.InfoRequestMsg;
import messages.global.ScoreMsg;
import messages.round.NewBombMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import server.BomberServer;
import server.ClientInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = "";
      int int0 = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0);
      SQLWarning sQLWarning0 = new SQLWarning(string0, string0, sQLTransientConnectionException0);
      sQLTransientConnectionException0.printStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string0, string0, int0, sQLWarning0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ScoreMsg scoreMsg0 = new ScoreMsg(arrayList0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(scoreMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0);
      SQLWarning sQLWarning0 = new SQLWarning(string0, string0, sQLTransientConnectionException0);
      sQLTransientConnectionException0.printStackTrace();
      String string1 = "";
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(string1);
      SQLWarning sQLWarning1 = new SQLWarning(string0, string1, sQLWarning0);
      sQLTransientConnectionException0.printStackTrace();
      int int0 = 1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string1, string1, int0, sQLWarning0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ScoreMsg scoreMsg0 = new ScoreMsg(arrayList0);
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      Point point0 = new Point();
      Point point1 = jViewport0.toViewCoordinates(point0);
      int int1 = 4159;
      boolean boolean0 = false;
      NewBombMsg newBombMsg0 = new NewBombMsg(point1, int0, point1.y, int1, boolean0);
      clientMsgReceiver0.processMsg(newBombMsg0);
      assertFalse(clientMsgReceiver0.isInterrupted());
  }
}
