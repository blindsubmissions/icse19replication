/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:24:55 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((-1618));
      byte[] byteArray0 = new byte[7];
      player0.setY((-1618));
      byteArray0[0] = (byte)55;
      Player player1 = new Player((byte)55, "Hf<H]#Y", "Hf<H]#Y", (-1618));
      player0.head = (Party) player1;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-67);
      player0.setDead();
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-88);
      player0.unpack(byteArray0);
      player1.gangStrength();
      player0.setY(1257.13F);
      player0.setY(489.15414F);
      player1.getZ();
      player1.setMoney((byte) (-48));
      player0.setMoney(1.0F);
      assertEquals(1.0F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(0L);
      player0.pack();
      player0.id = 351;
      player0.isConnected();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Player.unpack(): *** WARNING *** [IO] failed to unpack data: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(1843, "w%jd:bRcN^Qd:", "w%jd:bRcN^Qd:", 1843);
      player0.setDead((long) 1843);
      player0.setZ(0.0F);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-81);
      player0.unpack(byteArray0);
      assertEquals(1843L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0);
      Player player1 = new Player(4);
      player0.next = (Party) player1;
      player1.prev = (Party) player0;
      Player player2 = new Player();
      player0.setConnected(true);
      player0.head = (Party) player2;
      Player player3 = new Player(3, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "}_@=ly4^", 0);
      player0.setJoinOK(player1, true);
      player0.setJoinOK(player3, false);
      player0.getX();
      player3.getZ();
      player2.type();
      player1.setMoney(4);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setZ(0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0);
      player0.getPictureId();
      player0.gangStrength();
      Player player1 = new Player((-1), "]B", "state.Player", (-1), (-1));
      player1.setDead();
      player0.prev = (Party) player1;
      player0.reset(false);
      player0.setConnected(true);
      player0.getZ();
      player1.getIP();
      player1.setX(0);
      player1.setX((-1));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      player1.pack(dataOutputStream0);
      assertEquals("\u0000\u00137\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\fstate.Player", byteArrayOutputStream0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-2733), "w+p,", "w+p,", (-2733), 4);
      player0.next = null;
      player0.setDead(1120L, true);
      player0.isConnected();
      player0.getMoney();
      Player player1 = new Player(4, "A8RxE", "B([5", (short)4919, 0);
      player1.setMoney(0.0F);
      MockFile mockFile0 = new MockFile(" ", "w+p,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.flush();
      player1.pack(dataOutputStream0);
      player1.setMoney(1120L);
      player0.isJoinOK(player1, true);
      player1.setX((-130.62288F));
      player0.getStrength();
      player0.setConnected(true);
      player0.setConnected(false);
      assertFalse(player0.isConnected());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-1412), "~", 856);
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      Player player1 = new Player((-1412), "state.Player$JoinInfo", (String) null, (-1303));
      player0.setJoinOK(player1, false);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertTrue(player1.isConnected());
      assertFalse(player1.isDead());
      assertEquals((-1303), player1.getPictureId());
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0L, player1.getTimeOfDeath());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(0, "X;p+a/^0E", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 0, 2);
      player0.next = null;
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player1.getName();
      player1.setMoney((-638.0F));
      player1.getTimeOfDeath();
      player0.type();
      player0.pack();
      player1.setZ((-230.8651F));
      assertEquals((-638.0F), player1.getMoney(), 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(3);
      player0.setDead(15000L);
      player0.toString();
      Party party0 = player0.next;
      player0.head = null;
      player0.getStrength();
      player0.setMoney(3);
      assertEquals(3.0F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(0, "", 1349);
      player0.setX((-2885.0F));
      player0.reset(true);
      player0.reset(true);
      player0.setConnected(true);
      player0.setDead();
      player0.setDead();
      player0.getPictureId();
      float float0 = player0.getMoney();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8133554045006153
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(1, "2Ar08F\"p%RXa9+80Z", "!/", 1);
      player0.pack();
      player0.setZ(0.0F);
      player0.id = (-87);
      player0.setDead((long) 1, false);
      player0.setDead(997L);
      player0.gangStrength();
      player0.setMoney(0.0F);
      player0.getIP();
      player0.setX(1);
      player0.getStrength();
      player0.gangStrength();
      player0.setX(0.0F);
      player0.reset(false);
      player0.setDead((long) 1);
      player0.setDead();
      player0.getIP();
      player0.setDead();
      player0.isDead();
      player0.isDead();
      int int0 = player0.type();
      assertEquals(0.0F, player0.getX(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((-187), "XubY_(JS+rJ1_'B*", "XubY_(JS+rJ1_'B*", (-187));
      boolean boolean0 = player0.isDead();
      assertFalse(boolean0);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals((-187), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[2] = (byte)2;
      player0.unpack(byteArray0);
      Player player1 = new Player();
      byte[] byteArray1 = player1.pack();
      player0.isJoinOK(player1, false);
      player0.unpack(byteArray1);
      player1.setZ((-1.0F));
      player0.setMoney((-854.3834F));
      player1.setMoney((byte)0);
      player1.toString();
      player0.toString();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(1788, "#_|7SG<BXxB7so=}", "#_|7SG<BXxB7so=}", 1788, (-1017));
      Player player1 = new Player((-1017), "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", (-172));
      player1.setZ(1.0F);
      Player player2 = new Player(1788, ".*[.]class$", "#_|7SG<BXxB7so=}", 4919, 1788);
      player2.setJoinOK(player0, false);
      player2.gangStrength();
      Player player3 = new Player(2446, "VaGrp;", "MG6];Tm/", (-1017));
      player2.isJoinOK(player0, true);
      player1.getMoney();
      player0.setDead((long) 4919, true);
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player1.pack();
      player0.isJoinOK(player1, false);
      player1.remove(player0);
      player1.remove(player0);
      player0.getSubparty();
      player1.setJoinOK(player0, false);
      player1.pack();
      player1.isConnected();
      player1.setX((short)4919);
      player0.gangStrength();
      player1.isJoinOK(player0, false);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals(4919.0F, player1.getX(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player1.pack();
      player0.isJoinOK(player1, false);
      player1.remove(player0);
      player1.remove(player0);
      player0.getSubparty();
      player1.setJoinOK(player0, false);
      player1.pack();
      player0.isConnected();
      player1.setX((short)4919);
      player0.isJoinOK(player1, false);
      player1.getMoney();
      player0.setDead((long) (short)4919, true);
      System.setCurrentTimeMillis(1392409296320L);
      System.setCurrentTimeMillis(1392409296320L);
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals(4919L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }
}
