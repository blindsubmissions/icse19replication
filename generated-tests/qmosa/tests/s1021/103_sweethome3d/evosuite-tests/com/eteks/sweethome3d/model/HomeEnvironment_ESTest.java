/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:14:34 GMT 2018
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.AspectRatio;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeEnvironment_ESTest extends HomeEnvironment_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      homeEnvironment1.isAllLevelsVisible();
      homeEnvironment0.setSubpartSizeUnderLight(0.0F);
      homeEnvironment0.setSkyColor(1131);
      homeEnvironment0.setPhotoQuality(1);
      homeEnvironment0.getPhotoWidth();
      AspectRatio aspectRatio0 = AspectRatio.RATIO_16_9;
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.VIDEO_WIDTH;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeEnvironment1.setLightColor(1131);
      homeEnvironment1.removePropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      HomeEnvironment.Property homeEnvironment_Property1 = HomeEnvironment.Property.PHOTO_ASPECT_RATIO;
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      homeEnvironment0.removePropertyChangeListener(homeEnvironment_Property1, propertyChangeListenerProxy1);
      homeEnvironment1.setPhotoHeight(1);
      homeEnvironment0.getDrawingMode();
      homeEnvironment0.setVideoFrameRate(4255);
      homeEnvironment1.getWallsAlpha();
      homeEnvironment1.setPhotoHeight(400);
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      homeEnvironment0.getVideoCameraPath();
      // Undeclared exception!
      try { 
        HomeEnvironment.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomeEnvironment.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment((-110), (HomeTexture) null, 8192, (HomeTexture) null, (-110), 2.0F);
      homeEnvironment0.setWallsAlpha(2.0F);
      homeEnvironment0.setWallsAlpha(8192);
      homeEnvironment0.setLightColor(8192);
      homeEnvironment0.setPhotoWidth(0);
      homeEnvironment0.setGroundTexture((HomeTexture) null);
      homeEnvironment0.clone();
      HomeEnvironment.DrawingMode.values();
      homeEnvironment0.getPhotoWidth();
      HomeEnvironment.Property.values();
      homeEnvironment0.setPhotoHeight(0);
      homeEnvironment0.setVideoFrameRate(0);
      assertEquals(8192.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.getSubpartSizeUnderLight();
      homeEnvironment0.setPhotoHeight((-2092));
      List<Camera> list0 = homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.setVideoCameraPath(list0);
      homeEnvironment0.setAllLevelsVisible(false);
      homeEnvironment0.setPhotoWidth(0);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.DRAWING_MODE;
      homeEnvironment0.setVideoWidth((-2092));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("pO@P%", propertyChangeListener0);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(homeEnvironment_Property0, "pO@P%", object0, propertyChangeListenerProxy0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      homeEnvironment0.addPropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      homeEnvironment0.setPhotoWidth(1437);
      HomeEnvironment.Property homeEnvironment_Property1 = HomeEnvironment.Property.VIDEO_CAMERA_PATH;
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("pO@P%", propertyChangeListenerProxy0);
      homeEnvironment0.addPropertyChangeListener(homeEnvironment_Property1, propertyChangeListenerProxy1);
      homeEnvironment0.getLightColor();
      homeEnvironment0.getCeillingLightColor();
      HomeEnvironment.Property.values();
      homeEnvironment0.getSubpartSizeUnderLight();
      homeEnvironment0.getVideoHeight();
      homeEnvironment0.getWallsAlpha();
      homeEnvironment0.setSkyColor(0);
      homeEnvironment0.setAllLevelsVisible(true);
      homeEnvironment0.getSkyTexture();
      assertTrue(homeEnvironment0.isAllLevelsVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", uRLContent0, 0.0F, (-1547));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      HomeEnvironment homeEnvironment0 = new HomeEnvironment((-1547), homeTexture0, (-1547), (-1547), (-1547));
      CatalogTexture catalogTexture1 = new CatalogTexture("5^I-", "5^I-", uRLContent0, (-1547), 0.0F, "5^I-");
      catalogTexture0.compareTo(catalogTexture1);
      catalogTexture0.setCategory((TexturesCategory) null);
      homeEnvironment0.setVideoWidth((-1547));
      homeEnvironment0.setCeillingLightColor((-1547));
      homeEnvironment0.setSubpartSizeUnderLight(1.7777778F);
      assertEquals(1.7777778F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.getPhotoHeight();
      homeEnvironment0.isAllLevelsVisible();
      homeEnvironment0.isAllLevelsVisible();
      homeEnvironment0.setSkyColor(300);
      homeEnvironment0.setObserverCameraElevationAdjusted(false);
      assertEquals(300, homeEnvironment0.getSkyColor());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.setVideoQuality((-2026));
      HomeEnvironment.DrawingMode homeEnvironment_DrawingMode0 = HomeEnvironment.DrawingMode.FILL_AND_OUTLINE;
      homeEnvironment0.setDrawingMode(homeEnvironment_DrawingMode0);
      homeEnvironment0.getVideoFrameRate();
      homeEnvironment0.setSkyColor(18);
      HomeEnvironment.Property.values();
      AspectRatio aspectRatio0 = AspectRatio.VIEW_3D_RATIO;
      homeEnvironment0.setLightColor(25);
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      homeEnvironment0.getDrawingMode();
      homeEnvironment0.setVideoFrameRate((-2026));
      assertEquals(25, homeEnvironment0.getLightColor());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.getSkyColor();
      AspectRatio aspectRatio0 = AspectRatio.SQUARE_RATIO;
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      homeEnvironment0.setVideoQuality(13427964);
      HomeEnvironment.DrawingMode.values();
      homeEnvironment0.getVideoQuality();
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL1, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.tools.ResourceURLContent", "", resourceURLContent0, 1.3333334F, 2852.92F, "", false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeEnvironment1.setSkyTexture(homeTexture0);
      homeEnvironment0.setGroundTexture((HomeTexture) null);
      homeEnvironment0.clone();
      HomeEnvironment homeEnvironment2 = homeEnvironment0.clone();
      homeEnvironment0.setVideoFrameRate(13427964);
      homeEnvironment2.clone();
      homeEnvironment2.getVideoCameraPath();
      homeEnvironment1.setLightColor(13427964);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.GROUND_TEXTURE;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("\"%v(OOq#6=`s4J", propertyChangeListener0);
      homeEnvironment1.addPropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      assertEquals(AspectRatio.SQUARE_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      AspectRatio aspectRatio0 = AspectRatio.RATIO_2_1;
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.VIDEO_FRAME_RATE;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("T:VP6BML|S=ZQJ", propertyChangeListener0);
      HomeEnvironment homeEnvironment2 = homeEnvironment1.clone();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(homeEnvironment2, "com.eteks.sweethome3d.tools.URLContent", "T:VP6BML|S=ZQJ", aspectRatio0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(homeEnvironment_Property0, "T:VP6BML|S=ZQJ", homeEnvironment0, "");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      homeEnvironment1.removePropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListener1);
      homeEnvironment1.removePropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy1);
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      homeEnvironment1.setObserverCameraElevationAdjusted(true);
      homeEnvironment0.setVideoQuality(3);
      homeEnvironment0.setSubpartSizeUnderLight(4847.92F);
      HomeEnvironment.DrawingMode homeEnvironment_DrawingMode0 = HomeEnvironment.DrawingMode.FILL_AND_OUTLINE;
      homeEnvironment0.setDrawingMode(homeEnvironment_DrawingMode0);
      homeEnvironment0.getVideoWidth();
      homeEnvironment0.getGroundColor();
      homeEnvironment0.getVideoHeight();
      homeEnvironment0.getLightColor();
      HomeEnvironment.DrawingMode[] homeEnvironment_DrawingModeArray0 = HomeEnvironment.DrawingMode.values();
      assertEquals(3, homeEnvironment_DrawingModeArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(2, (HomeTexture) null, 2, (HomeTexture) null, 248, 1.5F);
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      homeEnvironment1.setSkyTexture((HomeTexture) null);
      homeEnvironment0.setSkyColor(0);
      AspectRatio aspectRatio0 = AspectRatio.FREE_RATIO;
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.VIDEO_FRAME_RATE;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("=|y%o=k[r!", propertyChangeListener0);
      Object object0 = new Object();
      Camera camera0 = new Camera((-2258.89F), 1.5F, 0.0F, 248, 2, 0.0F);
      Camera camera1 = camera0.clone();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "=|y%o=k[r!", camera1, homeEnvironment1);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      homeEnvironment1.addPropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      // Undeclared exception!
      try { 
        homeEnvironment1.setVideoAspectRatio(aspectRatio0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported aspect ratio FREE_RATIO
         //
         verifyException("com.eteks.sweethome3d.model.HomeEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(20, (HomeTexture) null, 284, 20, 20);
      homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.setGroundTexture((HomeTexture) null);
      homeEnvironment0.setPhotoQuality(284);
      homeEnvironment0.getVideoWidth();
      homeEnvironment0.setLightColor(320);
      homeEnvironment0.setPhotoQuality(0);
      homeEnvironment0.getPhotoQuality();
      homeEnvironment0.getPhotoQuality();
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.PHOTO_ASPECT_RATIO;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "com.eteks.sweethome3d.tools.URLContent", "", "com.eteks.sweethome3d.tools.URLContent");
      propertyChangeEvent0.setPropagationId((Object) null);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      Object object1 = new Object();
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(propertyChangeListenerProxy0, "", homeEnvironment_Property0, object1);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      homeEnvironment0.addPropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      homeEnvironment0.getGroundTexture();
      homeEnvironment0.removePropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      int int0 = homeEnvironment0.getVideoQuality();
      assertEquals(320, homeEnvironment0.getLightColor());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      HomeEnvironment.DrawingMode homeEnvironment_DrawingMode0 = HomeEnvironment.DrawingMode.OUTLINE;
      homeEnvironment0.setDrawingMode(homeEnvironment_DrawingMode0);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.PHOTO_ASPECT_RATIO;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("PvR", propertyChangeListener0);
      homeEnvironment0.removePropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      homeEnvironment0.getVideoWidth();
      homeEnvironment0.setObserverCameraElevationAdjusted(true);
      homeEnvironment0.isObserverCameraElevationAdjusted();
      AspectRatio aspectRatio0 = AspectRatio.RATIO_4_3;
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      homeEnvironment0.setSubpartSizeUnderLight(3547.301F);
      homeEnvironment0.setDrawingMode(homeEnvironment_DrawingMode0);
      homeEnvironment0.getVideoWidth();
      homeEnvironment0.setSkyTexture((HomeTexture) null);
      assertEquals(3547.301F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment((-1272), (HomeTexture) null, (-1272), (HomeTexture) null, 0, 0);
      HomeEnvironment.DrawingMode homeEnvironment_DrawingMode0 = homeEnvironment0.getDrawingMode();
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.WALLS_ALPHA;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homeEnvironment0.setDrawingMode(homeEnvironment_DrawingMode0);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("|P{RpoH", propertyChangeListener0);
      Object object0 = new Object();
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "|P{RpoH", homeEnvironment1, object0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      homeEnvironment0.addPropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      homeEnvironment0.getVideoAspectRatio();
      homeEnvironment0.getGroundTexture();
      HomeEnvironment homeEnvironment2 = homeEnvironment0.clone();
      homeEnvironment2.setVideoQuality(0);
      homeEnvironment2.getSubpartSizeUnderLight();
      int int0 = homeEnvironment0.getGroundColor();
      assertEquals((-1272), int0);
      
      homeEnvironment2.getSubpartSizeUnderLight();
      float float0 = homeEnvironment2.getSubpartSizeUnderLight();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, homeEnvironment2.getVideoQuality());
      
      int int1 = homeEnvironment0.getPhotoHeight();
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertNotSame(homeEnvironment0, homeEnvironment2);
      assertEquals(300, int1);
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals((-1272), homeEnvironment0.getSkyColor());
      assertEquals(0, homeEnvironment0.getLightColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      homeEnvironment1.isAllLevelsVisible();
      homeEnvironment0.setSubpartSizeUnderLight(0.0F);
      homeEnvironment0.setSkyColor(1131);
      homeEnvironment0.setPhotoQuality(1);
      homeEnvironment0.getPhotoWidth();
      AspectRatio aspectRatio0 = AspectRatio.RATIO_16_9;
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.VIDEO_WIDTH;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeEnvironment1.setLightColor(1131);
      homeEnvironment1.removePropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      HomeEnvironment.Property homeEnvironment_Property1 = HomeEnvironment.Property.PHOTO_ASPECT_RATIO;
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("", ")Ujc|i", (Object) null, (Object) null);
      propertyChangeListenerProxy1.propertyChange(propertyChangeEvent0);
      homeEnvironment0.removePropertyChangeListener(homeEnvironment_Property1, propertyChangeListenerProxy1);
      homeEnvironment1.setPhotoHeight(1);
      homeEnvironment0.getDrawingMode();
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      homeEnvironment1.addPropertyChangeListener(homeEnvironment_Property1, propertyChangeListenerProxy0);
      AspectRatio aspectRatio1 = AspectRatio.RATIO_4_3;
      homeEnvironment1.setVideoAspectRatio(aspectRatio1);
      HomeEnvironment homeEnvironment2 = new HomeEnvironment();
      homeEnvironment2.getVideoWidth();
      int int0 = homeEnvironment0.getCeillingLightColor();
      assertEquals(AspectRatio.RATIO_16_9, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(13684944, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.setLightColor(1149);
      homeEnvironment0.setSkyColor(1131);
      homeEnvironment0.setPhotoQuality(1);
      homeEnvironment0.getPhotoWidth();
      AspectRatio aspectRatio0 = AspectRatio.RATIO_16_9;
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.VIDEO_WIDTH;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      homeEnvironment0.setLightColor((-2035));
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("yMJl[($$", propertyChangeListenerProxy0);
      homeEnvironment0.removePropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy2);
      HomeEnvironment.Property homeEnvironment_Property1 = HomeEnvironment.Property.PHOTO_ASPECT_RATIO;
      PropertyChangeListenerProxy propertyChangeListenerProxy3 = new PropertyChangeListenerProxy("T]KY>7D/", propertyChangeListenerProxy1);
      PropertyChangeListenerProxy propertyChangeListenerProxy4 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      homeEnvironment0.removePropertyChangeListener(homeEnvironment_Property1, propertyChangeListenerProxy4);
      homeEnvironment0.setPhotoHeight((-424));
      homeEnvironment0.getDrawingMode();
      homeEnvironment0.setVideoFrameRate(2940);
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      homeEnvironment1.getWallsAlpha();
      homeEnvironment0.setPhotoHeight(4255);
      homeEnvironment1.setPhotoAspectRatio(aspectRatio0);
      homeEnvironment0.getVideoCameraPath();
      HomeEnvironment.Property homeEnvironment_Property2 = HomeEnvironment.Property.LIGHT_COLOR;
      AspectRatio aspectRatio1 = homeEnvironment1.getPhotoAspectRatio();
      assertEquals(AspectRatio.RATIO_16_9, aspectRatio1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.setVideoQuality((-2026));
      HomeEnvironment.DrawingMode homeEnvironment_DrawingMode0 = HomeEnvironment.DrawingMode.FILL_AND_OUTLINE;
      homeEnvironment0.setDrawingMode(homeEnvironment_DrawingMode0);
      homeEnvironment0.getVideoFrameRate();
      homeEnvironment0.setSkyColor(18);
      Camera camera0 = new Camera((-1287.0F), 2007.2291F, 2248.0688F, 0.0F, (-1.0F), 1926.2756F);
      Camera camera1 = camera0.clone();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(homeEnvironment_DrawingMode0, "VIEW_3D_RATIO", camera1, camera1);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Camera.Lens camera_Lens0 = Camera.Lens.PINHOLE;
      camera1.setLens(camera_Lens0);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("VIEW_3D_RATIO", propertyChangeListener0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.SUBPART_SIZE_UNDER_LIGHT;
      homeEnvironment0.addPropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      AspectRatio aspectRatio0 = AspectRatio.RATIO_16_9;
      homeEnvironment0.setVideoAspectRatio(aspectRatio0);
      homeEnvironment0.getVideoWidth();
      int int0 = homeEnvironment0.getCeillingLightColor();
      assertEquals((-2026), homeEnvironment0.getVideoQuality());
      assertEquals(13684944, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture(" Kf551N;u7XZ{oLb", " Kf551N;u7XZ{oLb", resourceURLContent0, 3872.6863F, 1.0F, (String) null, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(16, homeTexture0, 13, 46, 46);
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      homeEnvironment1.setGroundColor(13);
      assertEquals(16, homeEnvironment0.getGroundColor());
      assertEquals(13, homeEnvironment1.getGroundColor());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      homeEnvironment1.isAllLevelsVisible();
      homeEnvironment0.setSubpartSizeUnderLight(0.0F);
      homeEnvironment0.setSkyColor(1131);
      homeEnvironment0.setPhotoQuality(1);
      homeEnvironment0.getPhotoWidth();
      AspectRatio aspectRatio0 = AspectRatio.RATIO_16_9;
      homeEnvironment0.setPhotoAspectRatio(aspectRatio0);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.VIDEO_WIDTH;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeEnvironment1.setLightColor(1131);
      homeEnvironment1.removePropertyChangeListener(homeEnvironment_Property0, propertyChangeListenerProxy0);
      homeEnvironment1.isAllLevelsVisible();
      homeEnvironment0.setSkyColor(1131);
      homeEnvironment0.setObserverCameraElevationAdjusted(false);
      assertEquals(1131, homeEnvironment0.getSkyColor());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      homeEnvironment1.isAllLevelsVisible();
      homeEnvironment0.setSubpartSizeUnderLight(0.0F);
      homeEnvironment0.setSkyColor(1131);
      homeEnvironment1.setLightColor(1131);
      homeEnvironment1.setPhotoQuality(1131);
      homeEnvironment1.getPhotoQuality();
      HomeEnvironment homeEnvironment2 = homeEnvironment1.clone();
      homeEnvironment2.getPhotoQuality();
      homeEnvironment1.setPhotoWidth(1131);
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture(" Zn&yyRi%E]\"13>f", resourceURLContent0, (-2677.6433F), 1131);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeEnvironment2.setGroundTexture(homeTexture0);
      HomeEnvironment homeEnvironment3 = homeEnvironment1.clone();
      HomeEnvironment.DrawingMode.values();
      homeEnvironment2.getPhotoWidth();
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment4 = homeEnvironment1.clone();
      homeEnvironment4.setPhotoHeight(18);
      homeEnvironment3.setVideoFrameRate((-993));
      homeEnvironment4.setCeillingLightColor(1338);
      assertEquals(18, homeEnvironment4.getPhotoHeight());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(0, (HomeTexture) null, 0, 0, 1262.0F);
      homeEnvironment0.setPhotoQuality(53);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.SKY_TEXTURE;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(homeEnvironment0, "(H", (Object) null, "");
      propertyChangeEvent0.toString();
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      propertyChangeEvent0.setPropagationId(homeEnvironment_Property0);
      propertyChangeEvent0.toString();
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      HomeEnvironment.Property.values();
      AspectRatio aspectRatio0 = AspectRatio.VIEW_3D_RATIO;
      homeEnvironment0.setLightColor(0);
      HomeEnvironment homeEnvironment1 = new HomeEnvironment();
      homeEnvironment1.setPhotoAspectRatio(aspectRatio0);
      homeEnvironment1.getDrawingMode();
      homeEnvironment1.setVideoFrameRate(53);
      assertEquals(53, homeEnvironment1.getVideoFrameRate());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.getPhotoHeight();
      homeEnvironment0.isAllLevelsVisible();
      homeEnvironment0.isAllLevelsVisible();
      homeEnvironment0.setSkyColor(300);
      homeEnvironment0.setAllLevelsVisible(true);
      HomeEnvironment.Property.values();
      homeEnvironment0.setPhotoHeight(300);
      assertTrue(homeEnvironment0.isAllLevelsVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.getPhotoHeight();
      homeEnvironment0.isAllLevelsVisible();
      homeEnvironment0.isAllLevelsVisible();
      homeEnvironment0.setSkyColor(300);
      homeEnvironment0.setAllLevelsVisible(true);
      homeEnvironment0.setAllLevelsVisible(false);
      HomeEnvironment.Property.values();
      homeEnvironment0.setCeillingLightColor(300);
      assertEquals(300, homeEnvironment0.getSkyColor());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(0, (HomeTexture) null, 0, 0, 1262.0F);
      homeEnvironment0.setPhotoQuality(53);
      HomeEnvironment.Property homeEnvironment_Property0 = HomeEnvironment.Property.SKY_TEXTURE;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(homeEnvironment0, "(H", (Object) null, "");
      propertyChangeEvent0.setPropagationId(homeEnvironment_Property0);
      homeEnvironment0.setPhotoHeight((-1));
      propertyChangeEvent0.toString();
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      homeEnvironment0.setGroundColor(0);
      assertEquals(53, homeEnvironment0.getPhotoQuality());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.getPhotoHeight();
      homeEnvironment0.isAllLevelsVisible();
      homeEnvironment0.isAllLevelsVisible();
      homeEnvironment0.setPhotoQuality(300);
      homeEnvironment0.setVideoQuality(300);
      homeEnvironment0.setGroundColor(9);
      HomeEnvironment.Property.values();
      HomeEnvironment.Property.values();
      homeEnvironment0.setPhotoWidth(286);
      homeEnvironment0.setVideoWidth(286);
      homeEnvironment0.setPhotoQuality(300);
      assertEquals(215, homeEnvironment0.getVideoHeight());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(2, (HomeTexture) null, 2, (HomeTexture) null, 248, 1.5F);
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      homeEnvironment1.setSkyTexture((HomeTexture) null);
      homeEnvironment0.setSkyColor(0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("=|y%o=k[r!", propertyChangeListener0);
      Object object0 = new Object();
      HomeEnvironment.Property.values();
      AspectRatio aspectRatio0 = AspectRatio.VIEW_3D_RATIO;
      homeEnvironment0.setLightColor(0);
      homeEnvironment1.setPhotoAspectRatio(aspectRatio0);
      HomeEnvironment.Property.values();
      homeEnvironment1.clone();
      homeEnvironment1.setPhotoHeight(18);
      homeEnvironment0.setVideoFrameRate(248);
      HomeEnvironment homeEnvironment2 = new HomeEnvironment(2, (HomeTexture) null, 0, 174, 18);
      homeEnvironment2.setCeillingLightColor(8192);
      homeEnvironment0.setVideoFrameRate(248);
      assertEquals(248, homeEnvironment0.getVideoFrameRate());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.getPhotoQuality();
      homeEnvironment0.setObserverCameraElevationAdjusted(false);
      homeEnvironment0.setPhotoWidth(0);
      MockURL.getFileExample();
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      Camera.Lens camera_Lens0 = Camera.Lens.FISHEYE;
      Camera camera0 = new Camera(0, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 0, camera_Lens0);
      Camera camera1 = camera0.clone();
      linkedList0.add(camera1);
      homeEnvironment0.setVideoCameraPath(linkedList0);
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      HomeEnvironment.DrawingMode.values();
      homeEnvironment0.getPhotoWidth();
      HomeEnvironment.Property.values();
      homeEnvironment1.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SPHERICAL");
      homeEnvironment0.setPhotoHeight(1043);
      homeEnvironment1.setVideoFrameRate(18);
      homeEnvironment1.setCeillingLightColor(1043);
      assertEquals(18, homeEnvironment1.getVideoFrameRate());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.setPhotoWidth((-969));
      homeEnvironment0.setPhotoQuality((-969));
      homeEnvironment0.setGroundColor(1243);
      HomeEnvironment.Property.values();
      homeEnvironment0.setPhotoWidth((-969));
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-910));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("", "", object0, homeEnvironment0);
      homeEnvironment0.setSkyColor((-910));
      homeEnvironment0.setGroundColor((-1502));
      HomeEnvironment homeEnvironment1 = new HomeEnvironment();
      homeEnvironment1.setPhotoWidth((-1502));
      homeEnvironment0.setVideoWidth(320);
      homeEnvironment1.setPhotoWidth((-1));
      // Undeclared exception!
      try { 
        HomeEnvironment.Property.valueOf("+Ilf(`;L6u!-/.3 Le");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomeEnvironment.Property.+Ilf(`;L6u!-/.3 Le
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      System.setCurrentTimeMillis(1401L);
      HomeEnvironment.Property.values();
      List<Camera> list0 = homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.setVideoCameraPath(list0);
      HomeEnvironment.Property.values();
      HomeEnvironment.DrawingMode.values();
      HomeEnvironment.DrawingMode.values();
      homeEnvironment0.setCeillingLightColor((-1778));
      homeEnvironment0.setCeillingLightColor((-1778));
      assertEquals((-1778), homeEnvironment0.getCeillingLightColor());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.getVideoCameraPath();
      homeEnvironment0.getPhotoQuality();
      homeEnvironment0.setObserverCameraElevationAdjusted(false);
      homeEnvironment0.setPhotoWidth(0);
      MockURL.getFileExample();
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      Camera.Lens camera_Lens0 = Camera.Lens.FISHEYE;
      Camera camera0 = new Camera(0, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 0, camera_Lens0);
      Camera camera1 = camera0.clone();
      camera1.setZ(0);
      linkedList0.add(camera1);
      homeEnvironment0.setVideoCameraPath(linkedList0);
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      HomeEnvironment.DrawingMode.values();
      homeEnvironment0.getPhotoWidth();
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment2 = homeEnvironment1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeEnvironment2.setObserverCameraElevationAdjusted(true);
      HomeEnvironment.DrawingMode.values();
      HomeEnvironment.Property.values();
      HomeEnvironment.Property.values();
      HomeEnvironment.DrawingMode.values();
      System.setCurrentTimeMillis(2127L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      System.setCurrentTimeMillis(1401L);
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) homeEnvironment0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      linkedList0.removeIf(predicate3);
      Camera camera0 = new Camera(1401L, 1401L, 1401L, 1401L, 1401L, (-416.0F));
      linkedList0.add(camera0);
      homeEnvironment0.setVideoCameraPath((List<Camera>) null);
      HomeEnvironment homeEnvironment1 = homeEnvironment0.clone();
      HomeEnvironment.DrawingMode.values();
      homeEnvironment0.getPhotoWidth();
      HomeEnvironment.Property.values();
      HomeEnvironment homeEnvironment2 = homeEnvironment0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Abds`l.>B0");
      homeEnvironment0.setPhotoHeight(400);
      homeEnvironment1.setVideoFrameRate((-1534));
      homeEnvironment2.setCeillingLightColor((-2745));
      System.setCurrentTimeMillis(400);
      homeEnvironment1.setCeillingLightColor((-463));
      assertEquals(400, homeEnvironment0.getPhotoHeight());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
  }
}
