/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:30:01 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.and();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(5, int0);
      
      xPathLexer0.or();
      xPathLexer0.div();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.consume(3363);
      xPathLexer0.mod();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.div();
      xPathLexer0.and();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.593372795445466
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.div();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.getXPath();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.isIdentifierStartChar('y');
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.getXPath();
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`");
      xPathLexer0.setXPath("`");
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.setXPath("`");
      Token token0 = xPathLexer0.slashes();
      assertEquals("`", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.isIdentifierChar('{');
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.whitespace();
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.minus();
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g. 12");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.isIdentifierChar('z');
      Token token2 = xPathLexer0.rightParen();
      token2.toString();
      boolean boolean0 = xPathLexer0.isIdentifierChar('z');
      assertTrue(boolean0);
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.number();
      assertEquals("12", token3.getTokenText());
      
      token2.toString();
      xPathLexer0.not();
      token2.toString();
      xPathLexer0.and();
      xPathLexer0.at();
      String string0 = token2.toString();
      assertEquals("[ (2) ( )", string0);
      
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token2);
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      char char0 = xPathLexer0.LA((-1));
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.number();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.at();
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5642804511592772
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|'+sXzKuW`|r@k<7?c");
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.plus();
      xPathLexer0.minus();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.getXPath();
      xPathLexer0.plus();
      int int0 = (-3099);
      xPathLexer0.or();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3099));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0214368713215523
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s)pLa");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("s", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals(")p", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.dollar();
      assertEquals("a", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.notEquals();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2965151684170184
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y|Gu6@i1F#`P@>Bkg");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (4) (y)", string0);
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.colon();
      assertEquals("|", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("G", token3.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.literal();
      assertEquals(27, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(">B", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.plus();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("g", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      xPathLexer0.and();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.plus();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(23, int0);
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.div();
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('\\');
      assertFalse(boolean0);
      
      xPathLexer0.isIdentifierChar('\\');
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.leftParen();
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.7201600182316742
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ph(WV+%lJZig'8");
      xPathLexer0.hasMoreChars();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals("ph", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3718853952928547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("1Seunz<#`8 '");
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3515354665184374
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`");
      xPathLexer0.setXPath("`");
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.setXPath("`");
      Token token4 = xPathLexer0.slashes();
      assertEquals("`", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer1.literal();
      assertNull(token12);
      
      Token token13 = xPathLexer0.whitespace();
      assertEquals((-2), token13.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1441775885118284
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ph(WV+%lJZig'8");
      xPathLexer0.or();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("p", token0.getTokenText());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("W", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("lJZig", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5619771374144564
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("=}_T\"oQf.moys3E");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer1.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("=}_T\"oQf.moys3E");
      xPathLexer2.and();
      xPathLexer2.and();
      Token token6 = xPathLexer1.not();
      assertEquals("}", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      xPathLexer1.or();
      xPathLexer1.mod();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.767551343635458
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      char char0 = 'z';
      xPathLexer0.isIdentifierChar('z');
      Token token0 = xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4028032982050376
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g. 12");
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('z');
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.isIdentifierChar('z');
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.consume('z');
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.LA(9);
      xPathLexer1.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer1.equals();
      xPathLexer1.comma();
      xPathLexer2.consume();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.XPathLexer", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2289294582705406
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g. 12");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(13, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.consume(3363);
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.and();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.7377149877524721
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("phOWV+%lJZig'8");
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("phOWV", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("+", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.74454877784292
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("com.werken.saxpath.Token", token0.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(' ');
      assertFalse(boolean0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.259969082939798
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|'+sXzKuW`|r@k<7?c");
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("X", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.and();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("z", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("K", token2.getTokenText());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("uW", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("|'+sXzKuW`|r@k<7?c");
      Token token4 = xPathLexer1.not();
      assertEquals("|", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("`", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.comma();
      assertEquals("'", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("+", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("z", token9.getTokenText());
      
      Token token10 = xPathLexer1.colon();
      assertEquals("K", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      xPathLexer1.literal();
      Token token11 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token12 = xPathLexer1.whitespace();
      assertEquals((-2), token12.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.7140745794741093
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`");
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.setXPath("X`>@]B@\\");
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("`>@]B@\\", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5126585295298014
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s)pLa");
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.isIdentifierStartChar('\\');
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2807673917805387
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("1Seunz<#`8 '");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }
}
