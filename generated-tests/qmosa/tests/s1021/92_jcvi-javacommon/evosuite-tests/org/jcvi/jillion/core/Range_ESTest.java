/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:34:04 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-613L);
      long long1 = (-975L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-613L), (-975L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = (-2589L);
      Range.of((-2589L), (-2589L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("^0Y", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ^0Y into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 0L;
      Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 5213L;
      Range.ofLength(5213L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 790L;
      Range range1 = Range.of(790L);
      range_Builder0.expandEnd(1993L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_Builder1.shift(1953L);
      range1.getLength();
      long long1 = (-3251L);
      range_Builder1.shift((-3251L));
      range_Builder1.expandBegin(790L);
      // Undeclared exception!
      try { 
        range0.split((-3251L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.36274100073709
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.of((-293L), (-293L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-293L));
      range0.getLength();
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9481184814404857
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.getBegin();
      Range range1 = Range.of(0L);
      String string0 = "r";
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4746130192958278
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 87L;
      Range range0 = Range.ofLength(87L);
      range0.spliterator();
      List<Range> list0 = range0.split(87L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      // Undeclared exception!
      try { 
        Range.parseRange(";:8]FfjY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ;:8]FfjY into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.304349630801662
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long(3675L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483647L);
      range_Builder0.expandBegin(3675L);
      range_Builder0.build();
      range_Builder0.shift(0L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1454L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.018269593559733
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(0L);
      range1.split(4294967295L);
      Range.of(0L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5286920356708102
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of((-2818L));
      Range range1 = Range.of((-1L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-4501L), (-4501L));
      boolean boolean0 = range3.startsBefore(range1);
      assertTrue(boolean0);
      
      Range range4 = Range.of(2147483647L);
      long long0 = range4.getLength();
      assertEquals(1L, long0);
      
      boolean boolean1 = range2.startsBefore(range4);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1276178314119045
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of(0L, 255L);
      Range range1 = Range.ofLength(255L);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.of(255L);
      long long0 = range0.getLength();
      assertEquals(256L, long0);
      
      boolean boolean0 = range2.equals(range0);
      assertNotSame(range0, range1);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-1L), 0L);
      long long0 = range2.getLength();
      assertEquals(2L, long0);
      
      range2.equals(range0);
      assertNotSame(range2, range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.304349630801662
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.871649625135927
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of((-2818L));
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder((-2818L), (-1020L));
      range_Builder0.expandBegin((-2818L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1487931944695373
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      range0.getBegin();
      Range.of(2147483647L);
      String string0 = "r";
      range0.split(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("IC6?'9<mzvW_^UT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse IC6?'9<mzvW_^UT into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.528828714116743
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.spliterator();
      List<Range> list0 = range0.split(4294967295L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2010078904160726
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long(3675L);
      Long long1 = new Long((-1L));
      Long.getLong("+!nFr9&bxOun", long1);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long2);
      
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483647L);
      range_Builder0.expandBegin(3675L);
      Range range1 = range_Builder0.build();
      range_Builder0.shift(0L);
      range_Builder0.contractEnd((-1454L));
      boolean boolean0 = range1.endsBefore(range0);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5464733219696476
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long(3675L);
      Long long1 = new Long((-1L));
      Long.getLong("+!nFr9&bxOun", long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(3675L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(range_CoordinateSystem0, 3675L, 4294967295L);
      range0.complement(range1);
      range_Builder0.shift(0L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-1454L));
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9560600543118882
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(1799L);
      Range range1 = Range.ofLength(1799L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(1799L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range3 = Range.of(1799L);
      range2.equals(range3);
      long long1 = range0.getBegin();
      assertEquals(1799L, long1);
      assertFalse(range0.equals((Object)range1));
      assertSame(range0, range3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.798517424614293
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Long long0 = new Long(3667L);
      Long long1 = new Long((-1L));
      Long.getLong("+!nFr9&bxOun", long1);
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      range_Builder0.expandBegin(3667L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(3667L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.of(0L);
      boolean boolean0 = range0.endsBefore(range2);
      assertTrue(boolean0);
      
      Range range3 = Range.of(0L, 9223372036854775681L);
      assertFalse(range3.isEmpty());
      
      Range.ofLength(2147483647L);
      long long2 = range2.getBegin();
      assertEquals(0L, long2);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8800581058804617
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean1 = range0.equals("number of entries must be <= Integer.MAX_VALUE");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.635975261550141
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(0L);
      range0.complement(range1);
      Range range2 = Range.of(1920L);
      range2.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 1920L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.32147771836471
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 0L);
      assertFalse(range2.isEmpty());
      
      long long0 = new Long((-1L));
      long long1 = range0.getLength();
      assertEquals(0L, long1);
      
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long2);
      
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.460368071882982
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.of(790L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1993L);
      range_Builder0.contractBegin((-1L));
      Range range1 = Range.of(1993L);
      Range range2 = Range.of(492L, 492L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      range_Builder1.build();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range2.toString(range_CoordinateSystem0);
      assertEquals("[ 493 .. 493 ]/RB", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1674450115736117
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be <= Integer.MAX_VALUE into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = (-899L);
      long long1 = 311L;
      Range range0 = Range.of((-899L), 311L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.32147771836471
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.of(0L, 0L);
      Range range0 = Range.ofLength(0L);
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be <= Integer.MAX_VALUE into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.010538833429766
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775807L, long0);
      
      Range range1 = Range.of(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      long long1 = range1.getLength();
      assertEquals(1L, long1);
      
      range1.equals(list0);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.329688104828603
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.ofLength(0L);
      range1.equals(range0);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), 0L);
      boolean boolean1 = range0.equals(range2);
      assertFalse(range2.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.639784161042711
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.intersects(range0);
      range0.forEach(consumer0);
      Range range2 = Range.of(0L);
      range0.complement(range1);
      Range.of(1920L);
      range2.getLength();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-2224L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4105783044730833
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long(3675L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long1);
      
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2454L), 3675L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.205953188271386
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 3065L, 9223372036854773888L);
      Range range0 = Range.of(9223372036854773888L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4013229622423675
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of((-2801L));
      Range range1 = Range.of((-2801L));
      range0.intersection(range1);
      Range.of((-2801L), 2086L);
      Range.of((-9223372036854775808L));
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.338442491084951
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), 0L);
      assertFalse(range2.isEmpty());
      
      boolean boolean2 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertNotSame(range0, range2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4627752983507234
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.intersects(range0);
      range0.forEach(consumer0);
      range0.complement(range0);
      Range.of(1920L);
      range0.getLength();
      Object object0 = new Object();
      range0.equals(range0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of(382L);
      range0.equals((Object) null);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.992196960885483
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.ofLength(2447L);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2447L, (-151L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.395297153370481
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long(3675L);
      Long long1 = new Long((-1L));
      Long.getLong("+!nFr9&bxOun");
      Long.getLong("+!nFr9&bxOun", long1);
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.contractBegin((-1802L));
      Range range1 = range_Builder0.build();
      range_Builder0.shift(0L);
      range_Builder0.contractEnd((-1454L));
      range1.endsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.932712267596788
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(790L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1928924683333046
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long(3675L);
      Long long1 = new Long((-1L));
      Long.getLong("+!nFr9&bxOun");
      Long.getLong("+!nFr9&bxOun", long1);
      boolean boolean0 = range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long2);
      
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.contractBegin((-1802L));
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.283901538664505
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Long.getLong(":");
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(0L, long1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.499265546164158
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.of(790L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1993L);
      range_Builder0.contractBegin((-1L));
      range0.getBegin();
      Range range1 = Range.of(1993L);
      Range range2 = Range.of(492L, 492L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      range1.equals(object0);
      Range range3 = range_Builder1.build();
      boolean boolean0 = range3.intersects(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range2.toString(range_CoordinateSystem0);
      assertEquals("[ 493 .. 493 ]/RB", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4627752983507234
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(790L);
      range_Builder0.expandEnd(1993L);
      range_Builder0.contractBegin((-1L));
      long long0 = range0.getBegin();
      Range range2 = Range.of(1993L);
      Range.of((-1L), (-1L));
      long long1 = range0.getLength();
      assertTrue(long1 == long0);
      
      boolean boolean0 = range2.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1330252472126645
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.of((-3673L));
      Range range0 = Range.ofLength(4294967294L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0428454878165434
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.of(790L);
      // Undeclared exception!
      try { 
        Range.of(790L, (-9223372036854775779L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 790, -9223372036854775779 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.229118808315411
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775807L, long0);
      
      Range range1 = Range.ofLength(9223372036854775807L);
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9555334347432667
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775807L, long0);
      
      List<Range> list0 = range0.split(2147483625L);
      assertTrue(list0.contains(range0));
      
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5502500180019503
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-32768L));
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-697L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -697 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.830713403754631
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(1L);
      Long long0 = new Long((-1019L));
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.044820482464577
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = Range.of(1037L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.8712010109078947
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.of((-1L), 2147483647L);
      Range range0 = Range.of(2147483647L);
      Range.of(1044L);
      Range range1 = Range.ofLength(2147483647L);
      range0.getLength();
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      range0.complement(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("}#$5g8otx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.}#$5g8otx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.289730732321166
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(9223372036854775807L);
      range0.complement(range1);
      range1.endsBefore(range0);
      long long0 = (-9223372036854775808L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.93706654550099
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of(1037L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }
}
