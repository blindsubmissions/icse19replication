/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:23:30 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ .;Vlg;aJ:Vc#!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm1.matches(jSTerm2, (JSSubstitution) null);
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&L<*n:$A'lInR2GOW");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 667;
      JSJshopVars.plus = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.ensureCapacity(0);
      JSJshopVars.flagLevel = 0;
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("2n6");
      jSTerm0.makeEval(true);
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(332);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.635743495231497
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8711604142318066
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      stringReader0.read();
      streamTokenizer0.ordinaryChars(274, 388);
      streamTokenizer0.parseNumbers();
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.isVariable();
      JSJshopVars.leftBrac = 32;
      jSTerm0.makeConstant();
      jSTerm0.makeConstant();
      JSJshopVars.backquote = (-348);
      jSTerm0.makeFunction();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      CharBuffer charBuffer0 = CharBuffer.allocate(274);
      stringReader0.read(charBuffer0);
      jSTerm0.makeFunction();
      jSTerm0.listIterator();
      jSTerm0.isConstant();
      jSTerm0.makeConstant();
      jSTerm0.print();
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 667;
      JSJshopVars.plus = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.ensureCapacity(0);
      JSJshopVars.flagLevel = 0;
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("2n6");
      jSTerm0.makeEval(true);
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ .;Vlg;aJ:Vc#!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) "ti@ .;Vlg;aJ:Vc#!");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals("[[ti], ti@ .;Vlg;aJ:Vc#!]", jSSubstitution0.toString());
      
      jSTerm0.toStr();
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.425479708432719
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ .;Vlg;aJ:Vc#!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity(757);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isFunction();
      StringReader stringReader1 = new StringReader("2n6");
      jSTerm0.makeEval(true);
      StringReader stringReader2 = new StringReader("4ha)O6.1PNtPq~3A-");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.commentChar((-2));
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      jSTerm1.print();
      jSTerm2.print();
      assertEquals(41, streamTokenizer1.ttype);
      
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.isGround();
      jSTerm0.toStr();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5070264355574188
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ d;Vlg;aJ:Vc#!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity(757);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isFunction();
      StringReader stringReader1 = new StringReader("2n6");
      jSTerm0.makeEval(true);
      StringReader stringReader2 = new StringReader("4ha)O6.1PNtPq~3A-");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.commentChar((-2));
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      jSTerm1.print();
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm2.toStr();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4851442132890713
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ .;Vlg;aJ:Vc#!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity(757);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isFunction();
      StringReader stringReader1 = new StringReader("2n6");
      jSTerm0.makeEval(true);
      StringReader stringReader2 = new StringReader("4ha)O6.1PNtPq~3A-");
      streamTokenizer0.wordChars(757, 757);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.commentChar((-2));
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      jSTerm1.print();
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm3.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%k\"FOnY?h.@@\"N=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2686052856349663
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm3, (JSSubstitution) null);
      StringReader stringReader0 = new StringReader("'Y%X#6I^K{:ZC,Ym");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm2.toStr();
      streamTokenizer0.wordChars(1, 44);
      jSTerm2.standardizerTerm();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm3, (JSSubstitution) null);
      StringReader stringReader0 = new StringReader("'Y%X#6I^K{:ZC,Ym");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm2.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      String string0 = "\\'Y%X#6I^K{:ZC,Ym";
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7721393884375287
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ .;fvlg;aJ:Vc#!");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("ti@ .;fvlg;aJ:Vc#!");
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader("*i{9P;V4Uz>l");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isConstant());
      
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(jSTerm2.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.893788232391138
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      Object object1 = new Object();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.retainAll(jSSubstitution1);
      StringReader stringReader0 = new StringReader("8L<9)I|DzMBM!tHE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSTerm1);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.setSize(610);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9254081650860662
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tSOo*p-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement("nil");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.addAll((Collection) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("'Y%X#6I^K{:ZC,Ym");
      StringReader stringReader2 = new StringReader("#k>$7#p");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      jSSubstitution0.add((Object) "nil");
      jSTerm0.matches(jSTerm1);
      assertEquals("[%%%, nil]", jSTerm0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?2Abds`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.41428305408353
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      StringReader stringReader1 = new StringReader("2n6");
      StringReader stringReader2 = new StringReader("4ha)O6.1PNtPq~3A-");
      streamTokenizer0.wordChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.standardizerTerm();
      jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      StringReader stringReader0 = new StringReader("('}zh}_9#");
      StringReader stringReader1 = new StringReader("4ha)O6.1PNtPq~3A-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(123, 1809);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(1809);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.569050799276754
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      StringReader stringReader1 = new StringReader("2n6");
      StringReader stringReader2 = new StringReader("4ha)O6.1PNtPq~3A-");
      streamTokenizer0.wordChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.commentChar((-2));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      jSTerm0.print();
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm3);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSTerm jSTerm4 = jSTerm1.call();
      jSTerm1.isGround();
      jSTerm0.cloneT();
      jSTerm3.standardizerTerm();
      jSTerm4.print();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm5.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm6.equals((Object)jSTerm1));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ .;fvlg;aJ:Vc#!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement("ti@ .;fvlg;aJ:Vc#!");
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.cloneT();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.667781365796001
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("2n6");
      StringReader stringReader2 = new StringReader("4ha)O6.1PNtPq~3A-");
      streamTokenizer0.wordChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.commentChar((-2));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      jSTerm0.print();
      jSTerm1.print();
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm2.addAll((Collection) jSTerm3);
      jSTerm2.call();
      jSTerm0.isGround();
      jSTerm1.cloneT();
      jSSubstitution0.print();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm0.print();
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      jSTerm5.matches(jSTerm4, jSSubstitution0);
      jSTerm5.matches(jSTerm1);
      System.setCurrentTimeMillis(32);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.154783153373369
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      stringReader0.ready();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.488836058389382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      StringReader stringReader0 = new StringReader("b(T[paL)4(nA;)~J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-2));
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      jSTerm2.print();
      jSTerm2.print();
      stringReader0.read();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.equals(jSTerm2);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm5.addAll((Collection) jSTerm0);
      jSTerm4.call();
      jSTerm2.isGround();
      jSTerm4.cloneT();
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm6.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1722676908403225
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ .;fvlg;aJ:Vc#!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement("ti@ .;fvlg;aJ:Vc#!");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      jSTerm0.removeIf(predicate0);
      jSTerm0.equals(jSTerm2);
      jSTerm0.call();
      jSTerm1.isGround();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      StringReader stringReader1 = new StringReader("2n6");
      StringReader stringReader2 = new StringReader("4ha)O6.1PNtPq~3A-");
      streamTokenizer0.wordChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.commentChar(3687);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      jSTerm1.print();
      jSTerm1.print();
      Object object0 = new Object();
      jSTerm0.addElement("2n6");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4211783971411
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2n6");
      StringReader stringReader1 = new StringReader("4ha)O6.1PNtPq~3A-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSTerm1);
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = jSTerm0.call();
      jSSubstitution0.print();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm3, jSSubstitution0);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertNotSame(jSTerm4, jSTerm3);
      assertFalse(jSSubstitution1.fail());
      
      System.setCurrentTimeMillis(4071L);
      jSTerm2.print();
      System.setCurrentTimeMillis(1L);
      boolean boolean0 = jSTerm2.isGround();
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5792331346113393
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2n6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("JSPredicateForm");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.call();
      jSTerm0.isGround();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.22371807606583377
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution0 = null;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("(umqwnv(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ti@ .;fvlg;aJ:Vc#!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Object object0 = new Object();
      jSTerm0.addElement("ti@ .;fvlg;aJ:Vc#!");
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSSubstitution2.add(object0);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm1.matches(jSTerm3, jSSubstitution2);
      System.setCurrentTimeMillis(4071L);
      jSTerm0.print();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
