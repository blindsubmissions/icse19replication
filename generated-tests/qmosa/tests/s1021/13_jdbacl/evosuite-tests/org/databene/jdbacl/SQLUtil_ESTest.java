/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:44:51 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.apache.derby.iapi.db.Database;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.compile.DeleteNode;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.raw.xact.GlobalXactId;
import org.apache.derby.impl.store.raw.xact.TransactionTable;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.field.TypeConvertionException;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = " name=";
      SQLUtil.mutatesStructure(" name=");
      DBCatalog dBCatalog0 = new DBCatalog("DAY_OF_WEEK");
      String string1 = " NOT";
      dBCatalog0.getSchema(" NOT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DAY_OF_WEEK", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint(" name=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("?e80l@iKfH<?");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("4S6", "4S6", versionNumber0);
      defaultDatabase0.getTable("?e80l@iKfH<?", false);
      DBDataType dBDataType0 = DBDataType.getInstance(1128, "?e80l@iKfH<?");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.sum((-1216), (-1216));
      Integer integer1 = new Integer(1128);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" /* ", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("ci[", true, "?E80L@IKFH<?(2,1128)", " /* ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("42X88");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "42X88";
      stringArray0[1] = "#z'__q8*t@o7#";
      stringArray0[2] = "42X88";
      stringArray0[3] = "42X88";
      stringArray0[4] = "42X88";
      SQLUtil.innerJoin("42X88", stringArray0, (String) null, "42X88", stringArray0);
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      SQLUtil.isDDL("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.isDML(" NULL");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S/h";
      SQLUtil.innerJoin("S/h", stringArray0, " NULL", " NULL", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("pJHN-c?3{Zp");
      StringBuilder stringBuilder1 = stringBuilder0.append(0L);
      float float0 = 1.0F;
      StringBuilder stringBuilder2 = stringBuilder1.append(1.0F);
      int int0 = 231;
      stringBuilder0.append(0L);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(231, (CharSequence) stringBuilder1, 231, 231);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 231
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "kQp7r";
      stringArray0[2] = "(s!gM";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "line.separator";
      stringArray0[6] = "";
      stringArray0[7] = "P!6eg0c$@o";
      stringArray0[8] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.removeComments("kQp7r");
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[2];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVARArray0[0] = xSQLVAR0;
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVARArray0[1] = xSQLVAR1;
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FBResultSet fBResultSet0 = null;
      try {
        fBResultSet0 = new FBResultSet(xSQLVARArray0, constraintDescriptorList0);
        fail("Expecting exception: TypeConvertionException");
      
      } catch(Throwable e) {
         //
         // SQL type for this field is not yet supported.
         //
         verifyException("org.firebirdsql.jdbc.field.FBField", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "w{YJfT*q", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string1 = "replication.slave.mode";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", dBTable0, 8, "replication.slave.mode");
      defaultDBColumn0.setNullable(true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      dBUniqueIndex0.isIdentical(dBTable0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0488828279013442
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("0QuwWiV=fvi`(", (String[]) null, "0QuwWiV=fvi`(", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "^^vV";
      stringArray0[2] = "SELECT * FROM ";
      stringArray0[3] = "SELECT * FROM ";
      stringArray0[4] = "^^vV";
      stringArray0[5] = "^^vV";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^^vV", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SELECT * FROM ", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", false, dBTable0, stringArray0, dBTable0, stringArray0);
      SQLUtil.substituteMarkers("SELECT * FROM ", "SELECT * FROM ", dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT \"SELECT * FROM \" FOREIGN KEY (SELECT * FROM , ^^vV, SELECT * FROM , SELECT * FROM , ^^vV, ^^vV) REFERENCES null(SELECT * FROM , ^^vV, SELECT * FROM , SELECT * FROM , ^^vV, ^^vV)");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("t=Hj?JRQ#}c$U,n[8w2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 't=Hj?JRQ#}c$U,n[8w2' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      SQLUtil.isDDL("");
      String string1 = "resultSetHoldability";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "resultSetHoldability";
      stringArray0[1] = "resultSetHoldability";
      String string2 = "(r@f";
      SQLUtil.leftJoin("resultSetHoldability", stringArray0, "(r@f", "resultSetHoldability", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string3 = "J ";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("J ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?ed", dBSchema0);
      dBSchema0.removeTable(defaultDBTable0);
      DBCatalog dBCatalog1 = defaultDBTable0.getCatalog();
      dBCatalog1.getSchema("resultSetHoldability");
      SQLUtil.typeAndName(dBCatalog1);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getTable("");
      int int0 = 1463;
      DBDataType dBDataType0 = DBDataType.getInstance(1463, "java.lang.Object@95b0183");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("java.lang.Object@95b0183", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = "c)}S=G8";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c)}S=G8");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getTable("");
      Integer.sum(904, (-3386));
      Integer integer0 = new Integer((-2482));
      DBDataType dBDataType0 = DBDataType.getInstance((-2250), "PRIMARY KEY ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index7q0qolfy96.xcuog/[", (DBTable) null, dBDataType0, integer0, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, "update", "update");
      SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec1);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("CONSTRAINT  ", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      StringBuilder stringBuilder4 = stringBuilder3.append((long) (-2482));
      StringBuilder stringBuilder5 = stringBuilder4.append(0.0);
      StringBuilder stringBuilder6 = stringBuilder5.append((-1.0F));
      NameSpec nameSpec2 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder6, nameSpec2);
      assertEquals("  TNIARTSNOC dna   TNIARTSNOC-24820.0-1.0CONSTRAINT  ", stringBuilder1.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("//");
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "upper";
      SQLUtil.isDML("upper");
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "RDB$DB_KEY";
      stringArray0[1] = "upper";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., ., ., ., ., ., ., ., .", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "(r@f";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "resultSetHoldability";
      SQLUtil.leftJoin((String) null, stringArray0, "resultSetHoldability", "update-", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("?ed", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ycy.nk", dBSchema0);
      DBCatalog dBCatalog1 = new DBCatalog("update-");
      DBSchema dBSchema1 = new DBSchema((String) null);
      SQLUtil.typeAndName(dBCatalog1);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("DATE", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " on ", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" on ", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, " on ", true, (String[]) null);
      SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      SQLUtil.normalize("", true);
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "xZ`Ld@,~?BVep4<d(");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      SQLUtil.addOptionalCondition("xZ`Ld@,~?BVep4<d(", stringBuilder2);
      assertEquals("eslaf(d<4peVB?~,@dL`Zx or xZ`Ld@,~?BVep4<d(", stringBuilder2.toString());
      assertEquals("eslaf(d<4peVB?~,@dL`Zx or xZ`Ld@,~?BVep4<d(", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("+p~`t:L-IHys");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+p~`t:L-IHys", dBSchema0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcConnectionPool.create("+p~`t:L-IHys", "@RMGC)8\"fK", "?sSE-JS<mD$a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?sSE-JS<mD$a");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.isDML("@RMGC)8\"fK");
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "select into";
      stringArray0[1] = "vue`jj";
      stringArray0[2] = "?sSE-JS<mD$a";
      stringArray0[3] = "4@CO9*";
      stringArray0[4] = "+p~`t:L-IHys";
      stringArray0[5] = "4@CO9*";
      stringArray0[6] = "4@CO9*";
      stringArray0[7] = "select into";
      stringArray0[8] = "@RMGC)8\"fK";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "+p~`t:L-IHys", false, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec1);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("+p~`t:L-IHys", defaultDBTable0.getName());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.removeComments("0QuwWiV=fvi`(");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0QuwWiV=fvi`(");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "J=)gNI.xODLw";
      stringArray0[1] = "";
      stringArray0[2] = "0QuwWiV=fvi`(";
      stringArray0[3] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcConnectionPool.create("java.lang.Object@7059a486", "java.lang.Object@7059a486", "org.databene.jdbacl.SQLUtil");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("truncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isDML("java.lang.Object@7059a486");
      assertFalse(boolean0);
      
      Integer integer0 = RawTransaction.COMMIT;
      mockPrintWriter0.print((-1.0E12));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4CO9*";
      stringArray0[1] = "vue`jj";
      stringArray0[2] = "6Z\"4:L";
      stringArray0[3] = "6Z\"4:L";
      mockPrintWriter0.println(0L);
      stringArray0[4] = "java.lang.Object@7059a486";
      stringArray0[5] = "vue`jj";
      stringArray0[6] = "4CO9*";
      stringArray0[7] = "org.databene.jdbacl.SQLUtil";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "6Z\"4:L", false, stringArray0);
      String string0 = dBUniqueConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 6Z\"4:L ", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("r]gYO>yEV<1w?./|h", false);
      SQLUtil.removeComments(":!pT7vlO4H");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      String string0 = SQLUtil.normalize("Nk0ljJ*[e;Az%", false);
      assertEquals("Nk0ljJ * [ e ; Az %", string0);
      
      String string1 = SQLUtil.normalize(":!pT7vlO4H", true);
      assertEquals(": ! pT7vlO  4H", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("Pb.-Wx)73#-", dBCatalog0);
      SQLUtil.typeAndName((DBObject) null);
      String string0 = SQLUtil.normalize(" join ", false);
      assertEquals("join", string0);
      
      boolean boolean0 = SQLUtil.isDML("/");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      Integer.sum(904, (-3386));
      Integer integer0 = new Integer((-2482));
      DBDataType.getInstance((-2275), "PRIMARY KEY ");
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, "update", "update");
      SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec1);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("CONSTRAINT  ", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      StringBuilder stringBuilder4 = stringBuilder3.append((long) (-2482));
      StringBuilder stringBuilder5 = stringBuilder4.append(0.0);
      StringBuilder stringBuilder6 = stringBuilder5.append((-1.0F));
      int int0 = 972;
      String string0 = "W]If.m'tq{-";
      // Undeclared exception!
      try { 
        stringBuilder6.replace(972, 65, "W]If.m'tq{-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("_&n`=", true);
      assertEquals("_ & n ` =", string0);
      
      String string1 = SQLUtil.normalize("e0Ik'Gk?u#f!sHGxW", false);
      assertEquals("e0Ik 'Gk?u#f!sHGxW'", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      JdbcConnectionPool.create("java.lang.Object@3d09e672", "java.lang.Object@3d09e672", "org.databene.jdbacl.SQLUtil");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("truncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDML("java.lang.Object@3d09e672");
      Integer integer0 = RawTransaction.COMMIT;
      mockPrintWriter0.print((-1.0E12));
      String[] stringArray0 = new String[8];
      DBSchema dBSchema0 = new DBSchema("substring");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("fFcH<(;");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("O#\"l^:KM_X!2g`*#u");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "/*");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("O#\"l^:KM_X!2g`*#u/*CONSTRAINT /* ", stringBuilder1.toString());
      assertEquals("O#\"l^:KM_X!2g`*#u/*CONSTRAINT /* ", stringBuilder0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      constraintDescriptorList0.forEach(consumer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eXecutename=", (DBTable) null, (-1908), "eXecutename=");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      assertEquals("eXecutename=", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("eXecutename=");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("select intojava.lang.object@6ef0add7");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      SQLUtil.isDML(")h");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, ")h", false, "alter materialized view");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("+p~`t:L-IHys");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+p~`t:L-IHys", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1425, "+p~`t:L-IHys");
      Integer integer0 = new Integer(1425);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setOwner(defaultDBTable0);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer1, integer2);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" +P~`T:L-IHYS(1425,2) NULL", string0);
      
      SQLUtil.removeComments("S$yX*AA1ji@");
      String string1 = SQLUtil.normalize(" +P~`T:L-IHYS(1425,2) NULL", false);
      assertEquals("+ P ~ ` T  : L - IH  YS (1425, 2) NULL", string1);
      
      boolean boolean0 = SQLUtil.isDDL("select");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7Ad";
      stringArray0[1] = "\u0001\u00BD";
      stringArray0[2] = "S$yX*AA1ji@";
      stringArray0[3] = "S$yX*AA1ji@";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("\u0001\u00BD", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(1425);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dynamicByteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('/');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("delete, delete, delete, delete", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      constraintDescriptorList0.forEach(consumer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eXecutename=", (DBTable) null, (-1916), "eXecutename=");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      assertEquals("eXecutename=", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("eXecutename=");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("select intojava.lang.object@6ef0add7");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0316063850792587
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.isDDL("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("R:ZV:7N=J>AC!dY", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      stringBuilder2.insert(13, (long) 13);
      assertEquals("R:ZV:7N=J>AC!13dY", stringBuilder2.toString());
      
      DBDataType.getInstance(930, "");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "SyscolumnsIdentifier";
      stringArray1[2] = " = ";
      stringArray1[3] = "SyscolumnsIdentifier";
      SQLUtil.leftJoin("", stringArray1, "R:ZV:7N=J>AC!dY", "rename", stringArray1);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("FOREIGN KEY () REFERENCES (, , , , , , )", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      Integer integer0 = RawTransaction.COMMIT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("4CO9*");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      mockPrintWriter0.print((-1.0E12));
      mockPrintWriter0.println((long) 243);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "4CO9*";
      stringArray0[2] = "6Z\"4:L";
      stringArray0[3] = "6Z\"4:L";
      stringArray0[4] = "vue`jj";
      stringArray0[5] = "vue`jj";
      stringArray0[6] = "4CO9*";
      stringArray0[7] = "vue`jj";
      stringArray0[8] = "vue`jj";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("UNIQUE (, 4CO9*, 6Z\"4:L, 6Z\"4:L, vue`jj, vue`jj, 4CO9*, vue`jj, vue`jj)", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      NameSpec nameSpec2 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec2);
      assertEquals("UNIQUE (, 4CO9*, 6Z\"4:L, 6Z\"4:L, vue`jj, vue`jj, 4CO9*, vue`jj, vue`jj)", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9273921261392744
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.normalize("org.apache.derby.impl.sql.compile.ActivationClassBuilder", false);
      SQLUtil.normalize("selectexecutename=", false);
      SQLUtil.mutatesDataOrStructure("truncateexecutename=");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint(",#qvli?sD~", false, ",#qvli?sD~", "selectexecutename=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "";
      SQLUtil.isDDL("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = null;
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      String string1 = "^c'`_(N:+gcl#";
      SQLUtil.mutatesDataOrStructure("^c'`_(N:+gcl#");
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      int int0 = (-2735);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("ly0q,QjOPsy=U9iM", defaultDBTable0, (-2735), "^c'`_(N:+gcl#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ^c'`_(N:+gcl#
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9532710147058912
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      DBSchema dBSchema0 = new DBSchema("\"M");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String string0 = SQLUtil.normalize("\"M", false);
      assertEquals("\"M\"", string0);
      
      String string1 = SQLUtil.join("", "", stringArray0, "\"M", "W8%p*n G4S]kA", stringArray0);
      assertEquals("\"M as W8%p*n G4S]kA on . = W8%p*n G4S]kA. and .null = W8%p*n G4S]kA.null and .null = W8%p*n G4S]kA.null and .null = W8%p*n G4S]kA.null and .null = W8%p*n G4S]kA.null and .null = W8%p*n G4S]kA.null and .null = W8%p*n G4S]kA.null and .null = W8%p*n G4S]kA.null and .null = W8%p*n G4S]kA.null", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.isDDL("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("HyR{eOllYyJmtM", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      stringBuilder2.insert(13, (long) 13);
      stringBuilder0.append((CharSequence) stringBuilder2);
      assertEquals("HyR{eOllYyJmt13MHyR{eOllYyJmt13M", stringBuilder2.toString());
      
      SQLUtil.normalize("alter session-", false);
      Integer.compareUnsigned((-1290), (-2019));
      Integer integer0 = RawTransaction.COMMIT;
      Integer.getInteger("", integer0);
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "alter session-");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("HyR{eOllYyJmtM", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session -");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      DBSchema dBSchema0 = new DBSchema("truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'", dBSchema0);
      SQLUtil.normalize("truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'", true);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "truncate 'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      stringArray0[1] = "truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'.truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      stringArray0[2] = "truncate 'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      stringArray0[3] = "truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      stringArray0[4] = "truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      stringArray0[5] = "truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      stringArray0[6] = "truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      stringArray0[7] = "truncate'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("truncate 'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'", true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "truncate 'org.apache.derby.impl.services.reflect.loadedgeneratedclass _&n`=(0,0) null'");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-552));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -552
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      Character character0 = new Character('?');
      Character.lowSurrogate(45);
      SQLUtil.renderValue(character0);
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S/h";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      Integer integer0 = new Integer((-3386));
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBTable0.getColumnNames();
      DBDataType.getInstance((-3386), "S/h");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("09Jo(nGX");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1526879182711904
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S/h";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, (-3386), "alter tablenull s/h(0,1) null");
      DeleteNode deleteNode0 = new DeleteNode();
      TableDescriptor tableDescriptor0 = deleteNode0.targetTableDescriptor;
      DBDataType dBDataType0 = DBDataType.getInstance(3733, "S/h");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer(2);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" NULL", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn1);
      StringBuilder stringBuilder0 = new StringBuilder("execute");
      stringBuilder0.insert(1, 2);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 'z');
      stringBuilder1.insert(1, 1492L);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder1);
      SQLUtil.mutatesDataOrStructure("selectexecutzname=");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer((-3386));
      Integer integer1 = RawTransaction.COMMIT;
      TimeZone.getAvailableIDs();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("(ouf93x", false, "(ouf93x", "getRef");
      dBCheckConstraint0.setTable(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "getRef");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("getRefCONSTRAINT (ouf93x ", stringBuilder0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[1] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("getRef", false, "3,HfKXS?g", "mozilla");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint1, nameSpec0);
      assertEquals("CONSTRAINT getRef CHECK mozilla", string0);
  }
}
