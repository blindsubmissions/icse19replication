/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:25:00 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.toXML("");
      advancedSettings0.setMaxThreadsForNioWrite(527);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker("\"5jL31?&b*T3ug8");
      advancedSettings0.setQSObjectPoolMaker("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setMaxThreadsForNioWrite((-3416));
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger((-3416));
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketReceiveBufferSize(527);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesBandwidth(2147);
      advancedSettings0.setPerformancePreferencesBandwidth(2147);
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setBacklog(65536);
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientIdentifier("Ww");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientIdentifier();
      assertEquals(2147, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketTrafficClass("}]%\"\"T");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.setClientIdentifier("}]%\"\"T");
      advancedSettings0.setClientSocketSendBufferSize((-3483));
      advancedSettings0.setMaxThreadsForNioWrite(418);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setBacklog(418);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setDebugNonBlockingMode(false);
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("}]%\"\"T", advancedSettings0.getClientIdentifier());
      assertEquals((-3483), int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.233183484380926
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setSocketLinger((-3757));
      advancedSettings0.setBacklog((-3757));
      boolean boolean0 = true;
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("");
      advancedSettings0.setSocketLinger(353);
      advancedSettings0.setBacklog(1860);
      advancedSettings0.setQSObjectPoolMaker("UCC76");
      advancedSettings0.setClientIdentifier("\"x@}zNXyP !");
      advancedSettings0.toXML("");
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>1860</backlog>\n\t<socket-linger>353</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>\"x@}zNXyP !</client-identifier>\n\t<qsobject-pool-maker>UCC76</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>-1</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>1860</backlog>
         // \t<socket-linger>353</socket-linger>
         // \t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-identifier>\"x@}zNXyP !</client-identifier>
         // \t<qsobject-pool-maker>UCC76</qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>-1</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.131333581636701
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("zz~)&w# Z");
      advancedSettings0.toXML("zz~)&w# Z");
      advancedSettings0.setClientSocketSendBufferSize(2135);
      advancedSettings0.setDebugNonBlockingMode(false);
      String string0 = "";
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setBacklog((-3225));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("iroy$}knJ:A=syn");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // iroy$}knJ:A=syn
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.14180415921323
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize(47);
      advancedSettings0.toXML("5}J");
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setMaxThreadsForNioWrite((-2026));
      advancedSettings0.setClientSocketTrafficClass("5}J<advanced-settings>\n5}J\t<charset>ISO-8859-1</charset>\n5}J\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n5}J\t<byte-buffer-size>47</byte-buffer-size>\n5}J\t<backlog>0</backlog>\n5}J\t<socket-linger>-1</socket-linger>\n5}J\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n5}J\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n5}J\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n5}J\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n5}J\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n5}J\t<performance-preferences-latency>0</performance-preferences-latency>\n5}J\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n5}J\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n5}J</advanced-settings>\n");
      advancedSettings0.setClientIdentifier("[qq^d2j(q");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals("[qq^d2j(q", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.216424399889459
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("kCj5,DB([");
      advancedSettings0.setClientSocketSendBufferSize(782);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.toXML((String) null);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getBacklog();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<client-socket-receive-buffer-size>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<client-socket-receive-buffer-size>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1695));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML("Q7)");
      advancedSettings0.getClientSocketSendBufferSize();
      boolean boolean0 = true;
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<debug-non-blocking-mode>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<debug-non-blocking-mode>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5823063443139667
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("Qk$$@g_gNG=$a>NoF");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setCharset("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(2818);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-2539));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog((-2539));
      advancedSettings0.toXML("");
      advancedSettings0.setByteBufferSize((-2539));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-2539));
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(2714);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getBacklog();
      advancedSettings0.setBacklog(2472);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientIdentifier("\t<client-socket-tcp-no-delay>");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals("\t<client-socket-tcp-no-delay>", advancedSettings0.getClientIdentifier());
  }
}
