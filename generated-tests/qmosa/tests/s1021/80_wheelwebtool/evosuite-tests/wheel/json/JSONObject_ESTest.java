/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:00:26 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("+&?O9>P_]HAv", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optInt("y,=ogr^Ww'dsAi", 32);
      jSONObject0.optDouble("F3yl\"> ~n");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      jSONObject1.optLong("g+jr");
      stringArray0[3] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "[]";
      jSONObject2.put("wheel.json.JSONArray", 0);
      jSONObject2.names();
      jSONObject2.optString("[]", "[]");
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject2.accumulate("[]", object0);
      jSONObject3.optBoolean("", false);
      jSONObject2.names();
      jSONObject1.isNull("'q03^cOafkkEWw{q");
      JSONObject.testValidity("'q03^cOafkkEWw{q");
      try { 
        jSONObject2.getLong("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ">>I";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(">>I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of >>I
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X)#@";
      String string0 = "JSON does not allow non-finite numbers.";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optLong("X)#@", 531L);
      jSONObject0.optBoolean("X)#@", false);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      Boolean boolean0 = Boolean.valueOf("");
      linkedList1.add(boolean0);
      jSONObject0.put("", (Collection) linkedList1);
      JSONObject.valueToString(jSONObject0, 1973, 1973);
      JSONArray jSONArray0 = null;
      JSONObject jSONObject1 = jSONObject0.append("X)#@", "JSON does not allow non-finite numbers.");
      String string1 = "\\u";
      try { 
        jSONObject1.getString(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{";
      JSONObject jSONObject1 = jSONObject0.put("{", 2563.7214);
      Double double0 = new Double((-5436.026500239689));
      jSONObject1.putOpt("$ Q ex#=", double0);
      try { 
        jSONObject0.getJSONArray("0YU^FQbZF0o6p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0YU^FQbZF0o6p\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.getBoolean("W");
      jSONObject0.toString(0);
      Boolean.logicalOr(false, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("|3O'Q6Fh zZ6[F5", (Collection) linkedList0);
      jSONObject1.isNull("");
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      jSONObject0.remove("\r");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList2.add(integer0);
      linkedList1.addAll((Collection<? extends Integer>) linkedList2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.optInt(0, 0);
      JSONObject.testValidity(jSONArray0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.keys();
      jSONObject0.optBoolean("wheel.json.JSONObject@0000000001", true);
      jSONObject0.optString("\r", "wheel.json.JSONObject@0000000001");
      try { 
        jSONObject0.getJSONArray("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, 2099.169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7248301468410545
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.append("", object0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      long long0 = 0L;
      jSONObject0.optLong((String) null, 0L);
      jSONObject0.optJSONArray((String) null);
      double double0 = (-2610.5);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.994353691762369
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("![%3C=j^\" x:k*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"![%3C=j^\\\" x:k*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-1003));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      double double0 = jSONObject0.optDouble("TQ<iV,.>`");
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = jSONObject0.isNull("\b");
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "\b");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "AYY-mcx($88p>\\2}V";
      JSONObject jSONObject1 = jSONObject0.put("AYY-mcx($88p>\u0002}V", 900L);
      String string1 = "_5*xQC}?* 62}^o3BX";
      try { 
        jSONObject1.get("_5*xQC}?* 62}^o3BX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_5*xQC}?* 62}^o3BX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Short short0 = new Short((short) (-1023));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8464815432622113
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "false";
      stringArray0[1] = "false";
      stringArray0[2] = "false";
      stringArray0[3] = "false";
      stringArray0[4] = "false";
      stringArray0[5] = "Q<cCG-iDY-}a";
      stringArray0[6] = "false";
      stringArray0[7] = "false";
      JSONObject jSONObject0 = new JSONObject("false", stringArray0);
      Integer integer0 = new Integer(1155);
      Integer.sum((-1688), (-1688));
      jSONObject0.putOpt("false", integer0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1082500098300465
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "false";
      stringArray0[1] = "false";
      stringArray0[4] = "false";
      stringArray0[6] = "false";
      stringArray0[7] = "false";
      JSONObject jSONObject0 = new JSONObject("false", stringArray0);
      Integer integer0 = new Integer(1155);
      Integer.sum((-1688), (-1688));
      jSONObject0.putOpt("false", integer0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString();
      try { 
        jSONObject0.getBoolean("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9495936677167384
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("txrj?'/*J P:CG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"txrj?'/*J P:CG\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "false";
      stringArray0[1] = "false";
      stringArray0[2] = "false";
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("+!nFr9&bxOun", false);
      jSONObject0.optJSONObject("null");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4606175619274564
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      Long long0 = new Long((-1634L));
      Boolean boolean0 = new Boolean(false);
      BiFunction<Object, Boolean, Boolean> biFunction0 = (BiFunction<Object, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(long0, boolean0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.addAll((Collection<? extends Integer>) linkedList2);
      Boolean.logicalOr(false, false);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("|3O'Q6Fh zZ6[F5");
      jSONObject0.has("\r");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\r");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2416093938971566
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.getBoolean("W");
      jSONObject0.toString(0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optInt(1025, 0);
      Short short0 = new Short((short)262);
      JSONObject.testValidity(short0);
      JSONObject.valueToString("+EzKhOD9a{)C6");
      jSONObject0.keys();
      jSONObject0.optBoolean("W", true);
      jSONObject0.optString("JSONObject[", "\"java.lang.String@0000000006\"");
      try { 
        jSONObject0.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf("\b");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("hWj~803M^\"[P)Ge", (Collection) linkedList0);
      Float float0 = new Float(3115.49973082);
      JSONObject jSONObject2 = jSONObject1.append("+&?O9>P_]HAv", "\b");
      try { 
        jSONObject2.getJSONObject("hWj~803M^\"[P)Ge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hWj~803M^\\\"[P)Ge\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float float1 = new Float(0.0);
      jSONObject0.append("pa", float1);
      jSONObject0.optString("pa", "] is not a JSONArray.");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8891591637540215
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "equ";
      stringArray0[1] = "equ";
      stringArray0[2] = "equ";
      stringArray0[3] = "equ";
      stringArray0[4] = "equ";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('S');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "equ");
      jSONObject1.write(stringWriter2);
      assertEquals("Sequ{}", stringWriter2.toString());
      assertEquals("Sequ{}", stringWriter0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.22371807606583377
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject.quote("iscompare");
      JSONObject.quote("getgetBoolean");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.getBoolean("W");
      Boolean.logicalOr(false, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("|3O'Q6Fh zZ6[F5", (Collection) linkedList0);
      jSONObject1.isNull("|3O'Q6Fh zZ6[F5");
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.128788458548912
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-30733247));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("*wn)oH]a0GD@a", (Collection) linkedList0);
      jSONObject0.isNull("_`a\"$z3RK3+`MFJ");
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9499563821446464
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      StringWriter stringWriter0 = new StringWriter();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      
      stringWriter0.append('e');
      stringWriter0.append((CharSequence) "");
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean1 = jSONObject0.isNull((String) null);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
      
      Byte byte0 = new Byte((byte)4);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONObject0, (-30733247), (-30733247));
      assertEquals("{}", string0);
      
      Boolean.logicalOr(false, false);
      boolean boolean0 = jSONObject0.isNull("9:s_!gWKV)");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6185692086879166
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      String string0 = "A JSONArray text must start with '['";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      int int0 = 1491;
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      jSONObject1.optLong("g+jr");
      stringArray0[3] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      String string1 = "+EzKhOD9a{)C6";
      Object object1 = new Object();
      JSONObject.valueToString(object1);
      jSONObject0.keys();
      jSONObject2.optBoolean("g+jr", false);
      jSONObject1.optString((String) null, "eq");
      try { 
        jSONObject1.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3034884952192693
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.getBoolean("W");
      Boolean.logicalOr(false, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("|3O'Q6Fh zZ6[F5", (Collection) linkedList0);
      jSONObject1.isNull("|3O'Q6Fh zZ6[F5");
      JSONObject.getNames(jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.050819782997664
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.getBoolean("W");
      Boolean.logicalOr(false, true);
      jSONObject0.isNull((String) null);
      jSONObject0.toString(61, 99);
      jSONObject0.optDouble("W", (double) (-2282));
      Byte byte0 = new Byte((byte)123);
      String string0 = JSONObject.valueToString((Object) null);
      String string1 = JSONObject.valueToString("W");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3996281119286729
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 2563.7214);
      Double double0 = new Double((-5436.0));
      JSONObject jSONObject2 = new JSONObject(double0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject1.append("{", "$ Q ex#=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
