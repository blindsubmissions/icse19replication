/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:00:46 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "*T3ug80s{S";
      String string1 = "";
      NumberInput numberInput0 = new NumberInput(errorPage0, "*T3ug80s{S", "");
      errorPage0.getComponents();
      // Undeclared exception!
      try { 
        numberInput0.script();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Form form0 = new Form("label");
      Form form1 = form0.renderHint("label");
      String string0 = "el:";
      TextArea textArea0 = new TextArea(form1, "label", "el:");
      FormElement formElement0 = textArea0.value("label");
      String string1 = "$B]5k.}5`Vn1y";
      String string2 = null;
      // Undeclared exception!
      try { 
        form0.sub((Object) formElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "B-!u{YXAc$BW\"W>";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("B-!u{YXAc$BW\"W>");
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        xmlEntityRef0.abbr((Object) boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6987829895138011
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      String string1 = "sub";
      Checkbox checkbox0 = new Checkbox(form0, (String) null, "sub");
      FormElement formElement0 = checkbox0.value("sub");
      String string2 = ">09O0AO$ZS$;";
      Table table0 = null;
      try {
        table0 = new Table(formElement0, ">09O0AO$ZS$;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "W|pDV";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("W|pDV");
      // Undeclared exception!
      try { 
        xmlEntityRef0.small((Object) "W|pDV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "uW`|r@k<7?cci[lOT=", "@_&[;b)u@");
      Submit submit0 = new Submit(textArea0, ",oW)d", "fieldset");
      Image image0 = new Image(submit0, "uW`|r@k<7?cci[lOT=", "fieldset");
      errorPage0.dd((Object) image0);
      TableBlock tableBlock0 = new TableBlock(textArea0);
      TableBlock tableBlock1 = tableBlock0.renderHint("@_&[;b)u@");
      TableRow tableRow0 = tableBlock1.tr();
      Submit submit1 = new Submit(tableRow0, "GWqcb", "body");
      FormElement formElement0 = submit1.value("body");
      // Undeclared exception!
      try { 
        formElement0.tt((Object) "uW`|r@k<7?cci[lOT=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Component component0 = null;
      String string0 = "`oC";
      Checkbox checkbox0 = new Checkbox((Component) null, "`oC", "`oC");
      FormElement formElement0 = checkbox0.setFormElementName("`oC");
      Submit submit0 = new Submit(formElement0, "`oC", "HqsfY,_zTf4Rg");
      FormElement formElement1 = submit0.value("`oC");
      // Undeclared exception!
      try { 
        formElement1.pre((Object) formElement0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      FileInput fileInput0 = new FileInput(errorPage0, (String) null, (String) null);
      TableBlock tableBlock0 = new TableBlock(fileInput0, (String) null);
      TableBlock tableBlock1 = tableBlock0.renderHint((CharSequence) null);
      String string1 = "?q";
      String string2 = null;
      Checkbox checkbox0 = new Checkbox(tableBlock1, "?q", (String) null);
      FormElement formElement0 = checkbox0.setBinding((CharSequence) null);
      // Undeclared exception!
      try { 
        formElement0.placeholder("?q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "Cannot add a form element. No surrounding form found.";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Cannot add a form element. No surrounding form found.");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("Cannot add a form element. No surrounding form found.", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Form form0 = new Form("1Yme}',Dj;");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertEquals("1Yme}',Dj;", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      Submit submit0 = new Submit(form0, "1Yme}',Dj;", "ol");
      assertNotNull(submit0);
      assertFalse(form0._isBuilt());
      assertEquals("1Yme}',Dj;", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("ol", submit0.getComponentId());
      assertEquals("1Yme}',Dj;", submit0.getFormElementName());
      
      FormElement formElement0 = submit0.value("kbd");
      assertNotNull(formElement0);
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertFalse(form0._isBuilt());
      assertEquals("1Yme}',Dj;", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("ol", submit0.getComponentId());
      assertEquals("1Yme}',Dj;", submit0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("1Yme}',Dj;", formElement0.getFormElementName());
      assertEquals("ol", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      
      DynamicSelectModel dynamicSelectModel0 = submit0.selectModel();
      assertNotNull(dynamicSelectModel0);
      assertSame(submit0, formElement0);
      assertFalse(form0._isBuilt());
      assertEquals("1Yme}',Dj;", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("ol", submit0.getComponentId());
      assertEquals("1Yme}',Dj;", submit0.getFormElementName());
      
      ElExpression elExpression0 = new ElExpression("");
      assertNotNull(elExpression0);
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression1.getExpression());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.toString());
      
      RadioGroup radioGroup0 = null;
      try {
        radioGroup0 = new RadioGroup(formElement0, "kbd", "1Yme}',Dj;", dynamicSelectModel0, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = " is not allowed in output";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" is not allowed in output");
      assertNotNull(xmlEntityRef0);
      assertEquals(" is not allowed in output", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      String string1 = xmlEntityRef0.defaultTagName();
      assertNull(string1);
      assertEquals(" is not allowed in output", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.textarea((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0791512728828505
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      
      FileInput fileInput0 = new FileInput(errorPage0, (String) null, (String) null);
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertNull(fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      
      TableBlock tableBlock0 = new TableBlock(fileInput0, (String) null);
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertNull(fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      TableBlock tableBlock1 = tableBlock0.renderHint((CharSequence) null);
      assertNotNull(tableBlock1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertNull(fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      
      String string0 = null;
      Hidden hidden0 = new Hidden(fileInput0, (String) null, "code");
      assertNotNull(hidden0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertNull(fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("code", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertNull(hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      
      Map<String, Component> map0 = hidden0.getComponents();
      assertNotNull(map0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertNull(fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("code", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertNull(hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Form form0 = null;
      try {
        form0 = new Form(hidden0, "", (ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Form", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      String string0 = "*T3ug80s{S";
      String string1 = "";
      NumberInput numberInput0 = new NumberInput(errorPage0, "*T3ug80s{S", "");
      assertNotNull(numberInput0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("*T3ug80s{S", numberInput0.getFormElementName());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0._isGeneratedId());
      assertEquals("NumberInput_1", numberInput0.getComponentId());
      
      // Undeclared exception!
      try { 
        numberInput0.noscript();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = " is not allowed in output";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" is not allowed in output");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(" is not allowed in output", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      String string1 = xmlEntityRef0.defaultTagName();
      assertNull(string1);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(" is not allowed in output", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Component component0 = null;
      String string0 = "`oC";
      Checkbox checkbox0 = new Checkbox((Component) null, "`oC", "`oC");
      assertNotNull(checkbox0);
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("`oC", checkbox0.getFormElementName());
      assertEquals("`oC", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      
      FormElement formElement0 = checkbox0.setFormElementName("`oC");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("`oC", checkbox0.getFormElementName());
      assertEquals("`oC", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("`oC", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("`oC", formElement0.getComponentId());
      
      Submit submit0 = new Submit(formElement0, "`oC", "`oC");
      assertNotNull(submit0);
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("`oC", checkbox0.getFormElementName());
      assertEquals("`oC", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("`oC", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("`oC", formElement0.getComponentId());
      assertEquals("`oC", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("`oC", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isValid());
      
      // Undeclared exception!
      try { 
        submit0.numberInput("\"chdRG7", (CharSequence) "\"chdRG7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      
      String string0 = "http-equiv";
      String string1 = null;
      String string2 = "";
      ElExpression elExpression0 = new ElExpression("");
      assertNotNull(elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      
      String string3 = "Cannot add a form element. No surrounding form found.";
      DateInput dateInput0 = new DateInput(errorPage0, "Cannot add a form element. No surrounding form found.", "", "Cannot add a form element. No surrounding form found.");
      assertNotNull(dateInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      
      Label label0 = (Label)tableBlock0.cite((Object) dateInput0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.toString());
      assertEquals("", elExpression1.getExpression());
      
      String string4 = "JD]o08)mV";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        dateInput0.cite();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4985291746095726
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      
      ElExpression elExpression0 = new ElExpression("");
      assertNotNull(elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      
      DateInput dateInput0 = new DateInput(errorPage0, "Cannot add a form element. No surrounding form found.", "", "Cannot add a form element. No surrounding form found.");
      assertNotNull(dateInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      
      Label label0 = (Label)tableBlock0.cite((Object) dateInput0);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.getExpression());
      assertEquals("", elExpression1.toString());
      
      Table table0 = new Table(label0, "L1pD:VU[aIJb$*x");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      
      Block block0 = (Block)table0.kbd();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Form form0 = table0._getVisibleForm(true);
      assertNull(form0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      
      Table table1 = null;
      try {
        table1 = new Table((Component) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      ElExpression elExpression0 = new ElExpression("");
      assertNotNull(elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      
      DateInput dateInput0 = new DateInput(errorPage0, "Cannot add a form element. No surrounding form found.", "", "Cannot add a form element. No surrounding form found.");
      assertNotNull(dateInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      
      Label label0 = (Label)tableBlock0.cite((Object) dateInput0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.getExpression());
      assertEquals("", elExpression1.toString());
      
      String string0 = "JD]o08)mV";
      Table table0 = new Table(label0, "L1pD:VU[aIJb$*x");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      Block block0 = (Block)table0.kbd();
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      FileInput fileInput0 = new FileInput(table0, "http-equiv", "Cannot add a form element. No surrounding form found.");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("http-equiv", fileInput0.getFormElementName());
      assertEquals("Cannot add a form element. No surrounding form found.", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      
      String string1 = fileInput0.defaultTagName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("http-equiv", fileInput0.getFormElementName());
      assertEquals("Cannot add a form element. No surrounding form found.", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("input", string1);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotNull(errorPage1);
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      
      // Undeclared exception!
      try { 
        dateInput0.em();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Form form0 = new Form("-*XI<IV\"3:s)a^");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("-*XI<IV\"3:s)a^", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-*XI<IV\"3:s)a^";
      Form form1 = form0.addFormValidationRule("-*XI<IV\"3:s)a^", "-*XI<IV\"3:s)a^");
      assertNotNull(form1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("-*XI<IV\"3:s)a^", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("-*XI<IV\"3:s)a^", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      
      DynamicSelectModel dynamicSelectModel0 = form0.selectModel();
      assertNotNull(dynamicSelectModel0);
      assertSame(form0, form1);
      assertEquals("form", form0.defaultTagName());
      assertEquals("-*XI<IV\"3:s)a^", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value((String) null);
      assertNotNull(dynamicSelectModel1);
      assertSame(form0, form1);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("-*XI<IV\"3:s)a^", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.translator("incompatible class: ");
      assertNotNull(dynamicSelectModel2);
      assertSame(form0, form1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertEquals("form", form0.defaultTagName());
      assertEquals("-*XI<IV\"3:s)a^", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.translator("");
      assertNotNull(dynamicSelectModel3);
      assertSame(form0, form1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("-*XI<IV\"3:s)a^", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        form0.multiSelect("incompatible class: ", dynamicSelectModel3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      String string0 = "OG/[v>oo{";
      TextInput textInput0 = new TextInput(errorPage0, (String) null, "OG/[v>oo{");
      assertNotNull(textInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertNull(textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("OG/[v>oo{", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      
      String string1 = "acronym";
      TableBlock tableBlock0 = new TableBlock(textInput0, "acronym");
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertNull(textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("OG/[v>oo{", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("acronym", tableBlock0.getComponentId());
      
      String string2 = "";
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      Block block0 = (Block)errorPage0.address();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      String string3 = "acronym";
      // Undeclared exception!
      try { 
        textInput0.h1();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Component component0 = null;
      String string0 = "`oC";
      Checkbox checkbox0 = new Checkbox((Component) null, "`oC", "`oC");
      assertNotNull(checkbox0);
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("`oC", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("`oC", checkbox0.getFormElementName());
      
      FormElement formElement0 = checkbox0.setFormElementName("`oC");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("`oC", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("`oC", checkbox0.getFormElementName());
      assertEquals("`oC", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("`oC", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      
      Submit submit0 = new Submit(formElement0, "`oC", "`oC");
      assertNotNull(submit0);
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("`oC", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("`oC", checkbox0.getFormElementName());
      assertEquals("`oC", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("`oC", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("`oC", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertTrue(submit0.isValid());
      assertEquals("`oC", submit0.getFormElementName());
      
      // Undeclared exception!
      try { 
        checkbox0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      ElExpression elExpression0 = new ElExpression("");
      assertNotNull(elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      
      DateInput dateInput0 = new DateInput(errorPage0, "Cannot add a form element. No surrounding form found.", "", "Cannot add a form element. No surrounding form found.");
      assertNotNull(dateInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      
      Label label0 = (Label)tableBlock0.cite((Object) dateInput0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      assertEquals("", elExpression1.getExpression());
      assertEquals("", elExpression1.toString());
      assertEquals(0, elExpression1.length());
      
      Table table0 = new Table(label0, "L1pD:VU[aIJb$*x");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      
      Block block0 = (Block)table0.kbd();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("L1pD:VU[aIJb$*x", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      String string0 = ",z)CW;s X[Js'ban";
      FileInput fileInput0 = new FileInput(label0, ",z)CW;s X[Js'ban", (String) null);
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals(",z)CW;s X[Js'ban", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      
      fileInput0.setMaxRequestSize(8);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("Cannot add a form element. No surrounding form found.", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals(",z)CW;s X[Js'ban", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(8, fileInput0.getMaxRequestSize());
      
      // Undeclared exception!
      try { 
        dateInput0.pre();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.strong(object0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      ElExpression elExpression0 = new ElExpression("");
      assertNotNull(elExpression0);
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      
      DateInput dateInput0 = new DateInput(label0, "", "org.mvel.ast.BlockNode", elExpression0);
      assertNotNull(dateInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.ast.BlockNode", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("", dateInput0.getFormElementName());
      
      Table table0 = new Table(errorPage0, "org.mvel.ast.BlockNode");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      
      TableBlock tableBlock0 = table0.colgroup();
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      TableBlock tableBlock1 = tableBlock0.renderHint(elExpression0);
      assertNotNull(tableBlock1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      
      Label label1 = (Label)tableBlock1.cite((Object) elExpression0);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertNotSame(label1, label0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertTrue(label1._isGeneratedId());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.toString());
      assertEquals("", elExpression1.getExpression());
      
      Table table1 = new Table(tableBlock1, "");
      assertFalse(table1.equals((Object)table0));
      assertNotNull(table1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Text text0 = (Text)tableBlock1.text(object1);
      assertFalse(table0.equals((Object)table1));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(text0);
      assertSame(elExpression0, elExpression1);
      assertNotSame(table0, table1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertNotSame(object1, object0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      
      Block block0 = (Block)table0.kbd();
      assertFalse(table0.equals((Object)table1));
      assertNotNull(block0);
      assertNotSame(table0, table1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      String string0 = "C90Qg;TarWNH";
      FileInput fileInput0 = new FileInput(table1, (String) null, "C90Qg;TarWNH");
      assertFalse(table0.equals((Object)table1));
      assertFalse(table1.equals((Object)table0));
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertNull(fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("C90Qg;TarWNH", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      
      String string1 = fileInput0.defaultTagName();
      assertFalse(string1.equals((Object)string0));
      assertFalse(table0.equals((Object)table1));
      assertFalse(table1.equals((Object)table0));
      assertNotNull(string1);
      assertSame(elExpression0, elExpression1);
      assertNotSame(table0, table1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertNotSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("org.mvel.ast.BlockNode", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertNull(fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("C90Qg;TarWNH", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", string1);
      
      String string2 = "`ILKnp::-{CoO{z0:";
      // Undeclared exception!
      try { 
        fileInput0.get("`ILKnp::-{CoO{z0:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id '`ILKnp::-{CoO{z0:'.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
