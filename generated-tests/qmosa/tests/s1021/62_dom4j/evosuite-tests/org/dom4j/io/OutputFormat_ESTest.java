/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:33:49 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-k{<lx`c ");
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterNTags((-1));
      outputFormat0.isTrimText();
      outputFormat0.setTrimText(false);
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals((-1), outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(true);
      outputFormat0.setLineSeparator("org.dom4j.io.OutputFormat");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize((-1));
      assertEquals("org.dom4j.io.OutputFormat", outputFormat0.getLineSeparator());
      
      String string0 = outputFormat1.getLineSeparator();
      assertEquals("\n", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String string0 = "5";
      outputFormat0.setEncoding("5");
      outputFormat0.setIndentSize((-1));
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setExpandEmptyElements(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isNewLineAfterDeclaration();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (K)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat1.setLineSeparator("u%7");
      outputFormat1.setNewlines(true);
      assertEquals("u%7", outputFormat1.getLineSeparator());
      
      outputFormat1.setLineSeparator((String) null);
      outputFormat0.isOmitEncoding();
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.setOmitEncoding(false);
      outputFormat1.isNewLineAfterDeclaration();
      boolean boolean0 = outputFormat1.isNewLineAfterDeclaration();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewlines(true);
      outputFormat0.getIndent();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      int int0 = outputFormat0.parseOptions(stringArray0, 1677);
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(1677, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("[gIOr(D ", false, "");
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("[gIOr(D ", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(boolean0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("");
      String[] stringArray0 = new String[0];
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat1.setLineSeparator(string0);
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setTrimText(false);
      outputFormat0.setXHTML(false);
      outputFormat2.setIndentSize(0);
      outputFormat0.setIndent("4=>Bv]&qwzB");
      outputFormat1.setIndentSize(1);
      outputFormat1.setIndent(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat2.isTrimText();
      outputFormat2.getEncoding();
      outputFormat0.setLineSeparator("UTF-8");
      outputFormat1.isPadText();
      assertEquals("\\uT\"58/%g<H r%om;", outputFormat1.getLineSeparator());
      
      outputFormat2.setIndent("");
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ly4^>_}", true);
      outputFormat0.setLineSeparator("85bVd{hc2JKV");
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.isTrimText();
      outputFormat0.getEncoding();
      outputFormat0.setNewlines(true);
      outputFormat2.setTrimText(false);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat2.isNewlines();
      outputFormat2.setIndentSize(0);
      outputFormat3.setNewlines(false);
      outputFormat1.setEncoding("85bVd{hc2JKV");
      OutputFormat.createCompactFormat();
      outputFormat0.setPadText(false);
      assertEquals("85bVd{hc2JKV", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("^I-^~k9[");
      outputFormat0.isTrimText();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("");
      outputFormat0.setEncoding("^I-^~k9[");
      outputFormat0.setPadText(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isNewlines();
      outputFormat0.getIndent();
      outputFormat0.setIndentSize((-1));
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndent((String) null);
      outputFormat0.isPadText();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.isXHTML();
      outputFormat0.setEncoding("");
      assertEquals("", outputFormat0.getEncoding());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setSuppressDeclaration(false);
      assertTrue(outputFormat1.isPadText());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[7];
      outputFormat0.setLineSeparator("(+@d[=x");
      stringArray0[0] = "";
      outputFormat0.setExpandEmptyElements(true);
      stringArray0[1] = "Gw+ulwYUt3s\"{Vw";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "P}8;";
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent(false);
      stringArray0[4] = "";
      stringArray0[5] = "B]fD";
      stringArray0[6] = "$0xt\f>g5;6|K.X";
      outputFormat0.parseOptions(stringArray0, 2103);
      outputFormat0.isPadText();
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getLineSeparator();
      outputFormat0.isTrimText();
      outputFormat0.getIndent();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(true);
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setEncoding((String) null);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("  ");
      outputFormat0.setPadText(true);
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "  ";
      stringArray0[1] = "  ";
      stringArray0[2] = "0k6pr}n#\"";
      stringArray0[3] = "";
      stringArray0[4] = "  ";
      stringArray0[5] = "";
      outputFormat1.parseOptions(stringArray0, 0);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0790184969820253
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText");
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String string0 = "5";
      outputFormat0.setEncoding("5");
      outputFormat0.setIndentSize((-1));
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setExpandEmptyElements(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isNewLineAfterDeclaration();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (K)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4479398253090516
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("k:Qj^eGtna:_");
      outputFormat0.setEncoding("(agUa<ncosa\";");
      outputFormat0.setLineSeparator("~RmRE G.aJH");
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags(0);
      OutputFormat.createCompactFormat();
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "k:Qj^eGtna:_";
      stringArray0[2] = "(agUa<ncosa\";";
      stringArray0[3] = "(agUa<ncosa\";";
      stringArray0[4] = "6-NrWdbWgFV_&:[<Ax";
      stringArray0[5] = "(agUa<ncosa\";";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k:Qj^eGtna:_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.118712978717501
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimT\"Xext");
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setEncoding("5");
      outputFormat0.setIndent("5");
      outputFormat0.setIndentSize((-1));
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat1.setEncoding((String) null);
      outputFormat1.setIndent("UTF-8");
      outputFormat0.setExpandEmptyElements(false);
      String[] stringArray0 = new String[2];
      outputFormat0.setIndentSize((-1));
      stringArray0[0] = "-trimT\"Xext";
      stringArray0[1] = "-trimT\"Xext";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertEquals("", outputFormat0.getIndent());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2892729643178154
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "EiM\"[";
      stringArray0[1] = "-indent";
      stringArray0[2] = "EiM\"[";
      stringArray0[3] = "EiM\"[";
      stringArray0[4] = "EiM\"[";
      stringArray0[5] = "Kg>5>P X<HB>:5k^q";
      stringArray0[6] = "Kg>5>P X<HB>:5k^q";
      stringArray0[7] = "Kg>5>P X<HB>:5k^q";
      stringArray0[8] = "EiM\"[";
      outputFormat0.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('3');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (3)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.625466563402199
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setXHTML(true);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.isNewLineAfterDeclaration();
      assertFalse(outputFormat1.isXHTML());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-xhtmlk:QjGtn:_";
      stringArray0[1] = "(agUa<ncosa\";";
      stringArray0[2] = "(agUa<ncosa\";";
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertTrue(outputFormat1.isXHTML());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8346096344580887
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      outputFormat1.isNewLineAfterDeclaration();
      assertFalse(outputFormat1.isExpandEmptyElements());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-xhtmlk:QjGtn:_";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-expandEmptyKg>5>P X<HB>:5k^q";
      stringArray0[3] = "k:QjGt";
      stringArray0[4] = "1EPYvY7";
      stringArray0[5] = "-xhtmlk:QjGtn:_";
      outputFormat0.parseOptions(stringArray0, 1);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-trimText";
      stringArray1[1] = "1EPYvY7";
      stringArray1[2] = "-xhtmlk:QjGtn:_";
      stringArray1[3] = "-expandEmptyKg>5>P X<HB>:5k^q";
      stringArray1[4] = "1EPYvY7";
      stringArray1[5] = "-xhtmlk:QjGtn:_";
      stringArray1[6] = "1EPYvY7";
      stringArray1[7] = "4rbo.JJ/1M?l;6/<:";
      stringArray1[8] = "k:QjGt";
      int int0 = outputFormat0.parseOptions(stringArray1, 1);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9867316488081914
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "TOzpF8lj9[Co_+Q!7g";
      stringArray0[2] = ".@]f%J";
      outputFormat0.setIndent("-lineSeparator");
      outputFormat0.parseOptions(stringArray0, 34);
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "TOzpF8lj9[Co_+Q!7g";
      stringArray1[1] = ".@]f%J";
      stringArray1[2] = ".@]f%J";
      stringArray1[3] = "TOzpF8lj9[Co_+Q!7g";
      stringArray1[4] = "-omitEncoding";
      stringArray1[5] = "w<PP]#uRx";
      stringArray1[6] = ".@]f%J";
      stringArray1[7] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-1179556402));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("C=*6qG!vyU_*");
      OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterDeclaration(false);
      assertEquals("C=*6qG!vyU_*", outputFormat0.getLineSeparator());
      
      OutputFormat outputFormat1 = new OutputFormat("(agUCa<ncosa\"~", false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TI]YF";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "(agUCa<ncosa\"~";
      stringArray0[3] = "(agUCa<ncosa\"~";
      stringArray0[4] = "(agUCa<ncosa\"~";
      stringArray0[5] = "(agUCa<ncosa\"~";
      stringArray0[6] = "TI]YF";
      int int0 = outputFormat1.parseOptions(stringArray0, 1);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8778382404072829
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setOmitEncoding(true);
      OutputFormat.createPrettyPrint();
      outputFormat2.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtmlk:QjGtn:_";
      stringArray0[1] = "-xhtmlk:QjGtn:_";
      stringArray0[2] = "-trimext";
      stringArray0[3] = "-expandEmptyKg>5>P X<HB>:5k^q";
      stringArray0[4] = "c";
      stringArray0[5] = "-padText";
      stringArray0[6] = "-trimext";
      stringArray0[7] = "-expandEmptyKg>5>P X<HB>:5k^q";
      outputFormat1.parseOptions(stringArray0, 1);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-padText";
      stringArray1[1] = "-padText";
      stringArray1[2] = "-xhtmlk:QjGtn:_";
      stringArray1[3] = "c";
      stringArray1[4] = "-padText";
      stringArray1[5] = "-trimext";
      stringArray1[6] = "-padText";
      stringArray1[7] = "Se[]e";
      int int0 = outputFormat0.parseOptions(stringArray1, 1);
      assertTrue(outputFormat0.isXHTML());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.036840744526001
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags(0);
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-xhtmlk:QjGtn:_";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-xhtmlk:QjGtn:_";
      stringArray0[4] = "(agUa4ncos\";";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isXHTML());
      assertEquals(4, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.8369882167858358
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator", true);
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "\n";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "-lineSeparator";
      stringArray0[6] = "-lineSeparator";
      stringArray0[7] = "-lineSeparator";
      stringArray0[8] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat1.setAttributeQuoteCharacter('\'');
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (D)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
