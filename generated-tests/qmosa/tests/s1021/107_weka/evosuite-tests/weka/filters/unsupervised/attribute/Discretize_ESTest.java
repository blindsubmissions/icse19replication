/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:03:41 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("o");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "o";
      stringArray0[1] = "f$";
      discretize0.setOptions(stringArray0);
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.getCapabilities();
      double double0 = (-3169.352147658);
      discretize0.setDesiredWeightOfInstancesPerInterval((-3169.352147658));
      discretize0.getInvertSelection();
      discretize0.listOptions();
      int int0 = 0;
      discretize0.setBins(1324);
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = false;
      discretize0.setDesiredWeightOfInstancesPerInterval(1.7976931348623157E308);
      int int0 = 0;
      discretize0.getBinRangesString(0);
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      int int0 = 115;
      discretize0.m_NumBins = 115;
      discretize0.setOutputFormat();
      discretize0.setInvertSelection(false);
      discretize0.setUseBinNumbers(true);
      String[] stringArray0 = null;
      Filter.runFilter(discretize0, (String[]) null);
      discretize0.setIgnoreClass(true);
      discretize0.binsTipText();
      discretize0.invertSelectionTipText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 115;
      doubleArray0[1] = (double) 115;
      doubleArray0[2] = (double) 115;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = 1349.216915;
      doubleArray0[7] = 1349.216915;
      SparseInstance sparseInstance0 = new SparseInstance(1349.216915, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      sparseInstance2.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize(":Qj^eGtna:_");
      discretize0.getUseEqualFrequency();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setDesiredWeightOfInstancesPerInterval((-709.780102661));
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getCutPoints(3547);
      discretize0.setUseEqualFrequency(false);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = false;
      discretize0.getCapabilities();
      discretize0.globalInfo();
      discretize0.setUseBinNumbers(true);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = true;
      double double0 = (-1.0);
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5070264355574183
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = false;
      discretize0.getCapabilities();
      discretize0.getCutPoints(1108);
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      discretize0.m_NumBins = 115;
      discretize0.setOutputFormat();
      discretize0.setInvertSelection(false);
      discretize0.setUseBinNumbers(true);
      Filter.runFilter(discretize0, (String[]) null);
      discretize0.setIgnoreClass(true);
      discretize0.binsTipText();
      discretize0.invertSelectionTipText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 115;
      doubleArray0[1] = (double) 115;
      doubleArray0[2] = (double) 115;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = 1349.216915;
      doubleArray0[7] = 1349.216915;
      SparseInstance sparseInstance0 = new SparseInstance(1349.216915, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      discretize0.useEqualFrequencyTipText();
      discretize0.makeBinaryTipText();
      discretize0.setAttributeIndices("If set to true, equal-frequency binning will be used instead of equal-width binning.");
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2049));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      discretize0.setDesiredWeightOfInstancesPerInterval(1028.082082652);
      int[] intArray0 = new int[4];
      discretize0.setFindNumBins(false);
      intArray0[0] = 2427;
      intArray0[1] = 0;
      intArray0[2] = 0;
      discretize0.setInvertSelection(true);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getRevision();
      discretize0.attributeIndicesTipText();
      assertEquals(1028.082082652, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "_/N:=opih";
      stringArray0[2] = "4NbZCskq0tdE-,s2";
      stringArray0[3] = "";
      stringArray0[4] = "-Y";
      stringArray0[5] = " appears to be missing.";
      stringArray0[6] = "";
      stringArray0[7] = "first-last";
      stringArray0[8] = " @oHfv9gPYTE:$s#";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize("2,-550,2147483646");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1659));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.getBinRangesString((-1952257859));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka/core/Capabilities.props";
      discretize0.setOptions(stringArray0);
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      
      discretize0.setOutputFormat();
      String[] stringArray0 = discretize0.getOptions();
      Discretize discretize1 = new Discretize("8964");
      discretize1.setOptions(stringArray0);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getFindNumBins());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.615630577027551
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = true;
      discretize0.invertSelectionTipText();
      discretize0.getOptions();
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1989);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JH(0E>@sa");
      Discretize discretize0 = new Discretize("JH(0E>@sa");
      double[][] doubleArray0 = new double[0][2];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9661755171495705
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5432606923036194
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = false;
      discretize0.getCapabilities();
      discretize0.getCutPoints(1108);
      discretize0.getOptions();
      discretize0.setInvertSelection(true);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      String string1 = discretize0.getRevision();
      assertEquals("8964", string1);
      
      String string2 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string2);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If ;his is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9661755171495705
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.toString();
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-2123622718);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[0][1];
      Filter.makeCopy(discretize0);
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.242973226438147
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by sile binning. Skips the class attribute if set.");
      Discretize discretize1 = new Discretize(":~Z_");
      discretize1.m_UseBinNumbers = true;
      discretize1.getOptions();
      assertTrue(discretize1.getUseBinNumbers());
      
      discretize0.getOptions();
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by sile binning. Skips the class attribute if set.");
      discretize0.m_IgnoreClass = true;
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[15][1];
      Discretize discretize1 = new Discretize();
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(12);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("(-inf-0],(0-inf)", string0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }
}
