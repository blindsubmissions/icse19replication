/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:14:05 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(13);
      optimization_DynamicIntArray0.addElement(13);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement((-1912));
      optimization_DynamicIntArray0.addElement((-1912));
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(1860);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(970);
      optimization_DynamicIntArray0.addElement(970);
      assertEquals(3, optimization_DynamicIntArray0.size());
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 0, 0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(20);
      optimization_DynamicIntArray0.addElement(20);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(20);
      optimization_DynamicIntArray0.addElement(20);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      int int0 = 200;
      optimization_DynamicIntArray0.addElement(200);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.elementAt(10);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-648.0);
      doubleArray1[2] = 233.895;
      doubleArray1[3] = 2219.880836427324;
      doubleArray1[4] = (-4.0);
      doubleArray1[5] = 0.3989422804014327;
      doubleArray1[6] = (-1608.4342);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2219.880836427324;
      doubleArray2[1] = 233.895;
      doubleArray2[2] = 0.3989422804014327;
      doubleArray2[3] = (-4.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 233.895;
      doubleArray3[1] = 2219.880836427324;
      doubleArray3[2] = 0.3989422804014327;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = (-1608.4342);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 0.3989422804014327;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = (-648.0);
      doubleArray5[4] = Double.POSITIVE_INFINITY;
      doubleArray5[5] = 2219.880836427324;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-648.0);
      doubleArray6[1] = (-4.0);
      doubleArray6[2] = Double.NaN;
      doubleArray6[3] = 987.9365247042;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 987.9365247042;
      doubleArray7[1] = 987.9365247042;
      doubleArray7[2] = 2219.880836427324;
      doubleArray7[3] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = Double.POSITIVE_INFINITY;
      doubleArray8[1] = Double.NaN;
      doubleArray8[2] = (-4.0);
      doubleArray8[3] = 233.895;
      doubleArray8[4] = (-4.0);
      doubleArray8[5] = Double.NaN;
      doubleArray0[7] = doubleArray8;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-915), (-915));
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = 2219.880836427324;
      doubleArray9[1] = Double.POSITIVE_INFINITY;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      double[] doubleArray10 = Optimization.solveTriangle(matrix0, doubleArray9, false, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY}, doubleArray10, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(0, 0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1270.456721;
      doubleArray0[1] = 1270.456721;
      doubleArray0[2] = 1270.456721;
      doubleArray0[3] = 1270.456721;
      doubleArray0[4] = 1270.456721;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(970);
      optimization_DynamicIntArray0.addElement(970);
      assertEquals(4, optimization_DynamicIntArray0.size());
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 0, 0);
      boolean[] booleanArray0 = new boolean[9];
      Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(0, 0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1270.456721;
      doubleArray0[1] = (double) 0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      weka.core.matrix.Matrix.identity(0, 2416);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2416;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 185, 33);
      Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      Random.setNextRandom(1677);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9830877585747855
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      assertEquals(4, optimization_DynamicIntArray0.size());
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = new double[0][4];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray2, (-954), (-954));
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) (-954);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      double[] doubleArray4 = Optimization.solveTriangle(matrix0, doubleArray3, true, booleanArray0);
      Optimization.solveTriangle(matrix0, doubleArray4, false, booleanArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(2416, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2416;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      double[][] doubleArray1 = new double[9][4];
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray1, 22, 22);
      double[] doubleArray2 = Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 2416.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 2416;
      doubleArray3[1] = 2136.0;
      doubleArray3[2] = 1.0000009536743164;
      double[] doubleArray4 = Optimization.solveTriangle(matrix1, doubleArray3, false, booleanArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.POSITIVE_INFINITY}, doubleArray4, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-133);
      doubleArray1[1] = (double) (-133);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-133);
      doubleArray3[1] = (double) (-133);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) (-133);
      doubleArray4[1] = (double) (-133);
      doubleArray4[2] = (-270.6152042301);
      doubleArray4[3] = (double) (-133);
      doubleArray4[4] = (double) (-133);
      doubleArray4[5] = (double) (-133);
      doubleArray0[3] = doubleArray4;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-133), (-133));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray4, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
