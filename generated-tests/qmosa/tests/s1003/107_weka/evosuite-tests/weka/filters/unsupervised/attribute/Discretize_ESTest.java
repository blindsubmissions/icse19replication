/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:59:48 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3loI@z4b!IGD%UjP";
      stringArray0[1] = "\nTrain: ";
      stringArray0[2] = ">d&GC'Y'@ZH-X3";
      stringArray0[3] = "(m.Ud7DqO";
      stringArray0[4] = "fmF:k[`4LX<b=F\"ly";
      stringArray0[5] = "-R <col1,col2-col4,...>";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setUseBinNumbers(false);
      Range range0 = new Range("Can only remove value of nominal, string or relation- valued attribute!");
      discretize0.m_DiscretizeCols = range0;
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("YJ)fhC2~");
      discretize0.setMakeBinary(true);
      discretize0.m_UseEqualFrequency = true;
      discretize0.setUseBinNumbers(false);
      discretize0.m_MakeBinary = true;
      discretize0.m_FindNumBins = false;
      discretize0.setAttributeIndices("YJ)fhC2~");
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      boolean boolean0 = true;
      discretize0.m_UseEqualFrequency = true;
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("$o+ kTCFQ|N1fc?xT$5");
      boolean boolean0 = true;
      discretize0.m_IgnoreClass = true;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.0;
      discretize0.getOptions();
      Filter.makeCopy(discretize0);
      discretize0.getOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.attributeIndicesTipText();
      discretize0.setAttributeIndices("kZ*R+z");
      discretize0.getRevision();
      discretize0.getUseBinNumbers();
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-219));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize("");
      discretize0.m_DefaultCols = "";
      discretize0.getInvertSelection();
      discretize0.getOptions();
      discretize0.setFindNumBins(true);
      Discretize.main(stringArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1644.8152);
      doubleArray0[1] = (-1644.8152);
      doubleArray0[2] = (-414.96130564247);
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (-1644.8152);
      doubleArray0[5] = (-1644.8152);
      doubleArray0[6] = (-1644.8152);
      doubleArray0[7] = (-1644.8152);
      doubleArray0[8] = (-1644.8152);
      SparseInstance sparseInstance0 = new SparseInstance((-1644.8152), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize.main((String[]) null);
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.m_NumBins = 0;
      discretize0.globalInfo();
      discretize0.setInvertSelection(true);
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1061.8));
      discretize0.m_ClassIndex = 0;
      discretize0.getCapabilities();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("9-$IrjNyh|xBVZlh");
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1026;
      intArray0[2] = 44;
      intArray0[3] = 70;
      discretize0.setAttributeIndicesArray(intArray0);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize("    m_NewBatch = true;\n");
      discretize0.getCutPoints(774);
      discretize0.setFindNumBins(false);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      
      discretize0.getBins();
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Number of bins.", string0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7924158657580307
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.attributeIndicesTipText();
      discretize0.getBins();
      discretize0.setUseBinNumbers(false);
      discretize0.setBins((-1444));
      Discretize discretize1 = new Discretize();
      discretize1.getMakeBinary();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals((-1444), discretize0.getBins());
      
      int int0 = discretize0.m_NumBins;
      assertEquals((-1444), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(772);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("/?>CLD7`");
      discretize0.getCutPoints(2);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      Discretize discretize1 = new Discretize();
      String string0 = discretize1.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize1.getMakeBinary());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2275247137250096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U]OBE");
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[3];
      intArray0[0] = 275;
      intArray0[1] = 2;
      intArray0[2] = (-2724);
      discretize0.setAttributeIndicesArray(intArray0);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 275;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 275;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 275;
      doubleArray1[6] = (double) 275;
      doubleArray1[7] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (-583.96);
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 275;
      doubleArray2[4] = (double) (-2724);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (double) (-2724);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) (-2724);
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) (-2724);
      doubleArray3[3] = (double) 275;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-5720));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5720
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8652352524488434
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("M3BY");
      discretize0.setIgnoreClass(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.m_MakeBinary = true;
      discretize0.m_DefaultCols = "M3BY";
      discretize0.setOutputFormat();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getIgnoreClass());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("N_nUwi!Dr#b1!");
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 300.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 3424.12134860106;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2100.51940591);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 3424.12134860106;
      doubleArray2[1] = 300.0;
      doubleArray2[2] = 3424.12134860106;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 300.0;
      doubleArray3[3] = 3424.12134860106;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 300.0;
      doubleArray3[6] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-2100.51940591);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 369.15807056533;
      doubleArray6[1] = (-2100.51940591);
      doubleArray6[2] = 3424.12134860106;
      doubleArray6[3] = 300.0;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(1383);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1383
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.918057526079795
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.attributeIndicesTipText();
      discretize0.getBins();
      discretize0.setUseBinNumbers(true);
      discretize0.setBins((-1444));
      Discretize discretize1 = new Discretize();
      discretize1.getMakeBinary();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals((-1444), discretize0.getBins());
      
      int int0 = discretize0.m_NumBins;
      discretize1.getCapabilities();
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2;
      doubleArray1[7] = (double) 275;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[2] = (double) (-2724);
      doubleArray2[4] = 0.0;
      doubleArray0[2] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getOptions();
      discretize0.getBinRangesString(2);
      discretize0.setFindNumBins(false);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.284242744155885
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2;
      discretize0.m_UseEqualFrequency = true;
      doubleArray1[7] = (double) 275;
      doubleArray0[1] = doubleArray1;
      discretize0.getRevision();
      double[] doubleArray2 = new double[5];
      doubleArray2[2] = (double) (-2724);
      doubleArray2[4] = 0.0;
      doubleArray0[2] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getOptions();
      discretize0.getBinRangesString(2);
      discretize0.setFindNumBins(false);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.setUseBinNumbers(false);
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 275;
      int int1 = (-2724);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2;
      doubleArray1[7] = (double) 275;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[2] = (double) (-2724);
      doubleArray2[4] = 0.0;
      doubleArray0[2] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
