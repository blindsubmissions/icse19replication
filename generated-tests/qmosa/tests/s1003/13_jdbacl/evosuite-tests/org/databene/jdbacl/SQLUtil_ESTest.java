/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:29:05 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.command.dml.ScriptCommand;
import org.h2.engine.Session;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueLob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "MVrv%9Yg6Qx~9C&", "", stringArray0);
      assertEquals("MVrv%9Yg6Qx~9C& as  on . = . and . = . and . = . and . = . and . = . and . = . and . = .", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      int int0 = 25;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W[sh^^(Q)\"%5wGC>6");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("*9]*eNNh@6cF\"@z4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '*9]*eNNh@6cF\"@z4'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#_}j/9/igIK";
      stringArray0[1] = "#_}j/9/igIK";
      stringArray0[2] = "#_}j/9/igIK";
      SQLUtil.leftJoin("#_}j/9/igIK", stringArray0, "org.apache.derby.impl.services.jce.JCECipherFactory", "#P&", stringArray0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("#_}j/9/igIK", compositeDBObject0);
      tableContainer0.getTable("org.apache.derby.impl.services.jce.JCECipherFactory");
      tableContainer0.setDoc("");
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLoginTimeout();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.isProcedureCall("CBk1_~VC");
      SQLUtil.isQuery("CBk1_~VC");
      VersionNumber versionNumber0 = VersionNumber.valueOf("org.firebirdsql.jdbc.AbstractConnection");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.firebirdsql.jdbc.AbstractConnection", "CBk1_~VC", versionNumber0);
      defaultDatabase0.getTable("org.firebirdsql.jdbc.AbstractConnection", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "z";
      SQLUtil.substituteMarkers("z", "z", "z");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      defaultDBTable0.getCheckConstraints();
      String string0 = " as ";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint(" as ", false, "", "CLOB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("import java.util.*;\nimport java.math.*;\nimport java.sql.*;\n");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("import java.util.*;\nimport java.math.*;\nimport java.sql.*;\n", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBDataType dBDataType0 = DBDataType.getInstance(5, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT \"import java.util.*;\nimport java.math.*;\nimport java.sql.*;\n\" FOREIGN KEY () REFERENCES import java.util.*;\nimport java.math.*;\nimport java.sql.*;\n()", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = null;
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("_NOT_NULL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      String string0 = jdbcDataSource0.getUser();
      jdbcDataSource0.getLoginTimeout();
      SQLUtil.normalize("org.databene.commons.converter.FormatHolder", true);
      String string1 = SQLUtil.removeComments("#_}j/9/igIK");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("jm");
      assertNull(boolean0);
      
      DBSchema dBSchema0 = new DBSchema("{g<n]d", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AoEd", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1744, "AoEd");
      dBDataType0.isNumber();
      Integer integer0 = new Integer((-5137));
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{g<n]d", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("{g<n]d AOED(-5137,1) NULL", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("import java.util.*;\nimport java.math.*;\nimport java.sql.*;\n");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("import java.util.*;\nimport java.math.*;\nimport java.sql.*;\n", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBDataType dBDataType0 = DBDataType.getInstance(5, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT \"import java.util.*;\nimport java.math.*;\nimport java.sql.*;\n\" FOREIGN KEY () REFERENCES import java.util.*;\nimport java.math.*;\nimport java.sql.*;\n()", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = null;
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[13];
      stringArray0[0] = "c+$l[&(;T@7";
      stringArray0[2] = "c+$l[&(;T@7";
      stringArray0[3] = "c+$l[&(;T@7";
      stringArray0[4] = "6";
      stringArray0[5] = "c+$l[&(;T@7";
      stringArray0[6] = "6";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "c+$l[&(;T@7", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("6", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("c+$l[&(;T@7", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0578975319224093
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "derby.storage.initialPages";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.mutatesStructure("{g<N]d\nsf");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{g<N]d\nsf";
      stringArray0[1] = "{g<N]d\nsf";
      stringArray0[2] = "{g<N]d\nsf";
      stringArray0[3] = "{g<N]d\nsf";
      stringArray0[4] = "{g<N]d\nsf";
      stringArray0[5] = "CKY/7GrX]1Rp5";
      String string0 = "d/q@OsJ;J Q(k:&1ec";
      VersionNumber.valueOf("a_j");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DBDataType dBDataType0 = DBDataType.getInstance(1744, "create tableexec");
      dBDataType0.isNumber();
      Integer integer0 = new Integer(946);
      Integer integer1 = RawTransaction.ABORT;
      String string1 = "R~S2,UsEz6+&^@NA(%";
      DBSchema dBSchema0 = new DBSchema("d/q@OsJ;J Q(k:&1ec");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{g<N]d\nsf", dBSchema0);
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("R~S2,UsEz6+&^@NA(%", defaultDBTable0, dBDataType0, integer0, integer2);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string2 = "])LZAq\"tI2";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "{g<N]d\nsf");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("JqGW(g0~", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-289), 3122L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -289
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.normalize("I-L\"#Yh/_u4", false);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A)4=KUthz{ai6";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "A)4=KUthz{ai6", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("A)4=KUthz{ai6", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("A)4=KUthz{ai6", dBTable0, 4445, " = ");
      defaultDBTable0.getColumn("A)4=KUthz{ai6");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized viewwhere", dBTable0, 4445, "!3GY&D >LY1xG");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (A)4=KUthz{ai6)", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.isDDL("updatejm");
      SQLUtil.normalize("execcbk1_~vc", true);
      SQLUtil.isDDL("");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("42Z50", true, "execcbk1_ ~ vc", "updatejm");
      StringBuilder stringBuilder0 = new StringBuilder(6);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '}';
      charArray0[2] = '9';
      charArray0[3] = 'L';
      charArray0[4] = 'R';
      charArray0[5] = 'Z';
      charArray0[6] = 'H';
      charArray0[7] = ':';
      // Undeclared exception!
      try { 
        stringBuilder2.insert(537, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 537
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("J.(?QW7eLP}'SP2)", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "J.(?QW7eLP}'SP2)");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" fL\"uAfNh\u0001m", defaultDBTable0, dBDataType0, integer2, integer3);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("N39HHN(4ktzE:T^(nX", defaultDBTable0, dBDataType0, (Integer) (-4), integer3);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("- 0", defaultDBTable0, dBDataType0, integer1);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn2;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(" fL\"uAfNh\u0001m, N39HHN(4ktzE:T^(nX,  fL\"uAfNh\u0001m,  fL\"uAfNh\u0001m,  fL\"uAfNh\u0001m, - 0", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "constraint", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("constraint", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(153);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(65, charArrayWriter0.size());
      assertEquals("create table constraint (,\n\tCONSTRAINT constraint PRIMARY KEY ()\n", charArrayWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 4;
      Random.setNextRandom(4);
      SQLUtil.renderValue((Object) null);
      String string0 = "9999-12-20";
      String string1 = "update";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      DBDataType dBDataType0 = DBDataType.getInstance("null");
      String[] stringArray0 = new String[0];
      dBDataType0.isNumber();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9999-12-20", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("/tV\"vT", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn1.setNotNullConstraint((DBNotNullConstraint) null);
      String string2 = "create tableopen_new";
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultDBColumn1.setOwner(defaultDBTable0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(4, 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("executeopen_new", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      stringArray0[2] = ",";
      stringArray0[3] = "Tw&1bf}:";
      stringArray0[4] = "executeopen_new";
      stringArray0[5] = ",";
      stringArray0[6] = ",";
      stringArray0[7] = "executeopen_new";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Tw&1bf}:", false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint Tw&1bf}:", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create unique index{g<n]d\nsf");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "constraint", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("constraint", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(153);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "constraint", false, (String[]) null);
      SQLUtil.typeAndName((DBObject) null);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("#5vVZ.|TG");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.normalize("alter materialized view/x|2{cxm]jq", false);
      SQLUtil.isDDL("");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("42Z50", true, "execute", "deleterename");
      StringBuilder stringBuilder0 = new StringBuilder(409);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("alter materialized view/x|2{cxm]jq", stringBuilder0);
      stringBuilder0.reverse();
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '9';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '9';
      // Undeclared exception!
      try { 
        stringBuilder1.delete(409, '9');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "\u0004ta>";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = "*QT(OQ{>q=Gd9\\`'K";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("*QT(OQ{>q=Gd9`'K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: *QT(OQ{>q=Gd9`'K
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.71408754118701
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[zdf8ADra(RmL%,H1c", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("S3e2", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(90026);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(67, charArrayWriter0.size());
      
      String string0 = SQLUtil.typeAndName(dBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized view/x|2{cxm]jq", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "2yrAn[DisIH[@n3h", false, stringArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":");
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(":", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      // Undeclared exception!
      try { 
        stringBuilder2.delete((-1968526675), 2141);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1968526675
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.normalize("alter materialized view/x|2{cxm]jq", false);
      SQLUtil.isDDL("");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("42Z50", true, "execute", "deleterename");
      StringBuilder stringBuilder0 = new StringBuilder(409);
      SQLUtil.ownerDotComponent(dBCheckConstraint0);
      SQLUtil.removeComments("deleterename");
      DBCheckConstraint dBCheckConstraint1 = null;
      try {
        dBCheckConstraint1 = new DBCheckConstraint("", true, "call=", "create materialized view=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error at the beginning 
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.normalize("k-L\"#YL_u94", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k-L\"#YL_u94";
      stringArray0[1] = "k - L \"#YL_u94\"";
      stringArray0[2] = "k-L\"#YL_u94";
      stringArray0[5] = "k-L\"#YL_u94";
      stringArray0[4] = "drop materialized viewwhere";
      stringArray0[5] = "k - L \"#YL_u94\"";
      SQLUtil.join(">f=Y^LFw", "=j\"m1\"V4=OtwMMX:Mo", stringArray0, " ADD ", "constraint", stringArray0);
      SQLUtil.normalize("I,G96:", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "=j\"m1\"V4=OtwMMX:Mo", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" ADD ", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k-L\"#YL_u94");
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Random.setNextRandom(2900);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "deleterename";
      stringArray0[1] = "^@`dkPefvSu$g30Zw";
      stringArray0[2] = "deleterename";
      stringArray0[3] = "L\"OQilEbzD>$%UV";
      stringArray0[4] = ">f=Y^LFw";
      String string0 = SQLUtil.normalize("HuFPI=O)3wvug(0)96W", true);
      assertEquals("HuFPI = O) 3wvug (0) 96W", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "alter materialized view/x|2{cxm]jq";
      stringArray0[3] = "alter materialized view/x|2{cxm]jq";
      stringArray0[4] = "\u0001\u01CD";
      stringArray0[5] = "alter materialized view/x|2{cxm]jq";
      stringArray0[6] = null;
      stringArray0[7] = "alter materialized view/x|2{cxm]jq";
      stringArray0[8] = "alter materialized view/x|2{cxm]jq";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , alter materialized view/x|2{cxm]jq, alter materialized view/x|2{cxm]jq, \u0001\u01CD, alter materialized view/x|2{cxm]jq, , alter materialized view/x|2{cxm]jq, alter materialized view/x|2{cxm]jq)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "k-L\"#YL_u94";
      stringArray0[5] = "k-L\"#YL_u94";
      String string0 = SQLUtil.join(stringArray0[1], stringArray0[1], stringArray0, "k-L\"#YL_u94", "SYSCS_FREEZE_DATABASE", stringArray0);
      assertEquals("k-L\"#YL_u94 as SYSCS_FREEZE_DATABASE on null.null = SYSCS_FREEZE_DATABASE.null and null.null = SYSCS_FREEZE_DATABASE.null and null.k-L\"#YL_u94 = SYSCS_FREEZE_DATABASE.k-L\"#YL_u94 and null.null = SYSCS_FREEZE_DATABASE.null and null.null = SYSCS_FREEZE_DATABASE.null and null.k-L\"#YL_u94 = SYSCS_FREEZE_DATABASE.k-L\"#YL_u94", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "select";
      SQLUtil.isDML("create table");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create table");
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.addRequiredCondition("TYPE4", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "select", 7, 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 7, end 97, s.length() 6
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0488828279013442
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Random.setNextRandom(2900);
      SQLUtil.parseColumnTypeAndSize("deleterename");
      Random.setNextRandom(461);
      SQLUtil.normalize("Y(,K:Aw/", true);
      SQLUtil.mutatesDataOrStructure("deleterename");
      DBCatalog dBCatalog0 = new DBCatalog("6UvNq0toAT$");
      DBSchema dBSchema0 = new DBSchema("Y (, K : Aw /", dBCatalog0);
      dBSchema0.getTable("j~>vw)@ni");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("j~>vw)@ni");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0821343387456603
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter materialized view/x|2{cxm]jq", true);
      assertEquals("alter materialized view / x | 2 { cxm ] jq", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter materialized view / x | 2 { cxm ] jq";
      stringArray0[1] = "alter materialized view/x|2{cxm]jq";
      stringArray0[2] = " ADD ";
      stringArray0[3] = "alter materialized view / x | 2 { cxm ] jq";
      stringArray0[4] = " ADD ";
      stringArray0[5] = null;
      stringArray0[6] = "PRIMARY KEY ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " ADD ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" ADD \" UNIQUE (alter materialized view / x | 2 { cxm ] jq, alter materialized view/x|2{cxm]jq,  ADD , alter materialized view / x | 2 { cxm ] jq,  ADD , , PRIMARY KEY )", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized view/x|2{cxm]jq", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "2yrAn[DisIH[@n3h", false, stringArray0);
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      SQLUtil.removeComments("2yrAn[DisIH[@n3h");
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null.2yrAn[DisIH[@n3h", defaultDBTable0, (-4070), "insertjm");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      Locale locale0 = Locale.PRC;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "[G'#23*RRBZ)4pr", (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Random.setNextRandom(2900);
      SQLUtil.renderValue((Object) null);
      SQLUtil.parseColumnTypeAndSize("update");
      SQLUtil.isQuery("select into");
      String string0 = SQLUtil.removeComments("update");
      assertEquals("update", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Boolean boolean0 = new Boolean("jm");
      DBSchema dBSchema0 = new DBSchema("{g<n]d", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AoEd", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1744, "AoEd");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray0 = new String[10];
      stringArray0[0] = "alter materialized viewuw?4+o";
      stringArray0[1] = "AoEd";
      stringArray0[2] = "AoEd";
      stringArray0[3] = "AoEd";
      stringArray0[4] = "jm";
      stringArray0[5] = "jm";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.948629505738699
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, 1241, "select");
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column null", string0);
      
      System.setCurrentTimeMillis(1241);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5883288030396023
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("P@)q.gu*<R");
      assertNull(boolean0);
      
      String string0 = SQLUtil.normalize("P@)q.gu*<R", false);
      assertEquals("P @) q.gu  * < R", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3^pL~HI{hqW", (DBTable) null, (-193919140), "alter materialized viewhufpi=o)3wvug(0)96w");
      defaultDBColumn0.isEquivalent((DBObject) null);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5623155215734763
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("H;8|,");
      assertNull(boolean0);
      
      String string0 = SQLUtil.normalize("truncate'", true);
      assertEquals("truncate ''", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      Character character0 = Character.valueOf('5');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'5'", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "callbinary");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "callbinary";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "callbinary";
      stringArray0[4] = "callbinary";
      stringArray0[5] = null;
      stringArray0[6] = "callbinary";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "callbinary");
      stringBuilder0.reverse();
      StringBuilder stringBuilder1 = stringBuilder0.append((-1245.8353F));
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("BINARYu-_DOUBLE", false, "BINARYu-_DOUBLE", "BINARYu-_DOUBLE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BINARYu-_DOUBLE");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "BINARYu-_DOUBLE";
      stringArray0[1] = "BINARYu-_DOUBLE";
      stringArray0[2] = "BINARYu-_DOUBLE";
      stringArray0[3] = "BINARYu-_DOUBLE";
      stringArray0[4] = "BINARYu-_DOUBLE";
      stringArray0[5] = "BINARYu-_DOUBLE";
      stringArray0[6] = "BINARYu-_DOUBLE";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "BINARYu-_DOUBLE");
      StringBuilder stringBuilder1 = stringBuilder0.append((-954.2874F));
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(5247, (CharSequence) stringBuilder1, 5247, 5247);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 5247
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("BINARYu-_DOUBLE", false, "BINARYu-_DOUBLE", "BINARYu-_DOUBLE");
      dBCheckConstraint0.setDoc("BINARYu-_DOUBLE");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT BINARYu-_DOUBLE ", string0);
      
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK BINARYu-_DOUBLE", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Boolean boolean0 = new Boolean("jm");
      DBSchema dBSchema0 = new DBSchema("jm", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AoEd", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(24000, "AoEd");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned(24000, 24000);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jm", defaultDBTable0, dBDataType0, integer0, integer1);
      dBDataType0.isAlpha();
      defaultDBColumn0.setFractionDigits(integer1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}NB$S?");
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      slaveDatabase0.getLocale();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "jm";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) nameSpec0;
      objectArray0[4] = (Object) slaveDatabase0;
      objectArray0[5] = (Object) "jm";
      objectArray0[6] = (Object) slaveDatabase0;
      objectArray0[7] = (Object) slaveDatabase0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "}NB$S?", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }
}
