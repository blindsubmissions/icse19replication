/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:18:18 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-5250L), 2383L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-4622L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("vH) h-=%9V8]<4%y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.vH) h-=%9V8]<4%y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9829650292177696
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.198916528720684
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 0L, 0L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        Range.of(0L, (-1813L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.spliterator();
      range0.complementFrom(linkedList0);
      range_Builder0.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      long long1 = 0L;
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = (-1903L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1903L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5553480614894135
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range range1 = Range.of(0L, 0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      range1.complement(range0);
      assertFalse(range1.isEmpty());
      
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(0L);
      range_Builder0.contractBegin(0L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8389889331546985
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 2147483647L;
      Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.7376696182833657
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-3234L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_CoordinateSystem0.toString();
      range1.equals("Residue Based");
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4778907495094358
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.iterator();
      Range.of((-1233L), 0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-1233L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.475272201948944
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1521L), (-1521L));
      Range range1 = Range.ofLength(357L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1814749239285325
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1241L), 848L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6124497780727465
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = (-1259L);
      Range range0 = Range.of((-1259L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1259L));
      range1.getEnd();
      range1.getEnd();
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.split(255L);
      List<Range> list1 = range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-1259L), 0L);
      range3.endsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range2.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of(0L, (-1259L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.601298962050753
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of((-1259L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1259L));
      long long0 = new Long((-1259L));
      range1.getEnd();
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.split(255L);
      range2.complementFrom(list0);
      Range range3 = range1.asRange();
      String string0 = null;
      range3.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1259 .. -1258 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -1259 .. -1258 ]/SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.392511813083741
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range_Builder0.expandBegin(1734L);
      range0.equals(range_Builder1);
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = Range.ofLength(1233L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertFalse(range1.isEmpty());
      assertEquals(0L, long0);
      
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.025351690735147
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-1259L);
      Range range0 = Range.of((-1259L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1259L));
      range1.getEnd();
      range1.getEnd();
      Range range2 = Range.of((-1259L), 255L);
      List<Range> list0 = range2.split(255L);
      List<Range> list1 = range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-1259L), 0L);
      range3.endsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range2.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of(0L, (-1259L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.807386107779251
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      long long0 = 265L;
      range_Builder0.shift(265L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      List<Range> list3 = range0.complementFrom(list2);
      range0.complementFrom(list3);
      Range.of((-1147L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range3 = range2.intersection(range0);
      range0.getEnd();
      range3.intersects(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("q)fxUX9s]Tp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse q)fxUX9s]Tp into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.728437265556733
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-1259L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1259L));
      range1.getEnd();
      range1.getEnd();
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.split(255L);
      range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-1259L), 0L);
      range3.endsBefore(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range3);
      List<Range> list1 = range2.complementFrom(list0);
      Range range4 = Range.of(1207L);
      assertFalse(range4.isEmpty());
      
      boolean boolean0 = range2.isSubRangeOf(range3);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem3.toString();
      range0.equals(list1);
      assertSame(range2, range1);
      assertEquals(0, list1.size());
      
      range_CoordinateSystem1.toString();
      long long0 = range0.getEnd();
      assertEquals(255L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8969882423813793
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range.of(255L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.198916528720684
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-4622L));
      Object object0 = new Object();
      range0.equals(object0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals((Object) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9049178152088837
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of((-1259L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1259L));
      range1.getEnd();
      range1.getEnd();
      Range range2 = Range.of((-1259L), 255L);
      List<Range> list0 = range2.split(255L);
      range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-1259L), 0L);
      range3.endsBefore(range0);
      range2.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1259 .. 256 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.403100827941024
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range_Builder0.expandBegin(1734L);
      range0.equals(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 430L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.917432973292215
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-4622L));
      Object object0 = new Object();
      range0.equals(object0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder0.expandBegin((-4622L));
      range0.equals((Object) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4530423560316788
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(243L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      long long0 = 127L;
      Range range1 = Range.of((-636L), 127L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5030183232767036
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-3234L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complementFrom(linkedList0);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("TGa_,[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.TGa_,[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.68455274671672
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-1264L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1264L));
      range1.getEnd();
      range1.getEnd();
      List<Range> list0 = range1.split(255L);
      range0.complementFrom(list0);
      Range range2 = Range.of(range_CoordinateSystem0, (-1264L), 0L);
      range2.endsBefore(range0);
      Long.max((-1264L), (-3100L));
      range1.equals(range0);
      Range.Comparators.values();
      range1.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 255L, 248L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Object object0 = new Object();
      range2.equals(object0);
      range2.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 1L, 1L);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(977L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.372691039528923
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      long long0 = range0.getBegin();
      assertEquals((-2147483648L), long0);
      
      boolean boolean0 = range0.equals("number of entries must be <= Integer.MAX_VALUE");
      assertFalse(boolean0);
      
      Range range1 = Range.of((-2147483648L));
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.5851912626860214
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      long long0 = 9223372036854775807L;
      range_Builder1.shift(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 243L, 466L);
      range2.isSubRangeOf(range1);
      Range range3 = Range.of((-636L), (-636L));
      range3.complement(range2);
      range1.intersects(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.918057526079795
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.of(4294967296L);
      long long0 = 1264L;
      // Undeclared exception!
      try { 
        Range.of(1321L, 1264L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.877027464158507
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of((-1259L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1259 .. 256 ]/SB", string0);
      
      Range range1 = Range.of((-1259L));
      range1.getEnd();
      long long0 = range1.getEnd();
      assertEquals((-1259L), long0);
      
      Range range2 = Range.of((-1259L), 255L);
      List<Range> list0 = range2.split(255L);
      List<Range> list1 = range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-1259L), 0L);
      range3.endsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range2.complementFrom(list1);
      assertFalse(list0.contains(range0));
      assertEquals(0, list1.size());
      assertFalse(list0.isEmpty());
      
      Range range4 = Range.ofLength(0L);
      Range range5 = range4.intersection(range0);
      long long1 = range5.getEnd();
      assertEquals((-1L), long1);
      
      range0.intersects(range4);
      range3.equals("[ -1259 .. 256 ]/SB");
      Range.of(333L);
      List<Range> list2 = range2.complement(range3);
      assertTrue(list2.contains(range0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8501476017100575
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-23L), (-23L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-23L));
      range_Builder0.shift((-23L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(9223372036854775807L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.toString();
      range0.equals("Zero Based");
      String string0 = range_CoordinateSystem1.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.214496050675049
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-1259L), (-1259L));
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      Long long0 = new Long((-1259L));
      range0.equals(long0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals((Object) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("unable to delete ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.unable to delete 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.205843029051155
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      range0.equals(object0);
      range0.toString();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.637440120628963
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of((-1264L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1264L));
      range1.getEnd();
      range1.getEnd();
      List<Range> list0 = range1.split(255L);
      range0.complementFrom(list0);
      Range range2 = Range.of(range_CoordinateSystem0, (-1264L), 0L);
      range2.endsBefore(range0);
      Long.max((-1264L), (-3100L));
      range1.equals(range0);
      Range.Comparators.values();
      range1.getEnd();
      long long0 = new Long(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 255L, 259L);
      Range range3 = Range.of(1L);
      Range range4 = Range.of((-32768L), 0L);
      range4.equals(range2);
      range0.complement(range3);
      Range range5 = range_Builder1.build();
      assertFalse(range5.equals((Object)range4));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.729290082907932
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      long long0 = range0.getBegin();
      assertEquals((-2147483648L), long0);
      
      Range range1 = Range.of(1146L);
      range1.endsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(1146L);
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
      
      long long1 = range1.getEnd();
      assertEquals(1146L, long1);
      
      boolean boolean0 = range0.intersects(range2);
      assertTrue(boolean0);
      
      range1.equals(range2);
      Range.of(2641L);
      List<Range> list1 = range0.complement(range2);
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.660329962841755
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-23L), (-23L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-23L));
      range_Builder0.shift((-23L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.toString();
      range0.equals("Zero Based");
      range_CoordinateSystem1.toString();
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -24 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.8541268649414366
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      long long0 = new Long(0L);
      Range range1 = Range.of(4294967295L);
      long long1 = range1.getBegin();
      assertEquals(4294967295L, long1);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      Range range2 = Range.ofLength(2147483647L);
      range1.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      range3.getEnd();
      boolean boolean0 = range2.intersects(range0);
      boolean boolean1 = range2.equals("numbeg of entries must be <= Integer.MAX_VALUE");
      assertFalse(boolean1 == boolean0);
      
      Range range4 = Range.of(0L);
      assertFalse(range4.isEmpty());
      
      Range range5 = Range.of(1566L);
      List<Range> list2 = range5.complement(range2);
      assertFalse(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.9046433903494226
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-23L), (-23L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-23L));
      range_Builder0.shift((-23L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.toString();
      range0.equals("Zero Based");
      range_CoordinateSystem1.toString();
      boolean boolean1 = range1.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=4.051616139446311
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      range_Builder1.shift(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-636L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.equals(linkedList0);
      Range.of(2139L, 2139L);
      Range range2 = Range.of(1124L);
      List<Range> list0 = range1.complement(range2);
      Range range3 = Range.of(range_CoordinateSystem0, (-636L), 1734L);
      range3.complementFrom(list0);
      Range.of(9223372036854775807L);
      Range range4 = Range.of((-23L), 0L);
      range4.equals(range3);
      range2.complement(range4);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4369128855293143
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of((-1732L), 1102L);
      Range.of(1102L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-2525L), 1965L);
      long long0 = (-1345L);
      range_Builder0.expandBegin((-1345L));
      range_Builder0.contractBegin((-2525L));
      Range range1 = range_Builder0.build();
      range1.startsBefore(range0);
      Range.of((-1345L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("file can not be null", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse file can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.769452368073769
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      long long0 = range0.getBegin();
      assertEquals((-2147483648L), long0);
      
      Range range1 = Range.of(1146L);
      boolean boolean0 = range1.endsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(1146L);
      Range range3 = range2.intersection(range1);
      long long1 = range1.getEnd();
      assertEquals(1146L, long1);
      
      boolean boolean1 = range0.intersects(range2);
      boolean boolean2 = range1.equals(range2);
      assertFalse(boolean2 == boolean1);
      
      range0.getEnd();
      Range.of(2641L);
      List<Range> list1 = range0.complement(range2);
      assertEquals(1, list1.size());
      
      boolean boolean3 = range3.startsBefore(range1);
      assertTrue(boolean3 == boolean0);
      assertTrue(range3.isEmpty());
      assertFalse(boolean3);
  }
}
