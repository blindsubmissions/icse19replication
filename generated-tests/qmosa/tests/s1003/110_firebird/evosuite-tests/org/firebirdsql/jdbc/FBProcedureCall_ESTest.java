/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:43:36 GMT 2018
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.firebirdsql.jdbc.FBProcedureCall;
import org.firebirdsql.jdbc.FBProcedureParam;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBProcedureCall_ESTest extends FBProcedureCall_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.getOutputParams();
      fBProcedureCall0.clone();
      // Undeclared exception!
      try { 
        fBProcedureCall0.getInputParam(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      String string0 = "HY002";
      fBProcedureCall0.setName("HY002");
      int int0 = 500;
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam(500);
      fBProcedureParam0.setType(500);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureParam0.setIndex(500);
      boolean boolean0 = false;
      Object object0 = fBProcedureCall0.clone();
      try { 
        fBProcedureParam0.setValue(object0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot set value of an non-existing parameter.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall$NullParam", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(0, "K[m!@");
      fBProcedureParam0.clone();
      fBProcedureParam0.setIndex(0);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall0.clone();
      fBProcedureCall0.addParam(0, "[#?YK*X");
      fBProcedureCall0.hashCode();
      fBProcedureCall0.getOutputParams();
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = new FBProcedureParam(63, "S/x|2{C");
      fBProcedureParam1.setIndex((-1193));
      fBProcedureParam1.setIndex(0);
      fBProcedureParam1.setType(0);
      fBProcedureCall0.addInputParam(fBProcedureParam1);
      fBProcedureCall0.hashCode();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.getSQL(false);
      fBProcedureCall0.getInputParam(63);
      fBProcedureCall0.getInputParams();
      fBProcedureCall0.getOutputParams();
      fBProcedureCall0.getOutputParam(63);
      fBProcedureCall0.mapOutParamIndexToPosition(63);
      fBProcedureCall0.getName();
      int int0 = 1;
      try { 
        fBProcedureCall0.mapOutParamIndexToPosition(0, false);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Specified parameter does not exist.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam(0);
      fBProcedureParam0.setIndex(0);
      fBProcedureParam0.setIndex(0);
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureParam0.setIndex(0);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      Object object0 = fBProcedureParam0.clone();
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.addParam(0, "");
      fBProcedureParam1.setIndex(855);
      try { 
        fBProcedureParam1.setValue(object0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Cannot set parameter, since it is constant.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureParam", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9273921261392744
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.mapOutParamIndexToPosition(547);
      fBProcedureCall0.addParam(547, "");
      int int0 = (-1333);
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam((-1333));
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getInputParam(547);
      try { 
        fBProcedureParam1.setValue(fBProcedureParam0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot set value of an non-existing parameter.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall$NullParam", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.mapOutParamIndexToPosition((-2677), true);
      fBProcedureCall0.getSQL(true);
      fBProcedureCall0.mapOutParamIndexToPosition((-1115), true);
      // Undeclared exception!
      try { 
        fBProcedureCall0.addParam((-2677), "GDS Exception. ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2677
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.clone();
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(0);
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(3347, "%@<Y4DR+/&3g;4(D[E");
      int int1 = fBProcedureCall0.mapOutParamIndexToPosition(547);
      assertEquals(547, int1);
      
      Object object0 = fBProcedureCall0.clone();
      fBProcedureParam0.setIndex(547);
      fBProcedureParam0.setType(0);
      fBProcedureCall0.setName("p*F");
      int int2 = fBProcedureCall0.hashCode();
      assertFalse(int2 == int0);
      
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      assertEquals(3347, fBProcedureParam0.getPosition());
      
      fBProcedureCall0.getOutputParams();
      fBProcedureCall0.mapOutParamIndexToPosition(0);
      fBProcedureCall0.setName(" not set and ");
      String string0 = fBProcedureCall0.getSQL(false);
      assertNotSame(fBProcedureCall0, object0);
      assertEquals("EXECUTE PROCEDURE  not set and (%@<Y4DR+/&3g;4(D[E)", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.addParam(1, "");
      Object object0 = fBProcedureCall0.clone();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1, "");
      fBProcedureParam0.clone();
      assertTrue(fBProcedureCall0.equals((Object)object0));
      
      fBProcedureCall0.addParam(0, "qNNZ(");
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall0.mapOutParamIndexToPosition(1);
      fBProcedureCall0.getSQL(true);
      fBProcedureCall0.hashCode();
      fBProcedureCall0.setName(", ");
      fBProcedureCall0.getName();
      fBProcedureCall0.setName("/>");
      fBProcedureCall0.mapOutParamIndexToPosition((-953));
      fBProcedureCall0.equals(", ");
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getInputParam(1);
      fBProcedureCall0.addInputParam(fBProcedureParam1);
      assertFalse(fBProcedureCall0.equals((Object)object0));
      assertNotSame(fBProcedureCall0, object0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.662950466588211
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getInputParam(1);
      assertEquals(500, fBProcedureParam0.getType());
      
      fBProcedureParam0.setType((-494));
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getOutputParam((-269));
      fBProcedureParam1.setType(0);
      fBProcedureCall0.addOutputParam(fBProcedureParam1);
      fBProcedureCall0.getOutputParam(0);
      Object object0 = fBProcedureCall0.clone();
      fBProcedureCall0.getInputParam(2871);
      assertNotSame(fBProcedureCall0, object0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7597030099315074
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      Object object0 = fBProcedureCall0.clone();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(79, "fdDR/cH");
      fBProcedureParam0.setIndex(79);
      fBProcedureParam0.setType((-1189));
      fBProcedureCall0.setName("fdDR/cH");
      fBProcedureCall0.hashCode();
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureCall0.getOutputParam((-1189));
      Object object1 = fBProcedureCall0.clone();
      fBProcedureCall0.addParam(79, "}TmOUKEDbt-c");
      boolean boolean0 = object0.equals("}TmOUKEDbt-c");
      assertTrue(fBProcedureCall0.equals((Object)object1));
      assertFalse(object0.equals((Object)fBProcedureCall0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3393717343898155
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.addParam(1, "");
      FBProcedureCall fBProcedureCall1 = (FBProcedureCall)fBProcedureCall0.clone();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1, "");
      fBProcedureParam0.clone();
      fBProcedureParam0.clone();
      assertTrue(fBProcedureCall0.equals((Object)fBProcedureCall1));
      
      fBProcedureCall0.addParam(0, "qNNZ(");
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall0.mapOutParamIndexToPosition(1);
      fBProcedureCall0.getSQL(true);
      fBProcedureCall0.hashCode();
      fBProcedureCall0.setName(", ");
      fBProcedureCall0.mapOutParamIndexToPosition((-953));
      fBProcedureCall0.equals("SELECT * FROM null(qNNZ(, )");
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getInputParam(1);
      fBProcedureParam1.clone();
      fBProcedureParam1.setIndex(0);
      fBProcedureCall0.addInputParam(fBProcedureParam1);
      FBProcedureCall fBProcedureCall2 = (FBProcedureCall)fBProcedureCall1.clone();
      boolean boolean0 = fBProcedureCall0.equals(fBProcedureCall2);
      assertFalse(fBProcedureCall1.equals((Object)fBProcedureCall0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.182995977034132
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getInputParam(1);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      FBProcedureCall fBProcedureCall1 = (FBProcedureCall)fBProcedureCall0.clone();
      fBProcedureParam0.clone();
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall0.mapOutParamIndexToPosition(2169);
      fBProcedureCall0.getSQL(true);
      fBProcedureCall0.hashCode();
      fBProcedureCall0.setName("ZnW|>s");
      fBProcedureCall1.mapOutParamIndexToPosition(1851);
      FBProcedureCall fBProcedureCall2 = (FBProcedureCall)fBProcedureCall0.clone();
      fBProcedureCall1.equals(fBProcedureCall2);
      fBProcedureCall0.getInputParam(2169);
      fBProcedureParam0.clone();
      assertEquals(0, fBProcedureParam0.getIndex());
      
      fBProcedureParam0.setIndex(887);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall1.clone();
      FBProcedureCall fBProcedureCall3 = new FBProcedureCall();
      boolean boolean0 = fBProcedureCall1.equals(fBProcedureCall3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.110016553375461
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getInputParam(1);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall0.getOutputParam((-1));
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.addParam(1, "07006");
      fBProcedureCall0.addOutputParam(fBProcedureParam1);
      FBProcedureParam fBProcedureParam2 = fBProcedureCall0.getOutputParam((-4024));
      assertEquals(0, fBProcedureParam2.getPosition());
      
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null(null, 07006)", string0);
      
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(74, true);
      assertEquals(74, int0);
      
      Object object0 = fBProcedureCall0.clone();
      assertTrue(object0.equals((Object)fBProcedureCall0));
      
      fBProcedureCall0.registerOutParam((-1), (-1));
      assertFalse(fBProcedureCall0.equals((Object)object0));
      assertNotSame(fBProcedureCall0, object0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(887);
      assertEquals(887, int0);
      
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(742, "l0");
      assertEquals(742, fBProcedureParam0.getPosition());
      
      FBProcedureParam fBProcedureParam1 = new FBProcedureParam(742, "l0");
      fBProcedureCall0.mapOutParamIndexToPosition(772, true);
      Object object0 = fBProcedureCall0.clone();
      assertTrue(object0.equals((Object)fBProcedureCall0));
      
      fBProcedureCall0.registerOutParam((-1), 772);
      assertNotSame(fBProcedureCall0, object0);
  }
}
