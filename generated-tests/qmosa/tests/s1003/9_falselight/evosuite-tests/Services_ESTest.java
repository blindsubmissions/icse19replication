/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:28:41 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Services services0 = new Services();
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 1);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, 2528);
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.NullPointerException**.\n****", string0);
      
      services_HTTP_Result0.works = false;
      services_HTTP_Result0.Error = "-(#boCpbsL)hWbdAIG";
      services_HTTP_Result0.toString();
      String string1 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : -(#boCpbsL)hWbdAIG.\n****", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 0);
      services_HTTP_Result0.works = true;
      services_HTTP_Result0.reset();
      services_HTTP_Result0.reset();
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.reset();
      Services.HTTP_Result services_HTTP_Result1 = new Services.HTTP_Result();
      services_HTTP_Result1.reset();
      services_SIMPLE_Result0.reset();
      Services.HTTP_Result services_HTTP_Result2 = new Services.HTTP_Result();
      assertFalse(services_HTTP_Result2.works);
      assertEquals(0L, services_HTTP_Result2.time);
      assertEquals(0, services_HTTP_Result2.page_weight);
      assertEquals(0, services_HTTP_Result2.code);
      
      String string1 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****");
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("xs+p$GZ;<mU", 0);
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", 0);
      services_HTTP_Result1.page_weight = 349;
      services_HTTP_Result2.reset();
      String string1 = services_HTTP_Result2.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("", 0);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      Services.HTTP_Result services_HTTP_Result3 = Services.testHTTPS("", 0);
      assertEquals(136, services_HTTP_Result3.page_weight);
      assertTrue(services_HTTP_Result3.works);
      
      Services.testHTTP("Ak&C9", 0);
      Services.testHTTP("Qmio[0(R]!r<Xw|5", (-1));
      System.setCurrentTimeMillis(1977L);
      Services.testHTTPS("", (-2299));
      Services.HTTP_Result services_HTTP_Result4 = Services.testHTTPS((String) null, 0);
      assertEquals(0, services_HTTP_Result4.page_weight);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "y]H,+DW@KdF)(=G%GN");
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0L, services_HTTP_Result0.time);
      
      String string0 = services_HTTP_Result0.Error;
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("", 0);
      assertTrue(services_HTTP_Result1.works);
      assertEquals(19, services_HTTP_Result1.page_weight);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("", 0);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }
}
