/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:39:49 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "25vG|O!&Pw|]";
      JSONObject jSONObject0 = new JSONObject((Object) "25vG|O!&Pw|]");
      jSONObject0.accumulate("25vG|O!&Pw|]", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("25vG|O!&Pw|]");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 25vG|O!&Pw|]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-2440);
      String string0 = "";
      String string1 = "1biyJT>vnZSC";
      jSONObject0.optLong("1biyJT>vnZSC", (long) (-2440));
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A}=WEy2", true);
      try { 
        jSONObject0.getJSONArray("A}=WEy2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A}=WEy2\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fPJwK";
      JSONObject jSONObject1 = jSONObject0.putOpt("fPJwK", "fPJwK");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("e2^(Oa", (Collection) linkedList0);
      try { 
        jSONObject0.get("-s/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-s/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      int int0 = (-1889);
      jSONObject0.optInt((String) null, (-1889));
      jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("", 1513.60791904039);
      jSONObject2.keys();
      try { 
        jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,:]}/\"[{;=#] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null, false);
      jSONObject0.optInt("");
      Float float0 = new Float((-1.0F));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      Integer integer0 = new Integer(869);
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", 62.3199);
      JSONObject.quote("");
      String string0 = "";
      jSONObject1.optDouble("");
      Long long0 = new Long(0L);
      Long.compareUnsigned(0L, 0L);
      Long.getLong("Bad value from toJSONString: ", 0L);
      Long.toUnsignedString(0L);
      JSONObject.valueToString(long0, 0, 0);
      String string1 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      jSONObject0.write(stringWriter0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("] is not a number.");
      jSONObject0.opt("KXG~T");
      try { 
        jSONObject0.getJSONArray("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "edi_";
      stringArray0[1] = "edi_";
      stringArray0[2] = "T$5n@2x[sI>egPq[";
      stringArray0[3] = "edi_";
      stringArray0[4] = "edi_";
      stringArray0[5] = "edi_";
      stringArray0[6] = "edi_";
      JSONObject jSONObject0 = new JSONObject("edi_", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getJSONObject("edi_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"edi_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("=]6rDB>=!<}2", hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("=]6rDB>=!<}2", false);
      jSONObject1.put("' and instead saw '", (-61L));
      jSONObject0.put("=]6rDB>=!<}2", (-61L));
      jSONObject0.getString("=]6rDB>=!<}2");
      double double0 = 5550.0;
      try { 
        jSONObject0.getJSONArray("java.lang.Long@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000003\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONObject.valueToString("null");
      JSONObject.valueToString("null", 87, 0);
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = "\\f";
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f(#h";
      stringArray0[1] = ",";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "9wn";
      stringArray0[5] = "P>Z+Qza NssL";
      stringArray0[6] = "hY?T3";
      stringArray0[7] = "j.hH";
      stringArray0[8] = "?lXb=;BggZB<vMI";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "3#EOV";
      stringArray0[2] = "3#EOV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "3#EOV";
      stringArray0[5] = "3#EOV";
      stringArray0[6] = "3#EOV";
      stringArray0[7] = "3#EOV";
      stringArray0[8] = "3#EOV";
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      jSONObject0.optBoolean("[x=oV5Y", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-948));
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject.getNames((Object) "JSONArray initial value should be a string or collection or array.");
      jSONObject0.getDouble("");
      jSONObject0.keys();
      jSONObject1.remove(">ktQJ");
      jSONObject0.optBoolean("JSONArray initial value should be a string or collection or array.", false);
      double double0 = jSONObject0.getDouble("");
      assertEquals((-948.0), double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte byte0 = (byte)117;
      Byte byte1 = new Byte((byte)117);
      JSONObject.valueToString(byte1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Byte@0000000001";
      stringArray0[1] = "wheel.json.JSONArray";
      stringArray0[2] = "java.lang.Byte@0000000001";
      stringArray0[3] = "java.lang.Byte@0000000001";
      stringArray0[4] = "java.lang.Byte@0000000001";
      stringArray0[5] = "java.lang.Byte@0000000001";
      stringArray0[6] = "%k";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Byte byte2 = new Byte((byte)123);
      Byte.compare((byte)117, (byte)117);
      hashMap0.putIfAbsent(byte2, byte1);
      hashMap0.put("java.lang.Byte@0000000001", "java.lang.Byte@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("%k", (Map) hashMap0);
      try { 
        jSONObject1.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9251211907908186
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Short short0 = new Short((short)62);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "000";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      int int0 = 59;
      jSONObject0.toString(59);
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, 59);
      Double.max((short)62, Double.NaN);
      Double.min(59, 59);
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("*^6);lT", "");
      JSONObject jSONObject2 = jSONObject1.put("^ivA7TFM&^e|(cL LW", false);
      jSONObject0.opt("Expected a ',' or '}'");
      jSONObject1.put("", (Object) null);
      JSONObject.testValidity(jSONObject2);
      jSONObject2.optJSONObject("");
      double double0 = jSONObject1.optDouble("", 0.0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8072180062889975
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("JtWR=.d?posJOHw", (Object) "JtWR=.d?posJOHw");
      jSONObject1.toString(3604);
      String string0 = "null";
      String string1 = "] not found.";
      try { 
        jSONObject0.get("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Short short0 = new Short((short)60);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.has("4ERJrNgNED<_Ur/@=");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "-z.";
      stringArray0[6] = "(x5>a%jw\" h";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f(#h";
      stringArray0[1] = ",";
      stringArray0[2] = ",";
      stringArray0[2] = "] is not a number.";
      stringArray0[4] = "9wn";
      stringArray0[5] = "P>Z+Qza NssL";
      stringArray0[7] = "j.hH";
      stringArray0[8] = "?lXb=;BggZB<vMI";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("] is not a number.", (-155));
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject.doubleToString((-1417.370680381831));
      Boolean boolean0 = Boolean.valueOf("-1417.370680381831");
      JSONObject.valueToString(boolean0);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 34, 15);
      Object object1 = new Object();
      Short short0 = new Short((short)384);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7075391741350712
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "edi_";
      stringArray0[1] = "edi_";
      stringArray0[2] = "T$5n@2x[sI>egPq[";
      String string0 = "e2^(Oa";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) "edi_");
      jSONObject0.put("SSP(UJGfU{rJ;tRiJ", (Collection) linkedList0);
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8820393286253114
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      int int0 = 91;
      String string0 = "for";
      JSONObject jSONObject1 = jSONObject0.put("for", 91);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject1.getInt(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      jSONObject1.optDouble("", Double.NaN);
      jSONObject0.toString(0);
      jSONObject0.optBoolean("&");
      jSONObject0.optString("&");
      jSONObject0.optDouble("&", 200.327802539);
      try { 
        jSONObject0.get("FV;lvwxi#dN#2mi9x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FV;lvwxi#dN#2mi9x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2341292907120063
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      jSONObject0.toString(44);
      jSONObject0.toString();
      jSONObject0.opt("wheel.json.JSONArray");
      try { 
        jSONObject0.get("_L<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_L<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.955983846584362
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject1.optDouble(",:]}/\"[{;=#", (-224.08149));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", (Collection) linkedList0);
      jSONObject2.optDouble(",:]}/\"[{;=#", 1513.60791904039);
      Float float0 = new Float(1.0F);
      jSONObject1.accumulate("for", "for");
      Byte byte0 = new Byte((byte)15);
      Byte.compare((byte) (-120), (byte)123);
      Long long0 = new Long((-2081L));
      Byte byte1 = Byte.valueOf((byte)1);
      String string0 = JSONObject.numberToString(byte1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.04334390016163
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", 62.3199);
      String string0 = "";
      JSONObject.quote("");
      jSONObject1.optDouble("");
      Long long0 = new Long(0L);
      Long.compareUnsigned(0L, 0L);
      Long.getLong("Bad value from toJSONString: ", 0L);
      Long.toUnsignedString(0L);
      int int0 = 0;
      JSONObject.valueToString(long0, 0, 0);
      JSONObject.getNames((Object) null);
      jSONObject1.optDouble("0");
      String string1 = "A JSONObject text must begin with '{'";
      jSONObject1.put("A JSONObject text must begin with '{'", (long) 0);
      String string2 = "get";
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2581575283634945
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-2440);
      String string0 = "";
      String string1 = "1bi&yJT>nZSC";
      jSONObject0.optLong("1bi&yJT>nZSC", (long) (-2440));
      int int1 = new Integer((-2440));
      JSONObject jSONObject1 = jSONObject0.accumulate("1bi&yJT>nZSC", "1bi&yJT>nZSC");
      jSONObject1.optDouble("Expected a ',' or '}'", 0.0);
      jSONObject1.put("", (long) (-2440));
      JSONObject.valueToString(jSONObject0, (-2440), (-2440));
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.438358990365426
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      jSONObject0.toString(44);
      jSONObject0.toString();
      jSONObject0.opt("wheel.json.JSONArray");
      jSONObject1.optString("t$d($$p_06X<l_.mS$");
      try { 
        jSONObject1.getBoolean("U<x&LWXc?ug>i, 9?XR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U<x&LWXc?ug>i, 9?XR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",brOm7a$n~]Y#";
      stringArray0[1] = "isreplaceFirst";
      stringArray0[2] = "i1doL";
      stringArray0[3] = "Kv0*6Ojv#x@=PzD";
      stringArray0[4] = "toL";
      stringArray0[5] = "Unterminated string";
      stringArray0[6] = "n<Z}C>";
      stringArray0[7] = ",";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("J'<$U*O\"4", (Collection) linkedList0);
      stringArray0[8] = "toS";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = 46;
      jSONObject1.toString(46);
      jSONObject1.isNull("get");
      jSONObject1.toString();
      jSONObject0.isNull("1UmSE^r|3ahby");
      try { 
        jSONObject1.getDouble("i1doL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i1doL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
