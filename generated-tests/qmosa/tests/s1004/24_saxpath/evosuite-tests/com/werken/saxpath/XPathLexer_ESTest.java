/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:54:52 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('c');
      xPathLexer0.comma();
      xPathLexer0.setPreviousToken((Token) null);
      assertNull(xPathLexer0.getXPath());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.at();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.consume(545);
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.hasMoreChars();
      xPathLexer0.div();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(586, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("o", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.colon();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals("e", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("r", token8.getTokenText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.setXPath("");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3071040555172218
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.consume(0);
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("m.eD8-9E+p,y$[vu4UV");
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.setXPath("m.eD8-9E+p,y$[vu4UV");
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.consume(0);
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0947048480463042
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('s');
      assertTrue(boolean0);
      
      xPathLexer0.leftBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('i');
      int int0 = xPathLexer0.currentPosition();
      assertEquals(9, int0);
      
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar('i');
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.dollar();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      char char0 = xPathLexer0.LA(9);
      assertEquals('\uFFFF', char0);
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('(');
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2701960902076992
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.endPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("jR", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.setXPath("\"8Arb+[");
      Token token2 = xPathLexer0.equals();
      assertEquals("\"", token2.getTokenText());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("8A", token3.getTokenText());
      
      xPathLexer0.colon();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("b", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8762555980127755
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("YY", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(">", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("cp1", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("z ", token5.getTokenText());
      
      xPathLexer0.getXPath();
      int int0 = xPathLexer0.endPosition();
      assertEquals(13, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2362380821520522
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("A", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("sW", token3.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals(":", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals("H", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("'", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals("\"", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('>');
      assertFalse(boolean0);
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      xPathLexer0.consume();
      Token token10 = xPathLexer0.dollar();
      assertEquals("H", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2911974022445312
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.endPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("\"8Arb+[");
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.consume(3542);
      String string0 = xPathLexer0.getXPath();
      assertEquals("\"8Arb+[", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.979620138976053
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("R", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("}", token4.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token6 = xPathLexer0.equals();
      assertEquals("H", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.div();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals("", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertEquals("xHj", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('>');
      xPathLexer0.or();
      Token token12 = xPathLexer0.rightBracket();
      assertEquals(4, token12.getTokenType());
      assertEquals("/", token12.getTokenText());
      
      xPathLexer0.consume();
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer0.div();
      Token token14 = xPathLexer0.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0440196028823492
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b1{zvu*,'");
      xPathLexer0.rightParen();
      xPathLexer0.and();
      Token token0 = xPathLexer0.pipe();
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("{zvu*,'", token1.getTokenText());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer1.div();
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('>');
      assertFalse(boolean0);
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("z", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('>');
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.259564415698712
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.identifier();
      assertEquals("m.werken.saxpath.Token", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.number();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('E');
      assertTrue(boolean0);
      
      xPathLexer0.or();
      Token token12 = xPathLexer0.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      xPathLexer0.setPreviousToken(token11);
      xPathLexer0.consume();
      Token token13 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token13.getTokenType());
      assertNotNull(token13);
      
      xPathLexer0.or();
      Token token14 = xPathLexer0.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2385432099457176
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.plus();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.dots();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token7 = xPathLexer1.rightParen();
      assertEquals("c", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals("om.werken.saxpath.Token", token10.getTokenText());
      
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('E');
      assertTrue(boolean0);
      
      xPathLexer0.or();
      xPathLexer1.rightBracket();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(5, token2.getTokenType());
      
      xPathLexer2.consume();
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
      
      xPathLexer1.or();
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6977171806193145
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.div();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer1.and();
      xPathLexer1.pipe();
      xPathLexer1.nextToken();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer1.rightParen();
      xPathLexer1.div();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("av7u9f`=&z?.*HZ");
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.identifierOrOperatorName();
      xPathLexer3.isIdentifierStartChar('(');
      xPathLexer1.or();
      XPathLexer xPathLexer4 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer4.rightBracket();
      xPathLexer1.consume();
      XPathLexer xPathLexer5 = new XPathLexer("av7u9f`=&z?.*HZ");
      xPathLexer5.dollar();
      xPathLexer5.dollar();
      Token token0 = xPathLexer4.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3333250775141963
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals("w", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("ken.saxpath.Token", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("Ug\"q23&.MV");
      xPathLexer1.or();
      Token token4 = xPathLexer1.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("U", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Ug\"q23&.MV");
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer2.rightParen();
      assertEquals(2, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("5OP%");
      xPathLexer3.div();
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("g", token7.getTokenText());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("\"", token8.getTokenText());
      
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertEquals("q23", token9.getTokenText());
      
      boolean boolean0 = xPathLexer3.isIdentifierStartChar('-');
      assertFalse(boolean0);
      
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      xPathLexer1.consume();
      Token token11 = xPathLexer1.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals(".", token11.getTokenText());
      
      xPathLexer4.div();
      Token token12 = xPathLexer2.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("g", token12.getTokenText());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0477984380555956
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("om", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("w", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("e", token4.getTokenText());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("rk", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.colon();
      Token token6 = xPathLexer0.plus();
      assertEquals("n", token6.getTokenText());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer2.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(".", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer1.number();
      assertEquals(30, token13.getTokenType());
      
      xPathLexer0.consume((-31));
      xPathLexer2.leftParen();
      int int0 = xPathLexer0.currentPosition();
      assertEquals((-19), int0);
      
      Token token14 = xPathLexer1.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0501097380445592
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b1{zvu*,'");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("{", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("zvu", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer1.div();
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('>');
      assertFalse(boolean0);
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("*", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.isIdentifierChar('>');
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5245003561291923
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierStartChar('(');
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.or();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer("W{(}XDv@Fi$");
      Token token0 = xPathLexer2.nextToken();
      Token token1 = xPathLexer0.dollar();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7521030249161293
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("R", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("}", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("W", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals(":", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      Token token8 = xPathLexer0.pipe();
      assertEquals("\"", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals("Hj/G", token12.getTokenText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8857642807655586
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.consume(0);
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("m.eD8-9E+p,y$[vu4UV");
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.setXPath("m.eD8-9E+p,y$[vu4UV");
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.consume(0);
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }
}
