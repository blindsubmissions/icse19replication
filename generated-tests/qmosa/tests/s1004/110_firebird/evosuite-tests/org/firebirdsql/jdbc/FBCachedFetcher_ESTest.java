/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:54:18 GMT 2018
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.sql.SQLXML;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.setFetchSize((-1));
      fBCachedFetcher0.isFirst();
      Class<String> class0 = String.class;
      fBCachedFetcher0.absolute((-289));
      fBCachedFetcher0.previous();
      try { 
        fBResultSet0.unwrap(class0);
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      byte[][] byteArray0 = new byte[6][0];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte) (-45);
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte) (-32);
      byteArray1[6] = (byte) (-108);
      byteArray1[7] = (byte)36;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)36;
      byteArray2[1] = (byte)5;
      byteArray2[2] = (byte) (-44);
      byteArray2[3] = (byte)5;
      byteArray2[4] = (byte)100;
      byteArray2[5] = (byte)82;
      byteArray2[6] = (byte)82;
      byteArray2[7] = (byte)5;
      byteArray2[8] = (byte)36;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)100;
      byteArray3[1] = (byte)100;
      byteArray3[2] = (byte)100;
      byteArray3[3] = (byte)82;
      byteArray3[4] = (byte)100;
      byteArray3[5] = (byte)5;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)5;
      byteArray4[1] = (byte)100;
      byteArray4[2] = (byte) (-32);
      byteArray4[3] = (byte) (-32);
      byteArray4[4] = (byte)36;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)36;
      byteArray5[1] = (byte)100;
      byteArray5[2] = (byte)3;
      byteArray5[3] = (byte)100;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)100;
      byteArray5[6] = (byte)58;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)78;
      byteArray6[1] = (byte)100;
      byteArray6[2] = (byte)3;
      byteArray0[5] = byteArray6;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.last();
      fBCachedFetcher1.updateRow((byte[][]) null);
      fBCachedFetcher1.isAfterLast();
      assertTrue(fBCachedFetcher1.isLast());
      
      fBCachedFetcher0.previous();
      int int0 = fBCachedFetcher0.getRowNum();
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.pollFirst();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      PipedReader pipedReader0 = new PipedReader();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.relative(32);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.previous();
      fBCachedFetcher1.beforeFirst();
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      byte[][] byteArray0 = new byte[1][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)0;
      byteArray0[0] = byteArray1;
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.first();
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.isFirst();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute(1300);
      fBCachedFetcher0.next();
      try { 
        fBResultSet0.getSQLXML(404);
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBResultSet", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      PipedReader pipedReader0 = new PipedReader();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      fBResultSet0.relative(1);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.afterLast();
      assertTrue(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9633815843099565
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      PipedReader pipedReader0 = new PipedReader();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.relative(32);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.last();
      fBCachedFetcher1.deleteRow();
      assertEquals(2, fBCachedFetcher1.getRowNum());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.20082764903455
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.insertRow((byte[][]) null);
      fBCachedFetcher1.isLast();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher0.previous();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.143952200643869
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      fBCachedFetcher0.next();
      linkedList1.iterator();
      PipedReader pipedReader0 = new PipedReader();
      linkedList1.add((byte[][]) null);
      fBCachedFetcher0.relative((-2069));
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      Class<FBBlobField> class0 = FBBlobField.class;
      fBCachedFetcher0.insertRow((byte[][]) null);
      try { 
        fBResultSet0.getObject("-M>UZ_C\"", class0);
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      boolean boolean1 = fBResultSet0.isBeforeFirst();
      assertTrue(boolean1);
      
      fBCachedFetcher0.previous();
      fBCachedFetcher0.updateRow(byteArray0);
      fBCachedFetcher0.isAfterLast();
      boolean boolean2 = fBCachedFetcher0.previous();
      assertTrue(boolean2 == boolean0);
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1761856615603072
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.last();
      fBCachedFetcher1.updateRow((byte[][]) null);
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.afterLast();
      fBCachedFetcher1.previous();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3900164058876556
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      fBCachedFetcher0.afterLast();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      PipedReader pipedReader0 = new PipedReader();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.beforeFirst();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher1.relative((-1757));
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher2 = new FBCachedFetcher(linkedList1, fBResultSet0);
      linkedList1.addAll((Collection<? extends byte[][]>) linkedList0);
      FBCachedFetcher fBCachedFetcher3 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher3.insertRow((byte[][]) null);
      fBCachedFetcher2.isLast();
      int int0 = 0;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FBObjectListener.ResultSetListener fBObjectListener_ResultSetListener0 = mock(FBObjectListener.ResultSetListener.class, new ViolatedAssumptionAnswer());
      fBCachedFetcher3.isAfterLast();
      fBCachedFetcher3.isAfterLast();
      fBCachedFetcher2.previous();
      // Undeclared exception!
      try { 
        fBCachedFetcher2.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      assertTrue(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.362757489425371
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      fBCachedFetcher0.afterLast();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      byte[][] byteArray0 = fBResultSet0.row;
      PipedReader pipedReader0 = new PipedReader();
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      linkedList0.sort(comparator0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet1);
      fBCachedFetcher1.afterLast();
      fBCachedFetcher1.previous();
      fBCachedFetcher1.insertRow((byte[][]) null);
      fBCachedFetcher1.deleteRow();
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
