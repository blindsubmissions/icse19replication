/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:54:12 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EmptyStackException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      StringReader stringReader0 = new StringReader("gcIW*");
      javaParser0.ReInit((Reader) stringReader0);
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)92;
      sequenceInputStream0.read(byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 480);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.jjtClose();
      simpleNode0.setIdentifier("gcIW*");
      int int0 = simpleNode1.jjtGetNumChildren();
      assertEquals(0, int0);
      
      simpleNode1.jjtGetParent();
      assertEquals(0, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      StringReader stringReader0 = new StringReader(">");
      simpleNode0.jjtAddChild((Node) null, 0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = null;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      nodeArray0[3] = null;
      nodeArray0[4] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.parser = javaParser0;
      simpleNode0.setIdentifier(":3'$s|?N3$J");
      simpleNode0.parent = null;
      String string0 = "com.soops.CEN4010.JMCA.JParser.JavaCharStream";
      JavaParser javaParser1 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      try { 
        javaParser1.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      simpleNode0.toString();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      String string0 = "*lt";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "MemberValuePair");
      int int0 = (-2268);
      stringWriter1.write("*lt");
      simpleNode0.toString("");
      stringWriter1.append((CharSequence) "*lt", 0, 1);
      stringWriter0.append('O');
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, (-1900), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Q\"nH");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("Q\"nH", stringWriter0);
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J4T^GTVhPi@,W9&%-i");
      stringReader0.close();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 836);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.parent = null;
      SimpleNode simpleNode1 = new SimpleNode(836);
      simpleNode0.jjtSetParent(simpleNode1);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(836);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      Writer writer0 = null;
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = null;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = null;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("Q1}s~@;sjl:", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1724800154383195
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("u(La)DkM>*!}.aG4+g");
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("u(La)DkM>*!}.aG4+g");
      arrayList0.retainAll(simpleNode0.identifiers);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((int) '/');
      StringWriter stringWriter1 = stringWriter0.append('/');
      stringWriter1.flush();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "u(La)DkM>*!}.aG4+g");
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      stringWriter2.write(charArray0, 0, 0);
      simpleNode0.dump("u(La)DkM>*!}.aG4+g", stringWriter2);
      assertEquals("//u(La)DkM>*!}.aG4+g<CompilationUnit>\n  <identifier>u(La)DkM>*!}.aG4+g</identifier>\n  <identifier>u(La)DkM>*!}.aG4+g</identifier>\n</CompilationUnit>\n", stringWriter2.toString());
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      simpleNode0.toString();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.toString();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JavaParser javaParser1 = new JavaParser(bufferedInputStream0);
      simpleNode0.jjtAddChild((Node) null, 0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("CompilationUnit");
      simpleNode1.toString();
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.toString();
      simpleNode1.jjtAddChild(simpleNode0, 775);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CompilationUnit");
      // Undeclared exception!
      simpleNode0.dump("CompilationUnit", stringWriter1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("u(La)DkM>*!}.aG4+g");
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("u(La)DkM>*!}.aG4+g");
      arrayList0.retainAll(simpleNode0.identifiers);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(0);
      StringWriter stringWriter1 = stringWriter0.append('/');
      stringWriter1.flush();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "u(La)DkM>*!}.aG4+g");
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      stringWriter2.write(charArray0, 0, 0);
      simpleNode0.dump("u(La)DkM>*!}.aG4+g", stringWriter2);
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetChild(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.setIdentifier("");
      simpleNode0.setIdentifier("");
      simpleNode0.dump("p4Yc=Io$i1ctpBbVz", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 651);
      assertEquals(652, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3750242529845458
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = arrayList0;
      arrayList0.retainAll(simpleNode0.identifiers);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(0);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "u(La)DkM>*!}.aG4+g");
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      stringWriter1.write(charArray0, 0, 0);
      simpleNode0.dump("u(La)DkM>*!}.aG4+g", stringWriter1);
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetChild(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringWriter0.write(charArray0);
      simpleNode0.dump("VariableDeclaratorId", stringWriter0);
      assertEquals("\u0000u(La)DkM>*!}.aG4+g/<CompilationUnit></CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.777661295762166
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = arrayList0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("Du(La)DzM>*!}2aG4+g");
      arrayList0.retainAll(simpleNode0.identifiers);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[9];
      simpleNode0.identifiers.add(">=");
      charArray0[0] = '<';
      charArray0[1] = 'h';
      charArray0[2] = '~';
      charArray0[3] = '_';
      charArray0[5] = 'f';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">=");
      charArray0[6] = 'p';
      charArray0[7] = 'm';
      simpleNode0.identifiers.addAll((Collection<? extends String>) simpleNode0.identifiers);
      charArray0[8] = 'H';
      stringWriter0.write(charArray0);
      simpleNode0.dump("Du(La)DzM>*!}2aG4+g", stringWriter0);
      assertEquals("<h~_\u0000fpmH<CompilationUnit>\n  <identifier>Du(La)DzM>*!}2aG4+g</identifier>\n  <identifier>*ge</identifier>\n  <identifier>Du(La)DzM>*!}2aG4+g</identifier>\n  <identifier>*ge</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.806504609875222
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = arrayList0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers.add("<=");
      simpleNode0.identifiers.retainAll(arrayList0);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      arrayList0.add("u-{{q");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u-{{q");
      simpleNode0.identifiers.addAll((Collection<? extends String>) arrayList0);
      StringWriter stringWriter2 = stringWriter0.append('e');
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = '_';
      charArray0[2] = '_';
      stringWriter2.write(charArray0);
      simpleNode0.dump("<=", stringWriter2);
      assertEquals("ee__<CompilationUnit>\n  <identifier>*le</identifier>\n  <identifier>u-{{q</identifier>\n  <identifier>*le</identifier>\n  <identifier>u-{{q</identifier>\n</CompilationUnit>\n", stringWriter2.toString());
      assertEquals("ee__<CompilationUnit>\n  <identifier>*le</identifier>\n  <identifier>u-{{q</identifier>\n  <identifier>*le</identifier>\n  <identifier>u-{{q</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.908908734898781
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("CompilationUnit");
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.toString("CompilationUnit");
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.toString();
      SimpleNode simpleNode3 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode3.identifiers;
      arrayList0.add(">");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CompilationUnitCompilationUnit");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode3.dump(">L", stringWriter2);
      stringWriter2.append((CharSequence) "CompilationUnitCompilationUnit");
      simpleNode1.dump("", stringWriter1);
      assertEquals(1, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("CompilationUnit");
      simpleNode1.jjtOpen();
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      arrayList0.add("{");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0);
      arrayList0.addAll((Collection<? extends String>) list0);
      simpleNode1.dump("l6Fof*B|XJ", stringWriter0);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0791615912646864
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtClose();
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList0.add("{");
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.setIdentifier("</");
      StringWriter stringWriter2 = new StringWriter(15);
      // Undeclared exception!
      try { 
        simpleNode0.dump("zT)e K<@|YI2Pm", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8377716126398524
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(11);
      SimpleNode simpleNode1 = new SimpleNode(11);
      simpleNode1.jjtAddChild(simpleNode0, 11);
      simpleNode1.toString();
      simpleNode0.jjtAddChild(simpleNode1, 11);
      simpleNode1.setIdentifier("TypeParameters");
      simpleNode0.toString();
      simpleNode1.jjtAddChild(simpleNode0, 11);
      simpleNode0.jjtAddChild(simpleNode1, 5);
      String string0 = "</";
      simpleNode0.setIdentifier("<<");
      int int0 = 1;
      StringWriter stringWriter0 = new StringWriter(1);
      // Undeclared exception!
      try { 
        simpleNode1.dump("  <identifier>", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(";");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("}");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<String> arrayList4 = simpleNode0.identifiers;
      arrayList4.addAll((Collection<? extends String>) arrayList3);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{");
      simpleNode0.dump("<<", stringWriter1);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.dump((String) null, stringWriter1);
      SimpleNode simpleNode2 = new SimpleNode(2429);
      simpleNode2.dump("{", stringWriter0);
      simpleNode1.dump("<<", stringWriter0);
      assertEquals("{<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }
}
