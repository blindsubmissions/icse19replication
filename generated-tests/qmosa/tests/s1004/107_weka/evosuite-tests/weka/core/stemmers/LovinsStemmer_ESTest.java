/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:23:56 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ars";
      stringArray0[1] = "v' 2x]]HgJM2J4F";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("HOWPUBLISHED");
      assertEquals("howpubl", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stem("ars");
      assertEquals("ar", string1);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0571137807564348
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "XeqsAH2t& 3wcTJ]";
      stringArray0[5] = "";
      stringArray0[6] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("[CH$UNOqHz{'rDTHh");
      assertEquals("[ch$unoqhz{'rdthh", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.stem("pages");
      assertEquals("pag", string2);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem(")+");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stemString("");
      assertFalse(string4.equals((Object)string1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9459347757561138
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("5zz3Gqk#4K $Tha`R");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("5zz3Gqk#4K $Tha`R");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("z Vp|/_Ll]*dnmP");
      assertEquals("z vp|/_ll]*dnmp", string2);
      
      lovinsStemmer0.stemString("oidal");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "z Vp|/_Ll]*dnmP";
      stringArray0[2] = "5zz3Gqk#4K $Tha`R";
      stringArray0[3] = "5zz3Gqk#4K $Tha`R";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "JTURp88Eh!vPTFb";
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer0.stem("Y/m{Yo4.% UI.");
      assertEquals("y/m{yo4.% ui.", string4);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1298417459949897
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("iHx>CcgH'6Q{hE\"f|w");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      stringArray0[1] = "N$c";
      lovinsStemmer0.stem("");
      stringArray0[2] = "R'}";
      stringArray0[3] = "4 32I`Yfe$N)><n-Pcp";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("X4%.g)#r{Apw=7gE$>6");
      lovinsStemmer0.stem("X4%.g)#r{Apw=7gE$>6");
      lovinsStemmer0.stemString("4 32I`Yfe$N)><n-Pcp");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0955076937094301
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ol5Qjm?W#jd;'~";
      stringArray0[1] = "8ylE)|7O%wp;'wrn6";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string0);
      
      lovinsStemmer0.stem("8ylE)|7O%wp;'wrn6");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("8ylE)|7O%wp;'wrn6");
      assertEquals("8yle)|7o%wp;'wrn6", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "8yle)|7o%wp;'wrn6";
      stringArray1[2] = "8034";
      stringArray1[3] = "8ylE)|7O%wp;'wrn6";
      stringArray1[4] = "ol5Qjm?W#jd;'~";
      stringArray1[5] = "";
      stringArray1[6] = "ol5Qjm?W#jd;'~";
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("ing");
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer0.stemString("ewErA");
      assertEquals("ewer", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("rZsSxLW[+kk9L)T");
      lovinsStemmer0.stem("rZsSxLW[+kk9L)T");
      lovinsStemmer0.stemString("Can't add object to itself!");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "h[$ _vb?R<M>BaA}";
      LovinsStemmer.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1241077412610314
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("QvkwMF{|&H;!zkh6!$");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.067807763157761
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("r}_/yv`6{:G|9z");
      assertEquals("r}_/yv`6{:g|9z", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stem("isms");
      assertEquals("ism", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stem("uad");
      assertEquals("uas", string2);
      
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8287005193558294
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("ionher");
      lovinsStemmer0.stem("A classname has to be provided with the -W option!");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("IC[@Zo~k\"3y9kh+X");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("ionher");
      lovinsStemmer0.stemString("a classname has to be provided with the -w option!");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("on");
      lovinsStemmer0.stemString("IC[@Zo~k\"3y9kh+X");
      lovinsStemmer0.stem("ae");
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("`+5JS~LDJiIM79");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8410205459886739
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("O/%#mPUW]'");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("O/%#mPUW]'");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("8034et");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer2.stemString("How something strange has been published. The first word should be capitalized.");
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9560718577335003
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "8034";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("8034end");
      assertEquals("8034ens", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer2.stemString("6c/VR(l/k2o");
      assertEquals("6c/vr(l/k2", string3);
      
      String string4 = lovinsStemmer2.toString();
      assertFalse(string4.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9325546332426851
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("rZsSxLW[+kk9L)T");
      lovinsStemmer0.stem("rZsSxLW[+kk9L)T");
      lovinsStemmer0.stemString("Can't add object to itself!");
      lovinsStemmer0.stemString("rzssxlw[+kk9l)t");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("rzssxlw[+kk9l)t");
      lovinsStemmer0.stem("rzssxlw[+kk9l)t");
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("8034");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8236789167151242
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("the name(s) of the author(s), in the format described in the latex book.rud");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("pic");
      lovinsStemmer0.stemString("istics");
      String[] stringArray0 = new String[3];
      lovinsStemmer0.globalInfo();
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "the name(s) of the author(s), in the format described in the latex book.rud";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("yz");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0821955300387673
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("9P;V+ydviq+1H");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9P;V+ydviq+1H";
      stringArray0[1] = "9p;v+ydviq+1h";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "rv6!SL<wLMeVW`";
      stringArray0[3] = "9P;V+ydviq+1H";
      LovinsStemmer.main(stringArray0);
      stringArray0[4] = "9P;V+ydviq+1H";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("9p;v+ydviq+1h");
      lovinsStemmer0.stem("9p;v+ydviq+1h");
      lovinsStemmer0.stem("9p;v+ydviq+1h");
      lovinsStemmer0.stem("9P;V+ydviq+1H");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("9p;v+ydviq+1h");
      lovinsStemmer1.stem("rv6!SL<wLMeVW`");
      String string1 = lovinsStemmer0.stem("entiality");
      assertEquals("ent", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("~|.5CKcc:h+Mwbn0");
      lovinsStemmer1.getRevision();
      String string2 = lovinsStemmer1.stemString("editex");
      assertEquals("editic", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0641525852940381
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      String string2 = lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("YEAR");
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stemString("8034");
      assertTrue(string3.equals((Object)string2));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8804901314870051
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("mit");
      String string0 = lovinsStemmer0.stemString("mit");
      assertEquals("mis", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "mit";
      stringArray0[1] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("XeqsAH2t& 3wcTJ]");
      String string3 = lovinsStemmer1.stem("ionality");
      assertEquals("ion", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("author");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string4 = lovinsStemmer3.stemString("8034");
      assertTrue(string4.equals((Object)string1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9339820733337609
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("entiation");
      assertEquals("enti", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.stem("rzssxlw[+kk9l)tcid");
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0691705211740168
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("the name(s) of the author(s), in the format described in the latex book.rud");
      assertEquals("the name(s) of the author(s), in the format described in the latex book.rus", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("the name(s) of the author(s), in the format described in the latex book.rus");
      lovinsStemmer0.stem("Lga![(`9");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      String string1 = lovinsStemmer0.stemString("mis");
      assertEquals("mi", string1);
      
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0199558456044235
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Rj=iQQ)l&5");
      assertEquals("rj=iqq)l&5", string0);
      
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "Rj=iQQ)l&5";
      stringArray0[1] = "Rj=iQQ)l&5";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("icance");
      lovinsStemmer0.stem("Rj=iQQ)l&5");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      String string1 = lovinsStemmer1.stem("`j)=DE");
      assertEquals("`j)=d", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("P\"d]%&");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.globalInfo();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.823678916715124
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("@");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("@");
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("@");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.lud");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.lus", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6974513624412043
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lus";
      stringArray0[1] = "[JU*'R`hMJef_Pn1";
      stringArray0[2] = "O-N";
      stringArray0[3] = "*!ks3%jN{F]4<h]UNQ";
      stringArray0[4] = "[JU*'R`hMJef_Pn1";
      stringArray0[5] = "a report publ by a school or other institut, usu number within a ser.";
      stringArray0[6] = "a report publ by a school or other institut, usu number within a ser.";
      stringArray0[7] = "[JU*'R`hMJef_Pn1";
      stringArray0[8] = "A report published by a school or other institution, usually numbered within a series.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("a report publ by a school or other institut, usu number within a ser.");
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("lusyt");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer1.stemString("cid");
      assertEquals("cis", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0086074596411065
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      String string1 = lovinsStemmer0.stemString("mit");
      assertEquals("mis", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("a classnam ha to be provid with th -w opt!");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("San Mateo, CA");
      lovinsStemmer0.stem("eb.SZeOP9;");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("lid");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer3.toString();
      lovinsStemmer3.stem("ia");
      lovinsStemmer3.stem("");
      lovinsStemmer3.stemString(";NOzBWW\"");
      lovinsStemmer2.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }
}
