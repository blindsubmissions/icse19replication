/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:24:17 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      discretize0.setUseEqualFrequency(false);
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      
      discretize0.getCapabilities();
      discretize0.setAttributeIndices("8964");
      String string1 = discretize0.binsTipText();
      assertEquals("Number of bins.", string1);
      
      discretize0.getUseEqualFrequency();
      discretize0.setMakeBinary(false);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      
      String string2 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = 2136.77515235748;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2136.77515235748;
      doubleArray0[2] = 2136.77515235748;
      doubleArray0[3] = 2136.77515235748;
      doubleArray0[4] = 2136.77515235748;
      SparseInstance sparseInstance0 = new SparseInstance(2136.77515235748, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "Vfrz8yu_`E-8TS";
      Discretize discretize0 = new Discretize("Vfrz8yu_`E-8TS");
      Filter.makeCopy(discretize0);
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = 1.7976931348623157E308;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[4];
      intArray0[0] = 4064;
      discretize0.getOptions();
      intArray0[1] = (-716);
      intArray0[2] = 0;
      int int0 = 2;
      intArray0[3] = 2;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.globalInfo();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Wy;tmlk*QBwfc(_T";
      discretize0.getOptions();
      stringArray0[1] = "XS{}%Ugjg3";
      stringArray0[2] = "";
      stringArray0[3] = ".U;aF9T4Q\"nHyr*H";
      stringArray0[4] = "m#\u0000#EZU>)c@MqE{9S";
      Filter.makeCopy(discretize0);
      stringArray0[5] = "KU|#e'K$F+W04";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: Wy;tmlk*QBwfc(_T XS{}%Ugjg3 .U;aF9T4Q\"nHyr*H m#\u0000#EZU>)c@MqE{9S KU|#e'K$F+W04 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.m_FindNumBins = false;
      discretize0.getFindNumBins();
      discretize0.getCapabilities();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getBinRangesString(5);
      discretize0.getFindNumBins();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("?hx+7h");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "vP6mPvbS";
      stringArray0[1] = "zeropoint";
      stringArray0[2] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[3] = "";
      Discretize.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.makeBinaryTipText();
      int int0 = 0;
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = 5;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".aL?aD!zG%y/";
      stringArray0[1] = "-0-z";
      stringArray0[2] = "2s);YuLxR!ejSQ'2(";
      stringArray0[3] = "}G\\";
      stringArray0[4] = "IfZ";
      stringArray0[5] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[6] = "uiZeZk~";
      stringArray0[7] = "";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.m_UseEqualFrequency = true;
      String[] stringArray1 = new String[0];
      discretize0.setOptions(stringArray1);
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.getRevision();
      discretize0.setInvertSelection(false);
      discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("Int");
      discretize0.getCapabilities();
      int int0 = 1653;
      discretize0.getBinRangesString(1653);
      discretize0.getCutPoints(89);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      sparseInstance0.toString(0, 0);
      sparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.attributeIndicesTipText();
      discretize0.setAttributeIndices("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      boolean boolean0 = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 0;
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 0);
      int int1 = (-260);
      // Undeclared exception!
      try { 
        instances0.subList((-260), (-1959));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -260
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0280290733074104
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Discretize discretize0 = new Discretize("first-last");
      Filter.runFilter(discretize0, (String[]) null);
      String[] stringArray0 = discretize0.getOptions();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      
      discretize0.getBinRangesString(931);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      Discretize discretize1 = new Discretize();
      discretize1.m_MakeBinary = true;
      try { 
        discretize1.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9661755171495705
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("Set attribute selectio[ mode. If flse, only selected (umeric) attributes in the range will be iscretized; if tre, only non-selected attribut~s will be kiscre^ized.");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.269639374604125
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("Q{`d&RB{)+fg87d6");
      discretize0.setAttributeIndices("Q{`d&RB{)+fg87d6");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("7");
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 5.70001;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-637.4826554480161);
      doubleArray2[4] = 1.7976931348623157E308;
      doubleArray2[5] = 1374.9287444060355;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-93.63681);
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-93.63681);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 1.7976931348623157E308;
      doubleArray5[1] = (-637.4826554480161);
      doubleArray5[2] = 1374.9287444060355;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-2071.394336647);
      doubleArray5[5] = (-93.63681);
      doubleArray5[6] = (-93.63681);
      doubleArray5[7] = (-93.63681);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-637.4826554480161);
      doubleArray7[1] = 1.7976931348623157E308;
      doubleArray7[2] = (-637.4826554480161);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 1.7976931348623157E308;
      doubleArray8[2] = (-93.63681);
      doubleArray8[3] = (-1.0);
      doubleArray8[4] = 1.7976931348623157E308;
      doubleArray8[5] = 5.70001;
      doubleArray8[6] = (-637.4826554480161);
      doubleArray8[7] = 0.0;
      doubleArray8[8] = 1.7976931348623157E308;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = (-93.63681);
      doubleArray9[1] = 1.7976931348623157E308;
      doubleArray9[2] = (-1.0);
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-1717986916));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1717986916
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0688846458275627
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache");
      discretize0.setMakeBinary(true);
      assertEquals(10, discretize0.getBins());
      
      discretize0.m_NumBins = 0;
      discretize0.getOptions();
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("6'|+Q0I~}*m^x");
      discretize0.setDesiredWeightOfInstancesPerInterval(4.8);
      discretize0.m_IgnoreClass = true;
      discretize0.getOptions();
      assertEquals(4.8, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-816.4);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 1321.7268825875883;
      doubleArray1[4] = 1109.796436609;
      doubleArray1[5] = 4023.3058956969626;
      doubleArray1[6] = 1262.8;
      doubleArray1[7] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-816.4);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1321.7268825875883;
      doubleArray2[5] = 1473.1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 1321.7268825875883;
      doubleArray4[3] = 1473.1;
      doubleArray4[4] = (-816.4);
      doubleArray4[5] = 4023.3058956969626;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = 2.0;
      doubleArray5[2] = 4023.3058956969626;
      doubleArray5[3] = 4023.3058956969626;
      doubleArray5[4] = 1109.796436609;
      doubleArray5[5] = 1109.796436609;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 4023.3058956969626;
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = 1262.8;
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = 2.0;
      doubleArray6[6] = 1321.7268825875883;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      Filter.makeCopies(discretize0, 4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray8 = discretize0.getCutPoints(4);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertNotNull(doubleArray8);
      assertEquals(6, doubleArray8.length);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("k]1w2GHP'ApzsCWH");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3287.25248;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 3287.25248;
      doubleArray3[1] = 3287.25248;
      doubleArray3[2] = 3287.25248;
      doubleArray3[3] = 3287.25248;
      doubleArray3[4] = 3287.25248;
      doubleArray3[5] = 3287.25248;
      doubleArray3[6] = 3287.25248;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 3287.25248;
      doubleArray4[1] = 3287.25248;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 3287.25248;
      doubleArray5[1] = 3287.25248;
      doubleArray5[2] = 3287.25248;
      doubleArray5[3] = 3287.25248;
      doubleArray5[4] = 3287.25248;
      doubleArray5[5] = 3287.25248;
      doubleArray5[6] = 3287.25248;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 3287.25248;
      doubleArray6[1] = 3287.25248;
      doubleArray6[2] = 3287.25248;
      doubleArray6[3] = 3287.25248;
      doubleArray6[4] = 3287.25248;
      doubleArray6[5] = 3287.25248;
      doubleArray6[6] = 3287.25248;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 3287.25248;
      doubleArray7[1] = 3287.25248;
      doubleArray7[2] = 3287.25248;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 3287.25248;
      doubleArray8[2] = 3287.25248;
      doubleArray8[3] = 3287.25248;
      doubleArray8[4] = 3287.25248;
      doubleArray8[5] = 3287.25248;
      doubleArray8[6] = 3287.25248;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
