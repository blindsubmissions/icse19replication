/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:39:44 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.postgresql.jdbc4.Jdbc4Clob;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.util.PSQLException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(8, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      StringBuilder stringBuilder2 = stringBuilder1.delete(0, 8);
      StringBuilder stringBuilder3 = stringBuilder2.append(true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0);
      SQLUtil.addRequiredCondition("", stringBuilder4);
      assertEquals("truew and ", stringBuilder4.toString());
      assertEquals("truew and ", stringBuilder0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "'";
      stringArray0[0] = "'";
      stringArray0[1] = "BLOB";
      stringArray0[2] = "";
      stringArray0[3] = "alter session";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderValue("'");
      SQLUtil.parseColumnTypeAndSize("'");
      String string1 = null;
      String string2 = "2k8ArSN9P;V";
      TableContainer tableContainer0 = new TableContainer("2k8ArSN9P;V");
      tableContainer0.getTable("");
      int int0 = 4306;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("43Y20.U", (DBTable) null, 4306, "'''");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("' = ''' AND BLOB = 'BLOB' AND  = '' AND alter session = 'alter session'", (String) null, defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "insert";
      stringArray0[1] = "insert";
      stringArray0[2] = "insert";
      String string0 = SQLUtil.innerJoin("insert", stringArray0, "C%CA4/+_{u!+", "insert", stringArray0);
      assertEquals("C%CA4/+_{u!+ as insert on insert.insert = insert.insert and insert.insert = insert.insert and insert.insert = insert.insert", string0);
      
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE insert = 'insert' AND insert = 'insert' AND insert = 'insert'", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MD5";
      stringArray0[1] = null;
      SQLUtil.leftJoin((String) null, stringArray0, "MD5", "p:rvH8", stringArray0);
      SQLUtil.innerJoin("MD5", stringArray0, stringArray0[1], "(~(o:(Bd#He;4r", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "M{28W0tatRNY2";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "H3tC!uaepDD|5oULhe");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("H3tC!uaepDD|5oULhe", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'L';
      charArray0[2] = 'c';
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuilder2.append(charArray0, 0, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B,Q+yzWof[oo Iwh[";
      stringArray0[1] = "B,Q+yzWof[oo Iwh[";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "B,Q+yzWof[oo Iwh[", true, stringArray0);
      defaultDBTable0.getReferrers();
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.join("org.apache.derby.iapi.types.SQLDecimal", "org.apache.derby.iapi.types.SQLDecimal", stringArray0, "B,Q+yzWof[oo Iwh[", "CONSTRAINT \"B,Q+yzWof[oo Iwh[\" ", stringArray0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("1Ia2r L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("ArVEn}@Z<Z_HFe1", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(131072L);
      StringBuilder stringBuilder3 = stringBuilder2.append((double) 0);
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, (Object) sQLUtil0);
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'd';
      charArray0[2] = '5';
      charArray0[3] = '2';
      charArray0[4] = '\'';
      // Undeclared exception!
      try { 
        stringBuilder4.insert((-427), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -427
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "h),9K";
      SQLUtil.isProcedureCall("h),9K");
      SQLUtil.isDML("h),9K");
      String string1 = "org.hsqldb.Database";
      SQLUtil.normalize("org.hsqldb.Database", true);
      String[] stringArray0 = null;
      String string2 = "OBp\\pMTWXr";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("org.hsqldb.Database", (String[]) null, "org.hsqldb.Database", "OBppMTWXr", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "G";
      stringArray0[2] = "|%8Sev^@B ,Q}/";
      stringArray0[3] = " (";
      String string0 = "Z#Ft,.{DOp.,gZc,";
      stringArray0[4] = "Z#Ft,.{DOp.,gZc,";
      stringArray0[5] = "";
      String string1 = "&i-=\"PY";
      stringArray0[6] = "&i-=\"PY";
      stringArray0[7] = "vnbyhv0WwEH'b2";
      stringArray0[8] = "NCLOB";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("G");
      defaultDBTable0.getIndex("vnbyhv0WwEH'b2");
      SQLUtil.typeAndName((DBObject) null);
      DBDataType dBDataType0 = null;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Z#Ft,.{DOp.,gZc,", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      SQLUtil.isDDL("");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create unique index`roh<};uj$eeq5!2e");
      assertNotNull(boolean1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.isProcedureCall("h),9K");
      SQLUtil.isDML("h),9K");
      String string0 = "org.hsqldb.Database";
      SQLUtil.normalize("org.hsqldb.Database", false);
      String string1 = "OBp\\pMTWXr";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("org.hsqldb.Database", (String[]) null, "org.hsqldb.Database", "OBppMTWXr", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6443416151367973
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      String string0 = "isc_info_sql_field ";
      SQLUtil.parseColumnTypeAndSize("isc_info_sql_field ");
      SQLUtil.normalize("' = ''' an", true);
      String string1 = "YHvd-*!";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 8;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0160085311135825
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "'";
      SQLUtil.isDML("update");
      SQLUtil.normalize("drop table`roh<};uj$eeq5!2e", true);
      SQLUtil.innerJoin((String) null, stringArray0, (String) null, "C%CA4/+_{u!+", stringArray0);
      SQLUtil.normalize("C%CA4/+_{u!+", true);
      System.setCurrentTimeMillis(4294967296L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("insert`roh<};uj$eeq5!2e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'insert`roh<};uj$eeq5!2e' not found in table ' NULL'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.022808529414704
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("`ROH<};uj$EEq5!2E");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`ROH<};uj$EEq5!2E";
      stringArray0[1] = "`ROH<};uj$EEq5!2E";
      stringArray0[2] = "`ROH<};uj$EEq5!2E";
      stringArray0[3] = "`ROH<};uj$EEq5!2E";
      stringArray0[4] = "`ROH<};uj$EEq5!2E";
      stringArray0[6] = "`ROH<};uj$EEq5!2E";
      stringArray0[7] = "`ROH<};uj$EEq5!2E";
      stringArray0[8] = "`ROH<};uj$EEq5!2E";
      String string0 = SQLUtil.innerJoin("`ROH<};uj$EEq5!2E", stringArray0, "org.apache.derby.impl.store.raw.xact.EndXact", "`B-H6(O}))AW=|A`", stringArray0);
      assertEquals("org.apache.derby.impl.store.raw.xact.EndXact as `B-H6(O}))AW=|A` on `ROH<};uj$EEq5!2E.`ROH<};uj$EEq5!2E = `B-H6(O}))AW=|A`.`ROH<};uj$EEq5!2E and `ROH<};uj$EEq5!2E.`ROH<};uj$EEq5!2E = `B-H6(O}))AW=|A`.`ROH<};uj$EEq5!2E and `ROH<};uj$EEq5!2E.`ROH<};uj$EEq5!2E = `B-H6(O}))AW=|A`.`ROH<};uj$EEq5!2E and `ROH<};uj$EEq5!2E.`ROH<};uj$EEq5!2E = `B-H6(O}))AW=|A`.`ROH<};uj$EEq5!2E and `ROH<};uj$EEq5!2E.`ROH<};uj$EEq5!2E = `B-H6(O}))AW=|A`.`ROH<};uj$EEq5!2E and `ROH<};uj$EEq5!2E.null = `B-H6(O}))AW=|A`.null and `ROH<};uj$EEq5!2E.`ROH<};uj$EEq5!2E = `B-H6(O}))AW=|A`.`ROH<};uj$EEq5!2E and `ROH<};uj$EEq5!2E.`ROH<};uj$EEq5!2E = `B-H6(O}))AW=|A`.`ROH<};uj$EEq5!2E and `ROH<};uj$EEq5!2E.`ROH<};uj$EEq5!2E = `B-H6(O}))AW=|A`.`ROH<};uj$EEq5!2E", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean1);
      
      boolean boolean2 = SQLUtil.isProcedureCall("`ROH<};uj$EEq5!2E");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create tablecreate unique index`roh<};uj$eeq5!2e");
      DBPackage dBPackage0 = new DBPackage("p;=@", (DBSchema) null);
      dBPackage0.isIdentical((DBObject) null);
      SQLUtil.typeAndName(dBPackage0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2636256721237273
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.isDML("6n*)9:");
      SQLUtil.normalize("drop table`roh<};uj$eeq5!2e", false);
      String[] stringArray0 = new String[1];
      SQLUtil.innerJoin("0D ,3", stringArray0, "6n*)9:", "drop table`roh<};uj$eeq5!2e", stringArray0);
      SQLUtil.normalize("6n*)9: as drop table`roh<};uj$eeq5!2e on 0D ,3.null = drop table`roh<};uj$eeq5!2e.null", false);
      System.setCurrentTimeMillis(0L);
      String string0 = "`^s](~";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`^s](~");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("/rFO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '/rFO' not found in table '`^s](~'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getIndex("callh),9k");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table ", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1717986916), "|%8Sev^@B ,Q}/");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable1, dBDataType0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7721393884375285
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "'";
      stringArray0[0] = "'";
      String string1 = "";
      stringArray0[2] = "";
      stringArray0[3] = "alter session";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.removeComments("'");
      SQLUtil.parseColumnTypeAndSize("'");
      TableContainer tableContainer0 = new TableContainer("2k8ArSN9P;V");
      tableContainer0.getTable("");
      SQLUtil.isDDL("'");
      SQLUtil.mutatesDataOrStructure("alter session");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("//");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-190060779), "drop table'");
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("isc_info_sql_field ");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "TP.Id~jd>A-;W", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("G#=&8Q8%)hDx:0", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBSchema dBSchema0 = new DBSchema("G#=&8Q8%)hDx:0");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("p\"'}LR,", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("$+kk", true, dBTable0, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.renderValue(integer0);
      DBCatalog dBCatalog0 = new DBCatalog("CONSTRAINT TP.Id~jd>A-;W PRIMARY KEY ()");
      dBCatalog0.getTable("A@W@7", false);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("2", (DBTable) null, 1978, "CONSTRAINT $+kk FOREIGN KEY () REFERENCES p\"'}LR,()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getIndex("callh),9k");
      SQLUtil.typeAndName(defaultDBTable0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1717986916), "Xx(H'Zo_D~");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Integer integer1 = new Integer(1);
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ":M!=mkxf6|KZkB", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(":M!=mkxf6|KZkB", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBSchema dBSchema0 = new DBSchema(":M!=mkxf6|KZkB");
      DBDataType dBDataType0 = DBDataType.getInstance(8, ":M!=mkxf6|KZkB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("p\"'}LR,", dBTable0, dBDataType0);
      dBUniqueIndex0.equals(defaultDBColumn0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("8l4g;7mf.Fo@tU~", false, defaultDBTable1, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
      
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT 8l4g;7mf.Fo@tU~ ", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(8, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      stringBuilder1.delete(0, 8);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("#+{]Zh6yVWh7/E[b1^", defaultDBTable0, dBDataType0);
      DBDataType.getInstance((-1848413935), "zT5ox{D=Wxg[+HgXm");
      DBDataType.getInstance((-1717986916), "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      defaultDBTable0.getColumn("");
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("#+{]Zh6yVWh7/E[b1^  NULL", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.341994252232425
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rename";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rename", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("BJ!=)Mu_=Xa+2pyt", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBSchema dBSchema0 = new DBSchema("rename");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("I/#J>bcq4", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Ls[B7kfuF", false, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Ls[B7kfuF FOREIGN KEY (rename) REFERENCES null(rename)", string0);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY (rename)", string1);
      
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string2 = SQLUtil.renderValue("rename");
      assertEquals("'rename'", string2);
      
      DBCatalog dBCatalog0 = new DBCatalog("TP.Id~jd>A-;W");
      dBCatalog0.getTable(" and ", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique indexm;!cw+%j", defaultDBTable0, (-2), "select into");
      String string3 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create unique indexm;!cw+%j SELECT INTO NULL", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("update");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("drop table`roh<};uj$eeq5!2e", true);
      assertEquals("drop table ` roh < } ; uj $ eeq5 ! 2e", string0);
      
      String string1 = SQLUtil.normalize("C%CA4/+_{u!+", true);
      assertEquals(" C % CA4 / + _ { u ! +", string1);
      
      System.setCurrentTimeMillis(4294967296L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" wUPL");
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(13, "(_[u0+daV}~,qE7x");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" wUPL", defaultDBTable0, dBDataType0, integer1);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" wUPL (_[U0+DAV}~,QE7X(0) NULL", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.removeComments("org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition");
      SQLUtil.isQuery("org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition");
      SQLUtil.addRequiredCondition("IS", stringBuilder0);
      assertEquals("IS", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.660947433286918
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(8, "org.apache.derby.iapi.types.SQLDecimal");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0);
      SQLUtil.mutatesDataOrStructure("select intom;!cw+%j");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select intom;!cw+%j";
      stringArray0[1] = "exec";
      stringArray0[2] = "exec";
      stringArray0[3] = "org.apache.derby.iapi.types.SQLDecimal";
      stringArray0[4] = "select intom;!cw+%j";
      stringArray0[5] = "org.apache.derby.iapi.types.SQLDecimal";
      stringArray0[6] = "select intom;!cw+%j";
      stringArray0[7] = "org.apache.derby.iapi.types.SQLDecimal";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (select intom;!cw+%j, exec, exec, org.apache.derby.iapi.types.SQLDecimal, select intom;!cw+%j, org.apache.derby.iapi.types.SQLDecimal, select intom;!cw+%j, org.apache.derby.iapi.types.SQLDecimal)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8492687260615328
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.isDML("6n*)9:");
      SQLUtil.normalize("drop table`roh<};uj$eeq5!2e", false);
      String[] stringArray0 = new String[1];
      SQLUtil.innerJoin("_*-nx/yR", stringArray0, "6n*)9:", "drop table`roh<};uj$eeq5!2e", stringArray0);
      SQLUtil.normalize("6n*)9: as drop table`roh<};uj$eeq5!2e on _*-nx/yR.null = drop table`roh<};uj$eeq5!2e.null", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`^s](~");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("/rFO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '/rFO' not found in table '`^s](~'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "TP.Id~jd>A-;W", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("G#=&8Q8%)hDx:0", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBSchema dBSchema0 = new DBSchema("G#=&8Q8%)hDx:0");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*OFU03p<S:1J1/PcO^", defaultDBTable0, (-1434), "G#=&8Q8%)hDx:0");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(535, "G#=&8Q8%)hDx:0");
      Integer integer0 = new Integer(535);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("$+kk", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("m9p)", dBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("org.apache.derby.iapi.types.SQLDecimal");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0399095464305241
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Boolean boolean0 = new Boolean("7");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      TableContainer tableContainer0 = new TableContainer("7");
      SQLUtil.typeAndName(tableContainer0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1588), "Rc8(");
      Integer integer0 = RawTransaction.COMMIT;
      VersionNumber versionNumber0 = VersionNumber.valueOf("container 7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select", "exec", versionNumber0);
      defaultDatabase0.getTable("Rc8(", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("container 7", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.normalize("RC8((0,0)", false);
      Integer integer1 = new Integer(2107);
      boolean boolean1 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "TPLId~jd>A-<;W", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("insert]\"(^ade)k o%=)y_3f", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBSchema dBSchema0 = new DBSchema("p\"'}LR,");
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("NCLOB");
      dBUniqueIndex1.equals(jMXPrincipal0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("NR6A_t)Ra^&o", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, dBTable0, stringArray0, defaultDBTable1, stringArray0);
      dBForeignKeyConstraint0.setDoc("wRTJ-QWU4y7=J+#OJk\"");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES NR6A_t)Ra^&o()", string0);
      
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string1);
      
      String string2 = SQLUtil.normalize("p\"'}LR,", false);
      assertEquals("p \"'}LR,\"", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("G#=&8Q8%)hDx:0");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("p\"'}LR,", dBSchema0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.renderValue(integer0);
      SQLUtil.isDDL("$+kk");
      SQLUtil.mutatesDataOrStructure("paKD@>*Ty {G+%WoB");
      SQLUtil.typeAndName(defaultDBTable0);
      int int0 = 280;
      Properties properties0 = new Properties();
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("getTargetResultSet", 280, "TP.Id~jd>A-;W", "select intomi", properties0, ">:c}^ tyURN");
        fail("Expecting exception: PSQLException");
      
      } catch(Throwable e) {
         //
         // The connection attempt failed.
         //
         verifyException("org.postgresql.core.v3.ConnectionFactoryImpl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Boolean boolean0 = new Boolean("7");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable("7");
      tableContainer0.getSchema();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7", (DBTable) null, (-190060779), "drop table'");
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      SQLUtil.parseColumnTypeAndSize("&vioHM0},V@");
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("TPLId~jd>A-;W", true);
      assertEquals("TPLId ~ jd > A - ; W", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.innerJoin("drop materialized viewselect intom;!cw+%j", stringArray0, "kQw`", "TPLId~jd>A-;W", stringArray0);
      assertEquals("kQw` as TPLId~jd>A-;W on ", string1);
      
      String string2 = SQLUtil.normalize("drop materialized viewselect intom;!cw+%j", true);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewselect intom ; ! cw + % j", defaultDBTable0, 43, "drop index");
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string3 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertTrue(string3.equals((Object)string2));
      
      SQLUtil.parseColumnTypeAndSize("alter materialized view");
      String string4 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.drop materialized viewselect intom ; ! cw + % j", string4);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      int int0 = (-1848413935);
      DBDataType.getInstance((-1848413935), "zT5ox{D=Wxg[+HgXm");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("%-8o62}2x", defaultDBTable0, 3673, "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5\">yrg");
      defaultDBTable0.getForeignKeyConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("useStanardUdf", defaultDBTable0, 3746, "useStanardUdf");
      defaultDBColumn0.getNotNullConstraint();
      DBDataType dBDataType0 = DBDataType.getInstance(62, "5\">yrg");
      defaultDBColumn0.setType(dBDataType0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.removeComments("pk ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pk ");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.removeComments("pk ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pk ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "TP.Id~jd>A-;W", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#=&8Q8%)hDx:0");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.normalize("#=&8Q8%)hDx:0", true);
      assertEquals("# = & 8Q8 %) hDx : 0", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(8, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create tableselect intom;!cw+%j";
      stringArray0[1] = "create tableselect intom;!cw+%j";
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create tableselect intom;!cw+%j", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("left", true, dBPrimaryKeyConstraint0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.commentChar(90007);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("nullCONSTRAINT \"create tableselect intom;!cw+%j\" ", stringBuilder1.toString());
      assertEquals("nullCONSTRAINT \"create tableselect intom;!cw+%j\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.860419010781378
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      defaultDBTable0.getReferrers();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "TPLId~jd>A-;W", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("G#=&8Q8%)hDx:0", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBSchema dBSchema0 = new DBSchema("G#=&8Q8%)hDx:0");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("p\"'}LR,", dBSchema0);
      boolean boolean0 = SQLUtil.isDDL("G#=&8Q8%)hDx:0");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      SQLUtil.isQuery("p\"'}LR,");
      boolean boolean2 = SQLUtil.isQuery("G#=&8Q8%)hDx:0");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "pk ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(8, "select into*-#nx/yr");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", defaultDBTable0, dBDataType0);
      defaultDBColumn0.toString();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("IU[FWY[_&NLiUe\"R", defaultDBTable0, dBDataType0);
      defaultDBColumn1.getForeignKeyConstraint();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      stringBuilder0.append((Object) integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IU[FWY[_&NLiUe\"R");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }
}
