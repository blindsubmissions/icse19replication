/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:23:42 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.DataBuffer;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.util.Collection;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.dto.VisualPageListItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1327);
      intArray0[1] = (-2449);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.subList((-2730), (-2730));
      visualListModel0.addAllElements((-2730), (Collection<VisualPageListItem>) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      int int1 = (-1397);
      visualListModel0.moveDownIndex((-1397));
      int int2 = (-1216);
      visualListModel0.moveUpIndex((-1216));
      boolean boolean0 = false;
      int int3 = 0;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-2360);
      visualListModel0.subList((-2360), (-2360));
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2360);
      intArray0[1] = (-2360);
      intArray0[2] = (-2360);
      intArray0[3] = (-2360);
      visualListModel0.getValidElements();
      int int1 = (-232);
      visualListModel0.subList((-2360), (-2360));
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = (-13);
      intArray0[1] = 0;
      intArray0[2] = 2559;
      intArray0[3] = (-898);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndex((-809));
      int[] intArray1 = new int[5];
      visualListModel0.rotateClockwiseElements(intArray1);
      intArray1[0] = (-809);
      intArray1[1] = (-809);
      intArray1[2] = (-809);
      intArray1[3] = (-809);
      intArray1[4] = (-809);
      visualListModel0.removeElements(intArray1, true);
      Object object0 = visualListModel0.getElementAt(1);
      assertNull(object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((-1095), (VisualPageListItem) null);
      visualListModel0.elementsChanged();
      visualListModel0.clearData();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1095);
      intArray0[1] = (-1095);
      intArray0[2] = (-1095);
      intArray0[3] = (-1095);
      intArray0[4] = (-1095);
      intArray0[5] = (-1095);
      intArray0[6] = (-1095);
      intArray0[7] = (-1095);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.getValidElements();
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(1, 1);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getSize();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2519);
      intArray0[5] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-2519), (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(1);
      visualListModel0.elementsChanged();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.clearData();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.moveUpIndex(0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, true);
      int[] intArray1 = new int[4];
      intArray1[0] = (-1169);
      intArray1[1] = (-1169);
      intArray1[2] = (-1169);
      intArray1[3] = (-1169);
      visualListModel0.moveUpIndexes(intArray1);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-1169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8891591637540215
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.clearData();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.moveUpIndex(0);
      visualListModel0.removeElements(intArray0, false);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1976
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1262);
      visualListModel0.moveUpIndex((-1262));
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.getValidElements();
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.subList(0, 2928);
      visualListModel0.addAllElements(1227, (Collection<VisualPageListItem>) null);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) priorityQueue0);
      PriorityQueue<VisualPageListItem> priorityQueue1 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.appendAllElements(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2449);
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 0;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.subList(1, 110);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.addAllElements((-2320), (Collection<VisualPageListItem>) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.reverseElements(intArray0);
      assertFalse(visualListModel0.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.listIterator();
      visualListModel0.setData(vector0);
      int int0 = (-1315);
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.moveDownIndex((-1315));
      visualListModel0.clearData();
      int int1 = (-1976);
      int int2 = (-2424);
      visualListModel0.removeElements((-1976), (-2424), true);
      int int3 = 54;
      int int4 = (-1262);
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((-1262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      visualListModel0.prependAllElements(collection0);
      visualListModel0.removeElements(1, 1, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      visualListModel0.subList(0, 571);
      intArray0[1] = 1;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex((-1262));
      visualListModel0.getElements();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 1673);
      visualListModel0.removeElements((-1262), 782, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.removeElements(0, (-1461), false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-1784), 12);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.moveUpIndex((-1262));
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1262);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1262
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.getSize();
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.subList((-343), 20000);
      visualListModel0.addAllElements(20000, (Collection<VisualPageListItem>) null);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements((-347), (Collection<VisualPageListItem>) priorityQueue0);
      PriorityQueue<VisualPageListItem> priorityQueue1 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.appendAllElements(priorityQueue0);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[6];
      visualListModel0.appendAllElements(priorityQueue1);
      intArray1[0] = 2928;
      intArray1[1] = 32;
      intArray1[2] = (-347);
      intArray1[3] = 32;
      intArray1[4] = (-343);
      intArray1[5] = 20000;
      visualListModel1.moveUpIndexes(intArray1);
      int[] intArray2 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-1784), 12);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.moveUpIndex((-1262));
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.prependAllElements(treeSet0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1262));
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.subList((-954), 1);
      visualListModel0.addAllElements((-3867), (Collection<VisualPageListItem>) null);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) priorityQueue0);
      PriorityQueue<VisualPageListItem> priorityQueue1 = new PriorityQueue<VisualPageListItem>();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.appendAllElements(vector0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(3, intArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-1784), 12);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      visualListModel0.getElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualPageListItemArray0[0] = null;
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addElementAt(visualPageListItemArray0[0], 1);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-1784), (-1784));
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(intArray0, false);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-1784), (-1784));
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[1];
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3034884952192693
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.getValidElements();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.prependAllElements(stack0);
      int int0 = visualListModel0.getSize();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.133381930264545
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      visualListModel0.getValidElements();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel1.appendAllElements(stack0);
      VisualListModel visualListModel2 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel2.addAllElements(1585, (Collection<VisualPageListItem>) treeSet0);
      visualListModel0.addElementAt((VisualPageListItem) null, 65535);
      assertFalse(visualListModel0.equals((Object)visualListModel2));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack1.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack1);
      int[] intArray0 = new int[6];
      intArray0[0] = 2680;
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      int int0 = (-3696);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 2680, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (2680) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) treeSet0);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements(intArray0, true);
      visualListModel1.undeleteElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      visualListModel0.moveDownIndex(0);
      visualListModel0.getSize();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      visualListModel0.subList(0, 0, true);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 114;
      intArray0[6] = 0;
      intArray0[7] = 10;
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.data = (Vector<VisualPageListItem>) stack0;
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        stack0.remove((-1005));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1005
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1784);
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList((-1784), (-1784));
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.182995977034132
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      visualListModel0.getValidElements();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.prependAllElements(stack0);
      stack0.setSize(1101);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      assertEquals(1101, visualListModel0.getSize());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getSize();
      visualListModel0.removeElements(0, 0, true);
      Collection<VisualPageListItem> collection0 = visualListModel1.subList(0, 0, true);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(treeSet0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(0, 1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2450352741261774
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel1.addElementAt((VisualPageListItem) null, 14);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) treeSet0);
      visualListModel1.removeElements(intArray0, false);
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel1.addElementAt((VisualPageListItem) null, (-27));
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) treeSet0);
      visualListModel1.removeElements(intArray0, false);
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.addElementAt((VisualPageListItem) null, 5);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.getListDataListeners();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(treeSet0);
      visualListModel0.removeElements(0, 0, false);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.updateElementAt(65, (VisualPageListItem) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 65;
      intArray0[3] = 65;
      intArray0[4] = 65;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray1 = new int[5];
      intArray1[0] = 65;
      intArray1[1] = 0;
      intArray1[2] = 65;
      intArray1[3] = 0;
      intArray1[4] = 0;
      visualListModel1.moveDownIndexes(intArray1);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.moveUpIndex(5);
      visualListModel0.moveDownIndex(0);
      visualListModel0.getSize();
      visualListModel1.moveDownIndexes(intArray1);
      visualListModel0.removeElements(intArray0, false);
      assertEquals(2, visualListModel0.getSize());
  }
}
