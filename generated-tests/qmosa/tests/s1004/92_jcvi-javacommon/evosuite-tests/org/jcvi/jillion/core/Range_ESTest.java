/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:40:01 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6635616461296423
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 127L;
      range_Builder0.expandBegin(127L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(127L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range range0 = Range.ofLength(127L);
      long long1 = 0L;
      Range range1 = Range.ofLength(0L);
      range1.getEnd();
      range0.iterator();
      range0.getLength();
      String string0 = null;
      range0.split(127L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0752205480543715
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.of(3608L, 3608L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3608L, 618L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1325L, 1325L);
      range_Builder0.shift(1325L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1325L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = (-2570L);
      long long1 = 1969L;
      Range range0 = Range.of((-2570L), 1969L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split((-3359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2142612289818975
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = 0L;
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1262L), 2255L);
      range_Builder0.contractEnd(2255L);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd((-1262L));
      long long0 = (-3674L);
      range_Builder0.contractBegin((-3674L));
      range_Builder0.expandBegin(2255L);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = (-681L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-681L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.389336582797691
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.ofLength(0L);
      long long0 = 373L;
      // Undeclared exception!
      try { 
        Range.of(373L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.285819949395403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2041L);
      long long1 = 0L;
      Range.of(range_CoordinateSystem0, (-2041L), 0L);
      Range.of(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("Q\"E<!r9?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q\"E<!r9? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.714452351742496
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      String string0 = "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange";
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9829650292177705
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3819644732538676
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of(0L);
      Iterator<Long> iterator0 = range0.iterator();
      range0.equals(iterator0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(0L);
      range1.split(1L);
      range0.getEnd();
      Range.ofLength(29L);
      long long0 = (-377L);
      range1.toString();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2507L, (-377L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3813435046704763
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 3564L;
      Range range0 = Range.of(3564L);
      range0.iterator();
      range0.equals("");
      Range range1 = Range.ofLength(3564L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2660767868595286
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.spliterator();
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Tqw8PCW~pZ+", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Tqw8PCW~pZ+ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3475314470821864
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(127L);
      range0.startsBefore(range1);
      range0.getLength();
      range_Builder0.copy();
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(177L);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      String string0 = "ol5Qjm?W#jd;'~";
      Range.ofLength(1L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("9}]*yQ~TyD;", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 9}]*yQ~TyD; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2066031287599803
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1L, (-2365L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3364378889261954
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 3564L;
      Range range0 = Range.of(3564L);
      range0.iterator();
      range0.intersects(range0);
      Range range1 = Range.ofLength(3564L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("J", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse J into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7331085949626823
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.ofLength(0L);
      Range range3 = Range.of(0L, 0L);
      range3.intersection(range2);
      range3.intersection(range1);
      range0.intersection(range1);
      range1.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-1L));
      // Undeclared exception!
      try { 
        Range.parseRange("[ -2147483648 .. -2147483648 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -2147483648 .. -2147483648 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.007333185232473
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getLength();
      range0.complement(range0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 1L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.getBegin();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range2 = range_Builder0.build();
      range2.isSubRangeOf(range0);
      range_Builder1.shift(32767L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder3 = range_Builder0.expandEnd(2147483647L);
      range0.intersects(range1);
      range_Builder1.shift(0L);
      Range.Builder range_Builder4 = range_Builder2.expandBegin(0L);
      assertFalse(range_Builder4.equals((Object)range_Builder3));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.359985895062485
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 4160L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(1504L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd(0L);
      range_Builder1.expandEnd(4160L);
      range_Builder0.contractEnd((-32768L));
      range_Builder0.expandEnd((-32768L));
      range_Builder1.expandEnd(4160L);
      range_Builder1.expandEnd(0L);
      Range range1 = Range.ofLength(0L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.273148956808202
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-964L));
      range_Builder0.expandEnd(4582L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1L));
      Range.CoordinateSystem.values();
      range_Builder1.expandBegin(4582L);
      Range range1 = Range.ofLength(4582L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.7376696182833657
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(4161L);
      List<Range> list0 = range0.split(4161L);
      Range range1 = Range.ofLength(4161L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of((-817L), 4161L);
      range2.equals(list0);
      range0.equals(range2);
      Range.Comparators.values();
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1707484852389713
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 265L, 265L);
      Range range1 = Range.ofLength(2147483647L);
      range0.spliterator();
      range1.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("range can not be null", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse range can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.331595945140791
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      Range.ofLength(1072L);
      Range.of(range_CoordinateSystem1, 2968L, 9223372036854775807L);
      boolean boolean0 = range1.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.181568149269674
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1572L), (-1572L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2147483646L;
      Range range0 = Range.of(range_CoordinateSystem1, 970L, 2147483646L);
      Range range1 = Range.ofLength(116L);
      range1.spliterator();
      range0.equals(range1);
      range1.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("end of file reached before entire block was skipped", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse end of file reached before entire block was skipped into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2660767868595286
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.spliterator();
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("Tqw8PCW~pZ+", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Tqw8PCW~pZ+ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.8945517097754325
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getLength();
      range0.complement(range0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 1L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.parseRange("[ -1 .. 0 ]/SB");
      Range.ofLength(1L);
      Range.of((-1L), 5143L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("[ -1 .. 0 ]/SB", range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        range2.split((-764L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.462775298350724
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-25L), 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = range1.getBegin();
      assertEquals(9223372036854775806L, long0);
      
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range2 = range_Builder0.build();
      range2.isSubRangeOf(range1);
      range_Builder0.shift((-1L));
      range_Builder0.contractBegin(0L);
      range_Builder2.expandEnd(9223372036854775806L);
      Range.Builder range_Builder3 = range_Builder1.expandEnd(2354L);
      boolean boolean0 = range2.intersects(range1);
      assertFalse(boolean0);
      
      range_Builder3.shift(2517L);
      range_Builder2.expandBegin((-1L));
      range2.intersects(range0);
      assertFalse(range2.isEmpty());
      assertTrue(range0.isEmpty());
  }
}
