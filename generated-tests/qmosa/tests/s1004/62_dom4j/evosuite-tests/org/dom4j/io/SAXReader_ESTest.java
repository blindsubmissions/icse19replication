/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:39:06 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributeListImpl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = ":jDd>J\\7]";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader(":jDd>J\u0007]");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class :jDd>J\u0007] not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("PPOh.}8n}T\"J{v'", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class PPOh.}8n}T\"J{v' not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.isStripWhitespaceText();
      sAXReader0.getDispatchHandler();
      String string0 = "~";
      sAXReader0.setMergeAdjacentText(false);
      try { 
        sAXReader0.setProperty("~", "p#Zn03f9wS:$iUXLb");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '~' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "";
      defaultDocumentFactory0.createElement("");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      stringReader0.close();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      String[] stringArray0 = new String[3];
      dispatchHandler0.resetHandlers();
      stringArray0[0] = ". PJf+Bm&`;\"";
      String string0 = "k8ArSN";
      stringArray0[1] = "k8ArSN";
      stringArray0[2] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.pop(". PJf+Bm&`;\"");
      BeanElement beanElement0 = new BeanElement("", (Namespace) null, ". PJf+Bm&`;\"");
      // Undeclared exception!
      try { 
        pruningElementStack0.validElement(beanElement0, (-210));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -210
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.821563807860364
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      String string0 = "3Gqk#4K $T";
      StringReader stringReader0 = new StringReader("3Gqk#4K $T");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.87821830667085
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputStream inputStream0 = null;
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "S+";
      stringArray0[1] = "svE";
      stringArray0[2] = "v";
      stringArray0[3] = "h";
      stringArray0[4] = "Validation not supported for XMLReader: ";
      stringArray0[5] = "9Cf<bvQ:";
      stringArray0[6] = "";
      stringArray0[7] = "http://xml.org/sax/features/namespaces";
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      dispatchHandler0.removeHandler("");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      sAXReader0.setIgnoreComments(false);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = null;
      sAXReader0.setEncoding((String) null);
      sAXReader0.isValidating();
      sAXReader0.setMergeAdjacentText(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string1 = null;
      xMLFilterImpl1.processingInstruction((String) null, (String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      String string2 = "CharacterData node is read only: ";
      try { 
        parserAdapter0.getProperty("CharacterData node is read only: ");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: CharacterData node is read only: 
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setEncoding(" : ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity(" : ", " : ");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, true);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getPath();
      DispatchHandler dispatchHandler0 = elementStack0.getDispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9319232930107053
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.getDispatchHandler();
      String string0 = "Invalid node type. Cannot add node: ";
      try { 
        sAXReader0.read((Reader) null, "4nq#zQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/4nq (No such file or directory) Nested exception: /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/4nq (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8143075196071257
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      sAXReader0.resetHandlers();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("F");
      sAXReader_SAXEntityResolver0.resolveEntity("F", "http://xml.org/sax/handlers/LexicalHandler");
      sAXReader_SAXEntityResolver0.resolveEntity("F", "F");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.setXMLReaderClassName("http://xml.org/sax/handlers/LexicalHandler");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class http://xml.org/sax/handlers/LexicalHandler not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler((String) null);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("?+z( g`z9;<", "]Io}f%5h45GF");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      String string0 = "";
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.getXMLReader();
      String string1 = ">I0/wax=\\";
      MockFile mockFile0 = new MockFile("", ">I0/wax=");
      // Undeclared exception!
      try { 
        mockFile0.setLastModified((-265L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative time
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      sAXReader0.setStringInternEnabled(false);
      String string0 = "http://xml.org/sax/handlers/LexicalHandler";
      sAXReader0.createXMLReader();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "http://xml.org/sax/handlers/LexicalHandler");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setValidation(false);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.removeHandler("");
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "", 12, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      sAXReader0.resetHandlers();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("H`^>ezCu5.");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("<U`5~@sBvpul@``.'");
      sAXReader_SAXEntityResolver1.resolveEntity("F", "<U`5~@sBvpul@``.'");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      String string0 = "http://xml.org/sax/features/use-locator2";
      try { 
        sAXReader0.setXMLReaderClassName("http://xml.org/sax/features/use-locator2");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class http://xml.org/sax/features/use-locator2 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      sAXReader0.resetHandlers();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.isStripWhitespaceText();
      String string0 = ">$xUc?>0?HRlOG<},ji";
      sAXReader0.createDefaultEntityResolver("http://xml.org/sax/properties/declaration-handler");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      String string1 = "\\e=N_/lpl'a{N4K,";
      MockException mockException0 = new MockException("e=N_/lpl'a{N4K,");
      SAXParseException sAXParseException0 = new SAXParseException("", locatorImpl0, mockException0);
      xMLFilterImpl0.error(sAXParseException0);
      sAXReader0.removeHandler("F");
      try { 
        MockURL.URL("#text");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: #text
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9264175554979963
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "4nq#zQ";
      String string1 = "H1\"";
      StringReader stringReader0 = new StringReader("H1\"");
      try { 
        sAXReader0.read((Reader) stringReader0, "H1\"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document H1\" : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader0 = new SAXReader(false);
      Namespace namespace0 = new Namespace("=\"", "k6mnHuoErjjv");
      QName qName0 = new QName("=\"", namespace0, "=\"");
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.installXMLFilter(parserAdapter0);
      byte[] byteArray0 = new byte[0];
      sAXReader0.setErrorHandler(defaultHandler0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.externalEntityDecl("*'R`hMJef", "", (String) null);
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.removeHandler("");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      try { 
        sAXReader0.read("R");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/R (No such file or directory) Nested exception: /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/R (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.887577825056549
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "4nq#zQ";
      String string1 = "H1\"";
      StringReader stringReader0 = new StringReader("H1\"");
      String string2 = "";
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      SAXReader sAXReader1 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.getHandler("RHyme:`_fui_n1ZKD");
      sAXReader1.addHandler("RHyme:`_fui_n1ZKD", (ElementHandler) null);
      String string0 = " : ";
      try { 
        sAXReader1.setXMLReaderClassName(" : ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  :  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.912494403331052
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      sAXReader0.isStripWhitespaceText();
      try { 
        sAXReader0.read("^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: ^ Nested exception: no protocol: ^
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@538d0f2c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("3Gqk#4K $T");
      DefaultDocument defaultDocument0 = new DefaultDocument("3Gqk#4K $T");
      sAXReader0.getEncoding();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      // Undeclared exception!
      try { 
        namespaceStack0.getAttributeQName((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.NamespaceStack", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.821563807860364
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InputSource inputSource0 = new InputSource();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      URL uRL0 = MockURL.getHttpExample();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@bce386c Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@bce386c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getPath();
      ElementStack elementStack1 = new ElementStack();
      elementStack1.getDispatchHandler();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler0.onStart(elementStack1);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      sAXReader0.getEntityResolver();
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, true);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      
      DefaultDocumentFactory.getInstance();
      sAXReader1.setIncludeExternalDTDDeclarations(true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader1.setDispatchHandler(dispatchHandler0);
      sAXReader1.getErrorHandler();
      assertTrue(sAXReader1.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.get(":4YnsW!zo&w(Mswj$", ":4YnsW!zo&w(Mswj$");
      QName qName0 = defaultDocumentFactory0.createQName(":4YnsW!zo&w(Mswj$", namespace0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.setFeature(":4YnsW!zo&w(Mswj$", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature ':4YnsW!zo&w(Mswj$' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }
}
