/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:03:32 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.IEngine;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "Could not encode string '";
      Form form0 = new Form("Could not encode string '");
      // Undeclared exception!
      try { 
        form0.dateInput("Could not encode string '", "Could not encode string '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Component component0 = block0.text(errorPage0);
      String string0 = "Q^p*k<,H$+}6'C";
      // Undeclared exception!
      try { 
        component0.title("Q^p*k<,H$+}6'C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "Z9C62sTIwA_Eg'm^";
      Form form0 = new Form("Z9C62sTIwA_Eg'm^");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Z9C62sTIwA_Eg'm^";
      stringArray0[1] = "Z9C62sTIwA_Eg'm^";
      stringArray0[2] = "Z9C62sTIwA_Eg'm^";
      stringArray0[3] = "Z9C62sTIwA_Eg'm^";
      // Undeclared exception!
      try { 
        form0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn();
      component0.small((Object) errorPage0);
      TextArea textArea0 = new TextArea(errorPage0, "br", "");
      String string0 = "Tbody component can be added only to a Table.";
      // Undeclared exception!
      try { 
        textArea0.encode("Tbody component can be added only to a Table.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.attribute("dt", "dt");
      String string0 = "bdo";
      Checkbox checkbox0 = new Checkbox(errorPage0, "49V8D_", "bdo");
      FormElement formElement0 = checkbox0.label("49V8D_");
      String string1 = "oOghyL:bS:<*6f3`Jr";
      FileInput fileInput0 = new FileInput(formElement0, "49V8D_", "oOghyL:bS:<*6f3`Jr");
      // Undeclared exception!
      try { 
        fileInput0.h4();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "1U$4>yU?iJ";
      TextArea textArea0 = new TextArea((Component) null, "1U$4>yU?iJ", "1U$4>yU?iJ");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("1U$4>yU?iJ");
      elExpression0.codePoints();
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(textArea0, "1U$4>yU?iJ", "1U$4>yU?iJ", stringSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        checkboxGroup0.address();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6300005591616533
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Form form0 = new Form("DG8!kM_+Ex 2Mk5_Y");
      Form form1 = form0.renderHint("DG8!kM_+Ex 2Mk5_Y");
      Form form2 = form1.addFormValidationRule("DG8!kM_+Ex 2Mk5_Y", "xdJK;)+");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("asset/wheel/components/jquery.js?expires=88");
      Byte byte0 = new Byte((byte)42);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.empty(byte0);
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.enumeration("|:alfJu)M@ub{Uw!IY");
      ElExpression elExpression0 = new ElExpression("asset/wheel/components/jquery.js?expires=88");
      RadioGroup radioGroup0 = null;
      try {
        radioGroup0 = new RadioGroup(form2, "xdJK;)+", "param", dynamicSelectModel3, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Component component0 = null;
      String string0 = "ps[Gz1";
      Checkbox checkbox0 = new Checkbox((Component) null, "ps[Gz1", "ps[Gz1");
      assertNotNull(checkbox0);
      assertEquals("ps[Gz1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("ps[Gz1", checkbox0.getFormElementName());
      
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      
      // Undeclared exception!
      try { 
        errorPage0.textarea("$EEq5!2EH]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "{6I9/\"m|h[$ ";
      Form form0 = new Form("{6I9/\"m|h[$ ");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("{6I9/\"m|h[$ ", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.renderHint("{6I9/\"m|h[$ ");
      assertNotNull(form1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("{6I9/\"m|h[$ ", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("{6I9/\"m|h[$ ", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      
      String string1 = "u*gQ)3'c";
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      Component component0 = form1.addFirst(form0);
      component0.h1();
      Select select0 = new Select(form1, string0, string1, stringSelectModel0, string0);
      select0.buildComponent();
      String string2 = null;
      Radio radio0 = new Radio(form0, string2, string2);
      radio0.defaultDomEvent();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" ");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(" ", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.dd((Object) " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "_wrapper";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_wrapper");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("_wrapper", xmlEntityRef0.getComponentId());
      
      String string1 = "C]U8FScX[\"#}ww\"M";
      ActionExpression actionExpression0 = new ActionExpression("C]U8FScX[\"#}ww\"M");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("C]U8FScX[\"#}ww\"M", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertEquals(16, actionExpression0.length());
      assertEquals("C]U8FScX[\"#}ww\"M", actionExpression0.toString());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("C]U8FScX[\"#}ww\"M", actionExpression0.getExpression());
      
      Form form0 = null;
      try {
        form0 = new Form(xmlEntityRef0, "_wrapper", actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      String string0 = "address";
      Label label0 = (Label)errorPage0.strong((Object) "address");
      assertNotNull(label0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      String string1 = "";
      Submit submit0 = new Submit(errorPage0, "address", "");
      assertNotNull(submit0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("address", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("Submit_1", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      
      Long long0 = new Long(32767L);
      assertNotNull(long0);
      assertEquals(32767L, (long)long0);
      
      // Undeclared exception!
      try { 
        submit0.radio("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Block block0 = (Block)errorPage0.samp();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      Label label0 = (Label)block0.kbd((Object) errorPage0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      String string0 = "g Svek~QwfSB7~:";
      // Undeclared exception!
      try { 
        errorPage0.message("g Svek~QwfSB7~:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      String string0 = "gu#{";
      Form form0 = null;
      try {
        form0 = new Form(errorPage0, "gu#{", (ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Form", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "]s_-\"e";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("]s_-\"e");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("]s_-\"e", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.base("]s_-\"e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      
      Label label0 = (Label)errorPage0.h3((Object) errorPage1);
      assertNotNull(label0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(errorPage1, errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      Any any0 = (Any)errorPage0.hr();
      assertNotNull(any0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertNotSame(errorPage0, errorPage1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "F3WQ@a!z";
      Form form0 = new Form("F3WQ@a!z");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      form0.afterAdd();
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      // Undeclared exception!
      try { 
        form0.h1((Object) "F3WQ@a!z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      Block block0 = (Block)errorPage0.noscript();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "acronym";
      stringArray0[3] = "";
      stringArray0[4] = "~X[";
      stringArray0[6] = "";
      stringArray0[7] = "~X[";
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "F3WQ@aUz";
      Form form0 = new Form("F3WQ@aUz");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      // Undeclared exception!
      try { 
        form0.nbsp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "F3WQ@a!z";
      Form form0 = new Form("F3WQ@a!z");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("F3WQ@a!z");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertEquals(8, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      
      IntStream intStream0 = actionExpression0.codePoints();
      assertNotNull(intStream0);
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertEquals(8, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = new String[0];
      form0._setBuilt(true);
      assertEquals("form", form0.defaultTagName());
      assertTrue(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      String string1 = form0.getComponentId();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("form", form0.defaultTagName());
      assertTrue(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      IntStream intStream1 = actionExpression0.chars();
      assertNotNull(intStream1);
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotSame(intStream1, intStream0);
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertEquals(8, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      
      // Undeclared exception!
      try { 
        form0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "IGNORABLE_WHITESPACE";
      Form form0 = new Form("IGNORABLE_WHITESPACE");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("IGNORABLE_WHITESPACE", form0.getComponentId());
      
      // Undeclared exception!
      try { 
        form0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "image";
      Form form0 = new Form("image");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("image", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        form0.sub((Object) "image");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      IEngine iEngine0 = errorPage0.getEngine();
      assertNull(iEngine0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Label label0 = (Label)errorPage0.big((Object) null);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      Form form0 = new Form("y)c");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("y)c", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      Hidden hidden0 = new Hidden(form0, "text/javascript", "y)c");
      assertNotNull(hidden0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("y)c", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("text/javascript", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertEquals("y)c", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      
      Hidden hidden1 = (Hidden)hidden0.value("text/javascript");
      assertNotNull(hidden1);
      assertSame(hidden0, hidden1);
      assertSame(hidden1, hidden0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("y)c", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("text/javascript", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertEquals("y)c", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("input", hidden1.defaultTagName());
      assertTrue(hidden1.isValid());
      assertEquals("text/javascript", hidden1.getFormElementName());
      assertTrue(hidden1.isEmpty());
      assertFalse(hidden1._isGeneratedId());
      assertEquals("y)c", hidden1.getComponentId());
      
      Radio radio0 = new Radio(hidden1, "y)c", "text/javascript");
      assertNotNull(radio0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("y)c", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("text/javascript", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertEquals("y)c", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("input", hidden1.defaultTagName());
      assertTrue(hidden1.isValid());
      assertEquals("text/javascript", hidden1.getFormElementName());
      assertTrue(hidden1.isEmpty());
      assertFalse(hidden1._isGeneratedId());
      assertEquals("y)c", hidden1.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertEquals("text/javascript", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isEmpty());
      assertEquals("y)c", radio0.getFormElementName());
      
      String string0 = "tcX^]TD";
      Radio radio1 = (Radio)radio0.value("tcX^]TD");
      assertNotNull(radio1);
      assertSame(hidden0, hidden1);
      assertSame(hidden1, hidden0);
      assertSame(radio0, radio1);
      assertSame(radio1, radio0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("y)c", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("text/javascript", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertEquals("y)c", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("input", hidden1.defaultTagName());
      assertTrue(hidden1.isValid());
      assertEquals("text/javascript", hidden1.getFormElementName());
      assertTrue(hidden1.isEmpty());
      assertFalse(hidden1._isGeneratedId());
      assertEquals("y)c", hidden1.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertEquals("text/javascript", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isEmpty());
      assertEquals("y)c", radio0.getFormElementName());
      assertEquals("y)c", radio1.getFormElementName());
      assertTrue(radio1.isValid());
      assertTrue(radio1.isEmpty());
      assertEquals("text/javascript", radio1.getComponentId());
      assertEquals("input", radio1.defaultTagName());
      assertFalse(radio1._isGeneratedId());
      
      // Undeclared exception!
      try { 
        radio1.htmlText(form0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      Block block1 = (Block)block0.div();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      
      String string0 = "jeXd4;:.LM//A#R";
      Radio radio0 = new Radio(block0, "$,-", "jeXd4;:.LM//A#R");
      assertNotNull(radio0);
      assertFalse(block0.equals((Object)block1));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertEquals("jeXd4;:.LM//A#R", radio0.getComponentId());
      assertEquals("$,-", radio0.getFormElementName());
      
      Radio radio1 = (Radio)radio0.value("o^@a#:t");
      assertNotNull(radio1);
      assertFalse(block0.equals((Object)block1));
      assertNotSame(block0, block1);
      assertSame(radio0, radio1);
      assertSame(radio1, radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertEquals("jeXd4;:.LM//A#R", radio0.getComponentId());
      assertEquals("$,-", radio0.getFormElementName());
      assertFalse(radio1._isGeneratedId());
      assertTrue(radio1.isEmpty());
      assertEquals("input", radio1.defaultTagName());
      assertTrue(radio1.isValid());
      assertEquals("jeXd4;:.LM//A#R", radio1.getComponentId());
      assertEquals("$,-", radio1.getFormElementName());
      
      Block block2 = (Block)errorPage0.dt();
      assertNotNull(block2);
      assertFalse(block2.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertNotSame(block2, block1);
      assertNotSame(block2, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_3", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      
      Label label0 = (Label)errorPage0.h3((Object) errorPage1);
      assertNotNull(label0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      
      ElExpression elExpression0 = new ElExpression("u9.D85Bxf,+{V<.K");
      assertNotNull(elExpression0);
      assertEquals("u9.D85Bxf,+{V<.K", elExpression0.getExpression());
      assertEquals("u9.D85Bxf,+{V<.K", elExpression0.toString());
      assertEquals(16, elExpression0.length());
      
      Block block0 = (Block)errorPage1.button();
      assertNotNull(block0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage1, errorPage0);
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.actionBinding("tcX^]TD");
      assertNotNull(errorPage1);
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      
      ElExpression elExpression0 = new ElExpression("tcX^]TD");
      assertNotNull(elExpression0);
      assertEquals("tcX^]TD", elExpression0.toString());
      assertEquals("tcX^]TD", elExpression0.getExpression());
      assertEquals(7, elExpression0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      Block block1 = (Block)block0.div();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      
      Block block2 = (Block)block0.q();
      assertNotNull(block2);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block2, block1);
      assertNotSame(block2, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_3", block2.getComponentId());
      
      boolean boolean0 = errorPage0.isValid("-<snNelHhSlbpw");
      assertTrue(boolean0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Map<String, Component> map0 = errorPage0.getComponents();
      assertNotNull(map0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      
      errorPage0.afterAdd();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Block block3 = (Block)block2.id("^cq4>AXl=_St-ckSr");
      assertNotNull(block3);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block3.equals((Object)block1));
      assertFalse(block3.equals((Object)block0));
      assertNotSame(block0, block2);
      assertNotSame(block0, block3);
      assertNotSame(block0, block1);
      assertSame(block2, block3);
      assertNotSame(block2, block1);
      assertNotSame(block2, block0);
      assertNotSame(block3, block1);
      assertSame(block3, block2);
      assertNotSame(block3, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertFalse(block2._isGeneratedId());
      assertEquals("^cq4>AXl=_St-ckSr", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertEquals("^cq4>AXl=_St-ckSr", block3.getComponentId());
      assertFalse(block3._isGeneratedId());
      assertEquals("div", block3.defaultTagName());
      
      Block block4 = (Block)block2.u();
      assertNotNull(block4);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block3));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block4.equals((Object)block1));
      assertFalse(block4.equals((Object)block3));
      assertFalse(block4.equals((Object)block0));
      assertFalse(block4.equals((Object)block2));
      assertNotSame(block0, block4);
      assertNotSame(block0, block2);
      assertNotSame(block0, block3);
      assertNotSame(block0, block1);
      assertSame(block2, block3);
      assertNotSame(block2, block1);
      assertNotSame(block2, block0);
      assertNotSame(block2, block4);
      assertNotSame(block4, block1);
      assertNotSame(block4, block3);
      assertNotSame(block4, block0);
      assertNotSame(block4, block2);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertFalse(block2._isGeneratedId());
      assertEquals("^cq4>AXl=_St-ckSr", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertEquals("div", block4.defaultTagName());
      assertEquals("Block_4", block4.getComponentId());
      assertTrue(block4._isGeneratedId());
      
      Map<String, String> map1 = block4.getAttributes();
      assertNull(map1);
      assertFalse(block0.equals((Object)block4));
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block3));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block2.equals((Object)block4));
      assertFalse(block4.equals((Object)block1));
      assertFalse(block4.equals((Object)block3));
      assertFalse(block4.equals((Object)block0));
      assertFalse(block4.equals((Object)block2));
      assertNotSame(block0, block4);
      assertNotSame(block0, block2);
      assertNotSame(block0, block3);
      assertNotSame(block0, block1);
      assertSame(block2, block3);
      assertNotSame(block2, block1);
      assertNotSame(block2, block0);
      assertNotSame(block2, block4);
      assertNotSame(block4, block1);
      assertNotSame(block4, block3);
      assertNotSame(block4, block0);
      assertNotSame(block4, block2);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertFalse(block2._isGeneratedId());
      assertEquals("^cq4>AXl=_St-ckSr", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertEquals("div", block4.defaultTagName());
      assertEquals("Block_4", block4.getComponentId());
      assertTrue(block4._isGeneratedId());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      // Undeclared exception!
      try { 
        errorPage0.buttonInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      // Undeclared exception!
      try { 
        block0.checkbox("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      
      errorPage1.afterAdd();
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage1, errorPage0);
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      
      // Undeclared exception!
      try { 
        errorPage0.id("OQ[l:F=-o37>\tcr");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.948783720452396
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Block block1 = (Block)block0.div();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      
      Block block2 = (Block)block0.q();
      assertNotNull(block2);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block2.equals((Object)block1));
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block2, block0);
      assertNotSame(block2, block1);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_3", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      
      boolean boolean0 = errorPage0.isValid("-<snNelHhSlbpw");
      assertTrue(boolean0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Map<String, Component> map0 = errorPage0.getComponents();
      assertNotNull(map0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      errorPage0.afterAdd();
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("/,A");
      assertNotNull(dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("label");
      assertNotNull(dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.value("^cq4>AXl=_St-ckSr");
      assertNotNull(dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      
      Select select0 = new Select(block1, "-<snNelHhSlbpw", "-<snNelHhSlbpw", dynamicSelectModel3, "^cq4>AXl=_St-ckSr");
      assertNotNull(select0);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block1.equals((Object)block2));
      assertFalse(block1.equals((Object)block0));
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("select", select0.defaultTagName());
      assertEquals("-<snNelHhSlbpw", select0.getFormElementName());
      assertFalse(select0._isGeneratedId());
      assertFalse(select0._isBuilt());
      assertEquals("-<snNelHhSlbpw", select0.getComponentId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      
      Select select1 = (Select)select0.id("7E&|=ncp");
      assertNotNull(select1);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block1.equals((Object)block2));
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block1, block2);
      assertNotSame(block1, block0);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      assertSame(select0, select1);
      assertSame(select1, select0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("select", select0.defaultTagName());
      assertEquals("-<snNelHhSlbpw", select0.getFormElementName());
      assertEquals("7E&|=ncp", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select1.defaultTagName());
      assertTrue(select1.isEmpty());
      assertTrue(select1.isValid());
      assertEquals("7E&|=ncp", select1.getComponentId());
      assertEquals("-<snNelHhSlbpw", select1.getFormElementName());
      assertFalse(select1._isGeneratedId());
      assertFalse(select1._isBuilt());
      
      Block block3 = (Block)select1.u();
      assertNotNull(block3);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block1.equals((Object)block2));
      assertFalse(block1.equals((Object)block0));
      assertFalse(block3.equals((Object)block1));
      assertFalse(block3.equals((Object)block0));
      assertFalse(block3.equals((Object)block2));
      assertNotSame(block0, block2);
      assertNotSame(block0, block3);
      assertNotSame(block0, block1);
      assertNotSame(block1, block2);
      assertNotSame(block1, block0);
      assertNotSame(block1, block3);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      assertSame(select0, select1);
      assertSame(select1, select0);
      assertNotSame(block3, block1);
      assertNotSame(block3, block0);
      assertNotSame(block3, block2);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("select", select0.defaultTagName());
      assertEquals("-<snNelHhSlbpw", select0.getFormElementName());
      assertEquals("7E&|=ncp", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select1.defaultTagName());
      assertTrue(select1.isEmpty());
      assertTrue(select1.isValid());
      assertEquals("7E&|=ncp", select1.getComponentId());
      assertEquals("-<snNelHhSlbpw", select1.getFormElementName());
      assertFalse(select1._isGeneratedId());
      assertFalse(select1._isBuilt());
      assertEquals("Block_4", block3.getComponentId());
      assertTrue(block3._isGeneratedId());
      assertEquals("div", block3.defaultTagName());
      
      Map<String, String> map1 = select0.getAttributes();
      assertNull(map1);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block3));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block1.equals((Object)block2));
      assertFalse(block1.equals((Object)block0));
      assertFalse(block1.equals((Object)block3));
      assertNotSame(block0, block2);
      assertNotSame(block0, block3);
      assertNotSame(block0, block1);
      assertNotSame(block1, block2);
      assertNotSame(block1, block0);
      assertNotSame(block1, block3);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      assertSame(select0, select1);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("select", select0.defaultTagName());
      assertEquals("-<snNelHhSlbpw", select0.getFormElementName());
      assertEquals("7E&|=ncp", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      Block block1 = (Block)block0.div();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      
      Block block2 = (Block)block0.q();
      assertNotNull(block2);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block2, block1);
      assertNotSame(block2, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_3", block2.getComponentId());
      
      boolean boolean0 = errorPage0.isValid("-<snNelHhSlbpw");
      assertTrue(boolean0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Map<String, Component> map0 = errorPage0.getComponents();
      assertNotNull(map0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      errorPage0.afterAdd();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.id("jeXd4;:.LM//A#R");
      assertNotNull(errorPage1);
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("jeXd4;:.LM//A#R", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("jeXd4;:.LM//A#R", errorPage1.getComponentId());
      
      Block block3 = (Block)block1.u();
      assertNotNull(block3);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block1.equals((Object)block0));
      assertFalse(block1.equals((Object)block2));
      assertFalse(block3.equals((Object)block2));
      assertFalse(block3.equals((Object)block0));
      assertFalse(block3.equals((Object)block1));
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block0, block3);
      assertNotSame(block1, block0);
      assertNotSame(block1, block2);
      assertNotSame(block1, block3);
      assertNotSame(block3, block2);
      assertNotSame(block3, block0);
      assertNotSame(block3, block1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("jeXd4;:.LM//A#R", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block3.defaultTagName());
      assertEquals("Block_4", block3.getComponentId());
      assertTrue(block3._isGeneratedId());
      
      Block block4 = block3.placeholder("");
      assertNotNull(block4);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block0.equals((Object)block3));
      assertFalse(block1.equals((Object)block0));
      assertFalse(block1.equals((Object)block2));
      assertFalse(block1.equals((Object)block3));
      assertFalse(block3.equals((Object)block2));
      assertFalse(block3.equals((Object)block0));
      assertFalse(block3.equals((Object)block1));
      assertFalse(block4.equals((Object)block0));
      assertFalse(block4.equals((Object)block3));
      assertFalse(block4.equals((Object)block2));
      assertFalse(block4.equals((Object)block1));
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block0, block4);
      assertNotSame(block0, block3);
      assertNotSame(block1, block0);
      assertNotSame(block1, block2);
      assertNotSame(block1, block4);
      assertNotSame(block1, block3);
      assertNotSame(block3, block2);
      assertNotSame(block3, block0);
      assertNotSame(block3, block1);
      assertNotSame(block3, block4);
      assertNotSame(block4, block0);
      assertNotSame(block4, block3);
      assertNotSame(block4, block2);
      assertNotSame(block4, block1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("jeXd4;:.LM//A#R", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block3.defaultTagName());
      assertEquals("Block_4", block3.getComponentId());
      assertTrue(block3._isGeneratedId());
      assertEquals("Block_5", block4.getComponentId());
      assertTrue(block4._isGeneratedId());
      assertEquals("div", block4.defaultTagName());
      
      Map<String, String> map1 = block4.getAttributes();
      assertNull(map1);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block0.equals((Object)block4));
      assertFalse(block0.equals((Object)block3));
      assertFalse(block1.equals((Object)block0));
      assertFalse(block1.equals((Object)block2));
      assertFalse(block1.equals((Object)block4));
      assertFalse(block1.equals((Object)block3));
      assertFalse(block3.equals((Object)block2));
      assertFalse(block3.equals((Object)block0));
      assertFalse(block3.equals((Object)block1));
      assertFalse(block3.equals((Object)block4));
      assertFalse(block4.equals((Object)block0));
      assertFalse(block4.equals((Object)block3));
      assertFalse(block4.equals((Object)block2));
      assertFalse(block4.equals((Object)block1));
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block0, block4);
      assertNotSame(block0, block3);
      assertNotSame(block1, block0);
      assertNotSame(block1, block2);
      assertNotSame(block1, block4);
      assertNotSame(block1, block3);
      assertNotSame(block3, block2);
      assertNotSame(block3, block0);
      assertNotSame(block3, block1);
      assertNotSame(block3, block4);
      assertNotSame(block4, block0);
      assertNotSame(block4, block3);
      assertNotSame(block4, block2);
      assertNotSame(block4, block1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("jeXd4;:.LM//A#R", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block3.defaultTagName());
      assertEquals("Block_4", block3.getComponentId());
      assertTrue(block3._isGeneratedId());
      assertEquals("Block_5", block4.getComponentId());
      assertTrue(block4._isGeneratedId());
      assertEquals("div", block4.defaultTagName());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      errorPage0.hashCode();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Label label0 = (Label)errorPage0.h4((Object) mockGregorianCalendar0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      Block block1 = (Block)block0.div();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      
      String string0 = "";
      String string1 = "|R5lm";
      FileInput fileInput0 = new FileInput(block1, "|R5lm", "");
      assertNotNull(fileInput0);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block1.equals((Object)block0));
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("|R5lm", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      
      // Undeclared exception!
      try { 
        fileInput0.pre((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      Block block1 = (Block)block0.div();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      
      Submit submit0 = new Submit(block0, "ir}jN.k", "(a{{?\"x3`5B11>r-Y");
      assertNotNull(submit0);
      assertFalse(block0.equals((Object)block1));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("(a{{?\"x3`5B11>r-Y", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("ir}jN.k", submit0.getFormElementName());
      
      String string0 = submit0.defaultTagName();
      assertNotNull(string0);
      assertFalse(block0.equals((Object)block1));
      assertEquals("input", string0);
      assertNotSame(block0, block1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("(a{{?\"x3`5B11>r-Y", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("ir}jN.k", submit0.getFormElementName());
      
      errorPage0.hashCode();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      
      TextInput textInput0 = new TextInput(block1, (String) null, (String) null);
      assertNotNull(textInput0);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block1.equals((Object)block0));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertNull(textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.p((Object) "big");
      assertNotNull(label0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      Submit submit1 = new Submit(label0, "legend", "ir}jN.k");
      assertNotNull(submit1);
      assertFalse(submit1.equals((Object)submit0));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("ir}jN.k", submit1.getComponentId());
      assertTrue(submit1.isEmpty());
      assertEquals("input", submit1.defaultTagName());
      assertFalse(submit1._isGeneratedId());
      assertEquals("legend", submit1.getFormElementName());
      assertTrue(submit1.isValid());
      
      ElExpression elExpression0 = submit1.el("");
      assertNotNull(elExpression0);
      assertFalse(submit1.equals((Object)submit0));
      assertNotSame(submit1, submit0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("ir}jN.k", submit1.getComponentId());
      assertTrue(submit1.isEmpty());
      assertEquals("input", submit1.defaultTagName());
      assertFalse(submit1._isGeneratedId());
      assertEquals("legend", submit1.getFormElementName());
      assertTrue(submit1.isValid());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      
      // Undeclared exception!
      try { 
        submit1._renderTagStart((XmlSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.RenderableComponent", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      Block block1 = (Block)block0.h3();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      
      Block block2 = (Block)block0.div();
      assertNotNull(block2);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block2, block1);
      assertNotSame(block2, block0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_3", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      
      // Undeclared exception!
      try { 
        block0.imageSubmit("", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.blockquote();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Radio radio0 = new Radio(block0, "z,+5W<' 5H/j g", "/* r<::");
      assertNotNull(radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("z,+5W<' 5H/j g", radio0.getFormElementName());
      assertEquals("/* r<::", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      
      Label label0 = (Label)errorPage0.h2((Object) radio0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("z,+5W<' 5H/j g", radio0.getFormElementName());
      assertEquals("/* r<::", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      Block block1 = (Block)block0.div();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      
      String string0 = "jeXd4;:.LM//A#R";
      Block block2 = (Block)block0.q();
      assertNotNull(block2);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertNotSame(block2, block1);
      assertNotSame(block2, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block2.defaultTagName());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_3", block2.getComponentId());
      
      String string1 = "-<snNelHhSlbpw";
      boolean boolean0 = errorPage0.isValid("-<snNelHhSlbpw");
      assertTrue(boolean0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      Map<String, Component> map0 = errorPage0.getComponents();
      assertNotNull(map0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(map0.isEmpty());
      assertEquals(4, map0.size());
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      
      Submit submit0 = new Submit(block0, "jeXd4;:.LM//A#R", "jeXd4;:.LM//A#R");
      assertNotNull(submit0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertEquals("jeXd4;:.LM//A#R", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("jeXd4;:.LM//A#R", submit0.getComponentId());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      
      // Undeclared exception!
      try { 
        submit0._renderTagStart((XmlSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.RenderableComponent", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "tKY+mbxL67C";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("tKY+mbxL67C");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("tKY+mbxL67C", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      Link link0 = new Link(errorPage0, "tKY+mbxL67C");
      assertNotNull(link0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      
      // Undeclared exception!
      try { 
        errorPage0.textInput("tKY+mbxL67C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }
}
