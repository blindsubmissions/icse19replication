/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:41:06 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ((-217.92F));
      player0.gangStrength();
      player0.getY();
      Player player1 = new Player((-139), "state.Party", "state.Party", (short)4919, 1);
      player1.setX((-2887.6213F));
      player1.setDead(1L);
      player0.isJoinOK(player1, false);
      assertEquals((-217.92F), player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(4919, "", "8n}T\"J{v' 2x]", 4919, 4919);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte)75;
      player0.unpack(byteArray0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(4919, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals("", player0.getIP());
      assertEquals(4919, player0.getPictureId());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3745;
      Player player0 = new Player(3745);
      player0.gangStrength();
      player0.gangStrength();
      player0.remove((Party) null);
      player0.boss = null;
      player0.setZ(3745);
      player0.setX(1);
      player0.reset(true);
      player0.setX(0.1F);
      player0.reset(false);
      player0.pack();
      player0.getX();
      player0.setDead((long) 1, true);
      player0.reset(true);
      player0.getIP();
      player0.gangStrength();
      player0.getTimeOfDeath();
      player0.setX(0L);
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(969, (String) null, "M[CH$UNOqHz{'rD", 969, 1);
      player0.setY(0.0F);
      player0.reset(false);
      Player player1 = new Player((short)4919, "M[CH$UNOqHz{'rD", (String) null, (-327), 1124);
      player0.next = (Party) player1;
      player0.reset(false);
      player0.setY(0.0F);
      player0.setDead();
      assertTrue(player0.isDead());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setY(3678.0F);
      player0.getMoney();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(3678.0F, player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)0;
      player0.unpack(byteArray0);
      Player player1 = new Player((short)4919, " . PJ", " . PJ", 0, 0);
      player0.boss = (Party) player1;
      player1.setDead();
      player0.pack();
      player0.getName();
      player1.pack();
      player0.setMoney(4307.0F);
      assertEquals(4307.0F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Player player0 = new Player(0);
          Party party0 = player0.next;
          player0.remove((Party) null);
          player0.getStrength();
          player0.pack();
          player0.setDead();
          player0.getTimeOfDeath();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor55.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((-414));
      Party party0 = new Party(1951);
      player0.prev = party0;
      player0.setX(555.5F);
      player0.setDead((long) (-414));
      player0.isConnected();
      player0.setMoney(555.5F);
      player0.toString();
      assertEquals(555.5F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0, ")iE9H|K7m9zQ\"E<!", "Player.unpack(): *** WARNING *** data is not of proper type!", 0, 4919);
      Party party0 = player0.head;
      player0.boss = null;
      player0.setMoney(0.0F);
      player0.boss = null;
      byte[] byteArray0 = player0.pack();
      player0.gangStrength();
      player0.getMoney();
      player0.type();
      player0.getPictureId();
      player0.getTimeOfDeath();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, 0, 4919);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(0, "pM#qACc", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)0;
      sequenceInputStream1.read(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      player0.unpack(dataInputStream0);
      player0.setX(0.0F);
      player0.isDead();
      assertEquals(0L, player0.getTimeOfDeath());
      
      player0.setDead((long) 1);
      int int0 = player0.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-2129), "?3cmQ", (-2129));
      Player player1 = new Player((short)4919, "", " s", 1135, (-2129));
      player0.setDead();
      player1.setConnected(true);
      Player player2 = new Player(0, "?3cmQ", " s", (-782));
      player0.setMoney(1001.8F);
      player1.setJoinOK(player2, true);
      player0.setJoinOK(player1, false);
      player0.getZ();
      player0.getPictureId();
      player0.type();
      player0.getIP();
      player0.isDead();
      player0.toString();
      assertTrue(player0.isDead());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(0);
      player0.gangStrength();
      byte[] byteArray0 = player0.pack();
      player0.isConnected();
      player0.unpack(byteArray0);
      player0.setX((-470.2F));
      assertEquals((-470.2F), player0.getX(), 0.01F);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.next;
      player0.head = null;
      player0.setMoney(2261.805F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      Player player1 = new Player((byte) (-87));
      player0.setJoinOK(player1, false);
      player1.isDead();
      player1.setConnected(true);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.639340587232432
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player((-541), "8$Q", "8$Q", 0, (-541));
      player1.setX(0);
      player0.add(player1);
      player0.setDead();
      player0.getStrength();
      player0.getPictureId();
      player0.setJoinOK(player1, true);
      player1.isDead();
      player0.setConnected(true);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(1392409296320L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.next;
      player0.head = null;
      player0.setMoney(2261.805F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      Player player1 = new Player((byte) (-87));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1392409296320L);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(2261.805F, player0.getMoney(), 0.01F);
      assertFalse(boolean0);
  }
}
