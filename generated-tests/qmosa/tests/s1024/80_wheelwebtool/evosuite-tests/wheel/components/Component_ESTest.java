/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:49:09 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "-j%5}c";
      Radio radio0 = new Radio((Component) null, "-j%5}c", "-j%5}c");
      Table table0 = null;
      try {
        table0 = new Table(radio0, "-j%5}c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wD$ZS89ygQdtNecM");
      Table table1 = table0.renderHint("wD$ZS89ygQdtNecM");
      // Undeclared exception!
      try { 
        table1.id("wD$ZS89ygQdtNecM");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Component component0 = null;
      String string0 = "CDSECT";
      NumberInput numberInput0 = new NumberInput((Component) null, "CDSECT", "YX|UhZq+aDgS.");
      // Undeclared exception!
      try { 
        numberInput0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "9P+Ss.{$=P Z";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("9P+Ss.{$=P Z");
      XmlSerializer xmlSerializer0 = null;
      // Undeclared exception!
      try { 
        xmlEntityRef0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Component component0 = null;
      String string0 = "|Rg";
      Radio radio0 = new Radio((Component) null, "|Rg", "|Rg");
      // Undeclared exception!
      try { 
        radio0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      boolean boolean0 = false;
      errorPage0.getEngine();
      // Undeclared exception!
      try { 
        errorPage0.reset("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "<* T]u,cc";
      String string1 = "f{\\L+-hAI<(%\\coe*V";
      Checkbox checkbox0 = new Checkbox(errorPage0, "<* T]u,cc", "f{L+-hAI<(%coe*V");
      // Undeclared exception!
      try { 
        checkbox0.h3();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Component component0 = null;
      String string0 = "wheel.components.ValidationRule";
      Submit submit0 = new Submit((Component) null, "wheel.components.ValidationRule", "wheel.components.ValidationRule");
      String string1 = "";
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        submit0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = " (";
      Form form0 = new Form(" (");
      Form form1 = form0.renderHint(" (");
      form1.addRenderBefore(form0);
      // Undeclared exception!
      try { 
        form1.acronym((Object) " (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      String string0 = "1A'";
      ElExpression elExpression0 = new ElExpression("1A'");
      // Undeclared exception!
      try { 
        tableRow0.renderHint(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression 1A' in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "col";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("col");
      // Undeclared exception!
      try { 
        xmlEntityRef0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Table table0 = new Table(errorPage0, (String) null);
      Table table1 = table0.renderHint((CharSequence) null);
      TableBlock tableBlock0 = table1.thead();
      tableBlock0.renderHint((CharSequence) null);
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      errorPage0.sub((Object) xmlEntityRef0);
      table1.em();
      Integer integer0 = new Integer(1890);
      errorPage0.acronym((Object) integer0);
      tableBlock0.abbr((Object) xmlEntityRef0);
      String string1 = ".6.8xZF_P";
      errorPage0.el(".6.8xZF_P");
      TextInput textInput0 = new TextInput(xmlEntityRef0, ".6.8xZF_P", ".6.8xZF_P");
      FormElement formElement0 = textInput0.value("8{nU:\"p|);@@-");
      // Undeclared exception!
      try { 
        formElement0.style();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.397936543864098
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Checkbox checkbox0 = new Checkbox(errorPage0, "", (String) null);
      checkbox0.label((String) null);
      // Undeclared exception!
      try { 
        checkbox0.h4((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wD$ZS89ygQdtNecM");
      table0.renderHint("wD$ZS89ygQdtNecM");
      String string0 = "";
      NumberInput numberInput0 = new NumberInput(table0, "", "");
      // Undeclared exception!
      try { 
        numberInput0.big();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      Radio radio0 = new Radio(errorPage0, (String) null, "");
      errorPage0.p((Object) radio0);
      Block block1 = block0.id((String) null);
      block1.entity("Ri]\\");
      TableBlock tableBlock1 = table0.tbody();
      // Undeclared exception!
      try { 
        tableBlock1.submit("&YJ1kli7{q?rIQccTCA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.674519708487689
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Block block1 = block0.id((String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("null", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block0, block1);
      assertSame(block0, tableBlock0);
      assertSame(block1, tableBlock0);
      assertSame(block1, block0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)block1.entity("Ri]\\");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("null", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block0, block1);
      assertSame(block0, tableBlock0);
      assertSame(block1, tableBlock0);
      assertSame(block1, block0);
      
      TableBlock tableBlock1 = table0.tbody();
      assertFalse(tableBlock1.equals((Object)block1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotNull(tableBlock1);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, block1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      
      Block block2 = (Block)tableBlock1.h4();
      assertFalse(tableBlock1.equals((Object)block1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("Block_1", block2.getComponentId());
      assertTrue(block2._isGeneratedId());
      assertEquals("div", block2.defaultTagName());
      assertNotNull(block2);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, block1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      
      Any any0 = tableBlock1.col();
      assertFalse(tableBlock1.equals((Object)block1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, block1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      
      String string0 = any0.defaultTagName();
      assertFalse(tableBlock1.equals((Object)block1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(string0);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, block1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", (String) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.label((String) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      TableBlock tableBlock1 = tableBlock0.renderHint("Ri]\\");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotNull(tableBlock1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      tableBlock0._setComponentId("jP\">CY3Um[iU(/o}\"*");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("jP\">CY3Um[iU(/o}\"*", tableBlock0.getComponentId());
      assertSame(tableBlock0, tableBlock1);
      
      Block block0 = tableBlock1.renderHint((CharSequence) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("jP\">CY3Um[iU(/o}\"*", tableBlock0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("jP\">CY3Um[iU(/o}\"*", tableBlock1.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("jP\">CY3Um[iU(/o}\"*", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock1, block0);
      assertSame(tableBlock1, tableBlock0);
      assertSame(block0, tableBlock1);
      assertSame(block0, tableBlock0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)block0.entity("Ri]\\");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("jP\">CY3Um[iU(/o}\"*", tableBlock0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("jP\">CY3Um[iU(/o}\"*", tableBlock1.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("jP\">CY3Um[iU(/o}\"*", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock1, block0);
      assertSame(tableBlock1, tableBlock0);
      assertSame(block0, tableBlock1);
      assertSame(block0, tableBlock0);
      
      Table table0 = new Table(checkbox0, "Ri]\\");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Ri]\\", table0.getComponentId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Ri]\\", table0.getComponentId());
      assertEquals("Ri]\\", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertNotNull(table1);
      assertSame(checkbox0, formElement0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock2 = table1.tbody();
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)block0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Ri]\\", table0.getComponentId());
      assertEquals("Ri]\\", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertTrue(tableBlock2._isGeneratedId());
      assertNotNull(tableBlock2);
      assertSame(checkbox0, formElement0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(tableBlock2, tableBlock1);
      assertNotSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, block0);
      
      Any any0 = tableBlock2.col();
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)block0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Ri]\\", table0.getComponentId());
      assertEquals("Ri]\\", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      assertSame(checkbox0, formElement0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(tableBlock2, tableBlock1);
      assertNotSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, block0);
      
      String string0 = any0.defaultTagName();
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)block0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Ri]\\", table0.getComponentId());
      assertEquals("Ri]\\", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNull(string0);
      assertSame(checkbox0, formElement0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(tableBlock2, tableBlock1);
      assertNotSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, block0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      boolean boolean0 = false;
      Hidden hidden0 = new Hidden(errorPage0, "WChj)!", "wheel.components.Expression");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertEquals("wheel.components.Expression", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertEquals("WChj)!", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertNotNull(hidden0);
      
      FormElement formElement0 = hidden0.value("L\"|36G+5M-");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertEquals("wheel.components.Expression", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertEquals("WChj)!", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("wheel.components.Expression", formElement0.getComponentId());
      assertEquals("WChj)!", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertNotNull(formElement0);
      assertSame(hidden0, formElement0);
      assertSame(formElement0, hidden0);
      
      // Undeclared exception!
      try { 
        errorPage0.addFirst(formElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      String string0 = "<* T]u,cc";
      String string1 = "f{\\L+-hAI<(%\\coe*V";
      Checkbox checkbox0 = new Checkbox(errorPage0, "<* T]u,cc", "f{L+-hAI<(%coe*V");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("f{L+-hAI<(%coe*V", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("<* T]u,cc", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      Form form0 = new Form("f{L+-hAI<(%coe*V");
      assertFalse(form0._isBuilt());
      assertEquals("f{L+-hAI<(%coe*V", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      Label label0 = new Label(checkbox0, form0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("f{L+-hAI<(%coe*V", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("<* T]u,cc", checkbox0.getFormElementName());
      assertFalse(form0._isBuilt());
      assertEquals("f{L+-hAI<(%coe*V", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      String string2 = label0.defaultTagName();
      assertEquals("span", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("f{L+-hAI<(%coe*V", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("<* T]u,cc", checkbox0.getFormElementName());
      assertFalse(form0._isBuilt());
      assertEquals("f{L+-hAI<(%coe*V", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        form0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Block block1 = block0.id((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertFalse(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("null", block1.getComponentId());
      assertNotNull(block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock0, block1);
      assertSame(block0, block1);
      assertSame(block0, tableBlock0);
      assertSame(block1, block0);
      assertSame(block1, tableBlock0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)block1.entity("Ri]\\");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertFalse(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("null", block1.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock0, block1);
      assertSame(block0, block1);
      assertSame(block0, tableBlock0);
      assertSame(block1, block0);
      assertSame(block1, tableBlock0);
      
      TableBlock tableBlock1 = table0.tbody();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotNull(tableBlock1);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      assertNotSame(tableBlock1, block1);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.button();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.618268371350764
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Any any0 = new Any(errorPage0, (CharSequence) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Table table0 = new Table(any0, "X~4)$f(-[XNrxXx(");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "X~4)$f(-[XNrxXx(");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("X~4)$f(-[XNrxXx(", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      Table table1 = table0.renderHint(charBuffer0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("X~4)$f(-[XNrxXx(", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("X~4)$f(-[XNrxXx(", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("X~4)$f(-[XNrxXx(", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("X~4)$f(-[XNrxXx(", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("X~4)$f(-[XNrxXx(", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("X~4)$f(-[XNrxXx(", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Block block1 = tableBlock0.renderHint((CharSequence) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("X~4)$f(-[XNrxXx(", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("X~4)$f(-[XNrxXx(", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("TableBlock_1", block1.getComponentId());
      assertNotNull(block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block1, tableBlock0);
      assertSame(block1, block0);
      
      TableBlock tableBlock1 = table0.colgroup();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotNull(tableBlock1);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      assertNotSame(tableBlock1, block1);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)tableBlock1.entity((String) null);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      assertNotSame(tableBlock1, block1);
      
      TableBlock tableBlock2 = table1.tbody();
      assertFalse(tableBlock2.equals((Object)block0));
      assertFalse(tableBlock2.equals((Object)block1));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("X~4)$f(-[XNrxXx(", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("X~4)$f(-[XNrxXx(", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("TableBlock_3", tableBlock2.getComponentId());
      assertNotNull(tableBlock2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(tableBlock2, block0);
      assertNotSame(tableBlock2, block1);
      assertNotSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, tableBlock1);
      
      Any any1 = tableBlock0.col();
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock0.equals((Object)tableBlock2));
      assertFalse(any1.equals((Object)any0));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("X~4)$f(-[XNrxXx(", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("X~4)$f(-[XNrxXx(", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("X~4)$f(-[XNrxXx(", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(any1._isGeneratedId());
      assertNull(any1.defaultTagName());
      assertEquals("Any_2", any1.getComponentId());
      assertNotNull(any1);
      assertNotSame(any0, any1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, block0);
      assertNotSame(any1, any0);
      
      String string0 = any0.defaultTagName();
      assertFalse(any0.equals((Object)any1));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNull(string0);
      assertNotSame(any0, any1);
      
      // Undeclared exception!
      try { 
        any1.dl();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Calendar calendar0 = table0.date();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Block block1 = block0.id((String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("null", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertNotNull(block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertSame(block1, tableBlock0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)block1.entity("Ri]\\");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("null", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertSame(block1, tableBlock0);
      
      // Undeclared exception!
      try { 
        tableBlock0.submit("Ri]\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Block block1 = block0.id((String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("null", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock0, block1);
      assertSame(block0, tableBlock0);
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertSame(block1, tableBlock0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)block1.entity("Ri]\\");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("null", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock0, block1);
      assertSame(block0, tableBlock0);
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertSame(block1, tableBlock0);
      
      TableBlock tableBlock1 = table0.tbody();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertNotNull(tableBlock1);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block1);
      assertNotSame(tableBlock1, block0);
      
      Block block2 = (Block)table0.li();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Block_1", block2.getComponentId());
      assertTrue(block2._isGeneratedId());
      assertEquals("div", block2.defaultTagName());
      assertNotNull(block2);
      assertSame(table0, table1);
      
      Block block3 = (Block)tableBlock1.h4();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(block3.equals((Object)block2));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("Block_2", block3.getComponentId());
      assertTrue(block3._isGeneratedId());
      assertEquals("div", block3.defaultTagName());
      assertNotNull(block3);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block1);
      assertNotSame(tableBlock1, block0);
      assertNotSame(block3, block2);
      
      Any any0 = tableBlock1.col();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block1);
      assertNotSame(tableBlock1, block0);
      
      String string0 = any0.defaultTagName();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNull(string0);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block1);
      assertNotSame(tableBlock1, block0);
      
      Hidden hidden0 = new Hidden(table1, "Ri]\\", "Ri]\\");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("Ri]\\", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Ri]\\", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0.isEmpty());
      assertNotNull(hidden0);
      
      String string1 = hidden0.defaultTagName();
      assertEquals("input", string1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("Ri]\\", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Ri]\\", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0.isEmpty());
      assertNotNull(string1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TextArea textArea0 = new TextArea(block1, (String) null, "Ri]\\");
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(block0.equals((Object)tableBlock1));
      assertFalse(block1.equals((Object)tableBlock1));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", tableBlock0.getComponentId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("null", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertNull(textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertEquals("Ri]\\", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertNotNull(textArea0);
      
      Class<DateInput> class0 = DateInput.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance((String) null, class0);
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNotNull(xmlPullWrapperFactory0);
      
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = (StaticXmlSerializerWrapper)xmlPullWrapperFactory0.newSerializerWrapper();
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNull(staticXmlSerializerWrapper0.getNamespace());
      assertNull(staticXmlSerializerWrapper0.getName());
      assertEquals(0, staticXmlSerializerWrapper0.getDepth());
      assertNull(staticXmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNotNull(staticXmlSerializerWrapper0);
      
      // Undeclared exception!
      try { 
        textArea0.renderComponent(staticXmlSerializerWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6552607526061607
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      ActionExpression actionExpression0 = tableBlock0.action("java.lang.String@0000000006");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(27, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertNotNull(actionExpression0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      
      Block block1 = block0.id((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", tableBlock0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block1._isGeneratedId());
      assertEquals("null", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertSame(block1, tableBlock0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)block1.entity("Ri]\\");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("null", tableBlock0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block1._isGeneratedId());
      assertEquals("null", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertSame(block1, tableBlock0);
      
      TableBlock tableBlock1 = table0.tbody();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotNull(tableBlock1);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      assertNotSame(tableBlock1, block1);
      
      Any any0 = tableBlock1.col();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      assertNotSame(tableBlock1, block1);
      
      String string0 = any0.defaultTagName();
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock1.equals((Object)block0));
      assertFalse(tableBlock1.equals((Object)block1));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(string0);
      assertSame(table0, table1);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock1, block0);
      assertNotSame(tableBlock1, block1);
      
      // Undeclared exception!
      try { 
        any0.dl();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Long long0 = new Long((-1999L));
      assertEquals((-1999L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong((String) null, long0);
      assertEquals((-1999L), (long)long1);
      assertNotNull(long1);
      
      Label label0 = (Label)tableBlock0.h3((Object) long1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Table table2 = (Table)table1.remove((Component) tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_1", table2.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertNotNull(table2);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertSame(table2, table1);
      assertSame(table2, table0);
      
      FileInput fileInput0 = new FileInput(table0, "C{S}Dckb", "C{S}Dckb");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertEquals("C{S}Dckb", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertNotNull(fileInput0);
      
      FileInput fileInput1 = (FileInput)fileInput0.id((String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("null", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("null", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertTrue(fileInput1.isValid());
      assertEquals("C{S}Dckb", fileInput1.getFormElementName());
      assertTrue(fileInput1.isEmpty());
      assertFalse(fileInput1._isGeneratedId());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertNotNull(fileInput1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(fileInput0, fileInput1);
      assertSame(fileInput1, fileInput0);
      
      fileInput0.setMaxRequestSize(0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("null", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(0, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(fileInput0, fileInput1);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table0);
      assertSame(table1, table2);
      
      Block block0 = (Block)tableRow0.pre();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table0);
      assertSame(table1, table2);
      
      // Undeclared exception!
      try { 
        tableRow0.radio("D5!f|?O&D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Table table2 = (Table)table1.remove((Component) tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_1", table2.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertNotNull(table2);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      
      Block block0 = (Block)tableBlock0.object();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      
      FileInput fileInput0 = new FileInput(table0, "C{S}Dckb", "C{S}Dckb");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("C{S}Dckb", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertNotNull(fileInput0);
      
      FileInput fileInput1 = (FileInput)fileInput0.id((String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("null", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertFalse(fileInput1._isGeneratedId());
      assertEquals("C{S}Dckb", fileInput1.getFormElementName());
      assertTrue(fileInput1.isEmpty());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("null", fileInput1.getComponentId());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertTrue(fileInput1.isValid());
      assertNotNull(fileInput1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(fileInput0, fileInput1);
      assertSame(fileInput1, fileInput0);
      
      fileInput0.setMaxRequestSize(0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(0, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("null", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(fileInput0, fileInput1);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      
      TableBlock tableBlock1 = (TableBlock)tableBlock0.renderHint((CharSequence) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertNotNull(tableBlock1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      TableRow tableRow1 = (TableRow)tableRow0.id("$Esc*fAQ+T|DB%Ma5Xg");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertFalse(tableRow0._isGeneratedId());
      assertEquals("$Esc*fAQ+T|DB%Ma5Xg", tableRow0.getComponentId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertFalse(tableRow1._isGeneratedId());
      assertEquals("$Esc*fAQ+T|DB%Ma5Xg", tableRow1.getComponentId());
      assertNotNull(tableRow1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableRow0, tableRow1);
      assertSame(tableRow1, tableRow0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)tableBlock1.entity("Ri]\\");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      TableBlock tableBlock2 = table2.tbody();
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_1", table2.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertNotNull(tableBlock2);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, tableBlock1);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotSame(tableBlock2, tableBlock1);
      assertNotSame(tableBlock2, tableBlock0);
      
      Block block1 = (Block)tableBlock0.h4();
      assertFalse(tableBlock0.equals((Object)tableBlock2));
      assertFalse(block1.equals((Object)block0));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, tableBlock1);
      assertNotSame(block1, block0);
      
      Any any0 = tableBlock0.col();
      assertFalse(tableBlock0.equals((Object)tableBlock2));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, tableBlock1);
      
      String string0 = any0.defaultTagName();
      assertFalse(tableBlock0.equals((Object)tableBlock2));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNull(string0);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, tableBlock1);
      
      XmlEntityRef xmlEntityRef1 = new XmlEntityRef((String) null);
      assertFalse(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertNull(xmlEntityRef1.defaultTagName());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef1.getComponentId());
      assertNotNull(xmlEntityRef1);
      
      // Undeclared exception!
      try { 
        xmlEntityRef1.pre((Object) "$Esc*fAQ+T|DB%Ma5Xg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      String string0 = "F`1";
      Radio radio0 = new Radio(errorPage0, "F`1", "F`1");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("F`1", radio0.getComponentId());
      assertEquals("F`1", radio0.getFormElementName());
      assertNotNull(radio0);
      
      String string1 = "non-digit in number value";
      Table table0 = new Table(radio0, "non-digit in number value");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("F`1", radio0.getComponentId());
      assertEquals("F`1", radio0.getFormElementName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("non-digit in number value", table0.getComponentId());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.thead();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("F`1", radio0.getComponentId());
      assertEquals("F`1", radio0.getFormElementName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("non-digit in number value", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      TableBlock tableBlock1 = tableBlock0.id("F`1");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("F`1", radio0.getComponentId());
      assertEquals("F`1", radio0.getFormElementName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("non-digit in number value", table0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("F`1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("F`1", tableBlock1.getComponentId());
      assertNotNull(tableBlock1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      Map<String, String> map0 = radio0.getAttributes();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("F`1", radio0.getComponentId());
      assertEquals("F`1", radio0.getFormElementName());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        radio0.cite();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      Short short0 = new Short((short) (-1635));
      assertEquals((short) (-1635), (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        form0.htmlText("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertNotNull(block0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Block block1 = block0.id((String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("null", tableBlock0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("null", block0.getComponentId());
      assertEquals("null", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(block1._isGeneratedId());
      assertNotNull(block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block0, block1);
      assertSame(block0, tableBlock0);
      assertSame(block1, tableBlock0);
      assertSame(block1, block0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)block1.entity("Ri]\\");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("null", tableBlock0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("null", block0.getComponentId());
      assertEquals("null", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(block1._isGeneratedId());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block1);
      assertSame(tableBlock0, block0);
      assertSame(block0, block1);
      assertSame(block0, tableBlock0);
      assertSame(block1, tableBlock0);
      assertSame(block1, block0);
      
      String string0 = null;
      TextInput textInput0 = new TextInput(table1, "Ri]\\", (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("Ri]\\", textInput0.getFormElementName());
      assertNotNull(textInput0);
      
      // Undeclared exception!
      try { 
        textInput0.message((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "lJi-KjCay:";
      Checkbox checkbox0 = new Checkbox((Component) null, "lJi-KjCay:", "lJi-KjCay:");
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("lJi-KjCay:", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("lJi-KjCay:", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.em((Object) "lJi-KjCay:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      TableRow tableRow0 = new TableRow(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertNotNull(tableRow0);
      
      String string0 = "1A'";
      ElExpression elExpression0 = new ElExpression("1A'");
      assertEquals("1A'", elExpression0.toString());
      assertEquals("1A'", elExpression0.getExpression());
      assertEquals(3, elExpression0.length());
      assertNotNull(elExpression0);
      
      Block block0 = (Block)tableRow0.h6();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Text text0 = new Text(tableRow0, tableRow0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertNotNull(text0);
      
      boolean boolean0 = text0.isCdata();
      assertFalse(boolean0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      
      String string1 = "";
      String string2 = "uS^+mUmnOF7S";
      // Undeclared exception!
      try { 
        text0.submit("uS^+mUmnOF7S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.thead();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertNotNull(block0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Radio radio0 = new Radio(errorPage0, (String) null, "");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertNotNull(radio0);
      
      Label label0 = (Label)errorPage0.p((Object) radio0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertNotNull(label0);
      
      TableBlock tableBlock1 = (TableBlock)block0.id((String) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("null", tableBlock0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("null", tableBlock1.getComponentId());
      assertNotNull(tableBlock1);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(block0, tableBlock0);
      assertSame(block0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertSame(tableBlock1, block0);
      
      Block block1 = (Block)tableBlock1.bdo("");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("null", tableBlock0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("null", tableBlock1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_1", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotNull(block1);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(block0, tableBlock0);
      assertSame(block0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertSame(tableBlock1, block0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)tableBlock1.entity("Ri]\\");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("null", tableBlock0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("null", block0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("null", tableBlock1.getComponentId());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      assertSame(tableBlock0, block0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(block0, tableBlock0);
      assertSame(block0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertSame(tableBlock1, block0);
      
      TableBlock tableBlock2 = table0.tbody();
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)block0));
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertNotNull(tableBlock2);
      assertNotSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, block0);
      assertNotSame(tableBlock2, tableBlock1);
      
      TableBlock tableBlock3 = table0.tbody();
      assertFalse(tableBlock3.equals((Object)tableBlock1));
      assertFalse(tableBlock3.equals((Object)tableBlock0));
      assertFalse(tableBlock3.equals((Object)block0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock3._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock3.getComponentId());
      assertEquals("div", tableBlock3.defaultTagName());
      assertNotNull(tableBlock3);
      assertNotSame(tableBlock3, tableBlock1);
      assertNotSame(tableBlock3, tableBlock0);
      assertNotSame(tableBlock3, block0);
      assertSame(tableBlock3, tableBlock2);
      
      Any any0 = tableBlock2.col();
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)block0));
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      assertNotSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, block0);
      assertNotSame(tableBlock2, tableBlock1);
      assertSame(tableBlock2, tableBlock3);
      
      String string0 = any0.defaultTagName();
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)block0));
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertNull(string0);
      assertNotSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, block0);
      assertNotSame(tableBlock2, tableBlock1);
      assertSame(tableBlock2, tableBlock3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9288799345939394
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Table table2 = (Table)table1.remove((Component) tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_1", table2.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertNotNull(table2);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertSame(table2, table1);
      assertSame(table2, table0);
      
      Block block0 = (Block)tableBlock0.object();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      
      FileInput fileInput0 = new FileInput(table0, "C{S}Dckb", "C{S}Dckb");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("C{S}Dckb", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertNotNull(fileInput0);
      
      FileInput fileInput1 = (FileInput)fileInput0.id((String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("null", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("null", fileInput1.getComponentId());
      assertTrue(fileInput1.isValid());
      assertEquals("input", fileInput1.defaultTagName());
      assertTrue(fileInput1.isEmpty());
      assertFalse(fileInput1._isGeneratedId());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("C{S}Dckb", fileInput1.getFormElementName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertNotNull(fileInput1);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(fileInput0, fileInput1);
      assertSame(fileInput1, fileInput0);
      
      fileInput0.setMaxRequestSize(0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("null", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(0, fileInput0.getMaxRequestSize());
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(fileInput0, fileInput1);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertNotNull(tableRow0);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      
      TableBlock tableBlock1 = (TableBlock)tableBlock0.renderHint((CharSequence) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotNull(tableBlock1);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      TableRow tableRow1 = (TableRow)tableRow0.id("$Esc*fAQ+T|DB%Ma5Xg");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(tableRow0._isGeneratedId());
      assertEquals("$Esc*fAQ+T|DB%Ma5Xg", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertFalse(tableRow1._isGeneratedId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertEquals("$Esc*fAQ+T|DB%Ma5Xg", tableRow1.getComponentId());
      assertNotNull(tableRow1);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableRow0, tableRow1);
      assertSame(tableRow1, tableRow0);
      
      XmlEntityRef xmlEntityRef0 = (XmlEntityRef)tableBlock1.entity("Ri]\\");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("Ri]\\", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      TableBlock tableBlock2 = table2.tbody();
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_1", table2.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      assertTrue(tableBlock2._isGeneratedId());
      assertNotNull(tableBlock2);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, tableBlock1);
      assertSame(table2, table1);
      assertSame(table2, table0);
      assertNotSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, tableBlock1);
      
      Block block1 = (Block)tableBlock0.h4();
      assertFalse(tableBlock0.equals((Object)tableBlock2));
      assertFalse(block1.equals((Object)block0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertNotNull(block1);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, tableBlock1);
      assertNotSame(block1, block0);
      
      Any any0 = tableBlock0.col();
      assertFalse(tableBlock0.equals((Object)tableBlock2));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, tableBlock1);
      
      String string0 = any0.defaultTagName();
      assertFalse(tableBlock0.equals((Object)tableBlock2));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(string0);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(table1, table2);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(tableBlock0, tableBlock1);
      
      NumberInput numberInput0 = new NumberInput(fileInput0, (String) null, "C{S}Dckb");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNull(numberInput0.getFormElementName());
      assertEquals("C{S}Dckb", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("null", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("C{S}Dckb", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(0, fileInput0.getMaxRequestSize());
      assertNotNull(numberInput0);
      
      boolean boolean0 = errorPage0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.375818183395842
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Label label0 = new Label(errorPage0, errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Table table0 = new Table(label0, "java.lang.String@0000000014");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.colgroup();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
      
      Checkbox checkbox0 = new Checkbox(tableRow0, "Finder expression didn't evaluate to a boolean value.", "WyW=vFA]kmj92*%\"");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("WyW=vFA]kmj92*%\"", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("Finder expression didn't evaluate to a boolean value.", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.validationRule("java.lang.String@0000000006", "java.lang.String@0000000014");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("WyW=vFA]kmj92*%\"", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("Finder expression didn't evaluate to a boolean value.", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Finder expression didn't evaluate to a boolean value.", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("WyW=vFA]kmj92*%\"", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      String string0 = "?yTPQD!$m<*";
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertNotNull(xmlPullParserFactory0);
      
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNotNull(xmlPullWrapperFactory0);
      
      XmlPullParserFactory xmlPullParserFactory1 = xmlPullWrapperFactory0.getFactory();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullParserFactory1.isValidating());
      assertFalse(xmlPullParserFactory1.isNamespaceAware());
      assertNotNull(xmlPullParserFactory1);
      assertSame(xmlPullParserFactory0, xmlPullParserFactory1);
      assertSame(xmlPullParserFactory1, xmlPullParserFactory0);
      
      XmlSerializer xmlSerializer0 = xmlPullParserFactory1.newSerializer();
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullParserFactory1.isValidating());
      assertFalse(xmlPullParserFactory1.isNamespaceAware());
      assertNull(xmlSerializer0.getName());
      assertNull(xmlSerializer0.getNamespace());
      assertEquals(0, xmlSerializer0.getDepth());
      assertNotNull(xmlSerializer0);
      assertSame(xmlPullParserFactory0, xmlPullParserFactory1);
      assertSame(xmlPullParserFactory1, xmlPullParserFactory0);
      
      // Undeclared exception!
      try { 
        tableRow0._renderTagStart(xmlSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }
}
