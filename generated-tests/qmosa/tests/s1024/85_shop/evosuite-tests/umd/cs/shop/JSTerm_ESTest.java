/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:17:09 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Spliterator;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "(dm'\"zya$:;o=tqp";
      StringReader stringReader0 = new StringReader("(dm'\"zya$:;o=tqp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^V![j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-4533.823082621);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isEmpty());
      
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSSubstitution0.clear();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      jSSubstitution0.add((Object) stringReader0);
      JSJshopVars.backquote = (-1);
      jSTerm0.isFunction();
      boolean boolean1 = jSTerm1.isGround();
      assertTrue(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.073542846408523
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" . ");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("iFp6r.of)xo*W1hu;1=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.spliterator();
      stringReader0.ready();
      streamTokenizer0.slashStarComments(false);
      int int0 = (-1);
      JSJshopVars.colon = 2316;
      JSJshopVars.backquote = (-1);
      JSJshopVars.astherisk = (-1);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E@C1/.%;q6X?2m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeVariable();
      assertTrue(jSTerm1.isVariable());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer0.pushBack();
      jSTerm2.isVariable();
      jSTerm1.isEval();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8080457195839967
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("iFp6r.of)xo*W1hu;1=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Spliterator spliterator0 = jSTerm1.spliterator();
      stringReader0.ready();
      jSTerm0.removeAllElements();
      streamTokenizer0.slashStarComments(false);
      JSJshopVars.colon = 2316;
      JSJshopVars.backquote = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) spliterator0);
      jSTerm0.isFunction();
      jSTerm1.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      streamTokenizer0.ordinaryChar(0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution2.fail());
      
      jSTerm0.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?H%3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("?H%3");
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("iFp6r.of)xo*W1hu;1=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("iFp6r.of)xo*W1hu;1=");
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      jSTerm1.isFunction();
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals(41, streamTokenizer1.ttype);
      assertEquals(16, stringBuffer0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.698782989513801
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?H%3");
      StringReader stringReader1 = new StringReader("?H%3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSJshopVars.verticalL = 96;
      streamTokenizer0.ordinaryChar(96);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-638));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSEvaluate.numericValue(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.isGround();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(boolean0);
      assertTrue(jSTerm2.isConstant());
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm0);
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(1, jSTerm3.size());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?H%3");
      StringReader stringReader1 = new StringReader("?H%3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?H%3");
      StringReader stringReader1 = new StringReader("?H%3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSJshopVars.verticalL = 96;
      streamTokenizer0.ordinaryChar(96);
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm4.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm4);
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity((-327));
      jSTerm0.clone();
      JSJshopVars.exclamation = 680;
      jSTerm0.addElement("2\u0001}BY%Yb'C#I");
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.ensureCapacity(59);
      jSTerm0.clone();
      jSTerm0.addElement("2\u0001}BY%Yb'C#I");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7298201303799212
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?H%3");
      StringReader stringReader1 = new StringReader("?H%3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = (-4);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(38);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "%%%";
      StringReader stringReader0 = new StringReader("%%%");
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSSubstitution> predicate1 = predicate0.and(predicate0);
      Predicate.isEqual((Object) "%%%");
      Predicate<JSSubstitution> predicate2 = predicate1.or(predicate0);
      predicate2.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate1.or(predicate0);
      jSSubstitution0.add((Object) "%%%");
      jSSubstitution0.parallelStream();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      predicate3.or(predicate0);
      jSTerm0.removeIf(predicate3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7274635571421673
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("xT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      LinkedList<JSSubstitution> linkedList0 = new LinkedList<JSSubstitution>();
      jSTerm0.addAll(0, (Collection) linkedList0);
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("xT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.retainAll(jSTerm1);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      assertFalse(jSTerm1.isEval());
      
      jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      boolean boolean0 = jSTerm3.isGround();
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm3.isFunction());
      assertTrue(boolean0);
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.2711893730418441
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("5(<y{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      int int0 = 62;
      jSTerm0.setSize(62);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5941666991180168
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?H%3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-1));
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      jSSubstitution0.add((Object) jSSubstitution2);
      boolean boolean1 = jSTerm1.equals(jSTerm2);
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean1 == boolean0);
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.leftBrac = (-3);
      jSTerm1.isGround();
      jSTerm0.setSize(63);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945934775756114
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.leftBrac = (-3);
      JSJshopVars.exclamation = 164;
      int int0 = 880;
      JSJshopVars.lessT = 880;
      jSTerm0.print();
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'\"zy$:;o=tqp");
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      stringReader0.read(charBuffer0);
      StringReader stringReader1 = new StringReader("(dm'\"zy$:;o=tqp");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.ordinaryChars(3, 930);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3006106464322604
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?H%3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(33);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.call();
      stringReader0.skip(0L);
      JSEvaluate.numericValue(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(3282, 1013);
      jSTerm2.clone();
      jSSubstitution2.add((Object) "'");
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      assertEquals("[?%%%]", jSTerm3.toString());
      
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm2, jSSubstitution5);
      JSTerm jSTerm7 = jSTerm6.call();
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution6));
      assertFalse(jSTerm7.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertNotSame(jSTerm6, jSTerm5);
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9562971137418599
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.retainAll(jSTerm1);
      streamTokenizer0.slashStarComments(true);
      jSTerm1.makeFunction();
      streamTokenizer0.wordChars(0, 0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm0);
      jSTerm0.equals(jSTerm1);
      jSTerm1.cloneT();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
