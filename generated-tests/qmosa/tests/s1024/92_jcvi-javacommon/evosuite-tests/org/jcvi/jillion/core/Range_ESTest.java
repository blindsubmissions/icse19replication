/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:28:59 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = (-3703L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3703L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.8286413964890924
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-963L));
      range_Builder0.expandEnd((-963L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-963L));
      range_Builder0.contractBegin(0L);
      range_Builder1.contractBegin((-963L));
      Range range1 = Range.ofLength(76L);
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      range0.toString();
      range0.intersects(range2);
      range_Builder0.expandBegin((-963L));
      Range.of((-963L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = (-2082L);
      Range.Builder range_Builder0 = new Range.Builder((-2082L), (-2082L));
      long long1 = 1935L;
      range_Builder0.shift(1935L);
      String string0 = "k=GB)`){\"";
      // Undeclared exception!
      try { 
        Range.parseRange("k=GB)`){\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse k=GB)`){\" into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0752205480543715
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = range0.asRange();
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.997068727089017
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 1722L;
      Range.of(1722L, 1722L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("(t8fIN5ul5$`>'q@", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (t8fIN5ul5$`>'q@ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 1069L;
      Range.Builder range_Builder0 = new Range.Builder(1069L);
      long long1 = (-2045L);
      range_Builder0.copy();
      range_Builder0.shift((-2045L));
      range_Builder0.expandEnd((-2045L));
      range_Builder0.expandEnd((-2975L));
      range_Builder0.shift(1069L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1738L, (-471L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1851L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1851L), (-1851L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.16498553777791
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      range_Builder0.expandEnd(1832L);
      Range range0 = Range.of((-1L), 1832L);
      range0.toString(range_CoordinateSystem0);
      range_Builder0.contractBegin((-1L));
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.of(1832L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2913361527953433
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.355958887690431
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(255L);
      Range range2 = Range.of((-1416L));
      range2.split(255L);
      // Undeclared exception!
      try { 
        range1.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.0604430105464155
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1832L);
      Range range0 = Range.of((-1L), 1832L);
      range0.toString(range_CoordinateSystem0);
      range_Builder0.contractBegin((-1L));
      range0.getLength();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2208L), 1L);
      List<Range> list0 = range0.complement(range1);
      range0.toString();
      range_Builder1.contractEnd((-1305L));
      range0.toString();
      Range range2 = Range.ofLength(1834L);
      range2.getEnd(range_CoordinateSystem1);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1 .. 1832 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1 .. 1832 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.7094133498189343
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-963L));
      range_Builder0.expandEnd((-963L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-963L));
      range_Builder0.contractBegin(0L);
      range_Builder1.contractBegin((-963L));
      Range range1 = Range.ofLength(76L);
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6691390662243637
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-963L));
      range_Builder0.expandEnd((-963L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd((-963L));
      range_Builder1.contractBegin((-799L));
      range_Builder1.contractBegin((-963L));
      range_Builder0.contractBegin(0L);
      range_Builder1.contractBegin((-963L));
      Range range1 = Range.ofLength(76L);
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complement(range1);
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      range0.toString();
      range0.intersects(range2);
      range_Builder0.expandBegin((-963L));
      Range.of((-963L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4140418324107458
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(255L);
      Range range2 = Range.of(255L);
      range2.split(255L);
      range2.equals("[ 1 .. 2147483647 ]/RB");
      range2.iterator();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.316373721686118
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1851L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-1851L), 462L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1820L);
      range0.split(650L);
      range_Builder0.expandEnd(1L);
      Range.Comparators.values();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ -1851 .. 461 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ -1851 .. 461 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8782183066708504
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(484L);
      range0.equals((Object) null);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.031518885363517
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = range0.asRange();
      range1.equals(range0);
      range1.split(4294967295L);
      range0.split(2147483647L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.191653181795279
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1851L), 462L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(462L, 462L);
      range0.endsBefore(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1068L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-963L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range1 = Range.of((-963L));
      Range range2 = Range.of((-963L));
      range0.split(1L);
      range2.equals(range_Builder1);
      range0.iterator();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem3);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.build();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ -962 .. -962 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ -962 .. -962 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8997571011430576
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = range0.asRange();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7367364346497003
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1832L);
      Range range0 = Range.of(12L, 1832L);
      range0.toString(range_CoordinateSystem0);
      range_Builder0.contractBegin(12L);
      range0.getLength();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2208L), 1L);
      range0.complement(range1);
      range0.toString();
      range_Builder1.contractEnd((-1305L));
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("[ 12 .. 1832 ]/0B", range_CoordinateSystem2);
      Range range3 = Range.of((-2573L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem3);
      Range range4 = range3.intersection(range0);
      Range.CoordinateSystem.values();
      range4.complement(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("mU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.mU
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.799790232432827
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      long long0 = 1832L;
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1832L);
      Range range0 = Range.of((-1L), 1832L);
      range0.toString(range_CoordinateSystem0);
      range_Builder0.contractBegin((-1L));
      range_Builder0.contractEnd(1832L);
      range0.getLength();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2208L), (-30L));
      List<Range> list0 = range0.complement(range1);
      range0.toString();
      range_Builder1.contractEnd((-1305L));
      range0.toString();
      Range range2 = Range.ofLength(1834L);
      range2.getEnd(range_CoordinateSystem1);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1 .. 1832 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1 .. 1832 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2165359268712543
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.Comparators.values();
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      
      long long0 = range1.getBegin();
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8096782340777837
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(32767L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.10468432349548
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.startsBefore(range1);
      Range range2 = Range.ofLength(4294967295L);
      range0.intersects(range2);
      Range range3 = range0.asRange();
      range3.equals(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.903400758180918
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1068L), (-5467L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3538389681341494
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.iterator();
      Range.Comparators.values();
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      long long0 = range1.getBegin();
      assertEquals(4294967295L, long0);
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.9702919135521193
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1851L), 462L);
      Range range0 = range_Builder0.build();
      range_Builder0.expandBegin(1820L);
      long long0 = 650L;
      List<Range> list0 = range0.split(650L);
      range_Builder0.expandEnd(1L);
      Range.Comparators.values();
      Range range1 = Range.of(650L);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6254900600846813
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range0.iterator();
      Range.Comparators.values();
      Range range1 = Range.of((-1L));
      range0.complement(range1);
      range_Builder0.copy();
      range0.getBegin();
      Range range2 = Range.of((-1L), (-1L));
      range2.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("length can not be negative", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse length can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.8023816578298817
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-30L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      long long1 = 1832L;
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1832L);
      Range range0 = Range.of((-1L), 1832L);
      range0.toString(range_CoordinateSystem0);
      range_Builder0.contractBegin((-1L));
      Range range1 = Range.parseRange("[ 0 .. 1833 ]/RB", range_CoordinateSystem0);
      range1.complement(range0);
      List<Range> list0 = range1.split(1832L);
      range0.complementFrom(list0);
      Range range2 = range_Builder1.build();
      range2.intersection(range0);
      Long long2 = new Long((-2031L));
      range_Builder0.shift((-30L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ %d .. %d ]/%s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ %d .. %d ]/%s
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5734504974788237
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = (-963L);
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.toString();
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(1307L);
      Range.of(1L);
      List<Range> list0 = new LinkedList<Range>();
      range0.equals((Object) null);
      range1.iterator();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.of(1307L, (-963L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.675018539992936
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range range1 = Range.of(32767L, 32767L);
      List<Range> list0 = range0.split(32767L);
      assertTrue(list0.contains(range1));
      
      range1.iterator();
      Object object0 = new Object();
      List<Range> list1 = range1.complement(range0);
      assertEquals(1, list1.size());
      assertFalse(list1.contains(range0));
      
      range1.equals(object0);
      range0.startsBefore(range1);
      boolean boolean0 = range0.endsBefore(range1);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(32768L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9966487213513693
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5478792367012026
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 2147483647 ]/RB", string0);
      
      Range range1 = Range.of(255L);
      Range range2 = Range.of(255L);
      List<Range> list0 = range2.split(255L);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
      
      range2.equals("[ 1 .. 2147483647 ]/RB");
      range2.iterator();
      Range.Comparators.values();
      Range range3 = Range.of(4294967296L);
      assertFalse(range3.isEmpty());
      
      List<Range> list1 = range2.complement(range1);
      assertEquals(1, list1.size());
      assertFalse(list1.contains(range1));
      
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1903478774829797
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.Comparators.values();
      Range range1 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.complement(range1);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.io.IOUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.io.IOUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.606080507045772
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(4294967295L);
      Range range2 = Range.of((-456L));
      range2.split(9223372036854774758L);
      Range.ofLength(0L);
      Object object0 = new Object();
      range2.equals(object0);
      Range.Comparators.values();
      Range.of((-1642L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 4294967295 .. 4294967296 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 4294967295 .. 4294967296 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.312615876974234
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of((-1759L), 4294967294L);
      long long0 = range0.getLength();
      assertEquals(4294969054L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1758L), long1);
      
      Range range1 = Range.of((-4294964914L));
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9512516113626925
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      Range range1 = range0.asRange();
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
