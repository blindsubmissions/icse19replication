/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:01:07 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindApplet;
import freemind.modes.ControllerAdapter;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.common.CommonToggleFoldedAction;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.mindmapmode.actions.DeleteChildAction;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.net.URI;
import java.net.URL;
import java.sql.Timestamp;
import java.time.Clock;
import java.time.Instant;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import javax.help.DefaultHelpModel;
import javax.help.HelpSet;
import javax.help.JHelpFavoritesNavigator;
import javax.help.SearchView;
import javax.help.plaf.basic.BasicFavoritesNavigatorUI;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JSplitPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.RootGraphicsNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 1772;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1772, 210, 210, 210, 210, 210);
      mockGregorianCalendar0.isLeapYear(1772);
      mockGregorianCalendar0.isWeekDateSupported();
      jDayChooser0.repaint();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int1 = 11;
      long long0 = 4294967295L;
      int int2 = (-971);
      int int3 = 0;
      int int4 = 49;
      int int5 = (-1004);
      boolean boolean0 = true;
      MenuElement[] menuElementArray0 = new MenuElement[3];
      String string0 = "";
      HelpSet helpSet0 = new HelpSet();
      String string1 = "";
      Hashtable<MockCalendar, Calendar> hashtable0 = new Hashtable<MockCalendar, Calendar>();
      SearchView searchView0 = new SearchView(helpSet0, "", "JCP%yHu/Ib&", hashtable0);
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel(helpSet0);
      JHelpFavoritesNavigator jHelpFavoritesNavigator0 = null;
      try {
        jHelpFavoritesNavigator0 = new JHelpFavoritesNavigator(searchView0, defaultHelpModel0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DragSource", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      long long0 = 141L;
      int int1 = 889;
      jDayChooser0.requestFocus(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 141L, 889, 0, 't');
      int int2 = (-1192);
      InputEvent.getModifiersExText((-1192));
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getColorModel();
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocus();
      jDayChooser0.drawWeeks();
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setWeekdayForeground(systemColor0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 28;
      floatArray0[1] = (float) 28;
      floatArray0[2] = (float) 28;
      floatArray0[3] = (float) 28;
      floatArray0[4] = (float) 28;
      floatArray0[5] = (float) 28;
      // Undeclared exception!
      try { 
        systemColor0.getColorComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<CommonToggleFoldedAction> class0 = CommonToggleFoldedAction.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.setBounds(0, 4218, 990, 990);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultListModel<MockCalendar> defaultListModel0 = new DefaultListModel<MockCalendar>();
      JList<MockCalendar> jList0 = new JList<MockCalendar>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      Color.getColor("95#mkPpBa?pR#");
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getDaysInMonth();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 28, "day", (-282L), 28);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5240421428674074
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1495);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getInputContext();
      jDayChooser0.getMinimumSize();
      int int0 = 49;
      long long0 = 0L;
      int int1 = (-272908544);
      int int2 = 776;
      char char0 = 'y';
      MenuElement[] menuElementArray0 = new MenuElement[4];
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.yellow;
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.setForeground(color0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setYear((-181));
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setYear(65312);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, color0.getGreen());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.921613496406035
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.isValidateRoot();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.repaint((-1L));
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 2000L, 1178, 0, 'k', 0);
      jDayChooser0.keyReleased(keyEvent0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.addKeyListener(jDayChooser0);
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.setMaxDayCharacters(0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7438550678980893
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultListModel<MockCalendar> defaultListModel0 = new DefaultListModel<MockCalendar>();
      JList<MockCalendar> jList0 = new JList<MockCalendar>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getDaysInMonth();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.createImage(18, 18);
      JMonthChooser jMonthChooser1 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = null;
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.isValidateRoot();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.repaint((-1L));
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 2000L, 1178, 0, 'k', 0);
      jDayChooser0.keyReleased(keyEvent0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.addKeyListener(jDayChooser0);
      Locale locale0 = jMonthChooser0.getLocale();
      locale0.stripExtensions();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      jDayChooser0.isDecorationBackgroundVisible();
      CommonToggleFoldedAction commonToggleFoldedAction0 = null;
      try {
        commonToggleFoldedAction0 = new CommonToggleFoldedAction((ControllerAdapter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.common.CommonToggleFoldedAction", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(77);
      jDayChooser0.getSize((Dimension) null);
      jDayChooser0.setMaxDayCharacters(27);
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7823559208895667
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, (ContainerListener) null);
      ContainerListener containerListener2 = AWTEventMulticaster.remove(containerListener1, (ContainerListener) null);
      defaultTreeCellRenderer0.addContainerListener(containerListener2);
      defaultTreeCellRenderer0.getComponentPopupMenu();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.97F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = (-883.792F);
      floatArray0[5] = (-1747.6F);
      floatArray0[6] = 2743.357F;
      jDayChooser0.setMaxDayCharacters((-430));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7438550678980893
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear((-1227));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1227), 1L, 1723, 1610, '$');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.setMaxDayCharacters(1550);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDay(14);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setYear(65312);
      java.sql.Date date0 = new java.sql.Date((-1L));
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDay(65312);
      jDayChooser0.setEnabled(false);
      jDayChooser0.focusLost((FocusEvent) null);
      assertEquals(29, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.setMaxDayCharacters(1550);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      int int0 = jDayChooser1.getDay();
      assertEquals(14, int0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser1.getDecorationBackgroundColor();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.732563771232962
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlignmentY(0.0F);
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.getY();
      jDayChooser0.setMaxDayCharacters(1550);
      jDayChooser0.getDay();
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isDayBordersVisible();
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "day", 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.726859676175222
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(77);
      jDayChooser0.getCursor();
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7438550678980893
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint();
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      java.sql.Date date0 = new java.sql.Date(1772);
      jDayChooser0.setMaxSelectableDate(date0);
      Date date1 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setMaxSelectableDate(date1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.691693794629735
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint();
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8568710361835
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.getMinSelectableDate();
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(90, color0.getGreen());
      
      jDayChooser0.getDay();
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(14);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(77);
      jDayChooser1.getCursor();
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser1.setFocus();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis((-731L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 978;
      jDayChooser0.setMonth(978);
      boolean boolean0 = true;
      jDayChooser0.setDayBordersVisible(true);
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setLocale(locale0);
      int int1 = 63742;
      int int2 = (-741);
      int int3 = (-1191);
      jDayChooser0.repaint(63742, (-741), (-1191), 978);
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8203813247239693
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(9);
      jDayChooser0.getVerifyInputWhenFocusTarget();
      jDayChooser0.getCursor();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale0 = Locale.US;
      jDayChooser1.setLocale(locale0);
      Date date0 = jDayChooser1.defaultMaxSelectableDate;
      jDayChooser1.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7939476602093944
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 24576;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 24576);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth(1191);
      java.sql.Date date0 = new java.sql.Date(595L);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMinSelectableDate(date0);
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.65970797168196
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getCursor();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.623226541126173
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      JMenuItem jMenuItem0 = new JMenuItem();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7337046109319694
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(39);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 2946L, 2139, 39, '');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(false);
      Clock clock0 = mock(Clock.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(clock0).instant();
      MockInstant.now(clock0);
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      TemporalUnit temporalUnit0 = chronoField0.getRangeUnit();
      // Undeclared exception!
      try { 
        MockInstant.plus((Instant) null, 2946L, temporalUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }
}
