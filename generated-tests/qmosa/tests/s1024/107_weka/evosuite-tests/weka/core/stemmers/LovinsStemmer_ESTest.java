/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:00:26 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("atory");
      assertEquals("ator", string0);
      
      String[] stringArray0 = new String[4];
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "atory";
      stringArray0[1] = "";
      stringArray0[2] = "atory";
      stringArray0[3] = "ator";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("(D--");
      assertEquals("(d--", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("z#1p[6|/oK<$iVYP8");
      assertEquals("z#1p[6|/ok<$ivyp8", string2);
      
      String string3 = lovinsStemmer0.stem("ator");
      assertEquals("at", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9913464134109882
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("&iv^ 4_z,5RQgFusnn");
      assertEquals("&iv^ 4_z,5rqgfusn", string0);
      
      lovinsStemmer0.stem(":\n");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      lovinsStemmer0.stem(":\n");
      stringArray0[1] = ":\n";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = ":\n";
      stringArray0[4] = "&iv^ 4_z,5RQgFusnn";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(":\n");
      String string1 = lovinsStemmer0.stemString(":\n");
      assertEquals(":\n", string1);
      
      lovinsStemmer0.stem("f~");
      lovinsStemmer0.stem(":\n");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stem("ants");
      assertEquals("ant", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.getRevision();
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
      
      lovinsStemmer0.getTechnicalInformation();
      String string5 = lovinsStemmer0.stem("+*MFnQj]]W5v$2N:H:8");
      assertEquals("+*mfnqj]]w5v$2n:h:8", string5);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7325520881169432
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("\"P");
      assertEquals("\"p", string1);
      
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("\"p");
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8034";
      stringArray0[1] = "LOCATION";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("LOCATION");
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("ene");
      String string4 = lovinsStemmer0.stemString("missing_id");
      assertEquals("mis_id", string4);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      String string5 = lovinsStemmer0.stem("*},@^o!dqUUS)");
      assertEquals("*},@^o!dquus)", string5);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8546526185598229
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("M_xLUhzMf5qg.Zt");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "M_xLUhzMf5qg.Zt";
      stringArray1[2] = "8034";
      stringArray1[3] = "M_xLUhzMf5qg.Zt";
      stringArray1[4] = "M_xLUhzMf5qg.Zt";
      stringArray1[5] = "";
      stringArray1[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[7] = "ic+f0`bY',.ofnOrk";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("o5tO6$rRa~92(HO QU{");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.getRevision();
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9524303320983685
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/J*q:h";
      stringArray0[1] = ".<>+l{b-0";
      lovinsStemmer0.stemString(".<>+l{b-0");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("abstractvad");
      assertEquals("abstractvas", string0);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("b*;t<\"~54/KcSYam");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stemString("otide");
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer0.stemString("otide");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stem("abstractend");
      assertEquals("abstractens", string3);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.852219593363262
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("atory");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "ator";
      stringArray0[2] = "^i4@HOCiC";
      stringArray0[3] = "ator";
      stringArray0[4] = "et";
      stringArray0[5] = "ator";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[7] = "#[5^fa1wM\"5>W~";
      stringArray0[8] = "ator";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("#[5^fa1wM\"5>W~");
      String string0 = lovinsStemmer0.stemString("y^ij4z7t<8ha+i8?{end");
      assertEquals("y^ij4z7t<8h+i8?{ens", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("et");
      assertEquals("et", string2);
      
      lovinsStemmer0.stemString("atory");
      lovinsStemmer0.stemString("ator");
      String string3 = lovinsStemmer0.stemString("^i4@HOCiC");
      assertEquals("^i4@hoc", string3);
      
      String string4 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string4);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0240366382663777
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.toString();
      stringArray0[0] = "The name of the school where a thesis was written.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("The name of the school where a thesis was written.");
      String string0 = lovinsStemmer0.stemString("The name of the school where a thesis was written.");
      assertEquals("th nam of th school whes a thes wa writ.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.stemString("$revision: 8034 $");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0854099392984664
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("ak=GB)`){\"k");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("l\"60Xizpn");
      assertEquals("l\"60xizpn", string1);
      
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[17];
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      stringArray0[1] = "l\"60Xizpn";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("C~nk");
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "C~nk";
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "SD40D3_ 27{=>!3Z3";
      stringArray1[4] = "8034";
      stringArray0[13] = "ak=GB)`){\"k";
      stringArray1[6] = "l\"60xizpn";
      stringArray1[7] = "ak=GB)`){\"k";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("ation");
      assertEquals("ation", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0488126818826367
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      String string0 = lovinsStemmer0.stemString("4m[WWF%.:gCvja");
      assertEquals("4m[wwf%.:gcvj", string0);
      
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[8] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("bex");
      assertEquals("bic", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.022808529414704
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ak=GB)`){\"k");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("l\"60Xizpn");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("bicuad");
      lovinsStemmer0.stem("jLl^x");
      lovinsStemmer0.stemString(")f|c8.");
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer1.stemString("SD40D3_ 27{=>!3Z3");
      assertEquals("sd40d3_ 27{=>!3z3", string0);
      
      lovinsStemmer0.stemString("bicond");
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer0.stemString("jll^x");
      assertEquals("jl^x", string2);
      
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9802608099283817
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("yLcRhV");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ations");
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("The name of the school where a thesis was written.");
      assertEquals("th nam of th school whes a thes wa writ.", string1);
      
      String string2 = lovinsStemmer0.stemString("!t(;yst8K0}pt!Y2(#");
      assertEquals("!t(;yst8k0}pt!y2(#", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.7892730950713935
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/J*q:h";
      stringArray0[1] = ".<>+l{b-0";
      lovinsStemmer0.stemString(".<>+l{b-0");
      stringArray0[2] = "";
      stringArray0[3] = "VOLUME";
      stringArray0[4] = "";
      stringArray0[5] = "publisher";
      String string0 = lovinsStemmer0.stemString("VOLUME");
      assertEquals("volum", string0);
      
      stringArray0[6] = "";
      stringArray0[7] = "He)";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("atorpand");
      String string1 = lovinsStemmer0.stemString("W?~2Ad18(C{S}Dc");
      assertEquals("w?~2ad18(c{s}dc", string1);
      
      String string2 = lovinsStemmer0.stem("W?~2Ad18(C{S}Dc");
      assertEquals("w?~2ad18(c{s}dc", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0052311017156306
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ide");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer1.stemString("encing");
      assertEquals("enc", string2);
      
      String string3 = lovinsStemmer0.stemString(";9p\u0004t4p>d(EK");
      assertEquals(";9p\u0004t4p>d(ek", string3);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0579652698996616
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("c~nkax");
      assertEquals("c~nkac", string0);
      
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "8034";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "c~nkac";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "c~nkac";
      stringArray0[7] = "c~nkac";
      stringArray0[8] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.990413677131134
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"P");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("\"p");
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8034";
      stringArray0[1] = "LOCATION";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("LOCATION");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("\"p");
      assertEquals("\"p", string2);
      
      lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      String string4 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
      
      LovinsStemmer.main((String[]) null);
      String string5 = lovinsStemmer0.stemString("");
      assertFalse(string5.equals((Object)string1));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2120994351006502
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "8034";
      stringArray0[3] = "";
      stringArray0[4] = "pex";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("pex");
      assertEquals("pic", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("PAGES");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.stemString("PAGES");
      assertEquals("pag", string3);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string4 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
      
      LovinsStemmer.main((String[]) null);
      String string5 = lovinsStemmer0.stemString("");
      assertFalse(string5.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9550761890182754
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("#[5^fa1wM\"5>W~");
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("ionals");
      assertEquals("ion", string0);
      
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("ized");
      assertEquals("iz", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0767611575773506
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/J*q:h";
      stringArray0[1] = ".<>+l{b-0";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("'I<s<[Yd1:,\tXDZf^`");
      LovinsStemmer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9091204938461721
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("Morgan Kaufmann Publishers");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("lovinsstemmerrud");
      assertEquals("lovinsstemmerrus", string2);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string3 = lovinsStemmer5.stemString("{D#_Kc>PHlnl1/v7I");
      assertEquals("{d#_kc>phlnl1/v7", string3);
      
      lovinsStemmer2.stemString("8034");
      String string4 = lovinsStemmer1.stemString(":A$AA ");
      assertEquals(":a$aa ", string4);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1429100227556335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/>gbD0PbO}zu!3]CiR&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "B`N/,)";
      stringArray0[4] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("B`N/,)");
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.stemString("ement");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("di42)Em'/");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString(" In ");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("");
      String string3 = lovinsStemmer0.stemString("");
      assertFalse(string3.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.027539370637948
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The International Standard Serial Number. Used to identify a journal.");
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "th intern standard ser number. us to identif a journ.";
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ert");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
  }
}
