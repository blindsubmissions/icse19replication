/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:12:11 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("]");
      discretize0.toString();
      discretize0.makeBinaryTipText();
      AllFilter allFilter0 = new AllFilter();
      String string0 = "  public boolean input(Instance instance) throws Exception {\n";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue(880);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("7@");
      discretize0.setOutputFormat();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("HEWMz}^2O:>Z)M8'");
      discretize0.m_ClassIndex = 13;
      discretize0.setUseBinNumbers(false);
      discretize0.findNumBinsTipText();
      discretize0.getBinRangesString(10);
      discretize0.setInvertSelection(false);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("$3'OpqDN");
      boolean boolean0 = true;
      discretize0.m_UseEqualFrequency = true;
      discretize0.getUseBinNumbers();
      discretize0.getMakeBinary();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$3'OpqDN";
      stringArray0[1] = "$3'OpqDN";
      boolean boolean1 = false;
      discretize0.setIgnoreClass(false);
      stringArray0[2] = "";
      stringArray0[3] = "$3'OpqDN";
      stringArray0[4] = "$3'OpqDN";
      stringArray0[5] = "$3'OpqDN";
      stringArray0[6] = "$3'OpqDN";
      stringArray0[7] = "$3'OpqDN";
      discretize0.setOptions(stringArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1601.57), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("  d");
      discretize0.binsTipText();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("yyyy-MM-dd HH:mm:ss");
      Filter filter0 = Filter.makeCopy(discretize0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      Filter.main(stringArray0);
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      filter0.getCapabilities();
      Filter.main(stringArray0);
      stringArray0[4] = "\nClass name: ";
      Filter.runFilter(filter0, stringArray0);
      discretize0.toString();
      discretize0.setDesiredWeightOfInstancesPerInterval(100.0);
      int int0 = 6;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize(")z(Z%G?//");
      int[] intArray0 = new int[8];
      discretize0.setOutputFormat();
      intArray0[0] = (-2136);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2265);
      intArray0[4] = 44;
      discretize0.setUseEqualFrequency(false);
      intArray0[5] = (-1);
      intArray0[6] = (-1318);
      discretize0.getInvertSelection();
      intArray0[7] = 738;
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.findNumBinsTipText();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      boolean boolean0 = true;
      discretize0.getCapabilities();
      discretize0.m_IgnoreClass = true;
      discretize0.invertSelectionTipText();
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 3441;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qg9LxXX";
      stringArray0[1] = "Types differ: ";
      Discretize.main(stringArray0);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3441);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 82);
      String string0 = "N";
      int int0 = 1634;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("N", (Instances) null, 1634);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 985.1671408165128;
      doubleArray0[1] = 985.1671408165128;
      doubleArray0[2] = 985.1671408165128;
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 2811;
      intArray0[2] = 68;
      intArray0[3] = 4;
      intArray0[4] = (-178);
      intArray0[5] = 918;
      intArray0[6] = 19;
      SparseInstance sparseInstance0 = new SparseInstance(985.1671408165128, doubleArray0, intArray0, (-552));
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("]pJ}v");
      discretize0.setInvertSelection(true);
      discretize0.m_UseEqualFrequency = false;
      int int0 = 82;
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.m_IgnoreClass = false;
      discretize0.getCutPoints(66);
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.setMakeBinary(false);
      discretize0.setDesiredWeightOfInstancesPerInterval(66);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getCutPoints(68);
      assertEquals(66.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "first-last";
      stringArray0[2] = "";
      stringArray0[3] = "first-last";
      stringArray0[4] = "first-last";
      stringArray0[5] = "first-last";
      stringArray0[6] = "";
      stringArray0[7] = "first-last";
      discretize0.setOptions(stringArray0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize(")z(Z%G?//");
      int[] intArray0 = new int[9];
      discretize0.setOutputFormat();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")z(Z%G?//");
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2265);
      intArray0[4] = 44;
      intArray0[5] = (-1);
      intArray0[6] = 0;
      discretize0.getInvertSelection();
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.findNumBinsTipText();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertTrue(discretize0.getFindNumBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[7];
      discretize0.getMakeBinary();
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-336));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.m_IgnoreClass = false;
      discretize0.getCutPoints(66);
      discretize0.setDesiredWeightOfInstancesPerInterval(66);
      discretize0.setMakeBinary(false);
      discretize0.useEqualFrequencyTipText();
      assertEquals(66.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("   * @return always true, to indicate that the output can \n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   * @return always true, to indicate that the output can \n");
      discretize0.setDesiredWeightOfInstancesPerInterval(1.7976931348623157E308);
      discretize0.m_MakeBinary = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getCapabilities();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 1.7976931348623157E308;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = 1.7976931348623157E308;
      doubleArray0[8] = 1.7976931348623157E308;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.378620199410213
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("first-last");
      discretize1.getMakeBinary();
      Discretize discretize2 = new Discretize("4.!sDIy+}l9Z&k");
      discretize2.setInvertSelection(false);
      discretize1.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-336));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getUseBinNumbers();
      discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.attributeIndicesTipText();
      discretize0.setFindNumBins(true);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2275247137250096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter.makeCopy(discretize0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      discretize0.m_FindNumBins = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Discretize discretize1 = new Discretize("");
      discretize1.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.871476118054867
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Can't ignore class when changing the number of attributes!";
      stringArray0[1] = "Can't ignore class when changing the number of attributes!";
      stringArray0[2] = "first-last";
      stringArray0[3] = "Can't ignore class when changing the number of attributes!";
      stringArray0[4] = "Can't ignore class when changing the number of attributes!";
      stringArray0[5] = "$Revision: 8964 $";
      stringArray0[6] = "-B";
      stringArray0[7] = "3.4.0";
      stringArray0[8] = "G cd3r[#+ZBA+E";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3.4.0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("Unable to find the name of the package in the Description file for ");
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1528.3547642894976);
      doubleArray2[1] = 695.058795;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1347.0;
      doubleArray2[4] = (-212.09);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-212.09);
      doubleArray4[1] = 695.058795;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-1528.3547642894976);
      doubleArray4[5] = 1347.0;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.293118601486813
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("Unable to find the name of the package in the Description file for ");
      discretize0.getOptions();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.getBinRangesString(1993);
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.615630577027551
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "hQA#fBoq9");
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.887577825056549
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SystemInUtil.addInputLine("M{zPT{8B>)']3");
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = false;
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      int int0 = 66;
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3044.8685;
      doubleArray1[1] = (double) 66;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3044.8685;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 3044.8685;
      doubleArray3[1] = (double) 66;
      doubleArray3[2] = (double) 66;
      doubleArray3[3] = 3044.8685;
      doubleArray3[4] = (double) 66;
      doubleArray3[5] = 3044.8685;
      doubleArray3[6] = (double) 66;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 3044.8685;
      doubleArray5[1] = 3193.9756589672047;
      doubleArray5[2] = 3044.8685;
      doubleArray5[3] = (double) 66;
      doubleArray5[4] = (double) 66;
      doubleArray5[5] = 3044.8685;
      doubleArray5[6] = 3044.8685;
      doubleArray5[7] = (double) 66;
      doubleArray5[8] = (double) 66;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_IgnoreClass = false;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("      else\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "      else\n");
      discretize0.setMakeBinary(true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1636.906455;
      doubleArray0[1] = 1636.906455;
      doubleArray0[2] = 1636.906455;
      doubleArray0[3] = 1636.906455;
      doubleArray0[4] = 1636.906455;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("   * @param i the rows to process\n");
      Discretize discretize0 = new Discretize("\"B2~2TN");
      discretize0.m_IgnoreClass = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4036404106149494
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SystemInUtil.addInputLine("Unable to find the name of the package in the Description file for ");
      Discretize discretize0 = new Discretize("Unable to find the name of the package in the Description file for ");
      discretize0.m_NumBins = 3346;
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      assertEquals(3346, discretize0.getBins());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.582306344313967
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("first-last");
      Range range0 = discretize1.m_DiscretizeCols;
      discretize1.m_DiscretizeCols = range0;
      discretize1.getMakeBinary();
      discretize1.setUseEqualFrequency(true);
      Discretize discretize2 = new Discretize("4.!sDIy+}l9Z&k");
      discretize2.setInvertSelection(false);
      discretize1.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-336));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[10][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-225.47149535477695);
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(3);
      assertEquals(10, discretize0.getBins());
      assertEquals("(-inf-0],(0-inf)", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }
}
