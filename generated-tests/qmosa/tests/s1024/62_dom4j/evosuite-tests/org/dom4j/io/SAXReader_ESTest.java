/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:36:16 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.util.IndexedElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      String string0 = "";
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader1.removeHandler("");
      String string1 = null;
      handlerBase0.processingInstruction("", " of document ");
      handlerBase0.resolveEntity("", (String) null);
      try { 
        sAXReader1.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setStripWhitespaceText(false);
      try { 
        sAXReader0.read("snn<1et\"%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: snn<1et\"% Nested exception: no protocol: snn<1et\"%
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DefaultDocumentFactory.getInstance();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      dispatchHandler0.setDefaultHandler(pruningDispatchHandler0);
      dispatchHandler0.removeHandler(" +.95");
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.removeHandler("__M4-` $Hiu)sw:K}");
      try { 
        sAXReader0.read((InputStream) null, "__M4-` $Hiu)sw:K}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: __M4-` $Hiu)sw:K} Nested exception: no protocol: __M4-` $Hiu)sw:K}
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.getDocumentFactory();
      byte[] byteArray0 = new byte[0];
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getParent();
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler(xMLFilterImpl0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      String string0 = "8Uay3AtXa9Ak7S$$!";
      try { 
        sAXReader0.setProperty("8Uay3AtXa9Ak7S$$!", "8Uay3AtXa9Ak7S$$!");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '8Uay3AtXa9Ak7S$$!' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      String string0 = " of document ";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.resetHandlers();
      pruningDispatchHandler0.resetHandlers();
      pruningDispatchHandler0.resetHandlers();
      sAXReader0.createDefaultEntityResolver(" of document ");
      sAXReader0.addHandler(" of document ", pruningDispatchHandler0);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setValidation(true);
      String string1 = "[ NZzBZljB";
      try { 
        sAXReader0.read("[ NZzBZljB");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: [ NZzBZljB Nested exception: no protocol: [ NZzBZljB
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      String string0 = "\"fR";
      sAXReader0.removeHandler("\"fR");
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      defaultDocumentFactory0.createEntity("", "kbsr{%DC@v1}T<S");
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.setValidation(true);
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9264175554979963
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      String[] stringArray0 = new String[2];
      String string0 = "Error on line ";
      stringArray0[0] = "Error on line ";
      stringArray0[1] = ",gCx}(Tzc3D&6R";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String string1 = " of document ";
      StringReader stringReader0 = new StringReader("Error on line ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      String string0 = "";
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = "r.kza|4HQ,>c{kj-";
      xMLFilterImpl0.resolveEntity("", "r.kza|4HQ,>c{kj-");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string1 = "NfLC";
      int int0 = 2042;
      int int1 = 47;
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException("r.kza|4HQ,>c{kj-", mockThrowable0);
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      try { 
        xMLFilterImpl1.getProperty("-t$CYZp");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: -t$CYZp
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      String string0 = "QU{qi.<F";
      sAXReader1.removeHandler("QU{qi.<F");
      try { 
        sAXReader1.setXMLReaderClassName("QU{qi.<F");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class QU{qi.<F not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.getXMLFilter();
      sAXReader0.getErrorHandler();
      sAXReader0.setXMLReader(xMLReader0);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kw3LgTrsJfLDL";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "qg9LxXX5SNe";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.lastElementIndex = 2434;
      // Undeclared exception!
      try { 
        sAXModifyElementHandler0.onStart(pruningElementStack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2434
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.getXMLFilter();
      try { 
        sAXReader0.setFeature("", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8782183066708504
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      MockFile mockFile0 = new MockFile("7E>_pX", "7E>_pX");
      URL uRL0 = mockFile0.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/7E>_pX/7E>_pX (No such file or directory) Nested exception: /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/7E>_pX/7E>_pX (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.98296502921777
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ";&&qhvU9,_";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      IndexedElement indexedElement0 = new IndexedElement(";&&qhvU9,_");
      pruningElementStack0.pushElement(indexedElement0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.getErrorHandler();
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.821563807860364
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "{d[He)'*zg@%^";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String string1 = " of document ";
      String string2 = "2my(e";
      StringReader stringReader0 = new StringReader("2my(e");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes Nested exception: Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ";&&qhvU9,_";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      SAXReader sAXReader1 = new SAXReader();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMDocumentType0);
      dOMDocument0.getEntityResolver();
      sAXReader1.setEntityResolver((EntityResolver) null);
      String string0 = "org.dom4j.factory";
      try { 
        sAXReader1.setProperty(";&&qhvU9,_", dOMDocumentType0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property ';&&qhvU9,_' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      defaultDocumentFactory0.createQName("8%", "http://xml.org/sax/properties/declaration-handler");
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "XxXqU");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/declaration-handler", " [Comment: \"");
      String[] stringArray0 = new String[9];
      stringArray0[0] = " [Comment: \"";
      stringArray0[1] = "http://xml.org/sax/properties/declaration-handler";
      stringArray0[2] = "http://xml.org/sax/features/namespaces";
      stringArray0[3] = " [Comment: \"";
      stringArray0[4] = "XxXqU";
      stringArray0[5] = "";
      stringArray0[6] = "8%";
      stringArray0[7] = " [Comment: \"";
      stringArray0[8] = " [Comment: \"";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      IndexedElement indexedElement0 = new IndexedElement("");
      pruningElementStack0.pushElement(indexedElement0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.getErrorHandler();
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9034007581809185
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ";&&qhvU9,_";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      IndexedElement indexedElement0 = new IndexedElement(";&&qhvU9,_");
      pruningElementStack0.pushElement(indexedElement0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.isIncludeExternalDTDDeclarations();
      File file0 = MockFile.createTempFile("t(n", "");
      SAXReader sAXReader1 = new SAXReader();
      try { 
        sAXReader1.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.848899705841817
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/t(n0");
      sAXReader_SAXEntityResolver0.uriPrefix = "TCA'vc";
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/t(n0", "");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/t(n0", "//tmp/t(n0");
      sAXReader_SAXEntityResolver0.resolveEntity("!XZy].", " of document ");
      sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/t(n0");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("http://xml.org/sax/properties/declaration-handler", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class http://xml.org/sax/properties/declaration-handler not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.setStripWhitespaceText(false);
      String string0 = "Operation not permitted while using a non-simple namespace context.";
      try { 
        sAXReader0.read("Operation not permitted while using a non-simple namespace context.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/Operation not permitted while using a non-simple namespace context. (No such file or directory) Nested exception: /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/Operation not permitted while using a non-simple namespace context. (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      sAXReader0.getEncoding();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid byte 1 of 1-byte UTF-8 sequence. Nested exception: Invalid byte 1 of 1-byte UTF-8 sequence.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("_r-@)+k");
      sAXReader_SAXEntityResolver0.resolveEntity("_r-@)+k", "_r-@)+k");
      sAXReader_SAXEntityResolver0.resolveEntity(" [Text: \"", (String) null);
      IndexedElement indexedElement0 = new IndexedElement("org.dom4j.dom.DOMDocument");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9319232930107053
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7_N+<I0gAT'v!t(.jkl";
      stringArray0[1] = "xH%Wq(BBC";
      stringArray0[2] = "Bb,";
      stringArray0[3] = " of document ";
      IndexedElement indexedElement0 = new IndexedElement("//tmp/t(n0");
      sAXReader1.isIncludeExternalDTDDeclarations();
      sAXReader1.getErrorHandler();
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@521bf15f Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@521bf15f Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      String string0 = "Operation not permitted while using a non-simple namespace context.";
      sAXReader0.isStringInternEnabled();
      sAXReader0.resetHandlers();
      // Undeclared exception!
      try { 
        documentFactory0.createPattern("?-R2+knjo{/;or");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: ?-R2+knjo{/;or Unexpected '?-R2+knjo{/;or'
         //
         verifyException("org.dom4j.xpath.XPathPattern", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getParent();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      assertFalse(xMLFilterImpl1.equals((Object)xMLFilterImpl0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createComment("//tmp/ [Comment: \"0http:/xml.org/sax/properties/declaration-handler");
      documentFactory0.createQName("Unrecognized axis code: ", "3N>^_er~hDu,E");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, false);
      sAXReader1.setEncoding("#### Warning: couldn't create bean: ");
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isValidating());
      assertTrue(sAXReader1.isStringInternEnabled());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("G;K");
      sAXReader0.addHandler("vf*P{0 x8)#&", (ElementHandler) null);
      sAXReader0.setStringInternEnabled(true);
      String string0 = "org.dom4j.io.ElementStack";
      MockFile mockFile0 = new MockFile("`?$e[@L", "org.dom4j.io.ElementStack");
      try { 
        sAXReader0.setProperty("org.dom4j.io.ElementStack", "`?$e[@L");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'org.dom4j.io.ElementStack' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.98296502921777
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
          sAXReader0.getXMLFilter();
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
          sAXReader0.setXMLFilter(xMLFilterImpl0);
          defaultDocumentFactory0.createQName("8%", "http://xml.org/sax/properties/declaration-handler");
          sAXReader0.setIncludeExternalDTDDeclarations(false);
          String string0 = "bo[*acFP3n6e";
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("bo[*acFP3n6e");
          try { 
            sAXReader0.read("http://xml.org/sax/properties/declaration-handler");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1268)
             // java.net.InetAddress.getAllByName(InetAddress.java:1192)
             // java.net.InetAddress.getAllByName(InetAddress.java:1126)
             // java.net.InetAddress.getByName(InetAddress.java:1076)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1268)
             // java.net.InetAddress.getAllByName(InetAddress.java:1192)
             // java.net.InetAddress.getAllByName(InetAddress.java:1126)
             // java.net.InetAddress.getByName(InetAddress.java:1076)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
