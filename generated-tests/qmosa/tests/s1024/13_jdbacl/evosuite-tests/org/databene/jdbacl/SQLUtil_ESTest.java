/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:28:53 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.net.URI;
import java.util.Locale;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBConnection;
import org.h2.tools.Recover;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nG\"2SphGiW1d^V";
      stringArray0[1] = "x>:KvILc";
      stringArray0[2] = "nG\"2SphGiW1d^V";
      stringArray0[3] = "nG\"2SphGiW1d^V";
      stringArray0[4] = "nG\"2SphGiW1d^V";
      stringArray0[5] = "nG\"2SphGiW1d^V";
      stringArray0[6] = "nG\"2SphGiW1d^V";
      SQLUtil.renderColumnListWithTableName("nG\"2SphGiW1d^V", stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "nG\"2SphGiW1d^V";
      stringArray1[1] = "nG\"2SphGiW1d^V";
      stringArray1[2] = "nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.x>:KvILc, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V";
      stringArray1[3] = "}xJb|'j%";
      stringArray1[4] = "x>:KvILc";
      stringArray1[5] = "nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.x>:KvILc, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V, nG\"2SphGiW1d^V.nG\"2SphGiW1d^V";
      stringArray1[6] = "x>:KvILc";
      stringArray1[7] = "nG\"2SphGiW1d^V";
      stringArray1[8] = "nG\"2SphGiW1d^V";
      SQLUtil.innerJoin("nG\"2SphGiW1d^V", stringArray0, "}xJb|'j%", "nG\"2SphGiW1d^V", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("j;=Rk.$s>=6}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "CONSTRAINT ";
      SQLUtil.isQuery("CONSTRAINT ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "O";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'O' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.isQuery("");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      TableContainer tableContainer0 = new TableContainer("");
      String string0 = null;
      tableContainer0.getTable((String) null);
      String string1 = "drop materialized view";
      DBDataType dBDataType0 = DBDataType.getInstance(0, "drop materialized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer2 = RawTransaction.COMMIT;
      defaultDBColumn0.setType(dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized view", (DBTable) null, dBDataType0, integer2, integer2);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      defaultDBColumn1.isIdentical(defaultDBColumn0);
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        defaultDBColumn1.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(".m^J");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".m^J";
      stringArray0[1] = ".m^J";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = ".m^J";
      stringArray1[2] = "";
      stringArray1[3] = " as ";
      stringArray1[4] = ".m^J";
      String string0 = SQLUtil.innerJoin(".m^J", stringArray0, ".m^J", "", stringArray1);
      assertEquals(".m^J as  on .m^J..m^J = . and .m^J..m^J = ..m^J", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "N$+R>8Uay3AtXa9Ak";
      SQLUtil.isDML("N$+R>8Uay3AtXa9Ak");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "N$+R>8Uay3AtXa9Ak");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("N$+R>8Uay3AtXa9Ak", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((-2237.0F));
      StringBuilder stringBuilder3 = stringBuilder2.append(';');
      stringBuilder3.codePoints();
      StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder4, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = "w.97{QoHR^p<U";
      dBCatalog0.getSchema("w.97{QoHR^p<U");
      SQLUtil.ownerDotComponent(dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "b,$H";
      stringArray0[1] = "g_e[y";
      stringArray0[2] = "g_e[y";
      stringArray0[3] = "g_e[y";
      stringArray0[4] = "g_e[y";
      stringArray0[5] = "g_e[y";
      stringArray0[6] = "g_e[y";
      stringArray0[7] = "g_e[y";
      stringArray0[8] = "g_e[y";
      SQLUtil.renderColumnListWithTableName("g_e[y", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b,$H");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "g_e[y");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.normalize("Unable to load the class {0} responsible for the datatype {1}", false);
      SQLUtil.substituteMarkers("(*Yy2r4", "(*Yy2r4", "Unable to load the class {0} responsible for the datatype {1}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CV<-");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CV<-";
      stringArray0[1] = "CV<-";
      stringArray0[2] = "Unable to load the class { 0 } responsible for the datatype { 1 }";
      stringArray0[3] = "'Unable to load the class {0} responsible for the datatype {1}'";
      stringArray0[4] = "'Unable to load the class {0} responsible for the datatype {1}'";
      stringArray0[5] = "(*Yy2r4";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = "";
      SQLUtil.join("CV<-", "", stringArray0, "5K^SY", "CV<-", stringArray0);
      SQLUtil.isDDL("Unable to load the class { 0 } responsible for the datatype { 1 }");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      int int0 = 0;
      DBDataType dBDataType0 = DBDataType.getInstance(0, "(*Yy2r4");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'Unable to load the class {0} responsible for the datatype {1}'", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("'Unable to load the class {0} responsible for the datatype {1}'", defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("C*a-{Y6y<C1ZD", dBSchema0);
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("L\"UH+!=M]", defaultDBTable1, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("", defaultDBTable1, (-627), "\"h$1-");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("truncate", defaultDBTable1, 0, "'Unable to load the class {0} responsible for the datatype {1}'");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("truncate", defaultDBTable1, dBDataType0, integer0);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("3=SmIT<s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '3=SmIT<s' not found in table 'C*a-{Y6y<C1ZD'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      String string0 = ",";
      SQLUtil.parseColumnTypeAndSize(",");
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<S%qLK`L>#q?VcpJ";
      stringArray0[1] = "<S%qLK`L>#q?VcpJ";
      stringArray0[2] = "<S%qLK`L>#q?VcpJ";
      stringArray0[3] = "<S%qLK`L>#q?VcpJ";
      stringArray0[4] = "<S%qLK`L>#q?VcpJ";
      stringArray0[5] = "<S%qLK`L>#q?VcpJ";
      SQLUtil.innerJoin("<S%qLK`L>#q?VcpJ", stringArray0, "vVoQt;%uAl", (String) null, stringArray0);
      SQLUtil.isDML(",");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      dBPrimaryKeyConstraint0.setName("<S%qLK`L>#q?VcpJ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      stringBuilder0.reverse();
      StringBuilder stringBuilder1 = stringBuilder0.append(0.95F);
      SQLUtil.addRequiredCondition("&_}cI-[NV^;5R:C4t", stringBuilder1);
      SQLUtil.innerJoin(",", stringArray0, "&_}cI-[NV^;5R:C4t", "", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.substituteMarkers("", "", "");
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      SQLUtil.isProcedureCall("YV7%pYI");
      DBSchema dBSchema0 = new DBSchema("call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("YV7%pYI", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-1980));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("O<<TD_ZgO)_");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.addReferrer((DBTable) null);
      defaultDBTable0.setOwner((CompositeDBObject<?>) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O<<TD_ZgO)_", defaultDBTable0, 2126, "");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "CHECK ", true, "O<<TD_ZgO)_");
      defaultDBColumn0.setDefaultValue("O<<TD_ZgO)_");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8FR)=", (DBSchema) null);
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8FR)=", (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "8FR)=";
      stringArray0[2] = null;
      stringArray0[3] = "0r!tWXpg";
      stringArray0[4] = "0r!tWXpg";
      stringArray0[5] = "0r!tWXpg";
      stringArray0[6] = null;
      SQLUtil.leftJoin("8FR)=", stringArray0, "0r!tWXpg", "&8T<:WPN0@V/0W[j", stringArray0);
      SQLUtil.renderValue(sQLUtil0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("8FR)=", false, "8FR)=", "fp`-CIY@&Wh%7c:U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<S%qLK`L>#q?VcpJ";
      stringArray0[1] = "<S%qLK`L>#q?VcpJ";
      stringArray0[2] = "<S%qLK`L>#q?VcpJ";
      stringArray0[3] = "<S%qLK`L>#q?VcpJ";
      stringArray0[4] = "<S%qLK`L>#q?VcpJ";
      stringArray0[5] = "<S%qLK`L>#q?VcpJ";
      SQLUtil.innerJoin("<S%qLK`L>#q?VcpJ", stringArray0, "vVoQt;%uAl", (String) null, stringArray0);
      SQLUtil.isDML(",");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      dBPrimaryKeyConstraint0.setName("<S%qLK`L>#q?VcpJ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.isIdentical(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      stringBuilder0.reverse();
      assertEquals(" JpcV?q#>L`KLq%S< TNIARTSNOC", stringBuilder0.toString());
      
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT <S%qLK`L>#q?VcpJ PRIMARY KEY (<S%qLK`L>#q?VcpJ, <S%qLK`L>#q?VcpJ, <S%qLK`L>#q?VcpJ, <S%qLK`L>#q?VcpJ, <S%qLK`L>#q?VcpJ, <S%qLK`L>#q?VcpJ)", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8FR)=", (DBSchema) null);
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("8FR)=", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(".m^J");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".m^J";
      stringArray0[1] = ".m^J";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".m^J");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append("[5B2f5&~J{T");
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      int int0 = 32664;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(32664, (long) 32664);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32664
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4036404106149494
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(".m^J");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".m^J";
      stringArray0[1] = ".m^J";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = ".m^J";
      stringArray1[2] = "";
      stringArray1[3] = " as ";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".m^J");
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "^\u0002!]lUF~B", true, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.normalize(" as ", true);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("AwJJ:%~so9D=/w?WvO", stringBuilder0);
      assertEquals("CONSTRAINT ^\u0002!]lUF~B  or AwJJ:%~so9D=/w?WvO", stringBuilder0.toString());
      assertEquals("CONSTRAINT ^\u0002!]lUF~B  or AwJJ:%~so9D=/w?WvO", stringBuilder1.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      defaultDBTable1.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^\u0002!]lUF~B";
      stringArray0[1] = "^\u0002!]lUF~B";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, " as ", true, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.normalize("java.lang.Object@23c7940", true);
      SQLUtil.addOptionalCondition("call", stringBuilder0);
      assertEquals("CONSTRAINT \" as \"  or call", stringBuilder0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SYS_PK_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PK_", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYS_PK_";
      stringArray0[1] = "SYS_PK_";
      stringArray0[2] = "ax/^f 7+28y";
      stringArray0[3] = "SYS_PK_";
      stringArray0[5] = "SYS_PK_";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PK_", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append((CharSequence) stringArray0[6]);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SYS_PK_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PK_", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYS_PK_";
      stringArray0[1] = "SYS_PK_";
      stringArray0[2] = "ax/^f 7+28y";
      stringArray0[3] = "SYS_PK_";
      stringArray0[4] = "SYS_PK_";
      stringArray0[5] = "SYS_PK_";
      stringArray0[6] = "SYS_PK_";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PK_", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("");
      SQLUtil.innerJoin("SYS_PK_", stringArray0, "SYS_PK_", "GROUP", stringArray0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("SYS_PK_");
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      assertEquals("SYS_PK_ or null", stringBuilder1.toString());
      
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("SYS_PK_.SYS_PK_", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SYS_PK_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PK_", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYS_PK_";
      stringArray0[1] = "SYS_PK_";
      stringArray0[2] = "ax/^f 7+28y";
      stringArray0[3] = "SYS_PK_";
      stringArray0[4] = "SYS_PK_";
      stringArray0[5] = "SYS_PK_";
      stringArray0[6] = "SYS_PK_";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PK_", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("");
      String string0 = SQLUtil.innerJoin("SYS_PK_", stringArray0, "SYS_PK_", "GROUP", stringArray0);
      assertEquals("SYS_PK_ as GROUP on SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.ax/^f 7+28y = GROUP.ax/^f 7+28y and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_", string0);
      
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotNull(string1);
      assertEquals("unique constraint SYS_PK_", string1);
      
      System.setCurrentTimeMillis(5066L);
      DBDataType dBDataType0 = DBDataType.getInstance((-2393), "IZq?wty(");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.catalog.types.MethodAliasInfo", defaultDBTable0, dBDataType0, integer0, integer1);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.apache.derby.catalog.types.MethodAliasInfo IZQ?WTY((0,0) NULL", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8479942625588094
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("/@R*now32N~s131pm:", true);
      assertEquals("/ @ R * now32N ~ s131pm :", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/@R*now32N~s131pm:";
      stringArray0[1] = "/ @ R * now32N ~ s131pm :";
      stringArray0[2] = "/ @ R * now32N ~ s131pm :";
      stringArray0[3] = "/ @ R * now32N ~ s131pm :";
      stringArray0[5] = "sVu\"p";
      stringArray0[6] = "";
      stringArray0[7] = "/ @ R * now32N ~ s131pm :";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/ @ R * now32N ~ s131pm :", true, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (/@R*now32N~s131pm:, / @ R * now32N ~ s131pm :, / @ R * now32N ~ s131pm :, / @ R * now32N ~ s131pm :, , sVu\"p, , / @ R * now32N ~ s131pm :) REFERENCES null()", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SYS_PK_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PK_", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYS_PK_";
      stringArray0[1] = "SYS_PK_";
      stringArray0[2] = "ax/^f 7+28y";
      stringArray0[3] = "SYS_PK_";
      stringArray0[4] = "SYS_PK_";
      stringArray0[5] = "SYS_PK_";
      stringArray0[0] = "SYS_PK_";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PK_", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("");
      String string0 = SQLUtil.innerJoin("SYS_PK_", stringArray0, stringArray0[6], "GROUP", stringArray0);
      assertEquals("null as GROUP on SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.ax/^f 7+28y = GROUP.ax/^f 7+28y and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.SYS_PK_ = GROUP.SYS_PK_ and SYS_PK_.null = GROUP.null", string0);
      
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint SYS_PK_", string1);
      assertNotNull(string1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("SYS_PK_");
      String string2 = SQLUtil.join("", "truncatetoken 64", stringArray0, "SYS_PK_", "SYS_PK_", stringArray0);
      assertEquals("SYS_PK_ as SYS_PK_ on truncatetoken 64.SYS_PK_ = SYS_PK_.SYS_PK_ and truncatetoken 64.SYS_PK_ = SYS_PK_.SYS_PK_ and truncatetoken 64.ax/^f 7+28y = SYS_PK_.ax/^f 7+28y and truncatetoken 64.SYS_PK_ = SYS_PK_.SYS_PK_ and truncatetoken 64.SYS_PK_ = SYS_PK_.SYS_PK_ and truncatetoken 64.SYS_PK_ = SYS_PK_.SYS_PK_ and truncatetoken 64.null = SYS_PK_.null", string2);
      
      String string3 = SQLUtil.renderValue("SYS_PK_");
      assertEquals("'SYS_PK_'", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = (-3104L);
      System.setCurrentTimeMillis((-3104L));
      String string0 = "create table";
      SQLUtil.mutatesDataOrStructure("create table");
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      String string1 = "][<s^Qz{";
      dBCatalog0.getSchema("][<s^Qz{");
      String string2 = "~@Qx";
      // Undeclared exception!
      try { 
        dBCatalog0.removeTable("~@Qx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '~@Qx'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I*IPYi]w|[", (DBSchema) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.setOwner((CompositeDBObject<?>) null);
      DBSchema dBSchema0 = new DBSchema("truncate.m^j", dBCatalog0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("I*IPYi]w|[", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("8FR)=", defaultDBTable2, 951, "N0<TN(n=ZYxP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: N0<TN(n=ZYxP
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.isProcedureCall("select into>b <&}b1aa}\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select into>b <&}b1aa}\"");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into>b <&}b1aa}\"", (DBTable) null, 2007, "update");
      defaultDBColumn0.isUnique();
      defaultDBColumn0.setDefaultValue("drop materialized view.m^j");
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((-393940697));
      defaultDBColumn0.setVersionColumn(true);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("select into>b <&}b1aa}\" UPDATE DEFAULT drop materialized view.m^j NULL", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append("Unknown constraint type: ");
      stringBuilder1.deleteCharAt(3);
      SQLUtil.renderValue(stringBuilder1);
      SQLUtil.isDML("[\"(};vK8QWo$p)3T");
      System.setCurrentTimeMillis((-393940697));
      SQLUtil.isProcedureCall("select>b <&}b1aa}\"");
      SQLUtil.addOptionalCondition("create unique index.m^j", stringBuilder2);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6453287829233725
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(".m^J");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".m^J";
      stringArray0[1] = ".m^J";
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      SQLUtil.typeAndName(compositeDBObject0);
      SQLUtil.normalize("create materialized view", true);
      SQLUtil.removeComments("X'NF>C>^jJQLYO1B#4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "renameo<<td_zgo)_", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create materialized view?n\"hls3wn>o4~^a", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("X'NF>C>^jJQLYO1B#4", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBForeignKeyConstraint0.columnReferencedBy("[?h5Ru3&~[l", false);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("43X56.U", stringBuilder0);
      stringBuilder0.append(0.8F);
      SQLUtil.addOptionalCondition("create materialized view?n\"hls3wn>o4~^a", stringBuilder1);
      assertEquals("43X56.U0.8 or create materialized view?n\"hls3wn>o4~^a", stringBuilder0.toString());
      
      System.setCurrentTimeMillis((-1396L));
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT renameo<<td_zgo)_ ", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0734420609947175
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize(">b <&}B1AA}\"", true);
      assertEquals("> b < & } B1AA } \"\"", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("#~'WXC$ F");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7075391741350712
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I*IPYi]w|[", (DBSchema) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.setOwner((CompositeDBObject<?>) null);
      DBSchema dBSchema0 = new DBSchema("truncate.m^j", dBCatalog0);
      SQLUtil.normalize("8FR)=", true);
      SQLUtil.removeComments("Zqw j=o87%!{YT3}t");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8FR)=";
      stringArray0[1] = "],9[[U";
      stringArray0[2] = "Zqw j=o87%!{YT3}t";
      stringArray0[3] = "8FR) =";
      stringArray0[4] = "8FR)=";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "],9[[U", true, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("8FR) =", stringBuilder0);
      SQLUtil.addOptionalCondition("setSystemCode", stringBuilder1);
      assertEquals("CONSTRAINT ],9[[U  and 8FR) = or setSystemCode", stringBuilder1.toString());
      assertEquals("CONSTRAINT ],9[[U  and 8FR) = or setSystemCode", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.isDML("4dfan)1W?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "- 0";
      stringArray0[1] = "4dfan)1W?";
      stringArray0[3] = "4dfan)1W?";
      stringArray0[4] = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o<<td_");
      stringArray0[5] = "o<<td_";
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "4dfan)1W?", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("4dfan)1W?");
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("4dfan)1W?CONSTRAINT 4dfan)1W? ", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(276);
      SQLUtil.addOptionalCondition("Rhyrf", stringBuilder0);
      assertEquals("Rhyrf", stringBuilder0.toString());
      
      String string0 = SQLUtil.normalize("8op8lv/", false);
      assertEquals("8op8lv /", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.181631208919541
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lb)-9:4a#");
      DBSchema dBSchema0 = new DBSchema("{B~Y4y", dBCatalog0);
      SQLUtil.normalize("lb)-9:4a#", true);
      SQLUtil.removeComments("lb) - 9 : 4a #");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".m^j";
      stringArray0[1] = "lOt`O'\"1S";
      stringArray0[2] = "truncate.m^j";
      stringArray0[3] = "lb)-9:4a#";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "THDPp\":[a(ZM%bi'}-R", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "THDPp\":[a(ZM%bi'}-R", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint1, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(".m^j", stringBuilder0);
      SQLUtil.addOptionalCondition(">e-RZ\"", stringBuilder1);
      assertEquals("CONSTRAINT THDPp\":[a(ZM%bi'}-R  and .m^j or >e-RZ\"", stringBuilder0.toString());
      assertEquals("CONSTRAINT THDPp\":[a(ZM%bi'}-R  and .m^j or >e-RZ\"", stringBuilder1.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.2640520518256287
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("/@R*?cnow32N~s131pm:", true);
      assertEquals("/ @ R * ? cnow32N ~ s131pm :", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/@R*?cnow32N~s131pm:";
      stringArray0[1] = "/ @ R * ? cnow32N ~ s131pm :";
      stringArray0[2] = "/ @ R * ? cnow32N ~ s131pm :";
      stringArray0[3] = "/ @ R * ? cnow32N ~ s131pm :";
      stringArray0[4] = "<XpCCfp";
      stringArray0[5] = "sVuE\"p";
      stringArray0[4] = "";
      stringArray0[7] = "/ @ R * ? cnow32N ~ s131pm :";
      Character character0 = Character.valueOf('l');
      Character.isSurrogate('l');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'l'", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.normalize("/@R*?cnow32N~s131pm:", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/@R*?cnow32N~s131pm:";
      stringArray0[1] = "/ @ R * ? cnow32N ~ s131pm :";
      stringArray0[2] = "/ @ R * ? cnow32N ~ s131pm :";
      stringArray0[3] = "/ @ R * ? cnow32N ~ s131pm :";
      stringArray0[4] = "<XpCCfp";
      stringArray0[5] = "sVuE\"p";
      stringArray0[4] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/ @ R * ? cnow32N ~ s131pm :");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/@R*?cnow32N~s131pm:", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("/ @ R * ? cnow32N ~ s131pm :", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1", dBTable0, (-2103), "80000059-00d0-fd77-3ed8-000a0a0b1900");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder(1238);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append('~');
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("create unique index", stringBuilder2);
      // Undeclared exception!
      try { 
        stringBuilder3.insert((-1034208541), 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1034208541
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0433129203914828
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lb)-9:4a#");
      DBSchema dBSchema0 = new DBSchema("{B~Y4y", dBCatalog0);
      SQLUtil.normalize("lb)-9:4a#", true);
      SQLUtil.removeComments("lb) - 9 : 4a #");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".m^j";
      stringArray0[1] = "lOt`O'\"1S";
      stringArray0[2] = "truncate.m^j";
      stringArray0[3] = "lb)-9:4a#";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "THDPp\":[a(ZM%bi'}-R", true, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("//", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder(1106);
      StringBuilder stringBuilder1 = stringBuilder0.append(252645135);
      StringBuilder stringBuilder2 = stringBuilder1.append("{_scoa%");
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      // Undeclared exception!
      try { 
        stringBuilder3.insert(126, 'p');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4761040462897277
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.isDML("(0U@r7YMhIE");
      SQLUtil.normalize("(0U@r7YMhIE", true);
      SQLUtil.isQuery("(0U@r7YMhIE");
      SQLUtil.isDML("(0U@r7YMhIE");
      String string0 = "CLOB";
      SQLUtil.removeComments("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(0U @ r7YMhIE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(0U@r7YMhIE", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.isDML("update=k}u~gsdf2y5g=<p");
      System.setCurrentTimeMillis((-3952L));
      SQLUtil.removeComments("insert,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert,");
      String string0 = "8Xe]LGr3(g*aC<+,";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("8Xe]LGr3(g*aC<+,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I*IPYi]w|[", (DBSchema) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.setOwner((CompositeDBObject<?>) null);
      DBSchema dBSchema0 = new DBSchema("truncate.m^j", dBCatalog0);
      DBTrigger dBTrigger0 = new DBTrigger("truncate.m^j", (DBSchema) null);
      dBSchema0.addTrigger(dBTrigger0);
      Boolean boolean0 = SQLUtil.mutatesStructure("execute");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9328065726143313
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.removeComments("mLQrvN!K");
      SQLUtil.parseColumnTypeAndSize("mLQrvN!K");
      SQLUtil.mutatesDataOrStructure("selectr");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectr", (DBTable) null, 2477, "mLQrvN!K");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "mLQrvN!K";
      stringArray0[1] = "mLQrvN!K";
      stringArray0[2] = "mLQrvN!K";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "mLQrvN!K", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SQLUtil.normalize(",v1]=Z'Pll", true);
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBSchema dBSchema1 = new DBSchema("i", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", v1 ] = Z  'Pll'", dBSchema1);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("drop index> b < & } b1aa } \"\"", defaultDBTable0, 951, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.304619384820671
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectr");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string0 = SQLUtil.normalize("sele", false);
      assertEquals("sele", string0);
      
      SQLUtil.removeComments("sele");
      DBDataType dBDataType0 = DBDataType.getInstance(318, "sele");
      Integer integer0 = RawTransaction.COMMIT;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XwI9*MG/>}v #WP1E");
      DBDataType.getInstance((-1454526225), " or ");
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index", (DBTable) null, dBDataType0, integer0, (Integer) null);
      defaultDBColumn0.isIdentical((DBObject) null);
      Integer integer3 = RawTransaction.ABORT;
      Integer.min(45, (-2663));
      Integer integer4 = RawTransaction.ABORT;
      defaultDBColumn0.setSize(integer4);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop index SELE(1) NULL", string1);
      
      SQLUtil.removeComments("y`S&hWks[u:L");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("drop index SELE(1) NULL");
      assertEquals(2, objectArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "ax/^f 7+28y";
      stringArray0[2] = null;
      stringArray0[3] = "ax/^f 7+28y";
      stringArray0[4] = null;
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("COMMIT", " (", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("drop table[tnx_ lcht@~hx'zez", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("XSLAM.D", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema1 = new DBSchema("Unknown constraint type: ", dBCatalog0);
      DBDataType dBDataType0 = DBDataType.getInstance(1041, " join ");
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = defaultDBTable0.toString();
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("COMMIT", defaultDBTable0, dBDataType0, integer1, integer1);
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile(string0, "selectr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('e');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5859526183035508
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog null", string0);
      
      String string1 = SQLUtil.normalize("),'Dry*`", true);
      assertEquals("), 'Dry*`'", string1);
  }
}
