/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:07:46 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("\t<performance-preferences-latency>");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTrafficClass("\t<performance-preferences-connection-time>");
      advancedSettings0.setClientIdentifier("\t<performance-preferences-latency>");
      advancedSettings0.setMaxThreadsForNioWrite((-3703));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize((-3703));
      advancedSettings0.setPerformancePreferencesBandwidth((-3703));
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-3703), advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setMaxThreadsForNioWrite(1481);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesConnectionTime(1481);
      advancedSettings0.setSocketLinger(1481);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(1481, advancedSettings0.getSocketLinger());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("}xJb|'j%");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getBacklog();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize((-20));
      assertEquals((-20), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize((-1362));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setSocketLinger(0);
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.040727294264432
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-672));
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-receive-buffer-size>-672</client-socket-receive-buffer-size>\n</advanced-settings>\n");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setBacklog(10);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(10, advancedSettings0.getBacklog());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "\t<backlog>";
      advancedSettings0.setQSObjectPoolMaker("\t<backlog>");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<backlog>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<backlog>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2047775241322567
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML((String) null);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setByteBufferSize(961);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency(1604);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(1990);
      advancedSettings0.getBacklog();
      advancedSettings0.setQSObjectPoolMaker(":G2wdJbfr");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getCharset();
      advancedSettings0.setUseDirectByteBuffer(false);
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(1604, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6701198898068172
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setMaxThreadsForNioWrite(65536);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth((-1469));
      advancedSettings0.setPerformancePreferencesLatency(851);
      advancedSettings0.setClientIdentifier("cxwQ-");
      advancedSettings0.setBacklog((-1087));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize((-1469));
      advancedSettings0.getCharset();
      assertEquals((-1469), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.210644412275862
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(1029);
      advancedSettings0.setClientSocketReceiveBufferSize(1029);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.toXML("");
      advancedSettings0.setMaxThreadsForNioWrite(1029);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketSendBufferSize(1029);
      advancedSettings0.getBacklog();
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getBacklog();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setMaxThreadsForNioWrite(1);
      assertEquals(1, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = null;
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("r");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // r
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setMaxThreadsForNioWrite(534);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(534, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4260151319598084
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setBacklog((-2063));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize((-2063));
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-1087));
      advancedSettings1.getCharset();
      advancedSettings1.setCharset("ISO-8859-1");
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setBacklog((-2063));
      advancedSettings1.getClientIdentifier();
      advancedSettings0.setClientIdentifier("FPu");
      advancedSettings1.setUseDirectByteBuffer(true);
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings1.getBacklog();
      advancedSettings1.getBacklog();
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<performance-preferences-latency>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<performance-preferences-latency>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.107972275978608
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(670);
      advancedSettings0.setClientSocketTrafficClass("@&NA!?<K");
      advancedSettings0.setClientSocketSendBufferSize((-1039));
      advancedSettings0.setPerformancePreferencesBandwidth((-1039));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize((-1052));
      advancedSettings0.setClientSocketSendBufferSize((-2208));
      String string0 = advancedSettings0.toXML("o2/PaVg");
      advancedSettings0.toXML("o2/PaVg");
      advancedSettings0.toXML(string0);
      advancedSettings0.toXML("</client-socket-traffic-class>\n");
      advancedSettings0.toXML("o2/PaVg");
      advancedSettings0.toXML("@&NA!?<K");
      advancedSettings0.toXML("");
      String string1 = advancedSettings0.toXML(string0);
      advancedSettings0.toXML(string1);
      advancedSettings0.toXML("");
      advancedSettings0.toXML("\t<debug-non-blocking-mode>");
      advancedSettings0.toXML(".6.8xZF_P");
      assertEquals((-2208), advancedSettings0.getClientSocketSendBufferSize());
  }
}
