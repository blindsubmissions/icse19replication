/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:25:47 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("");
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.hasMoreChars();
      xPathLexer0.endPosition();
      xPathLexer0.not();
      xPathLexer0.consume();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.isIdentifierStartChar('8');
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.isIdentifierStartChar(':');
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.isIdentifierChar('\\');
      xPathLexer0.colon();
      xPathLexer0.endPosition();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.isIdentifierStartChar('!');
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      assertEquals("com.werken.saxpath.XPathLexer", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.comma();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      char char0 = xPathLexer0.LA(800);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6539700301406862
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k=GB)`){\"");
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7877881193860072
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`>aZ");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("a", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.or();
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1368599053565
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "com.werken.saxpath.XPathLexer";
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.identifier();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.XPathLexer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4243910165188904
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4f(y@*vGC)}),");
      xPathLexer0.consume();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.not();
      token1.toString();
      token1.toString();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.div();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.isIdentifierChar('>');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.consume(0);
      xPathLexer0.colon();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.35462479700817
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G");
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.div();
      xPathLexer0.div();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.dots();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(11, int0);
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.notEquals();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      int int1 = xPathLexer0.endPosition();
      assertEquals(1, int1);
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('&');
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('n');
      assertFalse(boolean1 == boolean0);
      
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0779947968835402
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.endPosition();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.endPosition();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("m", token9.getTokenText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6645316133102304
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^J-Ru");
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("^J-Ru");
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierChar('J');
      xPathLexer0.currentPosition();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('J');
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0381291864107816
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"sOEOh %}2");
      Token token0 = xPathLexer0.dots();
      String string0 = token0.toString();
      assertEquals("[ (13) (\")", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      String string1 = token1.toString();
      assertEquals("[ (-1) (sOEOh %}2)", string1);
      
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.literal();
      assertEquals("E", token3.getTokenText());
      assertEquals(27, token3.getTokenType());
      
      char char0 = xPathLexer0.LA(1);
      assertEquals('h', char0);
      
      Token token4 = xPathLexer0.comma();
      assertEquals("h", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5628207845115167
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z+!ylRlTLM}");
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.getXPath();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.isIdentifierChar('!');
      xPathLexer0.consume((-3449));
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.379253894116653
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(")", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      token2.toString();
      token2.toString();
      xPathLexer0.div();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (5) (()", string0);
      
      xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath(")z qx (gFJ");
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer0.or();
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals(")", token11.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("z ", token12.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9149743527510836
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("equ*XT\"On8D?dDvV[");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("_m+r+v}+T\"xBF{7fd");
      xPathLexer1.doubleColon();
      xPathLexer1.not();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.number();
      xPathLexer1.nextToken();
      xPathLexer2.comma();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("");
      int int0 = xPathLexer2.endPosition();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      int int1 = xPathLexer1.endPosition();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8739956000684875
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k=GB)`){\"");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("k", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (18) (=)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.leftParen();
      assertEquals("G", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4392364264649633
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z+!ylRlTLM}");
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.getXPath();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.isIdentifierChar('!');
      xPathLexer0.consume((-3449));
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4851326928804955
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      xPathLexer0.whitespace();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath(")z qx (gFJ");
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.hasMoreChars();
      xPathLexer0.doubleColon();
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.381936742276883
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^J-Ru");
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.plus();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4382054520277274
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k=GB)`){\"");
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (6) (k)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.pipe();
      assertEquals("=", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("G", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (k)");
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('L');
      Token token5 = xPathLexer0.nextToken();
      assertEquals("B", token5.getTokenText());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.consume(24);
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      boolean boolean1 = xPathLexer2.hasMoreChars();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1309437668748588
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.endPosition();
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }
}
