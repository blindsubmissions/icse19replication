/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:17:28 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.ValueNull;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "]($Dn";
      stringArray0[1] = "]($Dn";
      stringArray0[2] = "]($Dn";
      stringArray0[3] = "]($Dn";
      stringArray0[4] = "]($Dn";
      stringArray0[5] = "]($Dn";
      stringArray0[6] = "]($Dn";
      stringArray0[7] = "]($Dn";
      SQLUtil.leftJoin("]($Dn", stringArray0, "]($Dn", "]($Dn", stringArray0);
      SQLUtil.innerJoin("K#\u0005KdO", stringArray0, "]($Dn", "~%", stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("]($Dn", "org.apache.derby.impl.sql.execute.InsertResultSet$MyRowAllocator", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("]($Dn", defaultDatabase0);
      dBCatalog0.getSchema("]($Dn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("C?raiy;t", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'C?raiy;t' has no foreign key with the columns (]($Dn, ]($Dn, ]($Dn, ]($Dn, ]($Dn, ]($Dn, ]($Dn, ]($Dn)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "getConnection";
      String string1 = ", singleScanRowCount == ";
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(", singleScanRowCount == ", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getConnection", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "YB1";
      stringArray0[1] = "YB1";
      stringArray0[2] = "YB1";
      stringArray0[3] = "YB1";
      stringArray0[4] = "YB1";
      stringArray0[5] = "YB1";
      stringArray0[6] = "YB1";
      stringArray0[7] = "YB1";
      stringArray0[8] = "YB1";
      SQLUtil.leftJoin("YB1", stringArray0, "org.databene.jdbacl.SQLUtil", "YB1", stringArray0);
      SQLUtil.renderColumnListWithTableName("(Q57VK!.", stringArray0);
      DBTable dBTable0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.removeComments("S|ye]cn,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S|ye]cn,", (DBSchema) null);
      int int0 = 1643;
      DBDataType dBDataType0 = DBDataType.getInstance(1643, "alter session");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("S|ye]cn,", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "eq8";
      SQLUtil.isDML("eq8");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eq8";
      stringArray0[1] = "eq8";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DROP TABLE");
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.mutatesStructure("rename");
      SQLUtil.isQuery("}/2g");
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("fM_o:8\"7W=", "YRpt|iC\f]xVx", "fM_o:8\"7W=");
      assertEquals("fM_o:8\"7W=", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "Constraint";
      stringArray0[1] = "T7kJ(#82XlR:m";
      stringArray0[3] = "Constraint";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "Constraint";
      stringArray0[6] = "Constraint";
      stringArray0[7] = null;
      SQLUtil.join("Constraint", (String) null, stringArray0, "", "T7kJ(#82XlR:m", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Constraint";
      stringArray0[1] = null;
      stringArray0[2] = "Constraint";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "Constraint";
      stringArray0[6] = "Constraint";
      stringArray0[7] = null;
      SQLUtil.join("Constraint", (String) null, stringArray0, "", "T7kJ(#82XlR:m", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9862665178647392
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Iu,<7|");
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "container Iu,<7|";
      stringArray0[1] = "container Iu,<7|";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("container Iu,<7|", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "container Iu,<7|");
      SQLUtil.addOptionalCondition("container Iu,<7|", stringBuilder0);
      assertEquals("container Iu,<7| or container Iu,<7|", stringBuilder0.toString());
      
      SQLUtil.join("container Iu,<7|", "RESERVED", stringArray0, "drop indexq4/", "Iu,<7|", stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"container Iu,<7|\" FOREIGN KEY (container Iu,<7|, container Iu,<7|) REFERENCES null(container Iu,<7|, container Iu,<7|)", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.normalize("UNIQUE ", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "T7kJ(#82XlR:m";
      stringArray0[1] = "T7kJ(#82XlR:m";
      SQLUtil.join("", "UNIQUE ", stringArray0, "T7kJ(#82XlR:m", "T7kJ(#82XlR:m", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("delete", false, "43X56.U", "org.apache.derby.iapi.sql.dictionary.IndexLister");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("?%F#doJ]Cr\".pS6'fr");
      assertFalse(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("//");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("--", (String) null, "--");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8498981518685604
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("org.apache.derby.impl.sql.compile.QueryTreeNodeVector");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o2[S|r&EWp>PGDB");
      String[] stringArray0 = new String[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "CLOB";
      stringArray0[1] = "o2[S|r&EWp>PGDB";
      stringArray0[2] = "CLOB";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.QueryTreeNodeVector";
      stringArray0[4] = "CLOB";
      stringArray0[5] = "org.apache.derby.impl.sql.compile.QueryTreeNodeVector";
      stringArray0[6] = ":Dp";
      stringArray0[7] = "CLOB";
      stringArray0[8] = "selectdelete";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.QueryTreeNodeVector", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("CLOB");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CLOB", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.ownerDotComponent(dBTable0);
      Boolean boolean1 = SQLUtil.mutatesStructure("org.apache.derby.impl.sql.compile.QueryTreeNodeVector");
      assertTrue(boolean1.equals((Object)boolean0));
      
      SQLUtil.removeComments("CLOB");
      String string0 = SQLUtil.normalize("Y?OY4(rG8z", false);
      assertEquals("Y ? OY4 (rG8z", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("//", defaultDBTable0, (-582), "//");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("//", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8806952353861557
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Q4/");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "truncate");
      SQLUtil.isQuery("delete");
      SQLUtil.normalize("k@$+kUFa+z,", false);
      TableContainer tableContainer0 = new TableContainer("i0[ 6ue%");
      tableContainer0.getTable("constraint");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "k@$+kUFa+z,";
      stringArray0[1] = "constraint";
      stringArray0[2] = "k @ $ + kUFa + z,";
      stringArray0[3] = "k@$+kUFa+z,";
      stringArray0[4] = "truncate";
      stringArray0[5] = "delete";
      stringArray0[6] = "k @ $ + kUFa + z,";
      stringArray0[7] = "i0[ 6ue%";
      stringArray0[8] = "k@$+kUFa+z,";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("delete", false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("renamemvcc");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "//";
      SQLUtil.parseColumnTypeAndSize("//");
      String string1 = "setNString(int, String)";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("//", stringBuilder0);
      int int0 = 5658;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(5658, 'N');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.031759218569271
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isProcedureCall("NULLID");
      SQLUtil.renderValue((Object) null);
      String string0 = "execute";
      SQLUtil.mutatesDataOrStructure("execute");
      SQLUtil.isDML("REFERENCINGOLD");
      String string1 = "exec";
      SQLUtil.removeComments("exec");
      SQLUtil.mutatesDataOrStructure("execute");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("c>", compositeDBObject0);
      Object object0 = new Object();
      tableContainer0.equals(object0);
      tableContainer0.getTables();
      tableContainer0.getTable("), ");
      tableContainer0.getTables(false);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("execute", false, (DBTable) null, "exec");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.isQuery("org.apache.derby.impl.sql.compile.QueryTreeNodeVector");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o2[S|r&EWp>PGDB");
      String[] stringArray0 = new String[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "CLOB";
      stringArray0[1] = "o2[S|r&EWp>PGDB";
      stringArray0[2] = "CLOB";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.QueryTreeNodeVector";
      stringArray0[4] = "CLOB";
      stringArray0[5] = "org.apache.derby.impl.sql.compile.QueryTreeNodeVector";
      stringArray0[6] = ":Dp";
      stringArray0[7] = "CLOB";
      stringArray0[8] = "selectdelete";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.QueryTreeNodeVector", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("CLOB");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CLOB", false, dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CLOB", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8200759753606213
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[19];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Constraint");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Constraint");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "~D$'m,L%LEcj", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "~D$'m,L%LEcj", false, stringArray0);
      dBPrimaryKeyConstraint1.setDoc((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("selectdelete", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint1);
      SQLUtil.mutatesStructure("~D$'m,L%LEcj");
      SQLUtil.removeComments("selectdelete");
      SQLUtil.normalize("Constraint", false);
      ValueNull valueNull0 = ValueNull.DELETED;
      valueNull0.getReader();
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.isQuery("?%F#doJ]Cr\".pS6'fr");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("JC=n\u0005J%(Gciv[gc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: JC=n\u0005J%(Gciv[gc
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      Character character0 = Character.valueOf('D');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'D'", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5660857389596289
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      String string0 = "delete";
      SQLUtil.isQuery("'");
      SQLUtil.normalize("`C.lLsLD4", false);
      TableContainer tableContainer0 = new TableContainer("renamecreate unique index~d$'m,l%lecj");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = "Z\"ZSLY(V ";
      String string2 = ")o%g8zrx+]PPA~Z.6i";
      // Undeclared exception!
      try { 
        dBCatalog0.getTable(")o%g8zrx+]PPA~Z.6i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ')o%g8zrx+]PPA~Z.6i'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1909336380), "Q4/");
      Integer integer0 = new Integer(36);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("43X36.U", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDoc("org.h2.value.ValueStringFixed");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      System.setCurrentTimeMillis((-1909336380));
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("43X36.U Q4/(36,36) NULL", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4407006436706502
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.isQuery("THROTTLE");
      SQLUtil.renderValue("THROTTLE");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.parseColumnTypeAndSize("ZQ,1.nEQLt&0,");
      SQLUtil.normalize("THROTTLE", false);
      Random.setNextRandom((-421));
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("THROTTLE", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter indexcreate unique index~d$'m,l%lecj", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-421));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4634135588264299
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JU#Ur$IGzf|v V(");
      SQLUtil.isQuery("truncate");
      String string0 = "k@$+kUFa+z,";
      SQLUtil.normalize("-Pr", false);
      TableContainer tableContainer0 = new TableContainer(" - Pr");
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("JU#Ur$IGzf|v V(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'JU#Ur$IGzf|v V('
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Iu,<7|");
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "container Iu,<7|";
      stringArray0[1] = "container Iu,<7|";
      defaultDBTable0.getForeignKeyConstraints();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("container Iu,<7|", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("container Iu,<7|", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "container Iu,<7|");
      SQLUtil.addOptionalCondition("container Iu,<7|", stringBuilder0);
      assertEquals("container Iu,<7| or container Iu,<7|", stringBuilder0.toString());
      
      dBForeignKeyConstraint0.setName((String) null);
      SQLUtil.join("container Iu,<7|", "RESERVED", stringArray0, "drop indexq4/", "Iu,<7|", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (container Iu,<7|, container Iu,<7|) REFERENCES null(container Iu,<7|, container Iu,<7|)", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String string0 = "|ryPm]6]G'";
      StringBuilder stringBuilder0 = new StringBuilder(961);
      SQLUtil.addRequiredCondition("|ryPm]6]G'", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|ryPm]6]G'");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2538575896013526
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Iu,<7|");
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "container Iu,<7|";
      stringArray0[1] = "container Iu,<7|";
      defaultDBTable0.getForeignKeyConstraints();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("container Iu,<7|", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("container Iu,<7|", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "container Iu,<7|");
      SQLUtil.addOptionalCondition("container Iu,<7|", stringBuilder0);
      SQLUtil.join("container Iu,<7|", "RESERVED", stringArray0, "drop indexq4/", "Iu,<7|", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("CONSTRAINT \"container Iu,<7|\" FOREIGN KEY (container Iu,<7|, container Iu,<7|) REFERENCES null(container Iu,<7|, container Iu,<7|)", stringBuilder0);
      assertEquals("container Iu,<7| or container Iu,<7| and CONSTRAINT \"container Iu,<7|\" FOREIGN KEY (container Iu,<7|, container Iu,<7|) REFERENCES null(container Iu,<7|, container Iu,<7|)", stringBuilder0.toString());
      assertEquals("container Iu,<7| or container Iu,<7| and CONSTRAINT \"container Iu,<7|\" FOREIGN KEY (container Iu,<7|, container Iu,<7|) REFERENCES null(container Iu,<7|, container Iu,<7|)", stringBuilder1.toString());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=q}");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "selectdelete";
      stringArray0[1] = "o2[S|r&EWp>PGDB";
      stringArray0[2] = "selectdelete";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "selectdelete", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("e}9r#", true, dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("into", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Q4/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@a5#%yMw");
      SQLUtil.isDML("delete");
      SQLUtil.removeComments("@a5#%yMw");
      TableContainer tableContainer0 = new TableContainer("i0[ 6ue%");
      DBCatalog dBCatalog0 = new DBCatalog();
      tableContainer0.getSequences(false);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("Z\"ZSLY(V ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'Z\"ZSLY(V '
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1258941479668825
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "Constraint";
      stringArray0[1] = "T7kJ(#82XlR:m";
      stringArray0[3] = "Constraint";
      stringArray0[3] = null;
      stringArray0[4] = "Constraint";
      stringArray0[5] = "Constraint";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[6] = "Constraint";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewq4/");
      SQLUtil.mutatesDataOrStructure("create unique index~d$'m,l%lecj");
      System.setCurrentTimeMillis(0L);
      SQLUtil.normalize("T7kJ(#82XlR:m", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile(":Xeye:_xR;+=>+n");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("inner");
      defaultDBTable0.addReferrer(defaultDBTable1);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(41L, mockFile0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StringWriter stringWriter0 = new StringWriter(2550);
      StringWriter stringWriter1 = stringWriter0.append('H');
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N;={eK<47$rgoa^~~r");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N;={eK<47$rgoa^~~r";
      stringArray0[1] = "N;={eK<47$rgoa^~~r";
      stringArray0[2] = "";
      stringArray0[3] = "executet7kj(#";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "N;={eK<47$rgoa^~~r", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "UNIQUE (N;={eK<47$rgoa^~~r, N;={eK<47$rgoa^~~r, , executet7kj(#)", 2550, 2550);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.71408754118701
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Iu,<7|");
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "container Iu,<7|";
      stringArray0[1] = "container Iu,<7|";
      defaultDBTable0.getForeignKeyConstraints();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("container Iu,<7|", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("container Iu,<7|", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "container Iu,<7|");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("container Iu,<7|", stringBuilder0);
      SQLUtil.join("container Iu,<7|", "RESERVED", stringArray0, "drop indexq4/", "Iu,<7|", stringArray0);
      System.setCurrentTimeMillis(15L);
      DBDataType dBDataType0 = DBDataType.getInstance(183, "container Iu,<7|");
      Integer integer0 = new Integer(183);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RESERVED", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("container Iu,<7| or container Iu,<7|CONSTRAINT \"container Iu,<7|\" ", stringBuilder1.toString());
      assertEquals("container Iu,<7| or container Iu,<7|CONSTRAINT \"container Iu,<7|\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Q4/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "container i");
      SQLUtil.isQuery("delete");
      SQLUtil.normalize("container i", false);
      TableContainer tableContainer0 = new TableContainer("i0[ 6ue%");
      DBCatalog dBCatalog0 = new DBCatalog();
      tableContainer0.getSequences(false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("container i");
      tableContainer0.addTable(defaultDBTable0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "insert");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "container i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Av\"");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.typeAndName(dBCatalog0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("#MhRR>]D+QV{k3");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Iu,<7|");
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "container Iu,<7|";
      stringArray0[1] = "container Iu,<7|";
      defaultDBTable0.getForeignKeyConstraints();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("container Iu,<7|", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("container Iu,<7|", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "container Iu,<7|");
      SQLUtil.addOptionalCondition("container Iu,<7|", stringBuilder0);
      SQLUtil.join("container Iu,<7|", "RESERVED", stringArray0, "drop indexq4/", "Iu,<7|", stringArray0);
      System.setCurrentTimeMillis(15L);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getComponents();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" PASSWORD ''");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      mockPrintWriter0.println();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5623155215734763
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Q4/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "container i");
      SQLUtil.isQuery("delete");
      String string0 = "k@$+T(\"kUFa+z,";
      SQLUtil.normalize("k@$+T(\"kUFa+z,", false);
      TableContainer tableContainer0 = new TableContainer("i0[ 6ue%");
      DBCatalog dBCatalog0 = new DBCatalog();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        tableContainer0.removeTable((DBTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainerSupport", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.699607042606886
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      SQLUtil.mutatesDataOrStructure("l8T");
      System.setCurrentTimeMillis((-96L));
      SQLUtil.normalize("rename$r|;d+x5@e/e('", true);
      System.setCurrentTimeMillis(268435455L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics", false);
      Random.setNextRandom((-1727221039));
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics");
      SQLUtil.typeAndName(dBSchema0);
      String string0 = " NULL";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", false, "schema org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics", " NULL");
      SQLUtil.constraintName(dBCheckConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2636256721237273
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=q}");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "selectdelete";
      SQLUtil.isQuery("selectdelete");
      SQLUtil.normalize("selectwas)", true);
      TableContainer tableContainer0 = new TableContainer("selectwas)");
      DBCatalog dBCatalog0 = new DBCatalog();
      tableContainer0.getSequences(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "selectselect");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c:P{'QB)4h");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("selecttruncate");
      SQLUtil.typeAndName(dBCatalog0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("ASC");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.808045719583997
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-1909336380), "Q4/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Av\"");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Q4/");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Sdxj+ 0D9d%`Iwh", compositeDBObject0);
      tableContainer0.getTable("Sdxj+ 0D9d%`Iwh");
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("?hBVFwc~", false, " NULL", " NULL");
      SQLUtil.constraintName(dBCheckConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((-1235), "$qjI0^Ti}YUyH");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$qjI0^Ti}YUyH", (DBTable) null, dBDataType0, integer0, integer1);
      Integer integer2 = RawTransaction.ABORT;
      defaultDBColumn0.setFractionDigits(integer2);
      arrayList0.add((DBColumn) defaultDBColumn0);
      DBDataType dBDataType1 = DBDataType.getInstance(46, "D7k2_/-YDb8");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("$qjI0^Ti}YUyH", (DBTable) null, dBDataType1, (Integer) null, (Integer) null);
      arrayList0.add((DBColumn) defaultDBColumn1);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("$qjI0^Ti}YUyH, $qjI0^Ti}YUyH", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      defaultDBColumn1.isUnique();
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("$qjI0^Ti}YUyH, $qjI0^Ti}YUyH, $qjI0^Ti}YUyH, $qjI0^Ti}YUyH", string1);
      
      String string2 = SQLUtil.renderColumn(dBColumnArray0[2]);
      assertEquals("$qjI0^Ti}YUyH D7K2_/-YDB8 NULL", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.711547286286353
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("4G :7\u0007V:A]-R]iK}");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("4G :7\u0007V:A]-R]iK}", dBSchema0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" = ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4G :7\u0007V:A]-R]iK}";
      stringArray0[1] = "4G :7\u0007V:A]-R]iK}";
      stringArray0[2] = "'],#KAD]v6l`d+VS>=";
      stringArray0[3] = "4G :7\u0007V:A]-R]iK}";
      stringArray0[4] = "deleteexec";
      stringArray0[5] = "deleteexec";
      stringArray0[6] = "4G :7\u0007V:A]-R]iK}";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "deleteexec", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT deleteexec UNIQUE (4G :7\u0007V:A]-R]iK}, 4G :7\u0007V:A]-R]iK}, '],#KAD]v6l`d+VS>=, 4G :7\u0007V:A]-R]iK}, deleteexec, deleteexec, 4G :7\u0007V:A]-R]iK})", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessiondrop materialized view");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 0.75;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("0.75", string0);
      
      Random.setNextRandom((-4));
      SQLUtil.removeComments("0.75");
      String string1 = SQLUtil.normalize("*D=8R5e/@*+/6,{H", true);
      assertEquals("* D = 8R5e / @ * + / 6, { H", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      DBDataType dBDataType0 = DBDataType.getInstance((-2250), "rename");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("DE:]Dr-Xv{7B");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable1, dBDataType0, integer0);
      defaultDBTable1.getColumn("execute");
      defaultDBColumn0.isIdentical(defaultDBTable0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      PrintWriter printWriter0 = mockPrintWriter0.append('`');
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, printWriter0);
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumns();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (DBDataType) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "#r:g#6v|lz:H";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      System.setCurrentTimeMillis(1348L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u");
      SQLUtil.isQuery("ISGRANTABLE");
      SQLUtil.normalize("ISGRANTABLE", false);
      SQLUtil.removeComments("ISGRANTABLE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Table '");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ISGRANTABLE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncate", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElement("u");
      fileUtil0.createParentDirs("insertand");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("Table '", defaultDBTable0.getName());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.154783153373369
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select", false, defaultDBTable0, "select");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK select", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 1.0E9;
      SQLUtil.renderNumber(streamTokenizer0);
      Random.setNextRandom((-4));
  }
}
