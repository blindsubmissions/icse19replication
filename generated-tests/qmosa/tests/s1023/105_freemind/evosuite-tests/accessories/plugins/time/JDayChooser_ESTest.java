/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:49:31 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.NodeMouseMotionListener;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelEvent;
import java.io.DataOutputStream;
import java.io.PrintStream;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.time.format.DateTimeParseException;
import java.time.temporal.Temporal;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.help.DefaultHelpModel;
import javax.help.ForwardAction;
import javax.help.HelpSet;
import javax.help.JHelpSearchNavigator;
import javax.help.TOCView;
import javax.help.event.HelpHistoryModelEvent;
import javax.help.plaf.basic.BasicSearchNavigatorUI;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.ext.awt.color.ICCColorSpaceExt;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemOtherwise;
import org.apache.xml.serializer.ToHTMLStream;
import org.apache.xml.serializer.ToTextSAXHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.rowio.RowOutputBinary;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.oldYear = 20;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jYearChooser0.setDayChooser(jDayChooser0);
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      jYearChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      jDayChooser1.setWeekOfYearVisible(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("k&", 'F', 'F');
      jDayChooser0.setDay(3009);
      jDayChooser0.getLocale();
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) "k&");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'k&' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 2444;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 0, (-662), 4, 2444);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      ToHTMLStream toHTMLStream0 = new ToHTMLStream();
      ToTextSAXHandler toTextSAXHandler0 = new ToTextSAXHandler(toHTMLStream0, "org.apache.xml.serializer");
      toTextSAXHandler0.getOutputFormat();
      MockFile mockFile0 = new MockFile("org/apache/xml/serializer", "");
      FreeMind freeMind0 = null;
      try {
        freeMind0 = new FreeMind((Properties) null, (Properties) null, mockFile0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDaysInMonth();
      JComponent.getDefaultLocale();
      Object object0 = new Object();
      ForwardAction forwardAction0 = new ForwardAction(object0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) forwardAction0);
      jDayChooser0.addMouseListener(mouseListener0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getDayPanel();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMonth(571);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser_DecoratorButton0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser_DecoratorButton0, 645, 645, 645, 1514, 645, 461, true, 1514, 461, 461);
      forwardAction0.mouseExited(mouseWheelEvent0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.getMaxDayCharacters();
      Color color0 = Color.WHITE;
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = (-2192);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-2192), "day");
      actionEvent0.setSource(jDayChooser0);
      jDayChooser0.getInheritsPopupMenu();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Stack<Temporal> stack0 = new Stack<Temporal>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 449);
      JTable jTable0 = new JTable(defaultTableModel0, (TableColumnModel) null);
      jTable0.setAutoCreateColumnsFromModel(true);
      defaultTableModel0.addTableModelListener(jTable0);
      JTable jTable1 = new JTable(defaultTableModel0);
      Rectangle rectangle0 = jTable1.getCellRect(49, 449, true);
      jDayChooser0.paintImmediately(rectangle0);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.isDecorationBordersVisible();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      jDayChooser0.setCalendar(gregorianCalendar0);
      jDayChooser0.setYear(3739);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(8222);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusListeners();
      jDayChooser0.addListeners(0);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.drawWeeks();
      jDayChooser0.setForeground(color0);
      assertEquals((-6029312), color0.getRGB());
      
      jDayChooser0.getContainerListeners();
      JTableHeader jTableHeader0 = new JTableHeader((TableColumnModel) null);
      jDayChooser0.firePropertyChange("accessories.plugins.time.JDayChooser$DecoratorButton", (byte)0, (byte)73);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(0);
      jDayChooser0.setBounds(rectangle0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.focusLost((FocusEvent) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.init();
      MockPrintStream mockPrintStream0 = new MockPrintStream("day");
      jDayChooser0.list((PrintStream) mockPrintStream0, 210);
      jDayChooser0.setVerifyInputWhenFocusTarget(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setYear((-2809));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getAlignmentY();
      jDayChooser0.getKeyListeners();
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.drawWeeks();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(false);
      int int0 = SwingConstants.BOTTOM;
      JComponent.getDefaultLocale();
      Object object0 = jDayChooser0.getTreeLock();
      ForwardAction forwardAction0 = new ForwardAction(object0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) forwardAction0);
      jDayChooser0.addMouseListener(mouseListener0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getDayPanel();
      jDayChooser0.setAlwaysFireDayProperty(true);
      String[] stringArray0 = new String[17];
      stringArray0[2] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.864753088197978
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setMaxDayCharacters(98312);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 98312, 0L, (-352), 98312, '!', menuElementArray0, menuSelectionManager0);
      KeyEvent.getExtendedKeyCodeForChar((-352));
      jDayChooser0.keyTyped(menuKeyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      java.util.Date date0 = jDayChooser1.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      jDayChooser0.setWeekOfYearVisible(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      JMonthChooser jMonthChooser1 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("x", true, false);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.getRootPane();
      jDayChooser0.getTransferHandler();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBorder((Border) null);
      jDayChooser0.getRootPane();
      jDayChooser0.getTransferHandler();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-3365));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser_DecoratorButton0.setIgnoreRepaint(true);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7252378164437348
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.oldYear = 20;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 20, 20, 160, 1316, 'H');
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      java.util.Date date0 = jDayChooser2.minSelectableDate;
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser2.setSelectableDateRange(date0, (java.util.Date) null);
      // Undeclared exception!
      try { 
        jDayChooser1.addListeners(160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.oldYear = 20;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTransferHandler();
      Color color0 = Color.white;
      jDayChooser0.setDecorationBackgroundColor(color0);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color1.getBlue());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7939476602093944
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getRootPane();
      Object object0 = new Object();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_ISOLATED;
      ForwardAction forwardAction0 = new ForwardAction(integer0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) forwardAction0, (MouseListener) forwardAction0);
      jDayChooser0.addMouseListener(mouseListener0);
      jDayChooser0.getMaxSelectableDate();
      Color color0 = Color.white;
      Color color1 = Color.getColor("day", 409);
      jDayChooser0.setDecorationBackgroundColor(color1);
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7857837033324393
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(false);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      JComponent.getDefaultLocale();
      Object object0 = new Object();
      ForwardAction forwardAction0 = new ForwardAction(object0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) forwardAction0);
      JButton jButton0 = new JButton((Icon) null);
      HelpHistoryModelEvent helpHistoryModelEvent0 = new HelpHistoryModelEvent(jButton0, false, false);
      forwardAction0.historyChanged(helpHistoryModelEvent0);
      mouseListener0.mouseEntered((MouseEvent) null);
      jDayChooser0.addMouseListener(mouseListener0);
      java.util.Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.getDayPanel();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMonth(571);
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7939476602093944
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("x", true, false);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.getRootPane();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser0.addListeners(47);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.512984856509157
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setDay(2278);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      int int0 = (-2615);
      jDayChooser0.setDay((-2615));
      int int1 = (-1123);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName(true, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 12
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getRootPane();
      Color color0 = Color.yellow;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMonth(228);
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getRootPane();
      Color color0 = Color.yellow;
      jDayChooser0.setDecorationBackgroundColor(color0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("qX&N6,ZRx");
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, (-1L), (-749), 0, '^', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.paramString();
      jDayChooser0.keyReleased(menuKeyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay((-749));
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setMonth(302);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7943845635639555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("x", true, false);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.getRootPane();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser0.getTransferHandler();
      Color color0 = Color.black;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("x", true, false);
      jDayChooser0.getTransferHandler();
      jDayChooser0.setMaxDayCharacters(42);
      jDayChooser0.setMonth(9670);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBaseline(10, 10);
      jDayChooser0.setDay(1337);
      jDayChooser0.setMonth(209);
      jDayChooser0.setDayBordersVisible(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMonth(209);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7939476602093944
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = 31557600000L;
      System.setCurrentTimeMillis(31557600000L);
      JDayChooser jDayChooser0 = new JDayChooser();
      JToolBar jToolBar0 = new JToolBar();
      int int0 = 1947;
      int int1 = 1;
      KeyEvent keyEvent0 = new KeyEvent(jToolBar0, 1947, (-2927L), 827, 827, 'B', 1);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.requestFocus(false);
      jDayChooser0.drawDays();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockDate mockDate0 = new MockDate(1947, 827, 827);
      mockDate0.setTime((-2927L));
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      ElemOtherwise elemOtherwise0 = new ElemOtherwise();
      // Undeclared exception!
      try { 
        sVGColorProfileElementBridge0.createICCColorSpaceExt(bridgeContext0, elemOtherwise0, "document");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.bridge.SVGColorProfileElementBridge", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8421151244608924
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("St'$", false, false);
      Locale locale0 = Locale.KOREA;
      jDayChooser0.getRootPane();
      PDFInfo pDFInfo0 = new PDFInfo();
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getTransferHandler();
      Color color0 = Color.black;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }
}
