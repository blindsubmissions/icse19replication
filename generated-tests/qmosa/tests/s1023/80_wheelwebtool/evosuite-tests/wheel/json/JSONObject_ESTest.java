/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:24:45 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "1+mS|T";
      Long long0 = new Long((-476L));
      Long.compareUnsigned((-476L), (-1L));
      jSONObject0.accumulate("1+mS|T", long0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 1634, 1634);
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "}f|NxL_wD9Qd)\"[\\";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}f|NxL_wD9Qd)\"[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }f|NxL_wD9Qd)\"[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)528);
      Short.toUnsignedLong((short)1);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(5, jSONObject0.length());
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.put("6R.W!S", 0.0);
      try { 
        jSONObject0.getDouble("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>(2979);
      String string0 = "zlBX'";
      Boolean boolean0 = new Boolean("zlBX'");
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put(boolean0, jSONObject0);
      hashMap0.clone();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.names();
      jSONObject0.optBoolean("'P<Ha4EiD");
      String string1 = "wheel.json.JSONTokener";
      try { 
        Integer.valueOf("wheel.json.JSONTokener", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optLong("", 0L);
      jSONObject0.putOpt("", "");
      jSONObject0.putOpt("WHGM,u?l1ggz}s", "");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      jSONObject1.optLong("C", (-1L));
      jSONObject0.optInt("");
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", true);
      JSONObject.quote("Az#2bBR");
      jSONObject0.optString((String) null);
      jSONObject0.optString("Az#2bBR", ",:]}/\"[{;=#");
      try { 
        jSONObject1.getBoolean("\"Az#2bBR\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"Az#2bBR\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("");
      String string0 = ",-?s0`w@Mp+_*";
      jSONObject0.opt(",-?s0`w@Mp+_*");
      String string1 = ";XN<";
      String string2 = "";
      jSONObject0.put("", 1583);
      long long0 = 236L;
      StringWriter stringWriter0 = new StringWriter(59);
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 0, 60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("", jSONObject1);
      int int0 = 4;
      jSONObject2.toString(4);
      try { 
        jSONObject0.getBoolean("-HP!_J!I&m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-HP!_J!I&m\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      Long long0 = new Long(1758);
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = null;
      jSONObject0.optInt((String) null, 1758);
      try { 
        jSONObject0.getInt("'5D5cN-QZw%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'5D5cN-QZw%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      Boolean boolean0 = new Boolean("\"qHK");
      hashMap0.put(boolean0, jSONObject0);
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0);
      jSONObject0.put("\"qHK", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(2431L);
      Long.sum(2431L, 0L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertEquals(5, stringArray0.length);
      
      String string0 = JSONObject.valueToString(long0, 101, (-935));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean((-935), false);
      String string1 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string1);
      
      String string2 = JSONObject.numberToString(long0);
      assertTrue(string2.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      String string0 = JSONObject.valueToString(hashMap0, 44, 44);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("", jSONObject1);
      try { 
        jSONObject2.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9683304358882807
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 29);
      String string1 = "C";
      long long0 = (-1L);
      jSONObject1.optLong("C", (-1L));
      Integer integer0 = Integer.getInteger("getnotify", (-2313));
      jSONObject0.accumulate("Az#2bBR", integer0);
      JSONArray jSONArray0 = new JSONArray();
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1, 0, 1634);
      try { 
        jSONObject0.getString("getnotify");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnotify\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2110688711446103
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Integer.getInteger("getnotify", (-2313));
      JSONArray jSONArray0 = new JSONArray();
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1, 0, 1634);
      Object object2 = new Object();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object3 = new Object();
      jSONObject0.putOpt("null", object3);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.optJSONObject("null");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.559581156259877
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      jSONArray1.toJSONObject(jSONArray0);
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      Boolean boolean0 = new Boolean("a_ujN");
      Boolean boolean1 = Boolean.valueOf("null");
      Boolean boolean2 = Boolean.valueOf((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "a_ujN";
      stringArray0[1] = null;
      stringArray0[2] = "\"qHK";
      stringArray0[3] = "a_ujN";
      JSONObject jSONObject0 = new JSONObject(boolean2, stringArray0);
      hashMap0.put(boolean1, jSONObject0);
      JSONObject.getNames((Object) jSONArray0);
      Float float0 = new Float(63.3);
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray2 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray3 = jSONObject1.toJSONArray(jSONArray1);
      assertNull(jSONArray3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null";
      JSONObject.getNames(object0);
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = "null";
      Short short0 = new Short((short)1);
      jSONObject0.put("null", true);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>(2979);
      Boolean boolean0 = new Boolean("zlBX'");
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      hashMap0.clone();
      jSONObject0.names();
      jSONObject0.optBoolean("'P<Ha4EiD");
      Integer integer0 = new Integer((-25));
      Integer.getInteger("'P<Ha4EiD");
      JSONObject jSONObject2 = jSONObject0.accumulate("zlBX'", integer0);
      jSONObject0.optJSONObject("zlBX'");
      jSONObject0.names();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      jSONObject1.put("zlBX'", (Collection) linkedList0);
      JSONObject.doubleToString(2979);
      Byte byte0 = new Byte((byte) (-101));
      JSONObject.getNames((Object) linkedList0);
      JSONObject.valueToString(linkedList0, 3108, (-1030));
      StringWriter stringWriter0 = new StringWriter(1731);
      stringWriter0.append((CharSequence) "'P<Ha4EiD");
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      jSONObject2.put("'P<Ha4EiD", (Collection) linkedList1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.sum(0L, 0L);
      Byte byte0 = new Byte((byte)32);
      JSONObject.getNames((Object) byte0);
      JSONObject.valueToString(jSONObject0, (byte)32, 101);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(101, false);
      String string0 = JSONObject.doubleToString((-1173.32634));
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "zO^dX;\\198)mTDJGD~i";
      jSONObject0.put("zO^dX;\u000198)mTDJGD~i", true);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      String string1 = null;
      try { 
        jSONObject1.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8656131068623576
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      stringArray0[6] = "null";
      stringArray0[7] = "P&{Ao>,TLeGVd_$";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer0 = new Integer(2971);
      jSONObject1.append("P&{Ao>,TLeGVd_$", integer0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0877174055172425
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)0);
      Short.toUnsignedLong((short)248);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      Long long0 = new Long(0);
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(long0, biFunction0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2367736302798455
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = 29;
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 29);
      String string0 = "C";
      jSONObject1.optLong("C", (-1L));
      int int1 = (-2313);
      Integer integer0 = Integer.getInteger("getnotify", (-2313));
      jSONObject0.accumulate("Az#2bBR", integer0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getString("(Xg^UgJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(Xg^UgJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9340679619197847
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0, (-1753), 0);
      Object object1 = new Object();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object2 = new Object();
      jSONObject0.putOpt("Expected a ',' or ']'", object0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toString();
      jSONObject0.optJSONObject("java.lang.Float@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)0);
      Short.toUnsignedLong((short)248);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      Long long0 = new Long(0);
      Object object0 = new Object();
      Object object1 = new Object();
      jSONObject0.putOpt("tS|7UJk&M*-", object1);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject1.optDouble("tS|7UJk&M*-");
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject1.toString();
      jSONObject0.optJSONObject("Bdw';P>bz$5&");
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5891031478040796
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",\n";
      long long0 = (-476L);
      Long long1 = new Long((-476L));
      Long.compareUnsigned((-476L), (-1L));
      JSONObject jSONObject1 = jSONObject0.accumulate("1+mS|T", long1);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1634;
      JSONObject.valueToString(",\n", (-1), 1634);
      String string1 = "o>W(~'P3g{C";
      try { 
        jSONObject1.getString("o>W(~'P3g{C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o>W(~'P3g{C\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6554354608160722
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)0);
      Short.toUnsignedLong((short)248);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      Long long0 = new Long(0);
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(long0, biFunction0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-1870));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4036404106149494
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isreplaceFirst";
      String string1 = "\\u";
      Integer.getInteger(string1);
      Set<JSONObject> set0 = hashMap0.keySet();
      Integer.remainderUnsigned(8448, 1006);
      JSONObject jSONObject1 = jSONObject0.accumulate("isreplaceFirst", (Object) null);
      jSONObject1.putOpt("isreplaceFirst", set0);
      Float float0 = new Float(2433.1157F);
      Float.isFinite(0.0F);
      hashMap0.put(jSONObject0, float0);
      Float float1 = new Float(0.0F);
      hashMap0.put(jSONObject0, float1);
      JSONObject jSONObject2 = jSONObject1.put(string1, false);
      String string2 = null;
      try { 
        jSONObject2.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
