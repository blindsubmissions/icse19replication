/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:48:21 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.getListDataListeners();
      visualListModel0.moveUpIndex(1167);
      int int0 = (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        visualListModel0.subList(1167, (-1), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1167) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 2707;
      intArray0[2] = 2504;
      intArray0[3] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      boolean boolean0 = true;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        visualListModel0.getListeners((Class) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Ljava.lang.Object; cannot be cast to [Ljava.util.EventListener;
         //
         verifyException("javax.swing.event.EventListenerList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 438;
      intArray0[6] = 578;
      intArray0[7] = 2415;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(0, 438, false);
      visualListModel0.elementsChanged();
      visualListModel0.getValidElements();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      int int0 = (-353);
      int int1 = (-964);
      int int2 = 256;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-1);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 2326, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<Integer> stack0 = new Stack<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(stack0);
      visualListModel0.removeListDataListener(jComboBox0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<DefaultTableModel> vector1 = new Vector<DefaultTableModel>();
      JList<DefaultTableModel> jList0 = new JList<DefaultTableModel>(vector1);
      List<DefaultTableModel> list0 = jList0.getSelectedValuesList();
      vector0.removeAll(list0);
      visualListModel0.setData(vector0);
      visualListModel0.removeElements(0, (-1098), true);
      visualListModel0.elementsChanged();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.getSize();
      visualListModel0.addAllElements(2177, (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-3991), (-3991));
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.removeElements((-3991), (-3991), true);
      visualListModel0.moveDownIndex((-3991));
      int[] intArray0 = new int[4];
      intArray0[0] = (-3991);
      intArray0[1] = (-3991);
      intArray0[2] = (-3991);
      intArray0[3] = (-3991);
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(4, intArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      String string0 = "d";
      visualListModel0.subList(1, 1);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(225, "d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getSize();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.getElementAt(0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.clearData();
      int int0 = (-2070);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-2070), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2070)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-1230), 1668);
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, intArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 2160;
      int int1 = 1;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(2938, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2938
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      float float0 = (-1069.1748F);
      float float1 = 0.0F;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      int int0 = (-1163);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1163));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1163
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      int int0 = 7;
      boolean boolean0 = false;
      visualListModel0.removeElements(1, 7, false);
      visualListModel0.getValidElements();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 1;
      intArray0[2] = 7;
      intArray0[3] = 1;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.removeElements(1, 7, false);
      int int1 = 1;
      LookupOp lookupOp0 = null;
      try {
        lookupOp0 = new LookupOp((LookupTable) null, (RenderingHints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndex(0);
      visualListModel0.removeElements(intArray0, true);
      assertArrayEquals(new int[] {}, intArray0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(2572, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2572
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      JList<DefaultTableModel> jList0 = new JList<DefaultTableModel>(vector0);
      jList0.getSelectedValuesList();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      vector1.removeAll(stack0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.removeElements(180, 2266, false);
      visualListModel0.elementsChanged();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.updateElementAt(473, (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedList0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4583113296830845
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements((-441), (-441), false);
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.moveDownIndex(1);
      visualListModel0.moveUpIndex((-1913));
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      visualListModel0.setData(vector0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-3159));
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-3159);
      intArray0[2] = 6;
      intArray0[3] = (-441);
      intArray0[4] = (-441);
      intArray0[5] = (-1913);
      intArray0[6] = (-1913);
      intArray0[7] = 1;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5577938601077332
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements((-441), (-441), false);
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.moveDownIndex(1);
      visualListModel0.moveUpIndex((-1913));
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      visualListModel0.setData(vector0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-3159));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1913);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getElementAt(0);
      visualListModel0.elementsChanged();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      visualListModel0.setData(vector1);
      visualListModel0.elementsChanged();
      visualListModel0.moveDownIndex((-441));
      visualListModel0.elementChanged((VisualPageListItem) null);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.updateElementAt(473, (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedList0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.moveDownIndex(1);
      visualListModel0.moveUpIndex(1);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-3159));
      visualListModel0.moveUpIndex(1);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) vector0);
      assertEquals(10, vector0.capacity());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4762206495981647
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.moveDownIndex(1);
      visualListModel0.moveUpIndex(1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      UnaryOperator.identity();
      visualListModel0.setData(vector0);
      visualListModel1.addElementAt((VisualPageListItem) null, (-3159));
      int[] intArray0 = new int[0];
      visualListModel1.reverseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.getElementAt(0);
      visualListModel0.elementsChanged();
      Vector<VisualPageListItem> vector1 = visualListModel2.data;
      visualListModel1.setData(vector0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.elementsChanged();
      visualListModel0.moveDownIndex((-1913));
      visualListModel0.elementChanged((VisualPageListItem) null);
      int[] intArray1 = new int[9];
      intArray1[0] = (-3159);
      intArray1[1] = 1;
      intArray1[2] = (-1913);
      intArray1[3] = (-3159);
      intArray1[4] = (-1913);
      intArray1[5] = (-1913);
      intArray1[6] = (-1913);
      intArray1[7] = 1;
      intArray1[8] = (-3159);
      visualListModel2.rotateAnticlockwiseElements(intArray1);
      assertFalse(visualListModel2.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      Object object0 = new Object();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, intArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.moveDownIndex((-441));
      visualListModel0.moveUpIndex(180);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      visualListModel0.moveUpIndex(1);
      visualListModel0.addAllElements((-441), (Collection<VisualPageListItem>) vector0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 180;
      intArray0[3] = (-2275);
      intArray0[4] = (-441);
      intArray0[5] = 180;
      intArray0[6] = (-2275);
      intArray0[7] = 1;
      visualListModel0.undeleteElements(intArray0);
      assertEquals(8, intArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getSize();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) treeSet0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.moveUpIndex(616);
      VisualListModel visualListModel1 = new VisualListModel();
      UnaryOperator.identity();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveDownIndex(616);
      int[] intArray0 = new int[0];
      visualListModel1.rotateClockwiseElements(intArray0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.updateElementAt(473, (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedList0);
      visualListModel0.getElements();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>(linkedList0);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) vector0);
      visualListModel0.addElementAt((VisualPageListItem) null, 1);
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1913);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1913
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnaryOperator.identity();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      int int0 = (-1567);
      VisualListModel visualListModel0 = new VisualListModel();
      int int1 = 0;
      visualListModel0.subList(0, 0, true);
      int int2 = 1668;
      // Undeclared exception!
      try { 
        visualListModel0.subList(1668, (-1567));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1668) > toIndex(-1567)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1913);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1913
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.031759218569271
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.moveUpIndex((-1913));
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      UnaryOperator.identity();
      visualListModel0.setData(vector0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-3159));
      int[] intArray0 = new int[1];
      vector0.add((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.elementsChanged();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1913);
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.updateElementAt((-1913), (VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1913
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.145841752594754
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.updateElementAt(256, (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedList0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      visualListModel1.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[1];
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[7] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[17];
      intArray1[0] = (-1913);
      visualListModel1.removeElements(intArray0, false);
      intArray1[1] = (-1913);
      intArray1[2] = (-1913);
      intArray1[3] = (-1913);
      intArray1[5] = (-1913);
      visualListModel1.rotateClockwiseElements(intArray1);
      visualListModel1.moveDownIndex((-1));
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1913);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1913
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[2];
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[3] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[17];
      intArray1[0] = (-1913);
      visualListModel1.removeElements(intArray0, false);
      intArray1[1] = (-1913);
      intArray1[2] = (-1913);
      intArray1[3] = (-1913);
      visualListModel0.moveUpIndex(5);
      assertEquals(8, visualListModel0.getSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.listIterator();
      stack0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      intArray0[1] = (-379);
      intArray0[2] = 335;
      intArray0[3] = (-1954);
      intArray0[4] = 3084;
      intArray0[5] = 50000;
      intArray0[6] = 2482;
      intArray0[7] = 1;
      intArray0[8] = 1004;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.removeElements(2482, (-2016), false);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnaryOperator.identity();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements(linkedList0);
      visualListModel0.getElements();
      assertEquals(1, visualListModel0.getSize());
      
      visualListModel0.removeElements(0, 0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.updateElementAt(257, (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      RenderingHints.Key[] renderingHints_KeyArray0 = new RenderingHints.Key[23];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      renderingHints_KeyArray0[0] = (RenderingHints.Key) sunHints_Key0;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      renderingHints_KeyArray0[1] = (RenderingHints.Key) sunHints_Key1;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      renderingHints_KeyArray0[2] = (RenderingHints.Key) sunHints_Key2;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      renderingHints_KeyArray0[3] = (RenderingHints.Key) sunHints_Key3;
      visualListModel0.prependAllElements(linkedList0);
      visualListModel0.getElements();
      visualListModel0.removeElements(0, 0, false);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.351673301904631
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.elementsChanged();
      visualListModel0.moveUpIndex((-1913));
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = new Stack<VisualPageListItem>();
      UnaryOperator.identity();
      visualListModel0.setData(vector0);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      int[] intArray0 = new int[1];
      vector0.add((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.elementsChanged();
      visualListModel0.getValidElements();
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.setData(vector0);
      visualListModel0.getElements();
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[1];
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnaryOperator.identity();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      visualListModel0.moveDownIndexes(intArray0);
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 8
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.updateElementAt(257, (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[28];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 0;
      intArray0[4] = 9;
      intArray0[5] = 9;
      intArray0[6] = 257;
      visualListModel0.moveDownIndexes(intArray0);
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 257
         //
         verifyException("java.util.Vector", e);
      }
  }
}
