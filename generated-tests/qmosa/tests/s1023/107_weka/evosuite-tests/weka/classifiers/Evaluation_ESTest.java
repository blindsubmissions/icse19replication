/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:49:25 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.JSONLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Evaluation.handleCostOption("", (-1));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      LogitBoost logitBoost0 = new LogitBoost();
      int int0 = 110;
      logitBoost0.getRevision();
      logitBoost0.getOptions();
      logitBoost0.setNumFolds(110);
      cVParameterSelection0.setClassifier(logitBoost0);
      Evaluation.makeOptionString(cVParameterSelection0, true);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      SMOreg sMOreg0 = new SMOreg();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".arff";
      stringArray0[6] = "";
      stringArray0[7] = "i-I[CI-sap?ePxD#pO@";
      stringArray0[8] = "m|kopies";
      try { 
        Evaluation.evaluateModel((Classifier) sMOreg0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SMOreg:
         // 
         // -C <double>
         // \tThe complexity constant C.
         // \t(default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither.
         // \t(default 0=normalize)
         // -I <classname and parameters>
         // \tOptimizer class used for solving quadratic optimization problem
         // \t(default weka.classifiers.functions.supportVector.RegSMOImproved)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to optimizer ('-I') weka.classifiers.functions.supportVector.RegSMOImproved:
         // 
         // -T <double>
         // \tThe tolerance parameter for checking the stopping criterion.
         // \t(default 0.001)
         // -V
         // \tUse variant 1 of the algorithm when true, otherwise use variant 2.
         // \t(default true)
         // -P <double>
         // \tThe epsilon for round-off error.
         // \t(default 1.0e-12)
         // -L <double>
         // \tThe epsilon parameter in epsilon-insensitive loss function.
         // \t(default 1.0e-3)
         // -W <double>
         // \tThe random number seed.
         // \t(default 1)
         // 
         // Options specific to kernel ('-K') weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      int int0 = 110;
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getRevision();
      logitBoost0.getOptions();
      logitBoost0.setNumFolds(110);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(logitBoost0);
      boolean boolean0 = false;
      Evaluation.makeOptionString(logitBoost0, false);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Evaluation.handleCostOption((String) null, (-2));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier((Classifier) null);
      Evaluation.makeOptionString((Classifier) null, false);
      int int0 = (-2920);
      try { 
        Evaluation.handleCostOption("@data", (-2920));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9080368345090655
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '&';
      charArray0[2] = 'C';
      charArray0[3] = '_';
      charArray0[4] = 'z';
      charArray0[5] = 'c';
      evaluation0.num2ShortID(8, charArray0, 780);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setNumRelationalString(780);
      evaluation0.pctIncorrect();
      evaluation0.toSummaryString(")\"mk}$", false);
      evaluation0.pctUnclassified();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9913464134109882
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      evaluation0.KBMeanInformation();
      evaluation0.num2ShortID((-2), charArray0, 8);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setNumRelationalString((-1));
      evaluation0.pctIncorrect();
      evaluation0.toSummaryString((String) null, true);
      evaluation0.pctUnclassified();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(votedPerceptron0);
      Evaluation.makeOptionString(votedPerceptron0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getHeader();
      Evaluation evaluation2 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation1.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(votedPerceptron0);
      Evaluation.makeOptionString(votedPerceptron0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getHeader();
      Evaluation evaluation2 = new Evaluation(instances0);
      String string0 = evaluation2.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation1.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalString(470);
      evaluation0.pctIncorrect();
      evaluation0.toSummaryString("tm\"iK7~", false);
      evaluation0.pctUnclassified();
      evaluation0.rootMeanSquaredError();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(evaluation0.m_Header, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(votedPerceptron0);
      Evaluation.makeOptionString(votedPerceptron0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getHeader();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.m_ClassIsNominal = false;
      evaluation0.toCumulativeMarginDistributionString();
      evaluation1.meanAbsoluteError();
      evaluation2.setDiscardPredictions(false);
      evaluation1.pctCorrect();
      Random.setNextRandom(816);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      String string0 = evaluation0.num2ShortID((-2), charArray0, 8);
      assertEquals("       F", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setNumRelationalString(82);
      double double0 = evaluation0.pctIncorrect();
      String string1 = evaluation0.toSummaryString((String) null, true);
      assertEquals("null\nTotal Number of Instances                0     \n", string1);
      
      double double1 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_SumPriorEntropy;
      evaluation0.falsePositiveRate(32);
      double double3 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double3, double0, 0.01);
      
      Instances.test(testInstances0.DEFAULT_WORDS);
      evaluation0.rootMeanSquaredError();
      double double4 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double4, 0.01);
      
      evaluation0.confusionMatrix();
      evaluation0.confusionMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate(".arff");
      evaluation0.m_Header = instances0;
      double[][] doubleArray0 = new double[0][8];
      evaluation0.m_ConfusionMatrix = doubleArray0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      evaluation0.KBMeanInformation();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      LWL lWL0 = new LWL();
      cVParameterSelection0.setClassifier(lWL0);
      Evaluation.makeOptionString(lWL0, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.getHeader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation1.toCumulativeMarginDistributionString();
      evaluation1.meanAbsoluteError();
      evaluation2.SFMeanEntropyGain();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "setNumFolds");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      String string0 = evaluation0.num2ShortID((-2), charArray0, 8);
      assertEquals("       F", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setNumRelationalString(82);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string1 = evaluation0.toSummaryString((String) null, true);
      assertEquals("null\nTotal Number of Instances                0     \n", string1);
      
      double double1 = evaluation0.pctUnclassified();
      double double2 = evaluation0.m_SumPriorEntropy;
      double double3 = evaluation0.falsePositiveRate(32);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double5 = evaluation0.rootMeanSquaredError();
      double double6 = evaluation0.SFEntropyGain();
      assertNotEquals(double6, double5, 0.01);
      
      evaluation0.confusionMatrix();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      double double7 = evaluation0.weightedRecall();
      assertEquals(double7, double4, 0.01);
      
      System.setCurrentTimeMillis((-59L));
      double double8 = evaluation0.weightedAreaUnderROC();
      assertEquals(double8, double1, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(votedPerceptron0);
      Evaluation.makeOptionString(votedPerceptron0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.getData();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.toCumulativeMarginDistributionString();
      evaluation2.meanAbsoluteError();
      evaluation2.setDiscardPredictions(true);
      assertTrue(evaluation2.getDiscardPredictions());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.754105330999288
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(votedPerceptron0);
      Evaluation.makeOptionString(votedPerceptron0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation1.meanAbsoluteError();
      DenseInstance denseInstance0 = new DenseInstance(10);
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction((Classifier) cVParameterSelection0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      ZeroR zeroR0 = new ZeroR();
      cVParameterSelection0.setClassifier(zeroR0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.KBRelativeInformation();
      Evaluation.makeOptionString(multiClassClassifier0, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.getData();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.toCumulativeMarginDistributionString();
      evaluation0.meanAbsoluteError();
      Instance instance0 = null;
      try { 
        Evaluation.handleCostOption(".bsi", 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(votedPerceptron0);
      Evaluation.makeOptionString(votedPerceptron0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.getData();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      evaluation0.confusionMatrix();
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation2.toMatrixString(".bsi");
      assertEquals(".bsi\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation1.toSummaryString();
      assertEquals(Double.NaN, evaluation1.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      String string0 = evaluation0.num2ShortID((-2), charArray0, 8);
      assertEquals("       F", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setNumRelationalString(82);
      double double0 = evaluation0.pctIncorrect();
      String string1 = evaluation0.toSummaryString((String) null, true);
      assertEquals("null\nTotal Number of Instances                0     \n", string1);
      
      double double1 = evaluation0.pctUnclassified();
      double double2 = evaluation0.m_SumPriorEntropy;
      double double3 = evaluation0.falsePositiveRate(32);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation0.rootMeanSquaredError();
      double double6 = evaluation0.SFEntropyGain();
      assertNotEquals(double6, double0, 0.01);
      
      evaluation0.confusionMatrix();
      evaluation0.confusionMatrix();
      double double7 = evaluation0.weightedRecall();
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      
      System.setCurrentTimeMillis((-59L));
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(votedPerceptron0);
      Evaluation.makeOptionString(votedPerceptron0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getHeader();
      Evaluation evaluation2 = new Evaluation(evaluation0.m_Header);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation2.numInstances();
      evaluation1.rootMeanPriorSquaredError();
      double double1 = evaluation1.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(votedPerceptron0);
      Evaluation.makeOptionString(votedPerceptron0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(evaluation0.m_Header);
      Instances instances1 = evaluation0.getHeader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation4.toCumulativeMarginDistributionString();
      Evaluation evaluation5 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      evaluation5.meanAbsoluteError();
      double double0 = evaluation3.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation3.weightedMatthewsCorrelation();
      String string0 = evaluation4.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9860569681548639
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      ZeroR zeroR0 = new ZeroR();
      cVParameterSelection0.setClassifier(zeroR0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBRelativeInformation();
      Evaluation.makeOptionString(cVParameterSelection0, false);
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      try { 
        Evaluation.evaluateModel(".arff", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .arff.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7930940134110525
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("distributionForInstance");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalString((-2));
      evaluation0.pctIncorrect();
      evaluation0.m_NoPriors = true;
      evaluation0.toSummaryString("distributionForInstance", true);
      evaluation0.pctUnclassified();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      Evaluation.makeOptionString((Classifier) null, false);
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootMeanSquaredError();
      evaluation0.SFEntropyGain();
      evaluation0.confusionMatrix();
      evaluation0.confusionMatrix();
      evaluation0.weightedRecall();
      System.setCurrentTimeMillis((-1L));
      instances0.delete();
      Evaluation evaluation2 = new Evaluation(evaluation0.m_Header);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) evaluation0.m_Header;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "tm\"iK7~";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "tm\"iK7~";
      objectArray0[5] = (Object) "tm\"iK7~";
      objectArray0[6] = (Object) instances0;
      objectArray0[7] = (Object) null;
      try { 
        evaluation2.evaluateModel((Classifier) null, evaluation0.m_Header, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Instances cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9281891612967894
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      ZeroR zeroR0 = new ZeroR();
      cVParameterSelection0.setClassifier(zeroR0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.KBRelativeInformation();
      System.setCurrentTimeMillis((-1L));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".arff");
      evaluation1.trueNegativeRate(474);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      ZeroR zeroR0 = new ZeroR();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBRelativeInformation();
      Evaluation.makeOptionString(multiClassClassifier0, true);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      evaluation0.toClassDetailsString();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.rootMeanPriorSquaredError();
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2047854169135204
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("tm\"iK7~");
      Evaluation evaluation0 = new Evaluation(instances0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      ZeroR zeroR0 = new ZeroR();
      cVParameterSelection0.setClassifier(zeroR0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBRelativeInformation();
      Evaluation.makeOptionString(multiClassClassifier0, false);
      evaluation0.trueNegativeRate(1);
  }
}
