/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:03:17 GMT 2018
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer((-3987));
      linkedList0.removeFirstOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      byte[][] byteArray0 = new byte[5][8];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-103);
      byteArray1[6] = (byte)72;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-103);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)55;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)72;
      byteArray2[5] = (byte)72;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte) (-85);
      byteArray2[8] = (byte) (-44);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)72;
      byteArray3[1] = (byte) (-85);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)55;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-20);
      byteArray3[7] = (byte) (-77);
      byteArray3[8] = (byte)0;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte) (-85);
      byteArray4[1] = (byte) (-77);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-77);
      byteArray4[4] = (byte) (-47);
      byteArray4[5] = (byte) (-44);
      byteArray4[6] = (byte) (-44);
      byteArray4[7] = (byte)0;
      byteArray4[8] = (byte)55;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte) (-44);
      byteArray5[1] = (byte) (-91);
      byteArray0[4] = byteArray5;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.close();
      byte[][] byteArray0 = new byte[4][2];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte)85;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)85;
      byteArray2[1] = (byte)28;
      byteArray2[2] = (byte)126;
      byteArray2[3] = (byte)126;
      byteArray2[4] = (byte)126;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)85;
      byteArray3[1] = (byte)28;
      byteArray3[2] = (byte)85;
      byteArray3[3] = (byte)85;
      byteArray3[4] = (byte)126;
      byteArray3[5] = (byte)126;
      byteArray3[6] = (byte)28;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)126;
      byteArray4[1] = (byte)28;
      byteArray4[2] = (byte)28;
      byteArray4[3] = (byte)126;
      byteArray4[4] = (byte)28;
      byteArray4[5] = (byte)28;
      byteArray4[6] = (byte)85;
      byteArray4[7] = (byte)28;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      fBCachedFetcher0.isEmpty();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4270610433807245
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.parallelStream();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3592367006650063
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArrayArray0 = null;
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-1568));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7326587201992072
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.first();
      boolean boolean0 = fBCachedFetcher0.relative((-195));
      fBCachedFetcher0.previous();
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.isLast();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isFirst();
      byte[][] byteArray0 = new byte[2][0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte) (-32);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-80);
      byteArray2[1] = (byte)62;
      byteArray2[2] = (byte)43;
      byteArray2[3] = (byte) (-32);
      byteArray2[4] = (byte) (-93);
      byteArray2[5] = (byte)43;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)43;
      byteArray0[1] = byteArray2;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize((-73));
      fBCachedFetcher0.isFirst();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.first();
      fBCachedFetcher0.last();
      fBCachedFetcher0.afterLast();
      fBCachedFetcher0.absolute((-194));
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      
      fBCachedFetcher0.beforeFirst();
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8346096344580884
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.absolute(3);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.first();
      fBCachedFetcher0.next();
      fBCachedFetcher0.relative(566);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.previous();
      linkedList0.stream();
      fBCachedFetcher0.last();
      fBCachedFetcher0.first();
      fBCachedFetcher0.previous();
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4410152780267023
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.relative(21);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3647424585812
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[4][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)2;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)45;
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)74;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)59;
      byteArray3[1] = (byte)74;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)45;
      byteArray3[4] = (byte)74;
      byteArray3[5] = (byte)59;
      byteArray3[6] = (byte)74;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)2;
      byteArray4[1] = (byte)74;
      byteArray4[2] = (byte)74;
      byteArray4[3] = (byte)2;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)74;
      byteArray4[6] = (byte)2;
      byteArray4[7] = (byte)45;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.first();
      linkedList0.add(fBResultSet0.row);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(fBResultSet0.row);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet1.xsqlvars, linkedList0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.relative(25);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.previous();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      assertTrue(fBCachedFetcher0.isFirst());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2094768618237657
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[4][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)2;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)45;
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)74;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)59;
      byteArray3[1] = (byte)74;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)45;
      byteArray3[4] = (byte)74;
      byteArray3[5] = (byte)59;
      byteArray3[6] = (byte)74;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)2;
      byteArray4[1] = (byte)74;
      byteArray4[2] = (byte)74;
      byteArray4[3] = (byte)2;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)74;
      byteArray4[6] = (byte)2;
      byteArray4[7] = (byte)45;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.first();
      linkedList0.add(fBResultSet0.row);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(fBResultSet0.row);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet1.xsqlvars, linkedList0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.relative(25);
      fBCachedFetcher0.previous();
      linkedList0.add(fBResultSet0.row);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.insertRow(fBResultSet0.row);
      fBCachedFetcher0.deleteRow();
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet1.xsqlvars, linkedList0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.relative(25);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.previous();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.insertRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean0);
  }
}
