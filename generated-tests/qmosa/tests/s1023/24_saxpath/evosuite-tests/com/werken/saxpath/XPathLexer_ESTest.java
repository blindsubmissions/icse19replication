/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:52:28 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.consume();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.consume(0);
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(7, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.equals();
      xPathLexer0.consume(1029);
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      xPathLexer0.dollar();
      xPathLexer0.setXPath("=GqV%,oe4qq7;,-h*}");
      String string0 = xPathLexer0.getXPath();
      assertEquals("=GqV%,oe4qq7;,-h*}", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cs{l'LLGYY0r#b");
      char char0 = 'O';
      int int0 = 31;
      xPathLexer0.dots();
      xPathLexer0.consume(31);
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.isIdentifierChar('O');
      xPathLexer0.mod();
      Token token0 = xPathLexer0.at();
      xPathLexer0.identifier();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('v');
      assertTrue(boolean0);
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.equals();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3876680737002012
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.consume(1695);
      xPathLexer0.mod();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.getXPath();
      xPathLexer0.operatorName();
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.dollar();
      xPathLexer0.plus();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1706, int0);
      
      xPathLexer0.or();
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token14 = xPathLexer0.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6701198898068177
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.endPosition();
      xPathLexer0.currentPosition();
      xPathLexer0.currentPosition();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.setXPath("mR{wu13#.~n=/zO");
      xPathLexer0.leftParen();
      xPathLexer0.div();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.endPosition();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7247886316813297
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer0.notEquals();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.setXPath("vIfmZQY.A+V:");
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.hasMoreChars();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.endPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.consume(13);
      xPathLexer0.LA(0);
      xPathLexer0.setXPath("vIfmZQY.A+V:");
      assertEquals("vIfmZQY.A+V:", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8157755860110347
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.plus();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.notEquals();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.plus();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3075522766258005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      Token token0 = xPathLexer0.star();
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("2", token1.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.consume(150);
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(175, int0);
      
      Token token9 = xPathLexer0.whitespace();
      assertEquals("", token9.getTokenText());
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1434686122546072
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!gPbw6YzW,M");
      xPathLexer0.or();
      Token token0 = xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setXPath("");
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.hasMoreChars();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1820));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.473134793949766
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.setXPath("0#Tp$A?Q");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      xPathLexer0.consume(1);
      token0.toString();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.LA(8);
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.currentPosition();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7911882554945273
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV\"l!LU0V[");
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.colon();
      xPathLexer0.currentPosition();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2466772852144246
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Io&au#tZ'c_&LV6)}");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume((-1955));
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.088534231033599
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.comma();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.LA(3911);
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer1.number();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3002730055503537
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.comma();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1274));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0245222697825427
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV\"l!LU0V[");
      xPathLexer0.or();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.dots();
      assertEquals("\"", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3610618452161785
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.div();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.setXPath("0#Tp$A?Q");
      Token token1 = xPathLexer0.slashes();
      String string0 = token1.toString();
      assertEquals("[ (11) (0)", string0);
      
      xPathLexer0.consume(1);
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("p", token2.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("0#Tp$A?Q");
      xPathLexer1.star();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals("A", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.and();
      xPathLexer0.consume(1);
      xPathLexer1.or();
      xPathLexer1.mod();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("Q", token5.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(8, int0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer2.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5220230307790883
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer0.notEquals();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("vIfmZQY.A+V:");
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1274));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5284442631725872
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.setXPath("0#Tp$A?Q");
      Token token2 = xPathLexer0.slashes();
      String string0 = token2.toString();
      assertEquals("[ (11) (0)", string0);
      
      xPathLexer0.consume(1);
      Token token3 = xPathLexer0.leftParen();
      assertEquals("T", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("p", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("0#Tp$A?Q");
      Token token5 = xPathLexer1.star();
      assertEquals("0", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("$", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("A", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("0#Tp$A?Q");
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.whitespace();
      assertEquals("", token9.getTokenText());
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer1.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("T", token10.getTokenText());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("?Q", token11.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer2.hasMoreChars();
      Token token12 = xPathLexer1.dollar();
      assertEquals(26, token12.getTokenType());
      assertEquals("p", token12.getTokenText());
      
      xPathLexer0.setXPath("0#Tp$A?Q");
      xPathLexer2.getXPath();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("0#Tp$A?Q");
      Token token13 = xPathLexer3.slashes();
      assertEquals("0", token13.getTokenText());
  }
}
