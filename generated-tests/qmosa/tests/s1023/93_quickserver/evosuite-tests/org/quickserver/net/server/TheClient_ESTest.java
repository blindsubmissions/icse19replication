/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:56:34 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.SocketAddress;
import java.net.SocketException;
import java.net.SocketOption;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      theClient0.setTimeoutMsg("Sj#l0p");
      theClient0.setTimeout(564);
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientData();
      theClient0.getTimeout();
      theClient0.setServer((QuickServer) null);
      theClient0.setMaxAuthTry(564);
      theClient0.getTimeout();
      theClient0.getMaxAuthTry();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTryMsg("Sj#l0p");
      SocketChannel.open();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Sj#l0p", (-3369), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-3369
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-2));
      theClient0.setTimeoutMsg("");
      theClient0.setTrusted(true);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setMaxAuthTry((-2));
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setMaxConnectionMsg("org.quickserver.net.server.QuickServer");
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getServer();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientEventHandler(commandHandler0);
      assertEquals((-2), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.getAuthenticator();
      theClient0.setMaxAuthTryMsg("69+1Arq;");
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientData();
      theClient0.getMaxAuthTryMsg();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeout(0);
      theClient0.setClientData((ClientData) null);
      theClient0.getTimeoutMsg();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeout();
      theClient0.setTimeoutMsg((String) null);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.getAuthenticator();
      theClient0.getClientEventHandler();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientData((ClientData) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTrusted();
      theClient0.getClientEventHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setTimeout((-107));
      QuickServer quickServer0 = null;
      try {
        quickServer0 = new QuickServer("Unknown key got in SelectionKey: ", (-107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port number can not be less than 0!
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = "";
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getClientEventHandler();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 5344, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@6050c012
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.setCommunicationLogging(false);
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getTrusted();
      theClient1.setMaxConnectionMsg("");
      theClient1.getMaxConnectionMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.getClientAuthenticationHandler();
      theClient1.toString();
      theClient1.getServer();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientObjectHandler();
      theClient1.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTrusted();
      theClient0.getServer();
      theClient0.getClientAuthenticationHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getServer();
      theClient1.getClientBinaryHandler();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("QuickServer", (-1313), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1313
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxConnectionMsg("J");
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxAuthTry();
      theClient0.setCommunicationLogging(false);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientCommandHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setTrusted(true);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertFalse(theClient0.getCommunicationLogging());
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientData((ClientData) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.setMaxAuthTry(0);
      theClient0.getSocketChannel();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxAuthTry(0);
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.getAuthenticator();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      mockSocket0.setPerformancePreferences((-1026), 0, 283);
      mockSocket0.setSoLinger(true, 0);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getCommunicationLogging();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTry(0);
      theClient0.getMaxConnectionMsg();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getSocket();
      theClient0.setCommunicationLogging(true);
      theClient0.getSocket();
      theClient0.setMaxConnectionMsg((String) null);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientAuthenticationHandler();
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getServer();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientData();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.toString();
      theClient0.getMaxAuthTry();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1);
      try { 
        commandHandler0.gotConnected(blockingClientHandler0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }
}
