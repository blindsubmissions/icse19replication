/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:06:43 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1394L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 1 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.isSubRangeOf(range0);
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = range0.asRange();
      boolean boolean0 = range1.endsBefore(range0);
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      
      range2.toString();
      range0.isEmpty();
      boolean boolean2 = range2.endsBefore(range1);
      assertNotSame(range2, range1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1744004444151304
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range0.isEmpty();
      range0.intersection(range1);
      range1.toString();
      range1.endsBefore(range0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2760L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2760L, 2760L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2760L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      long long0 = (-546L);
      Range range0 = Range.of((-546L), (-546L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Zero Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3276698862269427
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.spliterator();
      Range range1 = Range.of(0L, 0L);
      range1.split(3519L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.copy();
      Range.Comparators.values();
      range_Builder0.shift(0L);
      Range range0 = Range.ofLength(0L);
      range_Builder0.expandEnd(1468L);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-4478L);
      Range.Builder range_Builder1 = range_Builder0.shift((-4478L));
      range_Builder0.build();
      range_Builder1.contractEnd((-4478L));
      range_Builder1.copy();
      range_Builder0.expandBegin((-4478L));
      long long1 = 0L;
      range_Builder0.contractEnd(0L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.828075397660396
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2495L, 2495L);
      // Undeclared exception!
      try { 
        Range.parseRange("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Range coordinates %d, %d are not valid %s coordinates into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.319492576154752
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 1955L;
      Range range0 = Range.of(1955L, 1955L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_Builder0.expandBegin(1955L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder0.expandBegin((-3693L));
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1955L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.599373744091525
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long0 = (-1L);
      long long1 = 0L;
      Range range1 = Range.of((-1L), 0L);
      range1.getEnd();
      Range range2 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      range2.spliterator();
      Range range3 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range3.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.120291565301284
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.toString();
      range_Builder0.expandEnd(0L);
      Range range1 = range_Builder0.build();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.131333581636701
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-2147483648L);
      long long1 = (-2524L);
      Range range0 = Range.of((-2147483648L), (-2524L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      String string0 = "wrrf zZ{Cxj1wO5";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("wrrf zZ{Cxj1wO5", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse wrrf zZ{Cxj1wO5 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.848899705841817
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.352855152241905
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      long long0 = new Long(0L);
      Range range2 = range0.asRange();
      range2.intersects(range2);
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1);
      
      range0.isEmpty();
      boolean boolean2 = range2.endsBefore(range1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9683918915419634
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of(2183L, 4294967271L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2183 .. 4294967271 ]/0B", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4724149807613363
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1628L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1628L, (-211L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7376696182833657
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of((-547L), 2147483647L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2594404213182058
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1171L, 1171L);
      List<Range> list0 = range1.complementFrom(linkedList0);
      range0.equals(list0);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2943323793997052
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range range1 = Range.ofLength(2147483647L);
      range1.isSubRangeOf(range0);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("\"?}>#-JL#4L6", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \"?}>#-JL#4L6 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.8673217114989824
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long0 = 0L;
      Range range1 = Range.of((-1L), 0L);
      range1.getEnd();
      long long1 = 2147483647L;
      List<Range> list0 = range1.split(2147483647L);
      Range range2 = Range.parseRange("[ 0 .. 0 ]/0B");
      List<Range> list1 = range1.complementFrom(list0);
      range1.iterator();
      range0.complementFrom(list1);
      Range.of(0L, 2147483647L);
      // Undeclared exception!
      try { 
        range2.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3684464578420763
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(0L, 0L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range range2 = Range.ofLength(1L);
      range1.isSubRangeOf(range2);
      range1.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("\"?}>#-JL#4L6", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \"?}>#-JL#4L6 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4313690703779987
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range2 = range0.asRange();
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(boolean1);
      
      range1.equals(range0);
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range2.complementFrom(list0);
      assertTrue(list1.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      String string1 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ 0 .. 0 ]/SB", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0246955538582485
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-1913L);
      Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-1913L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 2654L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.491386704217048
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-1394L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      Range.of(9223372034707292158L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1393 .. -1393 ]/RB", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8066624897703174
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(1821L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      linkedList0.add(range0);
      Range range1 = Range.of((-560L), 1821L);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      range0.getBegin(range_CoordinateSystem0);
      Range.Comparators.values();
      long long0 = range0.getBegin();
      assertEquals(1821L, long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-20L), (-20L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.equals(list0);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8866098941009537
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.of(2147483647L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 2863L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1604362011949916
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of(2147483629L, 2147483629L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3727148146379813
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = (-547L);
      Range range1 = Range.of((-547L), 2147484195L);
      range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.5793889637346785
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2551105127277413
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-20L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-20L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -20 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.502677726827074
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.isSubRangeOf(range0);
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = range0.asRange();
      range1.endsBefore(range0);
      range1.intersects(range2);
      range1.equals(range0);
      range2.toString();
      range0.isEmpty();
      range0.intersects(range2);
      Range range3 = range2.intersection(range1);
      range3.spliterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem2);
      range0.getEnd();
      range0.equals("[ 0 .. -1 ]/0B");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Residue Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5917530063544714
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      assertFalse(linkedList0.contains(range1));
      
      linkedList0.add(range1);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7291841752788253
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.spliterator();
      Range range1 = Range.of(0L, 0L);
      range1.split(3519L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 3519L, 3519L);
      range0.isSubRangeOf(range1);
      range1.getEnd(range_CoordinateSystem0);
      Range range3 = range2.asRange();
      range2.endsBefore(range3);
      Object object0 = new Object();
      range0.equals(object0);
      range0.toString();
      range1.isEmpty();
      range3.intersects(range2);
      range0.intersection(range2);
      Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      range3.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2665L, (-292L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.4218190296625055
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of((-20L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1295L);
      range1.isSubRangeOf(range0);
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = range1.asRange();
      range1.endsBefore(range0);
      Long long0 = new Long(334L);
      range0.equals(long0);
      range0.toString();
      range1.isEmpty();
      range0.intersects(range1);
      range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0994641704534964
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1913L), 4294967286L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-1913L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0146300137242736
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6912121283882886
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(1784L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.of(1L, 1624L);
      range1.equals(range2);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.133025247212664
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of(2060L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(4294967271L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1339665689071854
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(0L);
      String string0 = "#akKQnn)c\\";
      range0.equals((Object) null);
      Range range1 = Range.ofLength(0L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0216905105807723
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.isSubRangeOf(range0);
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = range0.asRange();
      range0.endsBefore(range0);
      range0.equals(range0);
      range1.toString();
      range0.isEmpty();
      range0.intersects(range1);
      range1.intersection(range0);
      range0.getEnd();
      range0.equals("[ 0 .. -1 ]/0B");
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("] G2MOc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.] G2MOc
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.887577825056549
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = (-20L);
      Range range0 = Range.of((-20L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
