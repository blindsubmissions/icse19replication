/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:22:38 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.id = 0;
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString();
      simpleNode0.toString("CompilationUnit");
      simpleNode0.setIdentifier(")+ QoE}Q");
      simpleNode0.jjtSetParent((Node) null);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.rootNode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nz63Oc");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      int int0 = (-13);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-13));
      javaParser0.EqualityExpression();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      try { 
        stringReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 319;
      SimpleNode simpleNode0 = new SimpleNode(319);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      simpleNode0.setIdentifier("");
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-3713));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.toString();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.73798344858705
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      simpleNode0.dump("", (Writer) null);
      simpleNode0.parent = (Node) simpleNode0;
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtAddChild(simpleNode0, 20);
      simpleNode0.toString();
      simpleNode0.jjtClose();
      simpleNode0.toString();
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier((String) null);
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.dump("J2", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CompilationUnit");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "CompilationUnit", 0, 1);
      simpleNode0.dump("", stringWriter2);
      simpleNode0.toString("");
      simpleNode0.setIdentifier("");
      simpleNode0.toString("");
      simpleNode0.dump("", stringWriter2);
      assertEquals("CompilationUnitC<CompilationUnit>\n</CompilationUnit>\n", stringWriter2.toString());
      assertEquals("CompilationUnitC<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4116423345122422
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CompilationUnit");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "CompilationUnit", 0, 1);
      simpleNode0.dump("", stringWriter2);
      simpleNode0.toString("");
      simpleNode0.setIdentifier("");
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode1.jjtAddChild(simpleNode0, 36);
      simpleNode1.toString();
      simpleNode1.jjtGetParent();
      simpleNode0.jjtClose();
      simpleNode1.dump((String) null, stringWriter0);
      assertEquals(37, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2265558156134033
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.jjtOpen();
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.toString("&&");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "&&EnumConstant");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "&&EnumConstant", 10, 10);
      simpleNode0.dump((String) null, stringWriter2);
      simpleNode0.toString((String) null);
      simpleNode0.setIdentifier("TypeBound");
      SimpleNode simpleNode1 = new SimpleNode(2547);
      simpleNode1.id = 10;
      simpleNode1.toString("&&EnumConstant");
      simpleNode0.dump("TypeBound", stringWriter0);
      simpleNode1.dump((String) null, stringWriter1);
      assertEquals("&&EnumConstant<EnumConstant>\n  <identifier>TypeBound</identifier>\n</EnumConstant>\n", stringWriter1.toString());
      assertEquals("&&EnumConstant<EnumConstant>\n  <identifier>TypeBound</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.074614291729384
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CompilationUnit");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "CompilationUnit", 0, 1);
      simpleNode0.dump("", stringWriter2);
      simpleNode0.toString("");
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier(">=");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.dump("q2gwh*mlT,?QFj{.%oU", stringWriter0);
      assertEquals("CompilationUnitC<CompilationUnit>\n  <identifier>*ge</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0379083330628327
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.jjtOpen();
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.toString("&&");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "&&EnumConstant");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "&&EnumConstant", 10, 10);
      simpleNode0.dump((String) null, stringWriter2);
      simpleNode0.toString((String) null);
      simpleNode0.setIdentifier(">>");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.toString((String) null);
      simpleNode0.dump((String) null, stringWriter1);
      simpleNode1.dump("  <identifier>", stringWriter2);
      assertEquals("&&EnumConstant<EnumConstant>\n  <identifier>*rshft</identifier>\n</EnumConstant>\n", stringWriter2.toString());
      assertEquals("&&EnumConstant<EnumConstant>\n  <identifier>*rshft</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.jjtOpen();
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.toString("&&");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "&&EnumConstant");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) "&&EnumConstant");
      simpleNode0.dump(">>", stringWriter2);
      simpleNode0.toString("");
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("&&");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.dump("&&EnumConstant", stringWriter1);
      simpleNode0.dump("&&EnumConstant", stringWriter2);
      assertEquals("&&EnumConstant<EnumConstant>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9495936677167384
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.setIdentifier("<");
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("%e", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "%e");
      simpleNode0.dump("%e", stringWriter1);
      simpleNode0.dump("Nb?g5inSD$@\"w.^z#,XConditionalAndExpression", stringWriter1);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("<");
      simpleNode0.dump("{", stringWriter0);
      simpleNode0.setIdentifier("{");
      SimpleNode simpleNode1 = new SimpleNode((-1970303474));
      simpleNode0.setIdentifier("#");
      simpleNode1.dump("{", stringWriter0);
      simpleNode1.dump("}` Tjg.W5EF_d", stringWriter0);
      simpleNode0.dump("%43P!4!&>jCg}Zzw", stringWriter0);
      simpleNode1.dump("*amp", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*lt</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>#</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.toString();
      Integer integer0 = new Integer(10);
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.toString("]L)/?Y!hZ&kiM");
      simpleNode0.setIdentifier("}");
      simpleNode0.toString("\"JCwQ6\":b@v1p-`");
      StringWriter stringWriter2 = stringWriter1.append('F');
      simpleNode0.dump("EnumConstant", stringWriter0);
      simpleNode0.setIdentifier("`\"t{PMdJh*YhHo%");
      simpleNode0.dump("EnumConstant", stringWriter1);
      simpleNode0.dump("`\"t{PMdJh*YhHo%", stringWriter1);
      StringWriter stringWriter3 = stringWriter2.append('F');
      simpleNode0.dump("\"JCwQ6\":b@v1p-`EnumConstant : }", stringWriter2);
      simpleNode0.dump("{Qs;6&`.]=", stringWriter3);
      simpleNode0.dump("}", stringWriter0);
      assertEquals("<EnumConstant>\n</EnumConstant>\n<EnumConstant>\n  <identifier>`\"t{PMdJh*YhHo%</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.44375728426014843
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.setIdentifier("<=");
      simpleNode0.dump("Nb?g5inSD$@\"w.^z#,XConditionalAndExpression", stringWriter0);
      simpleNode0.dump("\"super\"", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*le</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*le</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*le</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }
}
