/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 18:48:31 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      Block block0 = errorPage0.placeholder("");
      String string1 = "";
      String string2 = "";
      Hidden hidden0 = new Hidden(block0, "", "");
      String string3 = "duplicated attributes ";
      FormElement formElement0 = hidden0.value("duplicated attributes ");
      TableBlock tableBlock0 = new TableBlock(formElement0);
      // Undeclared exception!
      try { 
        formElement0.rawText(tableBlock0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.base("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "X]JW;*fTBBE+!9";
      String string1 = "jPT";
      Checkbox checkbox0 = new Checkbox((Component) null, "X]JW;*fTBBE+!9", "jPT");
      FormElement formElement0 = checkbox0.setFormElementName("jPT");
      checkbox0._setComponentId((String) null);
      // Undeclared exception!
      try { 
        formElement0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Form form0 = new Form((String) null);
      String string0 = "S(\\c/$Pj*LL";
      DynamicSelectModel dynamicSelectModel0 = form0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label(")+ QoE}Q");
      Select select0 = null;
      try {
        select0 = new Select(form0, "S(c/$Pj*LL", "S(c/$Pj*LL", dynamicSelectModel1, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "'.";
      String string1 = "fQ";
      Checkbox checkbox0 = new Checkbox(errorPage0, "'.", "fQ");
      FormElement formElement0 = checkbox0.label("'.");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        formElement0.u(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "org.mvel.conversion.ShortCH$1";
      FileInput fileInput0 = new FileInput(errorPage0, "org.mvel.conversion.ShortCH$1", "org.mvel.conversion.ShortCH$1");
      // Undeclared exception!
      try { 
        errorPage0.numberInput("org.mvel.conversion.ShortCH$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "O", "O");
      Component component0 = errorPage0.strong((Object) textInput0);
      String string0 = "label";
      Checkbox checkbox0 = new Checkbox(component0, "label", "/gG:");
      textInput0._setComponentId((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "label";
      stringArray0[1] = "label";
      stringArray0[2] = "/gG:";
      String string1 = "";
      stringArray0[3] = "";
      stringArray0[4] = "label";
      String string2 = "oxB<F}S<q";
      Radio radio0 = new Radio(checkbox0, "namespace processing feature can only be changed before parsing", "oxB<F}S<q");
      // Undeclared exception!
      try { 
        checkbox0.strong((Object) radio0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.textarea((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Form form0 = new Form("");
      Form form1 = form0.addFormValidationRule("@", "@");
      Form form2 = form1.addFormValidationError("");
      Checkbox checkbox0 = new Checkbox(form0, "@", "@");
      // Undeclared exception!
      try { 
        form2.sub((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "\\R*DT,4`@~*_~&etxe";
      TableBlock tableBlock0 = new TableBlock(errorPage0, "R*DT,4`@~*_~&etxe");
      Link link0 = new Link(errorPage0, tableBlock0);
      tableBlock0.getComponentName();
      Table table0 = new Table(link0, "%xu}`!@wXi%2Ekgdn(m");
      String string1 = "HU^C}veNB=";
      // Undeclared exception!
      try { 
        table0.id("HU^C}veNB=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "))rc!D>s,D1ZmgP";
      Form form0 = new Form("))rc!D>s,D1ZmgP");
      // Undeclared exception!
      try { 
        form0.img("))rc!D>s,D1ZmgP", "))rc!D>s,D1ZmgP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      text0.setCdata(true);
      // Undeclared exception!
      try { 
        errorPage0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Form form0 = new Form("ReaeweW'7n7eeb-");
      assertNotNull(form0);
      assertEquals("ReaeweW'7n7eeb-", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      
      FileInput fileInput0 = new FileInput(form0, "Insensitive", "Insensitive");
      assertNotNull(fileInput0);
      assertEquals("ReaeweW'7n7eeb-", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("Insensitive", fileInput0.getFormElementName());
      assertEquals("Insensitive", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      
      // Undeclared exception!
      try { 
        fileInput0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "zn>^ndBnG9 /QF?${y";
      Form form0 = new Form("zn>^ndBnG9 /QF?${y");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("zn>^ndBnG9 /QF?${y", form0.getComponentId());
      
      // Undeclared exception!
      try { 
        form0.bdo("zn>^ndBnG9 /QF?${y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("wheel_components_Form", form0.getComponentId());
      
      Form form1 = form0.renderHint("");
      assertNotNull(form1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      
      // Undeclared exception!
      try { 
        form0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      assertNotNull(xmlEntityRef0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      String string0 = xmlEntityRef0.defaultTagName();
      assertNull(string0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      List<CharSequence> list0 = xmlEntityRef0._getRenderHints();
      assertNotNull(list0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ActionExpression actionExpression0 = new ActionExpression("@");
      assertNotNull(actionExpression0);
      assertEquals("@", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("@", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("@", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      
      ActionExpression actionExpression1 = actionExpression0.javascript((String) null);
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("@", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("@", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("@", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("@", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("@", actionExpression1.toString());
      
      ActionExpression actionExpression2 = actionExpression1.updateComponent("VV6]%EH6nwDp>u#B");
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertEquals("@", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("@", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("@", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("@", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("@", actionExpression1.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertNull(actionExpression2.getJavascript());
      assertEquals("@", actionExpression2.getExpression());
      assertEquals("@", actionExpression2.getActionExpression());
      assertEquals(1, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("@", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      
      ActionExpression actionExpression3 = actionExpression2.submitForm(false);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertEquals("@", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("@", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals(1, actionExpression0.length());
      assertEquals("@", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("@", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("@", actionExpression1.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertNull(actionExpression2.getJavascript());
      assertEquals("@", actionExpression2.getExpression());
      assertEquals("@", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmitForm());
      assertEquals(1, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("@", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getEvent());
      assertEquals(1, actionExpression3.length());
      assertEquals("@", actionExpression3.toString());
      assertEquals("@", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isSubmissible());
      assertNull(actionExpression3.getJavascript());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("@", actionExpression3.getExpression());
      
      Form form0 = null;
      try {
        form0 = new Form(xmlEntityRef0, "Y1{f-e`.W\"zh4", actionExpression3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      String string0 = xmlEntityRef0.defaultTagName();
      assertNull(string0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      List<CharSequence> list0 = xmlEntityRef0._getRenderHints();
      assertNotNull(list0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ActionExpression actionExpression0 = new ActionExpression("@");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("@", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(1, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("@", actionExpression0.getActionExpression());
      assertEquals("@", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      
      ActionExpression actionExpression1 = actionExpression0.javascript((String) null);
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("@", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(1, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("@", actionExpression0.getActionExpression());
      assertEquals("@", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("@", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("@", actionExpression1.getActionExpression());
      assertEquals("@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertTrue(actionExpression1.isSubmitForm());
      
      String string1 = actionExpression1.extractMethod();
      assertNotNull(string1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("@", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(1, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("@", actionExpression0.getActionExpression());
      assertEquals("@", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("@", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("@", actionExpression1.getActionExpression());
      assertEquals("@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("@", string1);
      
      ActionExpression actionExpression2 = actionExpression1.updateComponent("VV6]%EH6nwDp>u#B");
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("@", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(1, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("@", actionExpression0.getActionExpression());
      assertEquals("@", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("@", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("@", actionExpression1.getActionExpression());
      assertEquals("@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertTrue(actionExpression1.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertNull(actionExpression2.getJavascript());
      assertEquals("@", actionExpression2.getActionExpression());
      assertEquals(1, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("@", actionExpression2.toString());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals("@", actionExpression2.getExpression());
      
      NumberInput numberInput0 = new NumberInput(xmlEntityRef0, "sub", "@");
      assertNotNull(numberInput0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertEquals("input", numberInput0.defaultTagName());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertEquals("sub", numberInput0.getFormElementName());
      assertEquals("@", numberInput0.getComponentId());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "VV6]%EH6nwDp>u#B";
      stringArray0[1] = null;
      stringArray0[2] = "dlOd'M6";
      stringArray0[1] = "VV6]%EH6nwDp>u#B";
      stringArray0[4] = null;
      numberInput0._setSubmitValue(stringArray0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("VV6]%EH6nwDp>u#B", numberInput0._getSubmitValue());
      assertEquals("input", numberInput0.defaultTagName());
      assertFalse(numberInput0._isGeneratedId());
      assertFalse(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertEquals("sub", numberInput0.getFormElementName());
      assertEquals("@", numberInput0.getComponentId());
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      DateInput dateInput0 = new DateInput(errorPage0, "", "", "");
      assertNotNull(dateInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      
      String string0 = "em";
      Checkbox checkbox0 = new Checkbox(dateInput0, "em", "");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("em", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      
      String string1 = " on the page.";
      // Undeclared exception!
      try { 
        checkbox0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Form form0 = new Form("ReaeweW'7n7eeb-");
      assertNotNull(form0);
      assertEquals("ReaeweW'7n7eeb-", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      
      FileInput fileInput0 = new FileInput(form0, "Insensitive", "Insensitive");
      assertNotNull(fileInput0);
      assertEquals("ReaeweW'7n7eeb-", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("Insensitive", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("Insensitive", fileInput0.getComponentId());
      
      Hidden hidden0 = new Hidden(form0, "T)", "Insensitive");
      assertNotNull(hidden0);
      assertEquals("ReaeweW'7n7eeb-", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("Insensitive", hidden0.getComponentId());
      assertEquals("T)", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      
      String string0 = "u";
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        hidden0.message("u", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.657140237361998
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      TextInput textInput0 = new TextInput(errorPage0, "O", "O");
      assertNotNull(textInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("O", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("O", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      
      Label label0 = (Label)errorPage0.strong((Object) textInput0);
      assertNotNull(label0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("O", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("O", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      Checkbox checkbox0 = new Checkbox(label0, "label", "/gG:");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("O", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("O", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("/gG:", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("label", checkbox0.getFormElementName());
      
      Checkbox checkbox1 = (Checkbox)checkbox0.setFormElementName("O");
      assertNotNull(checkbox1);
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("O", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("O", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("O", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("/gG:", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("/gG:", checkbox1.getComponentId());
      assertTrue(checkbox1.isValid());
      assertEquals("O", checkbox1.getFormElementName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("input", checkbox1.defaultTagName());
      
      TableBlock tableBlock0 = new TableBlock(checkbox0, "label");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("O", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("O", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("O", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("/gG:", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("label", tableBlock0.getComponentId());
      
      Radio radio0 = new Radio(errorPage0, "B?Xubtvd", " on the page.");
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(" on the page.", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("B?Xubtvd", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      
      String string0 = radio0.defaultTagName();
      assertNotNull(string0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(" on the page.", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("B?Xubtvd", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertTrue(radio0.isEmpty());
      assertEquals("input", string0);
      
      TableRow tableRow0 = new TableRow(label0);
      assertNotNull(tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("O", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("O", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      
      Block block0 = (Block)tableRow0.th();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("O", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("O", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "5B3*vL9b[$'o[");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("5B3*vL9b[$'o[", table0.getComponentId());
      
      Table table1 = table0.renderHint(" on the page.");
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("5B3*vL9b[$'o[", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("5B3*vL9b[$'o[", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNotNull(elExpression0);
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      
      ElExpression elExpression1 = elExpression0.errorMessage((String) null);
      assertNotNull(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertNull(elExpression1.toString());
      assertNull(elExpression1.getExpression());
      
      List<Component> list0 = table1.findAll(elExpression0);
      assertNotNull(list0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(elExpression0, elExpression1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("5B3*vL9b[$'o[", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("5B3*vL9b[$'o[", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Table table2 = table0.id("Colgroup component can be added only to a Table.");
      assertNotNull(table2);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table2, table1);
      assertSame(table2, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Colgroup component can be added only to a Table.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Colgroup component can be added only to a Table.", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      
      TableBlock tableBlock1 = table0.tfoot();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertNotSame(tableBlock1, tableBlock0);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Colgroup component can be added only to a Table.", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      DateInput dateInput0 = new DateInput(errorPage0, "", "", "");
      assertNotNull(dateInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      
      Checkbox checkbox0 = new Checkbox(dateInput0, "em", "");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("em", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      
      FormElement formElement0 = checkbox0.setFormElementName(" on the page.");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals(" on the page.", formElement0.getFormElementName());
      
      TableBlock tableBlock0 = new TableBlock(formElement0, (String) null);
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals(" on the page.", formElement0.getFormElementName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      Radio radio0 = new Radio(tableBlock0, (String) null, (String) null);
      assertNotNull(radio0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals(" on the page.", formElement0.getFormElementName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      
      String string0 = radio0.defaultTagName();
      assertNotNull(string0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals(" on the page.", formElement0.getFormElementName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", string0);
      
      TableRow tableRow0 = new TableRow(radio0);
      assertNotNull(tableRow0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals(" on the page.", formElement0.getFormElementName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      
      Block block0 = (Block)tableRow0.th();
      assertNotNull(block0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals(" on the page.", formElement0.getFormElementName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      Table table0 = new Table(errorPage0, "");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      Table table1 = table0.renderHint("");
      assertNotNull(table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      
      ElExpression elExpression0 = new ElExpression("em");
      assertNotNull(elExpression0);
      assertEquals("em", elExpression0.getExpression());
      assertEquals(2, elExpression0.length());
      assertEquals("em", elExpression0.toString());
      
      ElExpression elExpression1 = elExpression0.errorMessage("em");
      assertNotNull(elExpression1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("em", elExpression0.getExpression());
      assertEquals(2, elExpression0.length());
      assertEquals("em", elExpression0.toString());
      assertEquals(2, elExpression1.length());
      assertEquals("em", elExpression1.getExpression());
      assertEquals("em", elExpression1.toString());
      
      List<Component> list0 = table0.findAll(elExpression1);
      assertNotNull(list0);
      assertSame(table0, table1);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("em", elExpression0.getExpression());
      assertEquals(2, elExpression0.length());
      assertEquals("em", elExpression0.toString());
      assertEquals(2, elExpression1.length());
      assertEquals("em", elExpression1.getExpression());
      assertEquals("em", elExpression1.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Table table2 = table0.id("");
      assertNotNull(table2);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      
      Table table3 = table2.renderHint("");
      assertNotNull(table3);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table2, table3);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertSame(table3, table1);
      assertSame(table3, table2);
      assertSame(table3, table0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table3._isGeneratedId());
      assertEquals("", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      
      Table table4 = table3.id("");
      assertNotNull(table4);
      assertSame(table4, table0);
      assertSame(table4, table1);
      assertSame(table4, table2);
      assertSame(table4, table3);
      assertSame(table0, table4);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table2, table3);
      assertSame(table2, table0);
      assertSame(table2, table4);
      assertSame(table2, table1);
      assertSame(table3, table1);
      assertSame(table3, table4);
      assertSame(table3, table2);
      assertSame(table3, table0);
      assertEquals("table", table4.defaultTagName());
      assertEquals("", table4.getComponentId());
      assertFalse(table4._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table3._isGeneratedId());
      assertEquals("", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      
      TableBlock tableBlock1 = table4.tfoot();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertSame(table4, table0);
      assertSame(table4, table1);
      assertSame(table4, table2);
      assertSame(table4, table3);
      assertNotSame(tableBlock1, tableBlock0);
      assertSame(table0, table4);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table2, table3);
      assertSame(table2, table0);
      assertSame(table2, table4);
      assertSame(table2, table1);
      assertSame(table3, table1);
      assertSame(table3, table4);
      assertSame(table3, table2);
      assertSame(table3, table0);
      assertEquals("table", table4.defaultTagName());
      assertEquals("", table4.getComponentId());
      assertFalse(table4._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table3._isGeneratedId());
      assertEquals("", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        xmlEntityRef0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = " does not exist.";
      Form form0 = new Form(" does not exist.");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals(" does not exist.", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      
      String string1 = "default";
      // Undeclared exception!
      try { 
        form0.big((Object) " does not exist.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7334017778086706
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      Text text0 = new Text(errorPage0, errorPage0);
      assertNotNull(text0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      
      String string0 = "]mq8B/\" G0#d''GQhIR";
      Radio radio0 = new Radio(errorPage0, "", "]mq8B/\" G0#d''GQhIR");
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(radio0._isGeneratedId());
      assertEquals("]mq8B/\" G0#d''GQhIR", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      
      String string1 = radio0.defaultTagName();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(radio0._isGeneratedId());
      assertEquals("]mq8B/\" G0#d''GQhIR", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("input", string1);
      
      Table table0 = new Table(radio0, "]mq8B/\" G0#d''GQhIR");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(radio0._isGeneratedId());
      assertEquals("]mq8B/\" G0#d''GQhIR", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("]mq8B/\" G0#d''GQhIR", table0.getComponentId());
      
      TableBlock tableBlock0 = table0.tbody();
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(radio0._isGeneratedId());
      assertEquals("]mq8B/\" G0#d''GQhIR", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("]mq8B/\" G0#d''GQhIR", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      
      TableRow tableRow0 = tableBlock0.tr();
      assertNotNull(tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(radio0._isGeneratedId());
      assertEquals("]mq8B/\" G0#d''GQhIR", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("]mq8B/\" G0#d''GQhIR", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      
      Block block0 = (Block)tableRow0.th();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(radio0._isGeneratedId());
      assertEquals("]mq8B/\" G0#d''GQhIR", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("]mq8B/\" G0#d''GQhIR", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Table table1 = new Table(tableBlock0, "]mq8B/\" G0#d''GQhIR");
      assertNotNull(table1);
      assertTrue(table1.equals((Object)table0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(radio0._isGeneratedId());
      assertEquals("]mq8B/\" G0#d''GQhIR", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("]mq8B/\" G0#d''GQhIR", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertFalse(table1._isGeneratedId());
      assertEquals("]mq8B/\" G0#d''GQhIR", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      
      ElExpression elExpression0 = new ElExpression("");
      assertNotNull(elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      
      ElExpression elExpression1 = new ElExpression("");
      assertNotNull(elExpression1);
      assertTrue(elExpression1.equals((Object)elExpression0));
      assertEquals("", elExpression1.getExpression());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.toString());
      
      // Undeclared exception!
      try { 
        table0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      DateInput dateInput0 = new DateInput(errorPage0, "", "", "");
      assertNotNull(dateInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "ArMM:7");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertNull(checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      
      FormElement formElement0 = checkbox0.setFormElementName(" on the page.");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("ArMM:7", formElement0.getComponentId());
      assertEquals(" on the page.", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      
      TableBlock tableBlock0 = new TableBlock(checkbox0, " on the page.");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      
      Radio radio0 = new Radio(tableBlock0, (String) null, (String) null);
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      
      Radio radio1 = new Radio(tableBlock0, "Y[#1,.w]", "h:4,I6c}T=x?i_Ed>G,");
      assertNotNull(radio1);
      assertFalse(radio1.equals((Object)radio0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertFalse(radio1._isGeneratedId());
      assertEquals("Y[#1,.w]", radio1.getFormElementName());
      assertEquals("h:4,I6c}T=x?i_Ed>G,", radio1.getComponentId());
      assertEquals("input", radio1.defaultTagName());
      assertTrue(radio1.isValid());
      assertTrue(radio1.isEmpty());
      
      String string0 = radio1.defaultTagName();
      assertNotNull(string0);
      assertFalse(radio1.equals((Object)radio0));
      assertSame(checkbox0, formElement0);
      assertNotSame(radio1, radio0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertFalse(radio1._isGeneratedId());
      assertEquals("Y[#1,.w]", radio1.getFormElementName());
      assertEquals("h:4,I6c}T=x?i_Ed>G,", radio1.getComponentId());
      assertEquals("input", radio1.defaultTagName());
      assertTrue(radio1.isValid());
      assertTrue(radio1.isEmpty());
      assertEquals("input", string0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertNotNull(tableRow0);
      assertSame(checkbox0, formElement0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      
      Block block0 = (Block)tableRow0.th();
      assertNotNull(block0);
      assertSame(checkbox0, formElement0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      Table table0 = new Table(radio0, (String) null);
      assertNotNull(table0);
      assertFalse(radio0.equals((Object)radio1));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      Table table1 = table0.renderHint("input");
      assertNotNull(table1);
      assertFalse(radio0.equals((Object)radio1));
      assertSame(checkbox0, formElement0);
      assertNotSame(radio0, radio1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      
      ElExpression elExpression0 = new ElExpression("kbd");
      assertNotNull(elExpression0);
      assertEquals("kbd", elExpression0.getExpression());
      assertEquals("kbd", elExpression0.toString());
      assertEquals(3, elExpression0.length());
      
      ElExpression elExpression1 = new ElExpression((String) null);
      assertNotNull(elExpression1);
      assertFalse(elExpression1.equals((Object)elExpression0));
      assertNull(elExpression1.getExpression());
      assertNull(elExpression1.toString());
      
      ElExpression elExpression2 = new ElExpression((String) null);
      assertNotNull(elExpression2);
      assertFalse(elExpression2.equals((Object)elExpression0));
      assertTrue(elExpression2.equals((Object)elExpression1));
      assertNull(elExpression2.getExpression());
      assertNull(elExpression2.toString());
      
      List<Component> list0 = table1.findAll(elExpression2);
      assertNotNull(list0);
      assertFalse(radio0.equals((Object)radio1));
      assertFalse(elExpression2.equals((Object)elExpression0));
      assertTrue(elExpression2.equals((Object)elExpression1));
      assertSame(checkbox0, formElement0);
      assertNotSame(radio0, radio1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(elExpression2, elExpression0);
      assertNotSame(elExpression2, elExpression1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertNull(elExpression2.getExpression());
      assertNull(elExpression2.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Table table2 = (Table)table0.actionBinding("input");
      assertNotNull(table2);
      assertFalse(radio0.equals((Object)radio1));
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertSame(checkbox0, formElement0);
      assertNotSame(radio0, radio1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertEquals("Table_1", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      Table table3 = table1.id("");
      assertNotNull(table3);
      assertFalse(radio0.equals((Object)radio1));
      assertSame(table3, table2);
      assertSame(table3, table0);
      assertSame(table3, table1);
      assertSame(checkbox0, formElement0);
      assertNotSame(radio0, radio1);
      assertSame(table0, table1);
      assertSame(table0, table3);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", table3.getComponentId());
      assertFalse(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      
      Table table4 = table3.id((String) null);
      assertNotNull(table4);
      assertFalse(radio0.equals((Object)radio1));
      assertSame(table3, table2);
      assertSame(table3, table4);
      assertSame(table3, table0);
      assertSame(table3, table1);
      assertSame(table4, table1);
      assertSame(table4, table3);
      assertSame(table4, table0);
      assertSame(table4, table2);
      assertSame(checkbox0, formElement0);
      assertNotSame(radio0, radio1);
      assertSame(table0, table1);
      assertSame(table0, table3);
      assertSame(table0, table4);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertSame(table1, table4);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(table3._isGeneratedId());
      assertEquals("null", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertFalse(table4._isGeneratedId());
      assertEquals("null", table4.getComponentId());
      assertEquals("table", table4.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("null", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("null", table1.getComponentId());
      
      TableBlock tableBlock1 = table3.tfoot();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(radio0.equals((Object)radio1));
      assertSame(table3, table2);
      assertSame(table3, table4);
      assertSame(table3, table0);
      assertSame(table3, table1);
      assertSame(checkbox0, formElement0);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(radio0, radio1);
      assertSame(table0, table1);
      assertSame(table0, table3);
      assertSame(table0, table4);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertSame(table1, table4);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(table3._isGeneratedId());
      assertEquals("null", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("null", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("null", table1.getComponentId());
      
      // Undeclared exception!
      try { 
        table1.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // When using table with thead, tfoot and tbody, you can't create rows directly under a table-component.
         //
         verifyException("wheel.components.Table", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = null;
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      assertNotNull(xmlEntityRef0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      String string1 = xmlEntityRef0.defaultTagName();
      assertNull(string1);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      Calendar calendar0 = xmlEntityRef0.date();
      assertNotNull(calendar0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      Label label0 = null;
      try {
        label0 = new Label(xmlEntityRef0, calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.730113963040932
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      
      Block block0 = errorPage0.placeholder("");
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      String string0 = "";
      Hidden hidden0 = new Hidden(block0, "", "");
      assertNotNull(hidden0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      
      String string1 = "duplicated attributes ";
      FormElement formElement0 = hidden0.value("duplicated attributes ");
      assertNotNull(formElement0);
      assertSame(hidden0, formElement0);
      assertSame(formElement0, hidden0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("Hidden_1", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      
      TableBlock tableBlock0 = new TableBlock(formElement0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("Hidden_1", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      Form form0 = new Form("duplicated attributes ");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertEquals("duplicated attributes ", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      
      Form form1 = form0.renderHint("");
      assertNotNull(form1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(form0._isBuilt());
      assertEquals("duplicated attributes ", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("duplicated attributes ", form1.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      
      ActionExpression actionExpression1 = actionExpression0.setOwner(errorPage0);
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      
      ActionExpression actionExpression2 = actionExpression1.updateComponent("");
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertEquals(0, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("wheel_ErrorPage", actionExpression2.getSourceId());
      assertNull(actionExpression2.getEvent());
      assertEquals("", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getExpression());
      
      boolean boolean0 = false;
      ActionExpression actionExpression3 = actionExpression2.submitForm(false);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertFalse(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertEquals(0, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("wheel_ErrorPage", actionExpression2.getSourceId());
      assertNull(actionExpression2.getEvent());
      assertEquals("", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getEvent());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.toString());
      assertEquals("", actionExpression3.getActionExpression());
      assertEquals("wheel_ErrorPage", actionExpression3.getSourceId());
      assertFalse(actionExpression3.isSubmissible());
      assertNull(actionExpression3.getJavascript());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("", actionExpression3.getExpression());
      
      // Undeclared exception!
      try { 
        actionExpression3.getUpdateComponentFunctionCall();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id  on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "namespace must be not null";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("namespace must be not null");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("namespace must be not null", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "}G?xYW>hqSJ", "h~-cBa7Jq");
      assertNotNull(checkbox0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("namespace must be not null", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("}G?xYW>hqSJ", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("h~-cBa7Jq", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      
      // Undeclared exception!
      try { 
        checkbox0.h2((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" does not exist.");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(" does not exist.", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.abbr((Object) " does not exist.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      String string0 = "";
      Block block0 = errorPage0.placeholder("");
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      
      String string1 = "";
      Hidden hidden0 = new Hidden(block0, "", "");
      assertNotNull(hidden0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      
      String string2 = "duplicated attributes ";
      TableBlock tableBlock0 = new TableBlock(hidden0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      Form form0 = new Form("duplicated attributes ");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("duplicated attributes ", form0.getComponentId());
      assertFalse(form0._isBuilt());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      
      ActionExpression actionExpression1 = actionExpression0.updateComponent("duplicated attributes ");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.toString());
      assertNull(actionExpression1.getEvent());
      
      ActionExpression actionExpression2 = actionExpression0.updateComponent("");
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals("", actionExpression2.toString());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      
      Radio radio0 = new Radio(tableBlock0, "x9`)_<!l`EOA;", "duplicated attributes ");
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("duplicated attributes ", radio0.getComponentId());
      assertEquals("x9`)_<!l`EOA;", radio0.getFormElementName());
      
      String string3 = radio0.defaultTagName();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("duplicated attributes ", radio0.getComponentId());
      assertEquals("x9`)_<!l`EOA;", radio0.getFormElementName());
      assertEquals("input", string3);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertNotNull(tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      
      Block block1 = (Block)tableRow0.th();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      
      Hidden hidden1 = new Hidden(errorPage0, "", "");
      assertNotNull(hidden1);
      assertFalse(hidden1.equals((Object)hidden0));
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Hidden_2", hidden1.getComponentId());
      assertEquals("input", hidden1.defaultTagName());
      assertTrue(hidden1.isValid());
      assertTrue(hidden1._isGeneratedId());
      assertTrue(hidden1.isEmpty());
      assertEquals("", hidden1.getFormElementName());
      
      Label label0 = (Label)block1.span((Object) hidden1);
      assertNotNull(label0);
      assertFalse(block0.equals((Object)block1));
      assertFalse(hidden0.equals((Object)hidden1));
      assertFalse(block1.equals((Object)block0));
      assertFalse(hidden1.equals((Object)hidden0));
      assertNotSame(block0, block1);
      assertNotSame(hidden0, hidden1);
      assertNotSame(block1, block0);
      assertNotSame(hidden1, hidden0);
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Hidden_2", hidden1.getComponentId());
      assertEquals("input", hidden1.defaultTagName());
      assertTrue(hidden1.isValid());
      assertTrue(hidden1._isGeneratedId());
      assertTrue(hidden1.isEmpty());
      assertEquals("", hidden1.getFormElementName());
      
      String string4 = block1.getComponentName();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(hidden0.equals((Object)hidden1));
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(hidden0, hidden1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block", string4);
      
      Table table0 = null;
      try {
        table0 = new Table(form0, "5Mf/IAnK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" does not exist.");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(" does not exist.", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      String string0 = xmlEntityRef0.defaultTagName();
      assertNull(string0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(" does not exist.", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      List<CharSequence> list0 = xmlEntityRef0._getRenderHints();
      assertNotNull(list0);
      assertFalse(list0.contains(" does not exist."));
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(" does not exist.", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.toString());
      
      ActionExpression actionExpression1 = actionExpression0.updateComponent("=s0dz");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNull(actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression1.toString());
      assertNull(actionExpression1.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertNull(actionExpression1.getActionExpression());
      assertNull(actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertFalse(actionExpression1.isSubmissible());
      
      xmlEntityRef0._setParent((Component) null);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals(" does not exist.", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8964093039364447
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      DateInput dateInput0 = new DateInput(errorPage0, "", "", "");
      assertNotNull(dateInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "ArMM:7");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertNull(checkbox0.getFormElementName());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      
      FormElement formElement0 = checkbox0.setFormElementName(" on the page.");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("ArMM:7", formElement0.getComponentId());
      assertEquals(" on the page.", formElement0.getFormElementName());
      
      String string0 = null;
      TableBlock tableBlock0 = new TableBlock(checkbox0, " on the page.");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      
      String string1 = null;
      String string2 = null;
      Radio radio0 = new Radio(tableBlock0, (String) null, (String) null);
      assertNotNull(radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      
      Radio radio1 = new Radio(tableBlock0, "Y[#1,.w]", "h:4,I6c}T=x?i_Ed>G,");
      assertNotNull(radio1);
      assertFalse(radio1.equals((Object)radio0));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(radio1.isEmpty());
      assertFalse(radio1._isGeneratedId());
      assertTrue(radio1.isValid());
      assertEquals("input", radio1.defaultTagName());
      assertEquals("Y[#1,.w]", radio1.getFormElementName());
      assertEquals("h:4,I6c}T=x?i_Ed>G,", radio1.getComponentId());
      
      String string3 = radio1.defaultTagName();
      assertNotNull(string3);
      assertFalse(radio1.equals((Object)radio0));
      assertSame(checkbox0, formElement0);
      assertNotSame(radio1, radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(radio1.isEmpty());
      assertFalse(radio1._isGeneratedId());
      assertTrue(radio1.isValid());
      assertEquals("input", radio1.defaultTagName());
      assertEquals("Y[#1,.w]", radio1.getFormElementName());
      assertEquals("h:4,I6c}T=x?i_Ed>G,", radio1.getComponentId());
      assertEquals("input", string3);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertNotNull(tableRow0);
      assertSame(checkbox0, formElement0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      
      Block block0 = (Block)tableRow0.th();
      assertNotNull(block0);
      assertSame(checkbox0, formElement0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      String string4 = "";
      Table table0 = new Table(radio0, (String) null);
      assertNotNull(table0);
      assertFalse(radio0.equals((Object)radio1));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      
      Table table1 = table0.renderHint("input");
      assertNotNull(table1);
      assertFalse(radio0.equals((Object)radio1));
      assertSame(checkbox0, formElement0);
      assertNotSame(radio0, radio1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("ArMM:7", checkbox0.getComponentId());
      assertEquals(" on the page.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" on the page.", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isEmpty());
      assertNull(radio0.getFormElementName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      
      // Undeclared exception!
      try { 
        radio1.numberInput("Block_1", (CharSequence) "Block_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2321676789089224
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Any any0 = new Any(errorPage0, (CharSequence) null);
      assertNotNull(any0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      
      Checkbox checkbox0 = new Checkbox(any0, "p,In9", "p,In9");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p,In9", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("p,In9", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      
      String string0 = " ";
      Class<CharBuffer> class0 = CharBuffer.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(" ", class0);
      assertNotNull(xmlPullWrapperFactory0);
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      
      Hidden hidden0 = new Hidden(errorPage0, " ", "/$i");
      assertNotNull(hidden0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals(" ", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("/$i", hidden0.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression(" ");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals(" ", actionExpression0.getActionExpression());
      assertEquals(" ", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(" ", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      
      ActionExpression actionExpression1 = actionExpression0.javascript("p,In9");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals(" ", actionExpression0.getActionExpression());
      assertEquals(" ", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("p,In9", actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(" ", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(" ", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(" ", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("p,In9", actionExpression1.getJavascript());
      assertEquals(" ", actionExpression1.toString());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      
      ActionExpression actionExpression2 = actionExpression1.parameter("/$i");
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertEquals(" ", actionExpression0.getActionExpression());
      assertEquals(" ", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("p,In9", actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(" ", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(" ", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(" ", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("p,In9", actionExpression1.getJavascript());
      assertEquals(" ", actionExpression1.toString());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals(" ", actionExpression2.getActionExpression());
      assertEquals("p,In9", actionExpression2.getJavascript());
      assertEquals(1, actionExpression2.length());
      assertEquals(" ", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(" ", actionExpression2.getExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) any0;
      objectArray0[1] = (Object) xmlPullWrapperFactory0;
      ActionExpression actionExpression3 = actionExpression2.parameters(objectArray0);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertEquals(" ", actionExpression0.getActionExpression());
      assertEquals(" ", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("p,In9", actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(" ", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(" ", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(" ", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("p,In9", actionExpression1.getJavascript());
      assertEquals(" ", actionExpression1.toString());
      assertEquals(1, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals(" ", actionExpression2.getActionExpression());
      assertEquals("p,In9", actionExpression2.getJavascript());
      assertEquals(1, actionExpression2.length());
      assertEquals(" ", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(" ", actionExpression2.getExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(" ", actionExpression3.toString());
      assertEquals(1, actionExpression3.length());
      assertNull(actionExpression3.getEvent());
      assertEquals("p,In9", actionExpression3.getJavascript());
      assertEquals(" ", actionExpression3.getExpression());
      assertFalse(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals(" ", actionExpression3.getActionExpression());
      assertEquals(2, objectArray0.length);
      
      Form form0 = new Form(checkbox0, "/$i", actionExpression3);
      assertNotNull(form0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p,In9", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("p,In9", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(" ", actionExpression0.getActionExpression());
      assertEquals(" ", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("p,In9", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(" ", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(" ", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals(" ", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("p,In9", actionExpression1.getJavascript());
      assertEquals(" ", actionExpression1.toString());
      assertEquals(1, actionExpression1.length());
      assertEquals(" ", actionExpression2.getActionExpression());
      assertEquals("p,In9", actionExpression2.getJavascript());
      assertEquals(1, actionExpression2.length());
      assertEquals(" ", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(" ", actionExpression2.getExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(" ", actionExpression3.toString());
      assertEquals(1, actionExpression3.length());
      assertEquals("p,In9", actionExpression3.getJavascript());
      assertEquals(" ", actionExpression3.getExpression());
      assertEquals("action", actionExpression3.getEvent());
      assertFalse(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals(" ", actionExpression3.getActionExpression());
      assertEquals("form", form0.defaultTagName());
      assertEquals("/$i", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals(2, objectArray0.length);
      
      Form form1 = form0.addFormElement(hidden0);
      assertNotNull(form1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p,In9", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("p,In9", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals(" ", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("/$i", hidden0.getComponentId());
      assertEquals(" ", actionExpression0.getActionExpression());
      assertEquals(" ", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("p,In9", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(" ", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(" ", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals(" ", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("p,In9", actionExpression1.getJavascript());
      assertEquals(" ", actionExpression1.toString());
      assertEquals(1, actionExpression1.length());
      assertEquals(" ", actionExpression2.getActionExpression());
      assertEquals("p,In9", actionExpression2.getJavascript());
      assertEquals(1, actionExpression2.length());
      assertEquals(" ", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(" ", actionExpression2.getExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(" ", actionExpression3.toString());
      assertEquals(1, actionExpression3.length());
      assertEquals("p,In9", actionExpression3.getJavascript());
      assertEquals(" ", actionExpression3.getExpression());
      assertEquals("action", actionExpression3.getEvent());
      assertFalse(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals(" ", actionExpression3.getActionExpression());
      assertEquals("form", form0.defaultTagName());
      assertEquals("/$i", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("/$i", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals(2, objectArray0.length);
      
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      assertNotNull(xmlPullParserFactory0);
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullParserFactory0.isValidating());
      
      XmlSerializer xmlSerializer0 = xmlPullParserFactory0.newSerializer();
      assertNotNull(xmlSerializer0);
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullParserFactory0.isValidating());
      assertNull(xmlSerializer0.getNamespace());
      assertEquals(0, xmlSerializer0.getDepth());
      assertNull(xmlSerializer0.getName());
      
      XmlPullWrapperFactory xmlPullWrapperFactory1 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      assertNotNull(xmlPullWrapperFactory1);
      assertFalse(xmlPullWrapperFactory1.equals((Object)xmlPullWrapperFactory0));
      assertNotSame(xmlPullWrapperFactory1, xmlPullWrapperFactory0);
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory1.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory1.isValidating());
      
      Class<Object> class1 = Object.class;
      XmlPullWrapperFactory xmlPullWrapperFactory2 = XmlPullWrapperFactory.newInstance(" ", class1);
      assertNotNull(xmlPullWrapperFactory2);
      assertFalse(xmlPullWrapperFactory2.equals((Object)xmlPullWrapperFactory0));
      assertFalse(xmlPullWrapperFactory2.equals((Object)xmlPullWrapperFactory1));
      assertNotSame(xmlPullWrapperFactory2, xmlPullWrapperFactory0);
      assertNotSame(xmlPullWrapperFactory2, xmlPullWrapperFactory1);
      assertFalse(xmlPullWrapperFactory2.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory2.isValidating());
      
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper(xmlSerializer0, xmlPullWrapperFactory2);
      assertNotNull(staticXmlSerializerWrapper0);
      assertFalse(xmlPullWrapperFactory2.equals((Object)xmlPullWrapperFactory0));
      assertFalse(xmlPullWrapperFactory2.equals((Object)xmlPullWrapperFactory1));
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullParserFactory0.isValidating());
      assertNull(xmlSerializer0.getNamespace());
      assertEquals(0, xmlSerializer0.getDepth());
      assertNull(xmlSerializer0.getName());
      assertFalse(xmlPullWrapperFactory2.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory2.isValidating());
      assertNull(staticXmlSerializerWrapper0.getNamespace());
      assertNull(staticXmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNull(staticXmlSerializerWrapper0.getName());
      assertEquals(0, staticXmlSerializerWrapper0.getDepth());
      
      try { 
        staticXmlSerializerWrapper0.endTag(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected element name null and not ' '
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      Form form0 = new Form("duplicated attributes ");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("duplicated attributes ", form0.getComponentId());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.renderHint("");
      assertNotNull(form1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("duplicated attributes ", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("duplicated attributes ", form1.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      
      ActionExpression actionExpression1 = actionExpression0.setOwner(errorPage0);
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("", actionExpression0.toString());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        form1.dt((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateFormat(".*", errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
