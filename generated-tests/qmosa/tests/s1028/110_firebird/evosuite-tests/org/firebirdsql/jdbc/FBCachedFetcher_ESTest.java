/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:22:55 GMT 2018
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.close();
      int int0 = (-3962);
      byte[][] byteArray0 = new byte[8][6];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-53);
      byteArray1[5] = (byte) (-22);
      byteArray1[6] = (byte)89;
      byteArray1[7] = (byte) (-128);
      byteArray1[8] = (byte)113;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-128);
      byteArray2[1] = (byte) (-53);
      byteArray2[2] = (byte) (-53);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-22);
      byteArray3[1] = (byte) (-128);
      byteArray3[2] = (byte) (-122);
      byteArray3[3] = (byte)113;
      byteArray3[4] = (byte)15;
      byteArray3[5] = (byte) (-122);
      byteArray3[6] = (byte)15;
      byteArray3[7] = (byte) (-118);
      byteArray3[8] = (byte) (-122);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)113;
      byteArray4[1] = (byte) (-118);
      byteArray4[2] = (byte) (-22);
      byteArray4[3] = (byte) (-53);
      byteArray4[4] = (byte) (-128);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte) (-118);
      byteArray5[1] = (byte)113;
      byteArray5[2] = (byte) (-22);
      byteArray5[3] = (byte) (-112);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte) (-22);
      byteArray6[1] = (byte) (-53);
      byteArray6[2] = (byte)1;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[5];
      byteArray7[0] = (byte) (-122);
      byteArray7[1] = (byte)0;
      byteArray7[2] = (byte)113;
      byteArray7[3] = (byte) (-128);
      byteArray7[4] = (byte)1;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[4];
      byteArray8[0] = (byte) (-118);
      byteArray8[1] = (byte) (-128);
      byteArray8[2] = (byte)1;
      byteArray8[3] = (byte) (-112);
      byteArray0[7] = byteArray8;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][8];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)114;
      linkedList0.add(byteArray0);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-8);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)114;
      byteArray2[1] = (byte) (-8);
      byteArray2[2] = (byte)114;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-8);
      byteArray2[5] = (byte)114;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-114);
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.getRowNum();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.isBeforeFirst();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher1.updateRow(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher1.relative((-1626));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.641610153448634
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute((-2187));
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      linkedList0.offer((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.updateRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.relative((-2187));
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2233178617766733
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute((-2187));
      fBCachedFetcher0.relative((-1));
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      linkedList0.offer((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.absolute(1880);
      fBCachedFetcher0.isBeforeFirst();
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3066687254045313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      int int0 = (-2187);
      fBCachedFetcher0.absolute((-2187));
      fBCachedFetcher0.relative((-1));
      fBCachedFetcher0.close();
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.relative((-1));
      linkedList0.offer((byte[][]) null);
      try { 
        fBResultSet0.getDouble((-1));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // The resultSet is not in a row, use next
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.239837078389788
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute((-2187));
      fBCachedFetcher0.relative((-1));
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      linkedList0.offer((byte[][]) null);
      try { 
        fBResultSet0.getDouble((-1));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // The resultSet is not in a row, use next
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute((-2187));
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      linkedList0.offer((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isBeforeFirst();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.isEmpty();
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher1.updateRow((byte[][]) null);
      fBCachedFetcher0.afterLast();
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.50163084525819
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute((-2187));
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      linkedList0.offer((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.isLast();
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6234439027191194
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.last();
      fBCachedFetcher0.last();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.setFetchSize(0);
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.absolute(1);
      linkedList0.offer((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.updateRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher1.isFirst();
      assertFalse(boolean0);
      
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher1.isAfterLast();
      fBCachedFetcher1.updateRow((byte[][]) null);
      fBCachedFetcher1.previous();
      fBCachedFetcher0.isLast();
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      boolean boolean1 = fBCachedFetcher1.first();
      assertTrue(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute((-2187));
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.next();
      linkedList0.offer((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.updateRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.relative((-2187));
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.080115852756261
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.iterator();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.beforeFirst();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      assertEquals(400, int0);
  }
}
