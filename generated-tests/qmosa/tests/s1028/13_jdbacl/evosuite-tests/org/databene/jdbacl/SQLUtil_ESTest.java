/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:23:51 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.jdbc4.Jdbc4SQLXML;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "CHECK ";
      SQLUtil.mutatesDataOrStructure("CHECK ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      SQLUtil.join((String) null, (String) null, stringArray0, (String) null, " NOT", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter index";
      stringArray0[1] = "alter index";
      stringArray0[2] = "alter index";
      stringArray0[3] = "alter index";
      stringArray0[4] = "alter index";
      SQLUtil.leftJoin("alter index", stringArray0, "alter index", "alter index", stringArray0);
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("alter index", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index", (DBSchema) null);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = "wbf 3oGZ^";
      SQLUtil.substituteMarkers("", "wbf 3oGZ^", "");
      SQLUtil.isProcedureCall("wbf 3oGZ^");
      VersionNumber versionNumber0 = VersionNumber.valueOf("P@d");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("EXECUTE STATEMENT", "EXECUTE STATEMENT", versionNumber0);
      String string2 = "]EE[k=h#X::;";
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("]EE[k=h#X::;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'EXECUTE STATEMENT'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "jI,z~h.A.+";
      SQLUtil.removeComments("jI,z~h.A.+");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = "";
      DBSchema dBSchema0 = new DBSchema((String) null);
      dBSchema0.getTable("jI,z~h.A.+");
      int int0 = 359;
      // Undeclared exception!
      try { 
        DBDataType.getInstance(359, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4|<8hVO]?kj&R";
      stringArray0[1] = "4|<8hVO]?kj&R";
      stringArray0[2] = "4|<8hVO]?kj&R";
      stringArray0[3] = "4|<8hVO]?kj&R";
      stringArray0[4] = "4|<8hVO]?kj&R";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("4|<8hVO]?kj&R", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.normalize("drop materialized view", true);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(0, "drop materialized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Js<c*Mu)$E,F$0p0$k", (DBTable) null, 0, "Js<c*Mu)$E,F$0p0$k");
      defaultDBColumn0.setNullable(true);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn1.setFractionDigits(integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("truncate", (DBTable) null, 205, "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      SQLUtil.mutatesStructure(".");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".";
      stringArray0[1] = "drop materialized view, Js<c*Mu)$E,F$0p0$k";
      stringArray0[2] = "Js<c*Mu)$E,F$0p0$k";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "";
      stringArray0[5] = "truncate";
      stringArray0[6] = "drop materialized view";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "drop materialized view";
      stringArray1[3] = "truncate";
      stringArray1[4] = "org.h2.expression.ExpressionVisitor";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "gC<Gl=35", stringArray0, "truncate", "drop materialized view", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%)vq", dBCatalog0);
      String string0 = null;
      dBSchema0.getTable((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%)vq", dBSchema0);
      dBCatalog0.getSequences();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "%)vq.%)vq";
      stringArray1[1] = null;
      stringArray1[2] = "table %)vq";
      stringArray1[3] = "%)vq";
      stringArray1[4] = "%)vq.%)vq";
      stringArray1[5] = "%)vq.%)vq";
      stringArray1[6] = "%)vq.%)vq";
      stringArray1[7] = "!;q(U8J[#xYt1N7";
      String string1 = " AND ";
      stringArray1[8] = " AND ";
      SQLUtil.leftJoin("table %)vq", stringArray0, "%)vq", "%)vq", stringArray1);
      SQLUtil.typeAndName((DBObject) null);
      dBCatalog0.isIdentical((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "";
      boolean boolean0 = true;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      String string1 = "ResultSet type: ";
      dBPrimaryKeyConstraint0.setDoc("ResultSet type: ");
      String string2 = "";
      dBPrimaryKeyConstraint0.setName("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      dBPrimaryKeyConstraint0.setTable(defaultDBTable1);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        defaultDBTable0.requiresProvider((-2020));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("}{,65x^HxS", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%@gEV{P$8", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "HFlQ!eairGf/)'";
      stringArray0[1] = "%@gEV{P$8";
      stringArray0[2] = "%@gEV{P$8";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "}{,65x^HxS", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (HFlQ!eairGf/)', %@gEV{P$8, %@gEV{P$8)", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[3] = "random()";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = "v4gM_uyy";
      stringArray0[6] = "v4gM_uyy";
      stringArray0[7] = "v4gM_uyy";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.innerJoin("7D;ARFm", stringArray0, "v4gM_uyy", (String) null, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "random()");
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      stringBuilder0.append((CharSequence) "random()", 0, 0);
      stringBuilder2.delete(0, 0);
      SQLUtil.addRequiredCondition("/Wq\"?$^d{V)", stringBuilder2);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%)vq");
      DBTrigger dBTrigger0 = new DBTrigger("%)vq", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      dBSchema0.getTable((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%)vq", dBSchema0);
      dBCatalog0.getSequences();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin(" AND ", stringArray0, "%)vq.%)vq", "%)vq.%)vq", stringArray0);
      SQLUtil.typeAndName(defaultDBTable0);
      dBCatalog0.isIdentical((DBObject) null);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.join("select", "ZbWYI=oS]", stringArray0, (String) null, "oeQdkmCG0DtW", stringArray0);
      SQLUtil.mutatesDataOrStructure("insertcheck");
      dBSchema0.getTable("SELECT * FROM %)vq WHERE ");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.177604496545693
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      int int0 = (-519);
      Integer integer0 = new Integer((-519));
      SQLUtil.renderValue(integer0);
      StringBuilder stringBuilder0 = null;
      String string0 = "drop materialized viewinsertcheck";
      String string1 = "org.antlr.runtime.Token";
      SQLUtil.mutatesDataOrStructure("select into");
      SQLUtil.removeComments("rNX'E#Z-!`");
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("9F8m<ZQ31%", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8627104081671435
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[3] = "random()";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = "v4gM_uyy";
      stringArray0[6] = "v4gM_uyy";
      stringArray0[7] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.normalize("random()", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XO_v%?h");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "random()");
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      stringBuilder0.append((CharSequence) "random()", 0, 0);
      stringBuilder2.delete(0, 0);
      SQLUtil.addRequiredCondition("/Wq\"?$^d{V)", stringBuilder2);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "%EV{P$8";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("}{,65x^HxS", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%EV{P$8", dBSchema0);
      String string1 = "9F8m<ZQ31%";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("9F8m<ZQ31%", stringBuilder0);
      SQLUtil.addOptionalCondition("9F8m<ZQ31%", stringBuilder1);
      FromVTI fromVTI0 = new FromVTI();
      FromVTI fromVTI1 = new FromVTI();
      // Undeclared exception!
      try { 
        fromVTI1.makeResultDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.ResultSetNode", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumnNames();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getProperties();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("F2M%'9iB(hs~;veKi-T", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, " = ");
      SQLUtil.addOptionalCondition((String) null, stringBuilder2);
      System.setCurrentTimeMillis(25L);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("4vxRt5S}L#`wYG:)Mz", true);
      assertEquals("4vxRt5S } L # ` wYG :) Mz", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4vxRt5S } L # ` wYG :) Mz";
      stringArray0[1] = "4vxRt5S } L # ` wYG :) Mz";
      stringArray0[2] = "getBoolean(String)";
      stringArray0[3] = "7`;~]:$~TkO";
      stringArray0[4] = "4vxRt5S}L#`wYG:)Mz";
      stringArray0[5] = " OR ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " OR ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("7`;~]:$~TkO", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBUniqueIndex0.isIdentical(dBCatalog0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("UNIQUE ", true, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      String string1 = SQLUtil.ownerDotComponent(dBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(41, "DATA_TYPE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      SQLUtil.parseColumnTypeAndSize("]");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DATA_TYPE";
      stringArray0[1] = "DATA_TYPE";
      stringArray0[2] = "DATA_TYPE";
      stringArray0[3] = "]";
      stringArray0[4] = "DATA_TYPE";
      stringArray0[5] = "]";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DATA_TYPE");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "DATA_TYPE");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = 'k';
      charArray0[2] = 'Z';
      charArray0[3] = '3';
      charArray0[4] = 'z';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition("R85uBe!eB:`(tMmdd%", stringBuilder2);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder3);
      assertEquals("DATA_TYPEDATA_TYPE7kZ3z and R85uBe!eB:`(tMmdd%CONSTRAINT ] ", stringBuilder1.toString());
      
      boolean boolean0 = SQLUtil.isDDL("9~Eq!w0% s)=A");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1761856615603072
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("table null");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "table null";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("table null", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"table null\" ", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.parseColumnTypeAndSize("");
      DBDataType dBDataType0 = DBDataType.getInstance(90, "");
      Integer integer0 = new Integer((-905));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("(-905,-905)", stringBuilder0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.mutatesDataOrStructure("getObject(String,Map)");
      SQLUtil.mutatesStructure("create unique indexselect into");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("create unique indexselect into");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType.getInstance(41, "DATA_TYPE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      SQLUtil.parseColumnTypeAndSize("]");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DATA_TYPE";
      stringArray0[1] = "DATA_TYPE";
      stringArray0[2] = "DATA_TYPE";
      stringArray0[3] = "]";
      stringArray0[4] = "DATA_TYPE";
      stringArray0[5] = "]";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DATA_TYPE");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "DATA_TYPE");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      char[] charArray0 = new char[5];
      charArray0[1] = 'k';
      charArray0[2] = '7';
      charArray0[3] = '3';
      charArray0[4] = 'z';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition("R85uBe!eB:`(tMmdd%", stringBuilder2);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder3);
      System.setCurrentTimeMillis((-1L));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("R& ?8c5d4A", defaultDBTable0, 41, "DATA_TYPE");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder4 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("DATA_TYPEDATA_TYPE\u0000k73z and R85uBe!eB:`(tMmdd%CONSTRAINT ] ", stringBuilder0.toString());
      assertEquals("DATA_TYPEDATA_TYPE\u0000k73z and R85uBe!eB:`(tMmdd%CONSTRAINT ] ", stringBuilder4.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2654), "c*{}1G'jPTW[lnW$Z");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c*{}1G'jPTW[lnW$Z", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("c*{}1G'jPTW[lnW$Z C*{}1G'JPTW[LNW$Z(3) NULL", string0);
      
      dBDataType0.isNumber();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "C*{}1G'JPTW[LNW$Z(3)";
      stringArray0[1] = "9.ook?U6g5#~N";
      stringArray0[2] = "c*{}1G'jPTW[lnW$Z C*{}1G'JPTW[LNW$Z(3) NULL";
      stringArray0[3] = "9.ook?U6g5#~N";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "9.ook?U6g5#~N", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 9.ook?U6g5#~N UNIQUE (C*{}1G'JPTW[LNW$Z(3), 9.ook?U6g5#~N, c*{}1G'jPTW[lnW$Z C*{}1G'JPTW[LNW$Z(3) NULL, 9.ook?U6g5#~N)", string1);
      
      PipedReader pipedReader0 = new PipedReader(188);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string2 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.2337916587064593
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.removeComments("c*{}1G'jPTW[lnW$Z");
      String string0 = SQLUtil.normalize("c*{}1G'jPTW[lnW$Z", false);
      assertEquals("c * { } 1G 'jPTW[lnW$Z'", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[3] = "random()";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = "v4gM_uyy";
      stringArray0[6] = "v4gM_uyy";
      stringArray0[7] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.normalize("random()", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XO_v%?h");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      StringBuffer stringBuffer0 = new StringBuffer("v4gM_uyy");
      stringBuilder1.append(stringBuffer0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("r:z.U", defaultDBTable0, 0, "CONSTRAINT random() UNIQUE (random(), v4gM_uyy, v4gM_uyy, random(), v4gM_uyy, v4gM_uyy, v4gM_uyy, v4gM_uyy, random())");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("getObject(String,Map)");
      SQLUtil.mutatesStructure("getObject(String,Map)");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getObject(String,Map)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[3] = "random()";
      stringArray0[5] = "v4gM_uyy";
      stringArray0[6] = "v4gM_uyy";
      stringArray0[7] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, stringArray0[4], true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table<|#z`u*");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      TableContainer tableContainer0 = new TableContainer("DRe[~3Bw%v.");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("DRe[~3Bw%v.", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table<|#z`u*", false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"create table<|#z`u*\" ", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"<lBklcE~", defaultDBTable0, 2714, "\"<lBklcE~");
      defaultDBTable0.addColumn(defaultDBColumn0);
      defaultDBTable0.getColumnNames();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      String string0 = jdbcDataSource0.toString();
      assertEquals("ds5: url= user=", string0);
      
      jdbcDataSource0.getLogWriter();
      String string1 = SQLUtil.normalize("C.#Nw&v{xA5xIj77", false);
      assertEquals("C.# Nw & v { xA5xIj77", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8506348611123125
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("<|#z`U*");
      assertFalse(boolean1);
      
      String string0 = SQLUtil.normalize("Q(H?hF'&J%KF8g", true);
      assertEquals("Q (H ? hF '&J%KF8g'", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "updatek{";
      stringArray0[1] = "constraint";
      stringArray0[2] = "\" s0>Z^";
      stringArray0[3] = "constraint";
      stringArray0[4] = "updatek{";
      stringArray0[5] = "\" s0>Z^";
      stringArray0[6] = "updatek{";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "updatek{", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("constraint", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(10, "uR>J3");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\" s0>Z^", dBTable0, dBDataType0, integer0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("\" s0>Z^", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.24493002679463532
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.normalize("+*ToL>-wg<:", true);
      String string1 = SQLUtil.removeComments("getobject(str");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create materialized view4vxrt5s}l#`wyg:)mz";
      stringArray0[1] = "/*";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.293615964412733
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean1 = new Boolean("<|#z`U*");
      SQLUtil.normalize(".", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|%";
      stringArray0[1] = ".";
      stringArray0[2] = "%_GRb@j.)NRi";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select into", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (|%, ., %_GRb@j.)NRi) REFERENCES null(|%, ., %_GRb@j.)NRi)", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0488828279013442
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(41, "DATA_TYPE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("DATA_TYPE");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DATA_TYPE";
      stringArray0[1] = "]";
      stringArray0[2] = null;
      stringArray0[3] = "DATA_TYPE";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(41, "DATA_TYPE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      SQLUtil.parseColumnTypeAndSize("]");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DATA_TYPE";
      stringArray0[1] = "DATA_TYPE";
      stringArray0[2] = "DATA_TYPE";
      stringArray0[3] = "]";
      stringArray0[4] = "DATA_TYPE";
      stringArray0[5] = "]";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DATA_TYPE");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "DATA_TYPE");
      stringBuilder0.append(stringBuffer0);
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = 'k';
      charArray0[2] = '7';
      stringBuffer0.append((long) 41);
      stringBuffer0.setLength(2356);
      charArray0[3] = '3';
      charArray0[3] = 'z';
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ] PRIMARY KEY (DATA_TYPE, DATA_TYPE, DATA_TYPE, ], DATA_TYPE, ])", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("chec");
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.parseColumnTypeAndSize("CLOB");
      DBDataType dBDataType0 = DBDataType.getInstance(518, "CLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|j", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("|j CLOB NULL", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execz*[~qaf^*.<@io:~q", false, "delete", "select");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execz*[~qaf^*.<@io:~q");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fC5kci|jhq(l|)+[{");
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "oct/3$&j< x0?", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, printWriter0);
      SQLUtil.mutatesDataOrStructure("zAS");
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6330395116644678
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.isProcedureCall("z*[~QaF^*.<@IO:~q");
      SQLUtil.normalize("z*[~QaF^*.<@IO:~q", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = "renamec!ged=qs]d[ie//";
      SQLUtil.normalize("renamec!ged=qs]d[ie//", false);
      String string1 = "MPP_K&I|HD;7X&6~%";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("z * [ ~ QaF ^ *.< @ IO : ~ q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.2868359830561607
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.normalize("4vxRt5S}L#`wYG:)Mz", false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("0-(]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 0-(]
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      boolean boolean0 = false;
      File file0 = MockFile.createTempFile("null.null, null.null, null., null.null", "/");
      file0.delete();
      SQLUtil.normalize("~r;[S,Ne5+icpBpnBU)", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "W\"1t9Np");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // W\"1t9Np
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "V>hrX_<tv/N6|q8");
      SQLUtil.isProcedureCall("calldelete");
      SQLUtil.normalize("execute9gzzge+", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.vti.Restriction");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.normalize("insert9gzzge+", true);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("execute9gzzge +");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8200759753606213
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.isProcedureCall("executedelete");
      SQLUtil.normalize("p*l,0Oe+)", false);
      SQLUtil.removeComments("executedelete");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p*l,0Oe+)");
      SQLUtil.mutatesStructure("executedelete");
      SQLUtil.isQuery("p * l, 0Oe +)");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      List<DBCheckConstraint> list0 = new GenericDescriptorList();
      SQLUtil.isQuery("select i");
      String string0 = SQLUtil.removeComments("%M");
      assertEquals("%M", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("delete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "delete";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "delete", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      dBUniqueIndex0.setTable(defaultDBTable0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("getOnceResultSet", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "delete", false, stringArray0);
      System.setCurrentTimeMillis(50004);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.3379013538881526
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Mpp_k&i|HD;7x&6~%");
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "WRkqv}q", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "Mpp_k&i|HD;7x&6~%", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("WRkqv}q", true, dBUniqueConstraint0);
      dBUniqueIndex0.setTable(defaultDBTable0);
      dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "WRkqv}q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Mpp_k&i|HD;7x&6~%", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "Mpp_k&i|HD;7x&6~%", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("WRkqv}q");
      StringBuilder stringBuilder1 = stringBuilder0.insert(7, '/');
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder2);
      assertEquals("WRkqv}q/CONSTRAINT WRkqv}q ", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectv@y\" pzhq~g!e;");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8137793150591919
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Mpp_k&i|HD;7x&6~%");
      String string0 = SQLUtil.normalize("DXoNTEVYkF\"WaQ^?d", true);
      assertEquals("DXoNTEVYkF \"WaQ^?d\"", string0);
      
      SQLUtil.removeComments("h2.delayWrongPasswordMax");
      SQLUtil.isDML("DXoNTEVYkF\"WaQ^?d");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      SQLUtil.removeComments(";;(3JH=ioWB,O");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(";;(3JH=ioWB,O");
      assertNull(boolean0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string1);
      assertEquals("table null", string1);
  }
}
