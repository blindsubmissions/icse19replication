/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:22:04 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.actions.ImportFolderStructureAction;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Composite;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.awt.image.VolatileImage;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.FileDescriptor;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.TreeSet;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicSliderUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemVariable;
import org.apache.xalan.templates.ElemVariablePsuedo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.putClientProperty((Object) null, (Object) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getActionListeners();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "year");
      jDayChooser_DecoratorButton0.setLayout(jSpinner_NumberEditor0);
      jDayChooser_DecoratorButton0.createVolatileImage(0, 12);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("K%A'X0vl}<he4", (VetoableChangeListener) null);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getComponentPopupMenu();
      Color color0 = Color.getColor("jPT", 1473);
      jDayChooser0.sundayForeground = color0;
      jDayChooser0.setMonth(11);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color1.getBlue());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.522651873161454
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8832, false, jDayChooser0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      int int0 = (-405);
      jDayChooser0.setDebugGraphicsOptions((-405));
      KeyEvent keyEvent0 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(914);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      ComponentOrientation componentOrientation0 = jDayChooser1.getComponentOrientation();
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      jDayChooser0.list();
      jDayChooser0.setFocusable(false);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      jDayChooser0.setFocus();
      jDayChooser0.init();
      jDayChooser1.setEnabled(false);
      jDayChooser1.getWeekdayForeground();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getAlignmentX();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getWeekdayForeground();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setYear(14);
      jDayChooser0.getLocale();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      int int0 = (-237);
      int int1 = (-1888);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-237), (-237), (-237), (-1888), (-1888));
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getActualMinimum((-1888));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1888
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-5344));
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 3415, "day", (-5344));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemVariablePsuedo elemVariablePsuedo0 = new ElemVariablePsuedo();
      ElemVariable elemVariable0 = new ElemVariable(elemVariablePsuedo0);
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = null;
      try {
        imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder("day", "day");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getDayPanel();
      int int0 = 0;
      TreeSet<AWTKeyStroke> treeSet0 = new TreeSet<AWTKeyStroke>();
      char char0 = ')';
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(')');
      // Undeclared exception!
      try { 
        treeSet0.add(aWTKeyStroke0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.KeyStroke cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.741997423969063
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      jDayChooser0.setFont(font0);
      jDayChooser0.getComponentPopupMenu();
      Color.getColor("day", (-1104));
      jDayChooser0.setMonth(11);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.putClientProperty((Object) null, (Object) null);
      jDayChooser0.isDecorationBackgroundVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getActionListeners();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      jDayChooser_DecoratorButton0.createVolatileImage(0, 12);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.setMaxSelectableDate((Date) null);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, (-2050L), 0, 1617, '2', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.852922686243172
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.putClientProperty((Object) null, (Object) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.isDecorationBackgroundVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getActionListeners();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "year");
      jDayChooser_DecoratorButton0.setLayout(jSpinner_NumberEditor0);
      jDayChooser_DecoratorButton0.createVolatileImage(0, 12);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDecorationBordersVisible(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.decorationBordersVisible = true;
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDay((-2893));
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.setDecorationBordersVisible(false);
      float[] floatArray0 = new float[0];
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setWeekOfYearVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1064), true, jDayChooser0);
      Object object0 = new Object();
      focusEvent0.setSource(object0);
      focusEvent0.setSource((Object) null);
      jDayChooser0.focusGained(focusEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7252378164437348
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus(true);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      Locale locale0 = Locale.ITALY;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getActionListeners();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "day");
      jDayChooser_DecoratorButton0.setLayout(jSpinner_NumberEditor0);
      jDayChooser_DecoratorButton0.createVolatileImage(12, 233);
      jDayChooser_DecoratorButton0.isFocusPainted();
      jDayChooser0.setDecorationBordersVisible(false);
      MockDate mockDate0 = new MockDate(45, 515, 21, 515, (-2177), 5184);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus(true);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.CHINA;
      locale0.getDisplayCountry();
      locale0.getDisplayVariant(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4130), 1, (-4130));
      mockGregorianCalendar0.getDisplayNames(1, 1, locale1);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser_DecoratorButton0.addMouseListener(defaultCaret0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMapViewer jMapViewer0 = new JMapViewer();
      Point point0 = jMapViewer0.getCenter();
      jDayChooser0.getConditionForKeyStroke((KeyStroke) null);
      jDayChooser0.getLocation(point0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDayBordersVisible(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setMaxSelectableDate(date1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9685051242267475
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay((-730));
      SystemColor systemColor0 = SystemColor.windowText;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setWeekdayForeground(systemColor0);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser1.getMinSelectableDate();
      jDayChooser1.isWeekOfYearVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 11, true, jDayChooser1);
      Object object0 = new Object();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, (-730));
      Calendar calendar0 = MockCalendar.getInstance();
      focusEvent1.setSource(calendar0);
      focusEvent1.setSource((Object) null);
      FocusEvent focusEvent2 = new FocusEvent(jDayChooser1, 8945);
      jDayChooser0.focusGained(focusEvent2);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser1.setYearChooser(jYearChooser0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMonth((-1204));
      jDayChooser0.setMonth((-1204));
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7492600518195336
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus(true);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.CHINA;
      locale0.getDisplayCountry();
      locale0.getDisplayVariant(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4130), 1, (-4130));
      mockGregorianCalendar0.getDisplayNames(1, 1, locale1);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setMaxDayCharacters(2001);
      jDayChooser0.setDay(2258);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.01031686038804
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.putClientProperty((Object) null, (Object) null);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CHINA;
      Locale locale1 = JComponent.getDefaultLocale();
      locale1.getDisplayCountry();
      locale1.getDisplayVariant((Locale) null);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDecorationBordersVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getDecorationBackgroundColor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3139, 15, (-435));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setMonth(15);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser_DecoratorButton0.addMouseListener(defaultCaret0);
      jDayChooser2.setSelectableDateRange((Date) null, date0);
      jDayChooser1.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser1.getMaxDayCharacters());
  }
}
