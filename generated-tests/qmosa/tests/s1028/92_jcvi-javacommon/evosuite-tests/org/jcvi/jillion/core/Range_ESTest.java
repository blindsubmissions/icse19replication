/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:34:35 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.36274100073709
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2291L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2291L), (-2291L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2291L), (-2291L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      // Undeclared exception!
      try { 
        range1.split((-2291L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2444926304072963
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.intersects(range1);
      range0.toString();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-452L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      Range range2 = Range.ofLength(0L);
      range2.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2046L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.copy();
      range_Builder0.build();
      Range.of((-2815L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("n9():|Ud?w&,r#s.<", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse n9():|Ud?w&,r#s.< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.173768833930095
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of((-2344L), 0L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.split((-2344L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.8501476017100575
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range1.intersection(range0);
      range_Builder0.expandEnd((-52L));
      Range range3 = Range.of(0L);
      range3.getEnd();
      Range.Builder range_Builder2 = range_Builder1.copy();
      range3.isEmpty();
      Range.of((-4194L), (-52L));
      range0.getEnd();
      range3.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem1);
      range3.isEmpty();
      range2.endsBefore(range0);
      range_Builder2.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      range3.isEmpty();
      range_Builder0.shift((-1L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-3962L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      String string0 = "number of entries must be <= Integer.MAX_VALUE";
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be <= Integer.MAX_VALUE", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be <= Integer.MAX_VALUE into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8712010109078947
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-189L), (-189L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.getEnd(range_CoordinateSystem0);
      range0.intersection(range1);
      range_Builder0.build();
      range_Builder1.expandEnd(0L);
      Range.Comparators.values();
      range0.getLength();
      range_Builder0.expandEnd(0L);
      range_Builder1.build();
      Range.of(2147483647L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(0L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(919L);
      long long1 = 97L;
      range_Builder0.expandBegin(97L);
      range_Builder0.shift(919L);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3032978684463252
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.intersects(range1);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      range_Builder2.shift(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(1921L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.313719389493896
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.intersects(range1);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      range_Builder2.shift(4294967295L);
      Range range3 = Range.ofLength(1L);
      range3.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 0 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 0 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.7956369197388526
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      range1.intersection(range0);
      range_Builder0.expandEnd((-52L));
      Range range2 = Range.of(0L);
      range2.getEnd();
      range_Builder1.copy();
      range2.isEmpty();
      Range.of((-4194L), (-52L));
      range0.getEnd();
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range2.isEmpty();
      Range range3 = Range.of(292L);
      range2.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range1.equals(range_CoordinateSystem2);
      range3.getBegin();
      range2.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("0B", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.21404986698057
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift((-2815L));
      range_Builder2.shift((-141L));
      range_Builder1.contractEnd((-2815L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 693L, 9223372036854775807L);
      range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4647731684448373
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-189L), (-189L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of((-189L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range2.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem2);
      range2.iterator();
      // Undeclared exception!
      try { 
        Range.of((-27L), (-188L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5560109564916424
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 0L, 3171L);
      Range range2 = range0.intersection(range1);
      range2.getEnd(range_CoordinateSystem0);
      range1.getBegin();
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem4);
      range1.complement(range2);
      Object object0 = new Object();
      range1.equals(object0);
      range2.toString(range_CoordinateSystem3);
      range1.intersects(range1);
      Range.ofLength(1615L);
      range0.getBegin();
      Range range3 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2904L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.767284948060616
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range1.intersection(range0);
      range_Builder0.expandEnd((-52L));
      Range range3 = Range.of(0L);
      range3.getEnd();
      range_Builder1.copy();
      range3.isEmpty();
      Range.of((-4194L), (-52L));
      range0.getEnd();
      range3.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range4 = range3.intersection(range1);
      range1.getBegin(range_CoordinateSystem0);
      range0.equals(range2);
      Range.Comparators.values();
      Range.of(0L);
      range3.complement(range4);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 0L);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5154102470008484
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.intersects(range1);
      range0.toString();
      range0.getEnd();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-1669L));
      range3.getBegin(range_CoordinateSystem0);
      range2.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.of(4294967295L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-51L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8389889331546985
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3043496308016627
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift(9223372036854775807L);
      range_Builder0.copy();
      range_Builder0.build();
      Range.of((-2815L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("M1EZuXJX!:Qy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.M1EZuXJX!:Qy
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.554045607355468
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.intersects(range1);
      range0.toString();
      range0.getEnd();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(4294967295L);
      Range range2 = range1.intersection(range0);
      range2.startsBefore(range1);
      Range range3 = Range.of((-1669L));
      range3.getBegin(range_CoordinateSystem0);
      range2.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.of(4294967295L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-51L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2127420325498606
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "number of entries must be <= Integer.MAX_VALUE";
      Range range0 = Range.of(0L, 1125L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be <= Integer.MAX_VALUE", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be <= Integer.MAX_VALUE into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.000596434286577
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      range1.intersection(range0);
      Range.Builder range_Builder2 = range_Builder0.expandEnd((-52L));
      Range range2 = Range.of(0L);
      range2.getEnd();
      range_Builder2.shift(127L);
      range_Builder1.copy();
      range2.isEmpty();
      Range range3 = Range.of((-4194L), (-52L));
      range0.getEnd();
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range2.isEmpty();
      Range range4 = Range.of(292L);
      range2.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range3.getLength();
      range_Builder2.expandEnd(32767L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.build();
      Range range5 = Range.of((-52L));
      Range.Builder range_Builder4 = new Range.Builder(range5);
      // Undeclared exception!
      try { 
        range_Builder4.contractBegin(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3254283597131136
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.build();
      Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("M1EZuXJX!:Qy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.M1EZuXJX!:Qy
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.992196960885483
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9889840465642794
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range1.intersection(range0);
      range_Builder0.expandEnd((-52L));
      Range range3 = Range.of(0L);
      range3.getEnd();
      range_Builder1.copy();
      range3.isEmpty();
      Range.of((-4194L), (-52L));
      range2.getBegin(range_CoordinateSystem0);
      range3.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range3.isEmpty();
      Range range4 = Range.of(292L);
      range3.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range1.equals(range_CoordinateSystem2);
      range4.getBegin();
      range3.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.355958887690431
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift((-2815L));
      range_Builder2.shift((-141L));
      range_Builder1.contractEnd((-2815L));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 2147483647L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5488323974765965
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.intersects(range1);
      range0.toString();
      range0.getEnd();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range2 = Range.of((-1669L));
      range2.getBegin(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range range3 = Range.of(4294967295L);
      range3.isSubRangeOf(range2);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-51L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.5837981446894647
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 0L, 3171L);
      Range range2 = range0.intersection(range1);
      range2.getEnd(range_CoordinateSystem0);
      range1.getBegin();
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem4);
      range1.complement(range2);
      Object object0 = new Object();
      range1.equals(object0);
      range2.toString(range_CoordinateSystem3);
      range0.equals("[ 0 .. 3171 ]/0B");
      Range.ofLength(1615L);
      range0.getBegin();
      Range range3 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 693L, 9223372036854775760L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6892942754393676
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(4294967270L, 4294967270L);
      range0.toString();
      Range range1 = Range.of(4294967270L, 4294967270L);
      range0.intersects(range1);
      range0.toString();
      range0.getEnd();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 4294967282L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 4294967270L, 4294967270L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-1669L));
      range3.getBegin(range_CoordinateSystem0);
      range2.equals(range_CoordinateSystem0);
      Range.of(4294967270L);
      range0.complement(range1);
      Range range4 = Range.of(range_CoordinateSystem0, (-2556L), 1L);
      range3.getEnd();
      Range.parseRange("[ 4294967270 .. 4294967270 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem1, (-1669L), 0L);
      range4.intersects(range5);
      range1.endsBefore(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("9F8m<ZQ31%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.9F8m<ZQ31%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4752722019489446
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.intersects(range1);
      range0.toString();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range range2 = Range.parseRange("[ 4294967295 .. 4294967295 ]/0B", range_CoordinateSystem0);
      range2.getLength();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.build();
      Range range3 = Range.of(4294967295L);
      Range.Builder range_Builder3 = new Range.Builder(range3);
      Range.Builder range_Builder4 = range_Builder0.contractBegin(255L);
      assertSame(range_Builder4, range_Builder1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.276097603167097
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.shift((-141L));
      range_Builder1.contractEnd((-2808L));
      range0.spliterator();
      Range range1 = null;
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.040974433841911
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      Range range0 = Range.of(4064L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0803063585634773
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 693L, 9223372036854775760L);
      Range range1 = Range.ofLength(693L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9174329732922155
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 693L, 3919L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 693L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1634240504234032
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Comparators.values();
      Range.Comparators.values();
      long long0 = 9223372034707292161L;
      Range.of(9223372034707292161L, 9223372034707292161L);
      Range.Comparators.values();
      long long1 = new Long(9223372034707292161L);
      Range.Builder range_Builder0 = new Range.Builder(9223372034707292161L);
      range_Builder0.expandEnd(9223372034707292161L);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3284718813307355
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      long long0 = 9223372036854775807L;
      range_Builder0.shift(9223372036854775807L);
      range_Builder0.copy();
      Range range0 = Range.of(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, (-726L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -727 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.572868688224784
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2904L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(1L, long0);
      
      range0.isSubRangeOf(range1);
      range0.getBegin();
      range0.equals(range_CoordinateSystem0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8892632916692698
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 693L, 9223372036854775760L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4739342267958495
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-339L), 127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.ofLength(821L);
      Range.Builder range_Builder0 = new Range.Builder((-187L), 821L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1136L));
      Range.Comparators.values();
      Range.Builder range_Builder2 = range_Builder1.expandEnd(821L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.build();
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 9223372036854772637L);
      // Undeclared exception!
      try { 
        range1.split(9223372032559808538L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -8589934540 would make range [9223372032559808539 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0146300137242736
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-291L), (-291L));
      Range range0 = Range.of(936L);
      List<Range> list0 = range0.split(936L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7208071565156486
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of((-868L));
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(43L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-274L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-868L), 3132L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem2);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder2 = new Range.Builder((-274L), 3131L);
      range_Builder1.build();
      range_Builder2.expandEnd(9223372036854775050L);
      Range.Comparators.values();
      range2.getLength();
      range_Builder0.expandEnd(528L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 4143L, 1201L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9681239800897954
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 845L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 127L, 4294967270L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }
}
