/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 18:12:27 GMT 2018
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.awt.Point;
import java.io.PrintStream;
import java.net.Proxy;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.Hashtable;
import messages.global.GlobalChatMsg;
import messages.round.BombMoveMsg;
import messages.round.PlayerStateMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("client.ClientBomb", "}_VPuu!`$L,?F", "client.ClientBomb", (-1));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("}_VPuu!`$L,?F", sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("3", "client.ClientBomb", sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("kds<mxnv", "", "kds<mxnv", (-1));
      stackTraceElementArray0[4] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement(">TZ+d1", "", "}_VPuu!`$L,?F", 610);
      stackTraceElementArray0[5] = stackTraceElement2;
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLFeatureNotSupportedException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      String string0 = "$+?:DC";
      int int0 = 0;
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string0, int0, throwable0);
      int[] intArray0 = new int[2];
      intArray0[1] = int0;
      boolean boolean0 = true;
      BombMoveMsg bombMoveMsg0 = new BombMoveMsg(int0, intArray0, intArray0, boolean0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      System.setCurrentTimeMillis(intArray0[1]);
      clientMsgReceiver0.processMsg(bombMoveMsg0);
      long long0 = 262L;
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      BomberClient.getInstance();
      BomberClient bomberClient1 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, bomberClient1);
      String string0 = "Unknown message type: ";
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg(string0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
