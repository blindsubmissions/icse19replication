/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:39:17 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 468);
      services_HTTP_Result0.Error = "";
      services_HTTP_Result0.works = true;
      services_HTTP_Result0.reset();
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("**URL Mal Form\u00E9** (", 0);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.HTTP_Result services_HTTP_Result1 = new Services.HTTP_Result();
      assertEquals(0, services_HTTP_Result1.code);
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertFalse(services_HTTP_Result1.works);
      assertEquals(0L, services_HTTP_Result1.time);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("{`]", 1004);
      Services services0 = new Services();
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: {`]) **.\n****", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3(" octets\n", (-3992));
      services_SIMPLE_Result0.Error = " octets\n";
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.time = (long) (-3992);
      services_SIMPLE_Result0.reset();
      Services.testPOP3(" octets\n", (-1));
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      Services.testSMTP("", (-1814));
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      String string1 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 0);
      services_SIMPLE_Result0.time = (long) 0;
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.works = false;
      services_SIMPLE_Result0.works = false;
      services_SIMPLE_Result0.works = true;
      services_SIMPLE_Result0.toString();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**** Resultat : \n** Fonctionnement : true\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7505a2ce) **.\n****");
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      services_SIMPLE_Result1.reset();
      services_SIMPLE_Result1.works = false;
      Services.testHTTP("", 0);
      services_SIMPLE_Result0.reset();
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.testHTTP("", 0);
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testPOP3("#2zZ", (-774));
      Services.testHTTPS("", 1);
      services_SIMPLE_Result2.reset();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("**** Resultat : \n** Fonctionnement : true\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7505a2ce) **.\n****", 0);
      assertEquals(0L, services_HTTP_Result1.time);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("&]eq7azw93}+~Qcik,", 1);
      services_HTTP_Result0.works = true;
      services_HTTP_Result0.reset();
      services_HTTP_Result0.reset();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://&]eq7azw93}+~Qcik,:1");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "&]eq7azw93}+~Qcik,");
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("&]eq7azw93}+~Qcik,", 1);
      assertTrue(services_HTTP_Result1.works);
      assertEquals(19, services_HTTP_Result1.page_weight);
      
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS("d.GIFJvF", 0);
      assertEquals(0, services_HTTP_Result2.page_weight);
      assertFalse(services_HTTP_Result2.works);
      assertEquals(0L, services_HTTP_Result2.time);
      assertEquals(0, services_HTTP_Result2.code);
  }
}
