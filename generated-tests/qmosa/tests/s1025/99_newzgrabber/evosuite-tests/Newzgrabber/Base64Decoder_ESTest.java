/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:39:25 GMT 2018
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import javax.swing.DebugGraphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The following are the lines from the base64 decode");
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) null, false);
      PrintStream printStream0 = DebugGraphics.logStream();
      bufferedCustomInputStream0.close();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#y%-.^7/D]Ww!%Bj\"F");
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      bufferedCustomInputStream0.ready();
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      base64Decoder1.decodeStream();
      Newzgrabber.verbose = true;
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder1.decodeStream();
      assertNotSame(base64Decoder1, base64Decoder0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.available();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(sequenceInputStream0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      Newzgrabber.verbose = false;
      sequenceInputStream0.read();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.2711893730418441
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(sequenceInputStream0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      bufferedCustomInputStream0.INCR = 1431655765;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(3L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.167944147734173
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(sequenceInputStream0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)10, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream1, pipedOutputStream0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/|480Adding download object for index ");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)7;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(sequenceInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)10, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream1, (OutputStream) null);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      MockFile mockFile0 = new MockFile("Adding download object for index ", "Adding download object for index ");
      File file0 = MockFile.createTempFile("|48", "Adding download object for index ");
      file0.deleteOnExit();
      MockFile mockFile1 = new MockFile(file0, "%j!9mGx");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "The following are the lines from the base64 decode", (File) mockFile1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
