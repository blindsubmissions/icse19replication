/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:23:35 GMT 2018
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.LinkedHashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.OneRAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.misc.InputMappedClassifier;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.KDTree;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.stemmerTipText();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("happens", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_minWordP = (-729.5883398145014);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      naiveBayesMultinomialText0.m_periodicP = 30;
      costSensitiveClassifier0.setSeed(30);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.stemmerTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getRevision();
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.m_periodicP = 180;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("y9\"{kp-zo@#fdP");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setMinWordFrequency(1.7976931348623157E308);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.listOptions();
      assertEquals(1.7976931348623157E308, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|!$-]a)";
      stringArray0[1] = "03tGr?8ak";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Stemmer stemmer0 = naiveBayesMultinomialText1.getStemmer();
      naiveBayesMultinomialText0.m_stemmer = stemmer0;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.toString();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      DenseInstance denseInstance0 = new DenseInstance(Double.NEGATIVE_INFINITY, doubleArray0);
      try { 
        naiveBayesMultinomialText1.updateClassifier(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getUseStopList();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[1] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[2] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[3] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[4] = "";
      stringArray0[5] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[6] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[7] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[8] = "If true then document length is normalized according to the settings for norm and lnorm";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.m_lnorm = 2578.34871574483;
      naiveBayesMultinomialText0.setNorm(2578.34871574483);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setPeriodicPruning(1561);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.getRevision();
      assertEquals(1561, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "TL9%h.a7'Te.}JE";
      stringArray0[1] = "v;`YYjmcWQUDIwO;qL";
      stringArray0[2] = "</DEFINITION>\n";
      alphabeticTokenizer0.listOptions();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) lovinsStemmer0;
      stringArray0[3] = "norm";
      naiveBayesMultinomialText0.setLNorm(4.0);
      stringArray0[4] = "j*zs)z5~tDQu$RH5A6o";
      stringArray0[5] = "X]";
      stringArray0[6] = "@L:|61}V4GkQIB";
      alphabeticTokenizer0.getOptions();
      stringArray0[7] = "MIT Press";
      naiveBayesMultinomialText0.m_lnorm = 1313.728388438;
      stringArray0[8] = "`fTf-%dY";
      Tokenizer.tokenize((Tokenizer) alphabeticTokenizer0, stringArray0);
      naiveBayesMultinomialText0.setTokenizer(alphabeticTokenizer0);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(1313.728388438, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "IKA\\rFqExWVVn='x";
      stringArray0[2] = "*Xr#f\"`If0";
      stringArray0[3] = "?,kE(95K)f";
      stringArray0[4] = "&,+OS:9dd+Ne{&";
      NaiveBayesMultinomialText.main(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.useStopListTipText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities0 = oneRAttributeEval0.getCapabilities();
      String[] stringArray0 = new String[0];
      OneRAttributeEval.main(stringArray0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.getData();
      naiveBayesMultinomialText0.m_data = null;
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.periodicPruningTipText();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.tokenizerTipText();
      Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> map0 = naiveBayesMultinomialText0.m_probOfWordGivenClass;
      naiveBayesMultinomialText0.m_probOfWordGivenClass = null;
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setPeriodicPruning(569);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getRevision();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9122";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getStemmer();
      assertEquals(0.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("");
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setUseStopList(true);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 1.0;
      naiveBayesMultinomialText0.setUseStopList(false);
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      naiveBayesMultinomialText0.reset();
      String string2 = naiveBayesMultinomialText0.useStopListTipText();
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("If true, ignores all words that are on the stoplist.", string2);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("]n");
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.pruneDictionary();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("The LNorm to use for document length normalization.", string0);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9401243333353366
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setLNorm((-724.0));
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.toString();
      assertEquals((-724.0), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "=lZ]NpCv Ql;";
      stringArray0[2] = "";
      naiveBayesMultinomialText0.toString();
      stringArray0[3] = "";
      naiveBayesMultinomialText0.setMinWordFrequency(14.0);
      stringArray0[4] = "-W";
      NaiveBayesMultinomialText.main(stringArray0);
      stringArray0[5] = "IB1 instance-based classifier\nusing ";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      Random.setNextRandom((-542));
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals(14.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2536462828828747
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_minWordP = 5.0;
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.834078253568606
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "06";
      stringArray0[2] = "-stoplist";
      stringArray0[3] = "_[";
      stringArray0[4] = "DT*3nA1";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setUseStopList(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EH");
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getOptions();
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1527794878854243
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("Help requested.\n", "Yl8@~Vjc8.6Nvjnp");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getOptions();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1657090092928195
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.toString();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.getCapabilities();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.toString();
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getRevision();
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.m_periodicP = 178;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("y9\"{kp-zo@#fdP");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = 178;
      intArray0[5] = (-3067);
      intArray0[6] = 178;
      intArray0[7] = 178;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8387986929374451
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText1.setNormalizeDocLength(true);
      testInstances0.setNumInstancesRelational((-1));
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText1.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.toString();
  }
}
