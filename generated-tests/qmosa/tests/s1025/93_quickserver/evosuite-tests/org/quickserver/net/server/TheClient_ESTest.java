/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:41:06 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Socket;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout(0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setAuthenticator((Authenticator) null);
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEvent(clientEvent0);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.setTimeout(0);
      theClient0.setCommunicationLogging(false);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientData();
      theClient0.setTimeout((-829));
      assertEquals((-829), theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.setTimeoutMsg("fhh~y)y\u0004\":\"m]l^VY");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTrusted();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getClientObjectHandler();
      theClient0.getClientData();
      assertTrue(theClient0.getTrusted());
      
      theClient1.getClientEventHandler();
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setTimeoutMsg("3>@v]gt978>");
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeoutMsg("7.>}{Lrm@[m>qgw");
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getAuthenticator();
      theClient0.getTimeoutMsg();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.toString();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setMaxConnectionMsg("org.quickserver.net.server.TheClient");
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      theClient0.setTrusted(true);
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.getTimeout();
      theClient0.getTimeout();
      theClient0.getClientWriteHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      assertFalse(theClient0.getCommunicationLogging());
      
      CommandHandler commandHandler0 = new CommandHandler();
      theClient1.setClientEventHandler(commandHandler0);
      QuickServer quickServer0 = new QuickServer("", 0);
      theClient1.setServer(quickServer0);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      int int0 = theClient1.getMaxAuthTry();
      assertTrue(theClient1.getCommunicationLogging());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("hmp}E'W-c");
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(theClient0.getTrusted());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient0.getSocket();
      theClient1.setSocket((Socket) null);
      ClientEvent clientEvent0 = theClient1.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTrusted(true);
      theClient0.getSocket();
      theClient0.setTrusted(true);
      theClient0.setSocket((Socket) null);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setSocket((Socket) null);
      theClient0.getSocketChannel();
      theClient0.getClientData();
      theClient0.setSocket((Socket) null);
      TheClient theClient2 = new TheClient();
      theClient2.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient2.setSocket((Socket) null);
      theClient0.getClientEventHandler();
      theClient2.getClientWriteHandler();
      assertFalse(theClient2.getTrusted());
      
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getSocketChannel();
      theClient0.setSocket((Socket) null);
      theClient0.setCommunicationLogging(true);
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientCommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-1));
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.setTimeout((-1));
      theClient0.getClientEventHandler();
      theClient0.getTrusted();
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTry((-1));
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientCommandHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTimeout((-1));
      int int0 = theClient0.getTimeout();
      assertEquals((-1), theClient0.getMaxAuthTry());
      assertEquals((-1), int0);
  }
}
