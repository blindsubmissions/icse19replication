/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:30:02 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("*X=]vHpM#{`]MF");
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-1481));
      advancedSettings0.setBacklog(70);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals("*X=]vHpM#{`]MF", advancedSettings0.getClientIdentifier());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize(3497);
      advancedSettings0.setQSObjectPoolMaker("{s4Bj*N]'t68Gz");
      advancedSettings0.setMaxThreadsForNioWrite(287);
      advancedSettings0.setClientSocketReceiveBufferSize((-536));
      advancedSettings0.setMaxThreadsForNioWrite((-1134));
      advancedSettings0.setClientSocketReceiveBufferSize((-536));
      advancedSettings0.setClientIdentifier("</max-threads-for-nio-write>\n");
      advancedSettings0.setQSObjectPoolMaker("</max-threads-for-nio-write>\n");
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setMaxThreadsForNioWrite(1595);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setMaxThreadsForNioWrite(1595);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(1595);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("</max-threads-for-nio-write>\n");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getBacklog();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTcpNoDelay();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("#-BO#\"P0BfoQ\"\"<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #-BO#\"P0BfoQ\"\"<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getCharset();
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-2073));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesBandwidth((-487));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-487));
      advancedSettings0.setBacklog(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTrafficClass("");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize(65536);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(65536, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setMaxThreadsForNioWrite((-2462));
      advancedSettings0.setClientSocketReceiveBufferSize((-2462));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.toXML("hQMs6k;oO!");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("hQMs6k;oO!");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // hQMs6k;oO!
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("QNz12$1F");
      advancedSettings0.setBacklog((-696));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketReceiveBufferSize(48);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency((-696));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(586);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setDebugNonBlockingMode(false);
      assertEquals(586, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(547);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2829507132875912
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.toXML("\t<byte-buffer-size>");
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize((-727));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.toXML("</max-threads-for-nio-write>\n");
      advancedSettings0.setSocketLinger(259);
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog((-1));
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setMaxThreadsForNioWrite((-1028));
      advancedSettings0.setClientSocketTrafficClass("9q HW}!oG3fqd(+\">NV");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesLatency((-1028));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals(0, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "Q+";
      advancedSettings0.setClientSocketTcpNoDelay(false);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Q+");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Q+
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setBacklog(1);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setQSObjectPoolMaker("?~ CEL<-|`f>xgK**8*");
      advancedSettings0.setQSObjectPoolMaker("z_AK&-@d+y!n6");
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.107972275978608
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(659);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTrafficClass(">");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(270);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(270, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, int0);
  }
}
