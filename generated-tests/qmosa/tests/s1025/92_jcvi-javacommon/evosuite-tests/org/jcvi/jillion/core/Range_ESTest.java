/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:50:47 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      long long0 = (-1L);
      Range range1 = Range.of((-1L));
      range1.endsBefore(range0);
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("]@>|Ze9V+#E&2=\"Zu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.]@>|Ze9V+#E&2=\"Zu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.912023005428145
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(681L, 681L);
      Range range1 = Range.of(681L);
      Range range2 = range1.intersection(range0);
      range2.intersects(range0);
      range2.iterator();
      Range range3 = Range.ofLength(681L);
      range3.getLength();
      range0.isSubRangeOf(range1);
      range0.getEnd();
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = range_Builder0.build();
      range4.intersection(range0);
      range4.split(1849L);
      range1.isSubRangeOf(range0);
      Range.of((-2684L));
      Range.of(0L);
      range_Builder0.expandEnd(681L);
      range1.isEmpty();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("y_K#|4atxB!!Bci5`u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.y_K#|4atxB!!Bci5`u
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.138375670253359
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.of(range_CoordinateSystem0, 0L, (-1L));
      Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8712010109078947
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder((-1698L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-2155L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      range0.equals(range_Builder0);
      range1.endsBefore(range0);
      range0.getEnd();
      range0.asRange();
      range1.isEmpty();
      Range range2 = Range.ofLength(2351L);
      range2.complement(range1);
      Range.Builder range_Builder3 = range_Builder2.expandBegin(1984L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range2.toString(range_CoordinateSystem0);
      Range range3 = range0.intersection(range2);
      range3.toString();
      range_Builder0.expandEnd(0L);
      range2.endsBefore(range1);
      range1.split(2351L);
      range_Builder2.contractBegin(0L);
      Range.Builder range_Builder4 = range_Builder1.copy();
      assertFalse(range_Builder4.equals((Object)range_Builder3));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 604L;
      Range range0 = Range.ofLength(604L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(604L);
      range_Builder0.build();
      range_Builder0.contractEnd(604L);
      long long1 = (-927L);
      // Undeclared exception!
      try { 
        Range.ofLength((-927L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.313719389493896
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1703L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1703L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1703L);
      Range range0 = range_Builder0.build();
      Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 1703L);
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      range2.toString();
      Range range3 = range0.intersection(range2);
      range3.iterator();
      range_CoordinateSystem0.getAbbreviatedName();
      range_Builder0.build();
      range_CoordinateSystem0.toString();
      range0.getBegin();
      range0.isEmpty();
      range_CoordinateSystem0.toString();
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9381824546861237
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3026040336923144
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.of((-9223372036854775808L), (-2906L));
      Range.of(2041L);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.571826173435834
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-7L));
      Range.ofLength(2882L);
      Range.of((-1369L), 2881L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*,s*(d+)", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*,s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.115475024880771
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(1176L);
      List<Range> list0 = range0.split(1176L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5046098896225386
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 9223372036854775807L;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(4225L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(4225L);
      range2.getEnd(range_CoordinateSystem1);
      range2.endsBefore(range1);
      range0.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem2);
      range2.isEmpty();
      long long2 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 4226L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ -32768 .. -32768 ]/0B", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.66530863259393
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-7L));
      Range range2 = Range.ofLength(2882L);
      range1.intersection(range2);
      Range.of((-1369L), 2881L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*,s*(d+)", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*,s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.633673643302883
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of(681L, 681L);
      Range range1 = Range.of(681L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range2.intersects(range0);
      range2.iterator();
      Range range3 = Range.ofLength(681L);
      range3.getLength();
      range0.isSubRangeOf(range1);
      range0.getEnd();
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = range_Builder0.build();
      Range range5 = range4.intersection(range0);
      range4.split(1849L);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      range0.equals(range5);
      assertTrue(range5.isEmpty());
      
      Range.ofLength(1849L);
      List<Range> list0 = range1.complement(range3);
      assertEquals(2, list0.size());
      assertTrue(list0.contains(range0));
      
      range0.iterator();
      assertSame(range0, range2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      range1.endsBefore(range0);
      range0.intersects(range1);
      range1.isEmpty();
      Object object0 = new Object();
      range1.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.884863440796897
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(1, list0.size());
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      long long1 = range0.getEnd();
      assertTrue(range0.isEmpty());
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3016974157870282
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of((-32759L));
      Range range1 = Range.of((-32759L));
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("v5#Zw:O&X&gvWgq", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse v5#Zw:O&X&gvWgq into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7348389772257917
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1665L));
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-1665L));
      range_Builder3.expandEnd(1056L);
      Range range1 = range_Builder3.build();
      range1.equals(range_Builder2);
      range_Builder3.copy();
      range0.iterator();
      range1.startsBefore(range0);
      range_Builder3.contractEnd((-2262L));
      Range.of((-2262L), 432L);
      Range range2 = range0.intersection(range1);
      range0.iterator();
      range1.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("%`>j0~\"%~p)9LG/", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %`>j0~\"%~p)9LG/ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3861314337088673
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      long long0 = new Long(0L);
      long long1 = new Long(0L);
      range0.iterator();
      Range range1 = Range.of(0L, 0L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("KM_", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse KM_ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.023363953217575
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.isEmpty();
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(9223372036854772903L, (-3751L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3751 would make range [9223372036854772903 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8652352524488434
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(2147483671L);
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3027476526184456
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(2339L);
      Range range1 = Range.of(2340L);
      range0.isSubRangeOf(range1);
      Range.of(2340L, 4294967295L);
      Range range2 = Range.of(2333L);
      range2.isEmpty();
      range0.getEnd();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4608760071544955
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1703L);
      range_Builder0.contractBegin(1703L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 1703L);
      Range.of(432L, 4294967295L);
      Range range3 = range2.intersection(range0);
      range1.iterator();
      range0.intersects(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("%`>j0~\"%~p)9LG/", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %`>j0~\"%~p)9LG/ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8245583212533987
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(681L, 681L);
      Range range1 = Range.of(681L);
      Range range2 = range1.intersection(range0);
      range2.intersects(range0);
      range2.iterator();
      Range range3 = Range.ofLength(681L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of((-167L));
      range4.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-166L));
      Range.Builder range_Builder1 = new Range.Builder((-167L), (-167L));
      Range range5 = Range.of((-166L));
      range5.equals(range4);
      range1.endsBefore(range3);
      range1.getEnd();
      range5.asRange();
      range2.isSubRangeOf(range3);
      long long0 = 2351L;
      // Undeclared exception!
      try { 
        Range.ofLength((-167L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-1011L));
      Range range1 = Range.of((-1011L));
      range0.isSubRangeOf(range1);
      range1.equals(range0);
      long long0 = 1655L;
      // Undeclared exception!
      try { 
        range1.split((-1011L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.219507705176104
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1665L));
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-1665L));
      range_Builder3.expandEnd(1056L);
      Range range1 = range_Builder3.build();
      boolean boolean0 = range1.equals(range_Builder2);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(2, list0.size());
      assertEquals(0, list1.size());
      
      range_Builder3.copy();
      range0.iterator();
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      range_Builder3.contractEnd((-2262L));
      Range range2 = Range.of((-2262L), 432L);
      Range range3 = range0.intersection(range1);
      range0.iterator();
      String string0 = range2.toString();
      assertEquals("[ -2262 .. 432 ]/0B", string0);
      
      range1.getBegin();
      range3.equals(range_Builder3);
      assertSame(range3, range0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(2147483684L);
      Long long0 = new Long((-1479L));
      range0.equals(long0);
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.398222925860849
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(681L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(682L, long0);
      
      range0.isEmpty();
      Range range1 = Range.ofLength(0L);
      range0.startsBefore(range1);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(0L, 1793L);
      range_Builder0.build();
      long long1 = range0.getBegin();
      assertEquals(681L, long1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4657822375089578
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range0.getEnd();
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      Range range3 = range0.intersection(range2);
      range1.split(521L);
      Range range4 = Range.of(range_CoordinateSystem1, 0L, 127L);
      boolean boolean0 = range3.startsBefore(range4);
      boolean boolean1 = range1.equals("max splitLength must be >= 1");
      assertFalse(boolean1);
      
      Range.ofLength(0L);
      List<Range> list0 = range1.complement(range2);
      assertEquals(0, list0.size());
      
      Range range5 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      boolean boolean2 = range2.equals(range5);
      assertSame(range2, range1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.694153703984459
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.348586259194019
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1703L);
      range_Builder0.contractBegin(1703L);
      range_Builder0.build();
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 1703L);
      Range.ofLength(9223372036854775376L);
      // Undeclared exception!
      try { 
        Range.parseRange("YuPgG", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse YuPgG into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3549875696248246
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of((-1011L));
      Range range1 = Range.of((-166L), 5259L);
      boolean boolean0 = range0.intersects(range1);
      Range range2 = Range.of((-1011L));
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertSame(range2, range0);
      assertTrue(boolean1);
      
      Range range3 = Range.of((-1011L), 2041L);
      long long0 = range3.getEnd();
      assertEquals(2041L, long0);
      
      Range.CoordinateSystem.values();
      boolean boolean2 = range1.equals((Object) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5369072819150107
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L));
      range0.intersects(range0);
      long long1 = 2351L;
      Range range1 = Range.ofLength(938L);
      range0.complement(range1);
      range1.startsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1399967357792775
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
      
      range_Builder0.shift((-32767L));
      Object object0 = new Object();
      range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.577423839757323
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.ofLength(681L);
      Range range1 = range0.intersection(range0);
      boolean boolean0 = range1.intersects(range0);
      Range range2 = Range.ofLength(681L);
      range2.getLength();
      range0.isSubRangeOf(range0);
      range0.getEnd();
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range3 = range_Builder0.build();
      Range range4 = range3.intersection(range0);
      Range range5 = Range.of(2147483647L);
      assertFalse(range5.isEmpty());
      
      range3.split(1849L);
      range1.startsBefore(range3);
      boolean boolean1 = range0.equals(range4);
      assertTrue(boolean1 == boolean0);
      
      Range range6 = Range.ofLength(1849L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.isSubRangeOf(range6);
      List<Range> list0 = range2.complement(range3);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      assertSame(range3, range4);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8443053266982616
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(2147483684L);
      Long long0 = new Long((-1479L));
      boolean boolean0 = range0.equals((Object) null);
      boolean boolean1 = range0.isEmpty();
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(2147486367L);
      Range range1 = range_Builder0.build();
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7184734013300127
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8943995444300383
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(2147483671L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
