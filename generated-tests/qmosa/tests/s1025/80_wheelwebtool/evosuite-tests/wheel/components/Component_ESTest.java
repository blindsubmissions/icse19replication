/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 18:01:11 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.ComponentCreator;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "GCZwW7";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("GCZwW7");
      Submit submit0 = new Submit(xmlEntityRef0, "", "GCZwW7");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre((Object) submit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "RqO,8dUN>]J";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("RqO,8dUN>]J");
      // Undeclared exception!
      try { 
        xmlEntityRef0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "strong";
      Form form0 = new Form("strong");
      form0.create();
      String string1 = "[";
      FileInput fileInput0 = new FileInput(form0, "[", "[");
      fileInput0.toString();
      fileInput0.getMaxRequestSize();
      ElExpression elExpression0 = new ElExpression("[");
      elExpression0.expression = "[";
      elExpression0.expression = "strong";
      // Undeclared exception!
      try { 
        fileInput0.dl();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "wheel.components.Submit";
      Form form0 = new Form("wheel.components.Submit");
      Form form1 = form0.renderHint("wheel.components.Submit");
      form0.clasS("wheel.components.Submit");
      // Undeclared exception!
      try { 
        form1.htmlText((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      form0.renderHint("");
      // Undeclared exception!
      try { 
        form0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5857708352080966
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "BEI$g+W+e9]kaZmYkGL";
      TextInput textInput0 = new TextInput((Component) null, "BEI$g+W+e9]kaZmYkGL", "pL{");
      Form form0 = null;
      try {
        form0 = new Form(textInput0, "CYUZOby,Mvtmb", (ActionExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      String string1 = "{";
      // Undeclared exception!
      try { 
        form0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      Form form1 = form0.addFormValidationError("nbsp");
      form1.toString();
      // Undeclared exception!
      try { 
        form0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "wheel.components.Submit";
      String string1 = "HTtD:k}aEptfshT";
      Form form0 = new Form("HTtD:k}aEptfshT");
      DynamicSelectModel dynamicSelectModel0 = form0.selectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      ElExpression elExpression1 = elExpression0.errorMessage("wheel.components.Submit");
      CheckboxGroup checkboxGroup0 = null;
      try {
        checkboxGroup0 = new CheckboxGroup(form0, "wheel.components.Submit", "wheel.components.Submit", dynamicSelectModel0, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Component component0 = null;
      String string0 = "BEI$g+W+e9]kaZmYkGL";
      TextInput textInput0 = new TextInput((Component) null, "BEI$g+W+e9]kaZmYkGL", "pL{");
      String string1 = "] 8OZgc]#]";
      // Undeclared exception!
      try { 
        textInput0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "wheel.components.Submit";
      Form form0 = new Form("wheel.components.Submit");
      Form form1 = form0.renderHint("wheel.components.Submit");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      // Undeclared exception!
      try { 
        form1.multiSelect("wheel.components.Submit", stringSelectModel0, "wheel.components.Submit");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.b();
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      Form form1 = new Form("BEI$gW+e9]kaZmYkGL");
      Form form2 = new Form("pL{");
      ActionExpression actionExpression0 = new ActionExpression("BEI$gW+e9]kaZmYkGL");
      Form form3 = form2.renderHint(actionExpression0);
      ISelectModel iSelectModel0 = null;
      Select select0 = new Select(form0, "+@zV_fo&/61:j^+", "BEI$gW+e9]kaZmYkGL", "+@zV_fo&/61:j^+", (ISelectModel) null, false);
      // Undeclared exception!
      try { 
        form3.addFormElement(select0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Component component0 = null;
      String string0 = "BEI$g+W+e9]kaZmYkGL";
      String string1 = "pL{";
      TextInput textInput0 = new TextInput((Component) null, "BEI$g+W+e9]kaZmYkGL", "pL{");
      String string2 = "CYUZOby,Mvtmb";
      // Undeclared exception!
      try { 
        textInput0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strike();
      String string0 = "&g\\8;*5+xb`Ff@@";
      String string1 = "Q7]bHGtUru97";
      component0.renderHint("Q7]bHGtUru97");
      Component component1 = component0.strong((Object) errorPage0);
      // Undeclared exception!
      try { 
        component1.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Form form0 = new Form((String) null);
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img((String) null, "jzuYC/.)aoX");
      component0.date();
      assertTrue(component0._isGeneratedId());
      
      TextArea textArea0 = new TextArea(errorPage0, "jzuYC/.)aoX", "jzuYC/.)aoX");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertNotNull(table1);
      
      Block block0 = (Block)table0.label();
      assertSame(table0, table1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      TableRow tableRow0 = table0.tr();
      assertSame(table0, table1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertNotNull(tableRow0);
      
      String string0 = tableRow0.defaultTagName();
      assertSame(table0, table1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", string0);
      assertNotNull(string0);
      
      Block block1 = table0.placeholder((String) null);
      assertSame(table0, table1);
      assertNotSame(block1, block0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      
      DynamicSelectModel dynamicSelectModel0 = block0.selectModel();
      assertSame(table0, table1);
      assertNotSame(block0, block1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertFalse(block0.equals((Object)block1));
      assertNotNull(dynamicSelectModel0);
      
      ElExpression elExpression0 = new ElExpression("S3lBEcVXIqaCx%i");
      assertEquals("S3lBEcVXIqaCx%i", elExpression0.getExpression());
      assertEquals("S3lBEcVXIqaCx%i", elExpression0.toString());
      assertEquals(15, elExpression0.length());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage((String) null);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("S3lBEcVXIqaCx%i", elExpression0.getExpression());
      assertEquals("S3lBEcVXIqaCx%i", elExpression0.toString());
      assertEquals(15, elExpression0.length());
      assertEquals("S3lBEcVXIqaCx%i", elExpression1.toString());
      assertEquals(15, elExpression1.length());
      assertEquals("S3lBEcVXIqaCx%i", elExpression1.getExpression());
      assertNotNull(elExpression1);
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(table1, "PgX>A,d~p/?Axd", (String) null, (ISelectModel) null, elExpression1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("S3lBEcVXIqaCx%i", elExpression0.getExpression());
      assertEquals("S3lBEcVXIqaCx%i", elExpression0.toString());
      assertEquals(15, elExpression0.length());
      assertEquals("S3lBEcVXIqaCx%i", elExpression1.toString());
      assertEquals(15, elExpression1.length());
      assertEquals("S3lBEcVXIqaCx%i", elExpression1.getExpression());
      assertFalse(checkboxGroup0._isBuilt());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0._isGeneratedId());
      assertEquals("CheckboxGroup_1", checkboxGroup0.getComponentId());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertEquals("PgX>A,d~p/?Axd", checkboxGroup0.getFormElementName());
      assertNotNull(checkboxGroup0);
      
      // Undeclared exception!
      try { 
        checkboxGroup0.buildComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read value with binding S3lBEcVXIqaCx%i in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Form form0 = new Form("8{nRF>%G{43U)rU_2R)");
      assertEquals("8{nRF>%G{43U)rU_2R)", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8{nRF>%G{43U)rU_2R)";
      stringArray0[1] = "8{nRF>%G{43U)rU_2R)";
      Form form1 = form0._buildFromSerializedString(stringArray0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("8{nRF>%G{43U)rU_2R)", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("8{nRF>%G{43U)rU_2R)", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertEquals(2, stringArray0.length);
      assertNotNull(form1);
      
      Table table0 = new Table(errorPage0, ";a'm+/qt");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals(";a'm+/qt", table0.getComponentId());
      assertNotNull(table0);
      
      FileInput fileInput0 = new FileInput(form0, (String) null, "Double");
      assertEquals("8{nRF>%G{43U)rU_2R)", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(fileInput0._isGeneratedId());
      assertNull(fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Double", fileInput0.getComponentId());
      assertNotNull(fileInput0);
      
      // Undeclared exception!
      try { 
        fileInput0.nbsp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "getMethods", "getMethods");
      assertEquals("getMethods", submit0.getFormElementName());
      assertEquals("getMethods", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertNotNull(submit0);
      
      // Undeclared exception!
      try { 
        submit0.kbd((Object) "getMethods");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.strike();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      ActionExpression actionExpression0 = new ActionExpression("&g8;*5+xb`Ff@@");
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getActionExpression());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals(14, actionExpression0.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.toString());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.parameter(block0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getActionExpression());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals(14, actionExpression0.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(14, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.toString());
      assertNotNull(actionExpression1);
      
      ActionExpression actionExpression2 = actionExpression1.submitForm(false);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getActionExpression());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals(14, actionExpression0.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(14, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression2.toString());
      assertNull(actionExpression2.getJavascript());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(actionExpression2.isSubmitForm());
      assertEquals(14, actionExpression2.length());
      assertNotNull(actionExpression2);
      
      Form form0 = new Form(block0, "|rY<NIOF/j", actionExpression1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getActionExpression());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals(14, actionExpression0.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(14, actionExpression1.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmitForm());
      assertFalse(form0._isGeneratedId());
      assertEquals("|rY<NIOF/j", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      Form form1 = form0.addFormValidationError("|rY<NIOF/j");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getActionExpression());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals(14, actionExpression0.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(14, actionExpression1.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmitForm());
      assertFalse(form0._isGeneratedId());
      assertEquals("|rY<NIOF/j", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("form", form1.defaultTagName());
      assertEquals("|rY<NIOF/j", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertNotNull(form1);
      
      Label label0 = (Label)form1.span((Object) block0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getActionExpression());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals(14, actionExpression0.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression0.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(14, actionExpression1.length());
      assertEquals("&g8;*5+xb`Ff@@", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmitForm());
      assertFalse(form0._isGeneratedId());
      assertEquals("|rY<NIOF/j", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("form", form1.defaultTagName());
      assertEquals("|rY<NIOF/j", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.renderHint("&g8;*5+xb`Ff@@");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertNotNull(errorPage1);
      
      Block block0 = new Block(errorPage1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Table table0 = new Table(block0, "Q7]bHGtUru97");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Q7]bHGtUru97", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      Label label0 = (Label)errorPage0.acronym((Object) block0);
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      Image image0 = (Image)errorPage0.img("Q7]bHGtUru97", "DsmoZ+ Foz");
      assertSame(errorPage0, errorPage1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      Any any0 = (Any)errorPage0.iframe();
      assertSame(errorPage0, errorPage1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Image image0 = (Image)errorPage0.img((String) null, "S3lBEcVXIqaCx%i");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      Any any0 = (Any)errorPage0.iframe();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Form form0 = new Form((String) null);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertNotNull(form0);
      
      form0._setParent(any0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      
      // Undeclared exception!
      try { 
        form0.getInvalidFields();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Form", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      String string0 = null;
      String string1 = "S3lBEcVXIqaCx%i";
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertNotNull(table1);
      
      Block block0 = (Block)table0.label();
      assertSame(table0, table1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      TableRow tableRow0 = table0.tr();
      assertSame(table0, table1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertNotNull(tableRow0);
      
      String string2 = tableRow0.defaultTagName();
      assertSame(table0, table1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        table0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Text text0 = new Text(errorPage0, (Object) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertNotNull(text0);
      
      Label label0 = new Label(errorPage0, text0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      Table table0 = new Table(label0, (String) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      TextInput textInput0 = new TextInput(table0, (String) null, (String) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertNull(textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertNotNull(textInput0);
      
      ComponentCreator componentCreator0 = textInput0.create();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertNull(textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertNotNull(componentCreator0);
      
      // Undeclared exception!
      try { 
        errorPage0.hidden("n!mNkN./^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.45983399153002
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Image image0 = (Image)errorPage0.img((String) null, "S3lBEcVXIqaCx%i");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      Image image1 = new Image(errorPage0, "S3lBEcVXIqaCx%i", (CharSequence) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("Image_2", image1.getComponentId());
      assertEquals("img", image1.defaultTagName());
      assertFalse(image1.equals((Object)image0));
      assertNotNull(image1);
      
      Checkbox checkbox0 = new Checkbox(image1, "S3lBEcVXIqaCx%i", "S3lBEcVXIqaCx%i");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("Image_2", image1.getComponentId());
      assertEquals("img", image1.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", checkbox0.getFormElementName());
      assertEquals("S3lBEcVXIqaCx%i", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(image1.equals((Object)image0));
      assertNotNull(checkbox0);
      
      Checkbox checkbox1 = (Checkbox)checkbox0.validationRule("S3lBEcVXIqaCx%i");
      assertNotSame(image1, image0);
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("Image_2", image1.getComponentId());
      assertEquals("img", image1.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", checkbox0.getFormElementName());
      assertEquals("S3lBEcVXIqaCx%i", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("S3lBEcVXIqaCx%i", checkbox1.getComponentId());
      assertEquals("S3lBEcVXIqaCx%i", checkbox1.getFormElementName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertFalse(image1.equals((Object)image0));
      assertNotNull(checkbox1);
      
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel0);
      
      Map<String, Component> map0 = errorPage0.getComponents();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("{Hh8Zb:[d");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel1);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection((String) null);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel2);
      
      ElExpression elExpression0 = new ElExpression("h2");
      assertEquals(2, elExpression0.length());
      assertEquals("h2", elExpression0.toString());
      assertEquals("h2", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(checkbox1, (String) null, "", dynamicSelectModel2, elExpression0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("Image_2", image1.getComponentId());
      assertEquals("img", image1.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", checkbox0.getFormElementName());
      assertEquals("S3lBEcVXIqaCx%i", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("S3lBEcVXIqaCx%i", checkbox1.getComponentId());
      assertEquals("S3lBEcVXIqaCx%i", checkbox1.getFormElementName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertEquals(2, elExpression0.length());
      assertEquals("h2", elExpression0.toString());
      assertEquals("h2", elExpression0.getExpression());
      assertFalse(checkboxGroup0._isBuilt());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0._isGeneratedId());
      assertEquals("CheckboxGroup_1", checkboxGroup0.getComponentId());
      assertTrue(checkboxGroup0.isEmpty());
      assertNull(checkboxGroup0.getFormElementName());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertFalse(image1.equals((Object)image0));
      assertNotNull(checkboxGroup0);
      
      // Undeclared exception!
      try { 
        checkboxGroup0.buildComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read value with binding h2 in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.strike();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Image image0 = (Image)errorPage0.img("S3lBEcVXIqaCx%i", "S3lBEcVXIqaCx%i");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertNotNull(image0);
      
      Submit submit0 = new Submit(image0, "&g8;*5+xb`Ff@@", "S3lBEcVXIqaCx%i");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertNotNull(submit0);
      
      Image image1 = new Image(submit0, "&g8;*5+xb`Ff@@", "&g8;*5+xb`Ff@@");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("img", image1.defaultTagName());
      assertEquals("Image_2", image1.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertFalse(image1.equals((Object)image0));
      assertNotNull(image1);
      
      Link link0 = new Link(image1, block0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("img", image1.defaultTagName());
      assertEquals("Image_2", image1.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertFalse(image0.equals((Object)image1));
      assertFalse(image1.equals((Object)image0));
      assertNotNull(link0);
      
      Checkbox checkbox0 = new Checkbox(link0, "", "");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("img", image1.defaultTagName());
      assertEquals("Image_2", image1.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(image0.equals((Object)image1));
      assertFalse(image1.equals((Object)image0));
      assertNotNull(checkbox0);
      
      Checkbox checkbox1 = (Checkbox)checkbox0.setFormElementName("");
      assertNotSame(image0, image1);
      assertNotSame(image1, image0);
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("img", image1.defaultTagName());
      assertEquals("Image_2", image1.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("", checkbox1.getFormElementName());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertFalse(image0.equals((Object)image1));
      assertFalse(image1.equals((Object)image0));
      assertNotNull(checkbox1);
      
      Checkbox checkbox2 = new Checkbox(checkbox1, "org.mvel.ast.ContextDeepPropertyNode", "{F");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("img", image1.defaultTagName());
      assertEquals("Image_2", image1.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("", checkbox1.getFormElementName());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertEquals("{F", checkbox2.getComponentId());
      assertTrue(checkbox2.isValid());
      assertEquals("input", checkbox2.defaultTagName());
      assertFalse(checkbox2._isGeneratedId());
      assertEquals("org.mvel.ast.ContextDeepPropertyNode", checkbox2.getFormElementName());
      assertTrue(checkbox2.isEmpty());
      assertFalse(image0.equals((Object)image1));
      assertFalse(image1.equals((Object)image0));
      assertFalse(checkbox2.equals((Object)checkbox1));
      assertFalse(checkbox2.equals((Object)checkbox0));
      assertNotNull(checkbox2);
      
      Checkbox checkbox3 = new Checkbox(checkbox1, "&g8;*5+xb`Ff@@", "dfn");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("img", image1.defaultTagName());
      assertEquals("Image_2", image1.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("", checkbox1.getFormElementName());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertTrue(checkbox3.isValid());
      assertEquals("input", checkbox3.defaultTagName());
      assertEquals("dfn", checkbox3.getComponentId());
      assertEquals("&g8;*5+xb`Ff@@", checkbox3.getFormElementName());
      assertFalse(checkbox3._isGeneratedId());
      assertTrue(checkbox3.isEmpty());
      assertFalse(image0.equals((Object)image1));
      assertFalse(image1.equals((Object)image0));
      assertFalse(checkbox0.equals((Object)checkbox2));
      assertFalse(checkbox1.equals((Object)checkbox2));
      assertFalse(checkbox3.equals((Object)checkbox1));
      assertFalse(checkbox3.equals((Object)checkbox0));
      assertFalse(checkbox3.equals((Object)checkbox2));
      assertNotNull(checkbox3);
      
      Checkbox checkbox4 = (Checkbox)checkbox3.validationRule("this");
      assertNotSame(image0, image1);
      assertNotSame(image1, image0);
      assertNotSame(checkbox0, checkbox2);
      assertNotSame(checkbox0, checkbox4);
      assertNotSame(checkbox0, checkbox3);
      assertSame(checkbox0, checkbox1);
      assertNotSame(checkbox1, checkbox3);
      assertNotSame(checkbox1, checkbox4);
      assertNotSame(checkbox1, checkbox2);
      assertSame(checkbox1, checkbox0);
      assertNotSame(checkbox3, checkbox1);
      assertSame(checkbox3, checkbox4);
      assertNotSame(checkbox3, checkbox0);
      assertNotSame(checkbox3, checkbox2);
      assertNotSame(checkbox4, checkbox1);
      assertNotSame(checkbox4, checkbox0);
      assertNotSame(checkbox4, checkbox2);
      assertSame(checkbox4, checkbox3);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("img", image1.defaultTagName());
      assertEquals("Image_2", image1.getComponentId());
      assertTrue(image1._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("", checkbox1.getFormElementName());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertTrue(checkbox3.isValid());
      assertEquals("input", checkbox3.defaultTagName());
      assertEquals("dfn", checkbox3.getComponentId());
      assertEquals("&g8;*5+xb`Ff@@", checkbox3.getFormElementName());
      assertFalse(checkbox3._isGeneratedId());
      assertTrue(checkbox3.isEmpty());
      assertEquals("dfn", checkbox4.getComponentId());
      assertTrue(checkbox4.isValid());
      assertEquals("&g8;*5+xb`Ff@@", checkbox4.getFormElementName());
      assertEquals("input", checkbox4.defaultTagName());
      assertFalse(checkbox4._isGeneratedId());
      assertTrue(checkbox4.isEmpty());
      assertFalse(image0.equals((Object)image1));
      assertFalse(image1.equals((Object)image0));
      assertFalse(checkbox0.equals((Object)checkbox2));
      assertFalse(checkbox0.equals((Object)checkbox3));
      assertFalse(checkbox1.equals((Object)checkbox3));
      assertFalse(checkbox1.equals((Object)checkbox2));
      assertFalse(checkbox3.equals((Object)checkbox1));
      assertFalse(checkbox3.equals((Object)checkbox0));
      assertFalse(checkbox3.equals((Object)checkbox2));
      assertFalse(checkbox4.equals((Object)checkbox1));
      assertFalse(checkbox4.equals((Object)checkbox0));
      assertFalse(checkbox4.equals((Object)checkbox2));
      assertNotNull(checkbox4);
      
      DynamicSelectModel dynamicSelectModel0 = submit0.selectModel();
      assertNotSame(image0, image1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(image0.equals((Object)image1));
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("dfn");
      assertNotSame(image0, image1);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(image0.equals((Object)image1));
      assertNotNull(dynamicSelectModel1);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("(d&");
      assertNotSame(image0, image1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(image0.equals((Object)image1));
      assertNotNull(dynamicSelectModel2);
      
      ElExpression elExpression0 = new ElExpression("java.lang.String@0000000005");
      assertEquals(27, elExpression0.length());
      assertNotNull(elExpression0);
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, (String) null, (String) null, dynamicSelectModel2, elExpression0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals(27, elExpression0.length());
      assertNull(checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isBuilt());
      assertEquals("CheckboxGroup_1", checkboxGroup0.getComponentId());
      assertTrue(checkboxGroup0.isEmpty());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0._isGeneratedId());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertFalse(image0.equals((Object)image1));
      assertNotNull(checkboxGroup0);
      
      Block block1 = (Block)checkboxGroup0.span();
      assertNotSame(block1, block0);
      assertNotSame(image0, image1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("S3lBEcVXIqaCx%i", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("&g8;*5+xb`Ff@@", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals(27, elExpression0.length());
      assertNull(checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isBuilt());
      assertEquals("CheckboxGroup_1", checkboxGroup0.getComponentId());
      assertTrue(checkboxGroup0.isEmpty());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0._isGeneratedId());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertFalse(block1.equals((Object)block0));
      assertFalse(image0.equals((Object)image1));
      assertNotNull(block1);
      
      // Undeclared exception!
      try { 
        checkboxGroup0.buildComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read value with binding java.lang.String@0000000005 in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.532140934034008
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "e|<'nH*p|5!");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertNotNull(table0);
      
      TextInput textInput0 = new TextInput(table0, "e|<'nH*p|5!", "e|<'nH*p|5!");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("e|<'nH*p|5!", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("e|<'nH*p|5!", textInput0.getComponentId());
      assertNotNull(textInput0);
      
      ComponentCreator componentCreator0 = textInput0.create();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("e|<'nH*p|5!", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("e|<'nH*p|5!", textInput0.getComponentId());
      assertNotNull(componentCreator0);
      
      // Undeclared exception!
      try { 
        textInput0.samp((Object) table0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2206367979772654
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "e|<'nH*p|5!");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertNotNull(table0);
      
      TextInput textInput0 = new TextInput(table0, "e|<'nH*p|5!", "e|<'nH*p|5!");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("e|<'nH*p|5!", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("e|<'nH*p|5!", textInput0.getFormElementName());
      assertNotNull(textInput0);
      
      ComponentCreator componentCreator0 = textInput0.create();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("e|<'nH*p|5!", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("e|<'nH*p|5!", textInput0.getFormElementName());
      assertNotNull(componentCreator0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.actionBinding("e|<'nH*p|5!");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "%A~*uc_ia57`3O";
      Radio radio0 = new Radio((Component) null, "%A~*uc_ia57`3O", "NEW java/lang/Long");
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertEquals("%A~*uc_ia57`3O", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("NEW java/lang/Long", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertNotNull(radio0);
      
      TextArea textArea0 = new TextArea(radio0, "NEW java/lang/Long", "NEW java/lang/Long");
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertEquals("%A~*uc_ia57`3O", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("NEW java/lang/Long", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("NEW java/lang/Long", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("NEW java/lang/Long", textArea0.getFormElementName());
      assertNotNull(textArea0);
      
      // Undeclared exception!
      try { 
        textArea0.samp();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      DateInput dateInput0 = new DateInput(errorPage0, "iframe", "iframe", "iframe");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("iframe", dateInput0.getFormElementName());
      assertEquals("iframe", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertNotNull(dateInput0);
      
      DateInput dateInput1 = (DateInput)dateInput0.addRenderAfter(errorPage0);
      assertSame(dateInput0, dateInput1);
      assertSame(dateInput1, dateInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("iframe", dateInput0.getFormElementName());
      assertEquals("iframe", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput1.isValid());
      assertEquals("input", dateInput1.defaultTagName());
      assertEquals("iframe", dateInput1.getFormElementName());
      assertEquals("iframe", dateInput1.getComponentId());
      assertFalse(dateInput1._isGeneratedId());
      assertTrue(dateInput1.isEmpty());
      assertNotNull(dateInput1);
      
      ActionExpression actionExpression0 = new ActionExpression("iframe");
      assertEquals("iframe", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("iframe", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("iframe", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.submitForm(false);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("iframe", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("iframe", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals("iframe", actionExpression0.getActionExpression());
      assertEquals("iframe", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmitForm());
      assertEquals("iframe", actionExpression1.toString());
      assertEquals(6, actionExpression1.length());
      assertEquals("iframe", actionExpression1.getActionExpression());
      assertNotNull(actionExpression1);
      
      ActionExpression actionExpression2 = actionExpression1.parameter(errorPage0);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("iframe", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("iframe", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals("iframe", actionExpression0.getActionExpression());
      assertEquals("iframe", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmitForm());
      assertEquals("iframe", actionExpression1.toString());
      assertEquals(6, actionExpression1.length());
      assertEquals("iframe", actionExpression1.getActionExpression());
      assertEquals("iframe", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isSubmitForm());
      assertEquals("iframe", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals("iframe", actionExpression2.toString());
      assertEquals(6, actionExpression2.length());
      assertNotNull(actionExpression2);
      
      ActionExpression actionExpression3 = actionExpression2.setOwner(errorPage0);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("iframe", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("iframe", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals("iframe", actionExpression0.getActionExpression());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("iframe", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmitForm());
      assertEquals("iframe", actionExpression1.toString());
      assertEquals(6, actionExpression1.length());
      assertEquals("iframe", actionExpression1.getActionExpression());
      assertEquals("iframe", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isSubmitForm());
      assertEquals("iframe", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals("wheel_ErrorPage", actionExpression2.getSourceId());
      assertEquals("iframe", actionExpression2.toString());
      assertEquals(6, actionExpression2.length());
      assertFalse(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getEvent());
      assertEquals("iframe", actionExpression3.toString());
      assertEquals(6, actionExpression3.length());
      assertEquals("wheel_ErrorPage", actionExpression3.getSourceId());
      assertFalse(actionExpression3.isExternalUrl());
      assertNull(actionExpression3.getJavascript());
      assertFalse(actionExpression3.isSubmissible());
      assertEquals("iframe", actionExpression3.getExpression());
      assertEquals("iframe", actionExpression3.getActionExpression());
      assertNotNull(actionExpression3);
      
      DateInput dateInput2 = (DateInput)dateInput1.actionBinding(actionExpression3);
      assertSame(dateInput0, dateInput1);
      assertSame(dateInput0, dateInput2);
      assertSame(dateInput1, dateInput0);
      assertSame(dateInput1, dateInput2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(dateInput2, dateInput0);
      assertSame(dateInput2, dateInput1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("iframe", dateInput0.getFormElementName());
      assertEquals("iframe", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput1.isValid());
      assertEquals("input", dateInput1.defaultTagName());
      assertEquals("iframe", dateInput1.getFormElementName());
      assertEquals("iframe", dateInput1.getComponentId());
      assertFalse(dateInput1._isGeneratedId());
      assertTrue(dateInput1.isEmpty());
      assertEquals("iframe", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("iframe", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals("iframe", actionExpression0.getActionExpression());
      assertEquals("iframe", actionExpression0.getSourceId());
      assertEquals("iframe", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertNull(actionExpression1.getEvent());
      assertEquals("iframe", actionExpression1.getSourceId());
      assertFalse(actionExpression1.isSubmitForm());
      assertEquals("iframe", actionExpression1.toString());
      assertEquals(6, actionExpression1.length());
      assertEquals("iframe", actionExpression1.getActionExpression());
      assertEquals("iframe", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isSubmitForm());
      assertEquals("iframe", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals("iframe", actionExpression2.getSourceId());
      assertEquals("iframe", actionExpression2.toString());
      assertEquals(6, actionExpression2.length());
      assertFalse(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getEvent());
      assertEquals("iframe", actionExpression3.getSourceId());
      assertEquals("iframe", actionExpression3.toString());
      assertEquals(6, actionExpression3.length());
      assertFalse(actionExpression3.isExternalUrl());
      assertNull(actionExpression3.getJavascript());
      assertFalse(actionExpression3.isSubmissible());
      assertEquals("iframe", actionExpression3.getExpression());
      assertEquals("iframe", actionExpression3.getActionExpression());
      assertEquals("iframe", dateInput2.getFormElementName());
      assertEquals("input", dateInput2.defaultTagName());
      assertFalse(dateInput2._isGeneratedId());
      assertTrue(dateInput2.isValid());
      assertTrue(dateInput2.isEmpty());
      assertEquals("iframe", dateInput2.getComponentId());
      assertNotNull(dateInput2);
      
      String string0 = null;
      MXSerializer mXSerializer0 = new MXSerializer();
      assertNull(mXSerializer0.getNamespace());
      assertEquals(0, mXSerializer0.getDepth());
      assertNull(mXSerializer0.getName());
      assertNotNull(mXSerializer0);
      
      // Undeclared exception!
      try { 
        mXSerializer0.endTag((String) null, "kbd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected element name null and not 'kbd'
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      DateInput dateInput0 = new DateInput(errorPage0, "iframe", "iframe", "iframe");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertEquals("iframe", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("iframe", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertNotNull(dateInput0);
      
      DateInput dateInput1 = (DateInput)dateInput0.addRenderAfter(errorPage0);
      assertSame(dateInput0, dateInput1);
      assertSame(dateInput1, dateInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertEquals("iframe", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("iframe", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput1.isEmpty());
      assertTrue(dateInput1.isValid());
      assertEquals("iframe", dateInput1.getFormElementName());
      assertEquals("input", dateInput1.defaultTagName());
      assertEquals("iframe", dateInput1.getComponentId());
      assertFalse(dateInput1._isGeneratedId());
      assertNotNull(dateInput1);
      
      ActionExpression actionExpression0 = new ActionExpression("iframe");
      assertEquals("iframe", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertEquals("iframe", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertEquals("iframe", actionExpression0.getActionExpression());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.submitForm(false);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("iframe", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmitForm());
      assertEquals("iframe", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertEquals("iframe", actionExpression0.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertEquals(6, actionExpression1.length());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("iframe", actionExpression1.getExpression());
      assertEquals("iframe", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmitForm());
      assertEquals("iframe", actionExpression1.getActionExpression());
      assertNotNull(actionExpression1);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotNull(errorPage1);
      
      Any any0 = (Any)errorPage0.iframe();
      assertNotSame(errorPage0, errorPage1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertNotNull(any0);
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "iframe");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("iframe", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertNotNull(tableBlock0);
      
      // Undeclared exception!
      try { 
        dateInput0.h3((Object) tableBlock0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.358854138894022
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      String string0 = null;
      Text text0 = new Text(errorPage0, (Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertNotNull(text0);
      
      Label label0 = new Label(errorPage0, text0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      String string1 = null;
      DynamicSelectModel dynamicSelectModel0 = label0.selectModel();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("Kd");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(dynamicSelectModel1);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.empty((Object) null);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(dynamicSelectModel2);
      
      ActionExpression actionExpression0 = new ActionExpression("AUn9@I");
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals("AUn9@I", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("AUn9@I", actionExpression0.getActionExpression());
      assertEquals(6, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("AUn9@I", actionExpression0.getExpression());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.event("Kd");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("AUn9@I", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("AUn9@I", actionExpression0.getActionExpression());
      assertEquals("Kd", actionExpression0.getEvent());
      assertEquals(6, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("AUn9@I", actionExpression0.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("AUn9@I", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals("AUn9@I", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Kd", actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("AUn9@I", actionExpression1.toString());
      assertEquals(6, actionExpression1.length());
      assertNotNull(actionExpression1);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      ActionExpression actionExpression2 = actionExpression1.parameter(integer0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("AUn9@I", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("AUn9@I", actionExpression0.getActionExpression());
      assertEquals("Kd", actionExpression0.getEvent());
      assertEquals(6, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("AUn9@I", actionExpression0.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("AUn9@I", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals("AUn9@I", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Kd", actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("AUn9@I", actionExpression1.toString());
      assertEquals(6, actionExpression1.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(6, actionExpression2.length());
      assertEquals("AUn9@I", actionExpression2.getExpression());
      assertEquals("AUn9@I", actionExpression2.toString());
      assertNull(actionExpression2.getJavascript());
      assertEquals("Kd", actionExpression2.getEvent());
      assertEquals("AUn9@I", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNotNull(actionExpression2);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("AUn9@I", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("AUn9@I", actionExpression0.getActionExpression());
      assertEquals("Kd", actionExpression0.getEvent());
      assertEquals(6, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("AUn9@I", actionExpression0.getExpression());
      assertEquals("AUn9@I", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals("AUn9@I", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Kd", actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("AUn9@I", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals(6, actionExpression1.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(6, actionExpression2.length());
      assertEquals("AUn9@I", actionExpression2.getExpression());
      assertEquals("AUn9@I", actionExpression2.toString());
      assertNull(actionExpression2.getJavascript());
      assertEquals("Kd", actionExpression2.getEvent());
      assertEquals("AUn9@I", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("AUn9@I", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("Kd", actionExpression3.getEvent());
      assertNull(actionExpression3.getJavascript());
      assertEquals("AUn9@I", actionExpression3.getActionExpression());
      assertEquals("AUn9@I", actionExpression3.getExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(6, actionExpression3.length());
      assertNotNull(actionExpression3);
      
      // Undeclared exception!
      try { 
        text0.multiSelect("java.lang.String@0000000005", dynamicSelectModel2, actionExpression3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = null;
      Text text0 = new Text(errorPage0, (Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertTrue(text0._isGeneratedId());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertNotNull(text0);
      
      Label label0 = new Label(errorPage0, text0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertTrue(text0._isGeneratedId());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      String string1 = null;
      Table table0 = new Table(label0, (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertTrue(text0._isGeneratedId());
      assertFalse(text0.isCdata());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      // Undeclared exception!
      try { 
        label0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4781420381013897
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotNull(errorPage1);
      
      Any any0 = (Any)errorPage0.iframe();
      assertNotSame(errorPage0, errorPage1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertNotNull(any0);
      
      TextInput textInput0 = new TextInput(errorPage0, "'l", "'l");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("'l", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("'l", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertNotNull(textInput0);
      
      String string0 = textInput0.defaultTagName();
      assertNotSame(errorPage0, errorPage1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("'l", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("'l", textInput0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", string0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertNotNull(string0);
      
      Text text0 = (Text)errorPage0.text(errorPage1);
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(text0.isHtml());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotNull(text0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.661869249116309
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "e|<'nH*p|5!");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Block block0 = (Block)table0.fieldset();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      TextInput textInput0 = new TextInput(table0, "e|<'nH*p|5!", "e|<'nH*p|5!");
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("e|<'nH*p|5!", textInput0.getFormElementName());
      assertEquals("e|<'nH*p|5!", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertNotNull(textInput0);
      
      ComponentCreator componentCreator0 = textInput0.create();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e|<'nH*p|5!", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("e|<'nH*p|5!", textInput0.getFormElementName());
      assertEquals("e|<'nH*p|5!", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertNotNull(componentCreator0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5914391172538984
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Image image0 = (Image)errorPage0.img((String) null, "S3lBEcVXIqaCx%i");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      Table table0 = new Table(errorPage0, "S3lBEcVXIqaCx%i");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("S3lBEcVXIqaCx%i");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("S3lBEcVXIqaCx%i", table1.getComponentId());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tbody();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("S3lBEcVXIqaCx%i", table1.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      String string0 = tableBlock0._classReferenceFromHints();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("S3lBEcVXIqaCx%i", table1.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(string0);
      
      TableBlock tableBlock1 = tableBlock0.id("6ZX");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("S3lBEcVXIqaCx%i", table1.getComponentId());
      assertEquals("6ZX", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("6ZX", tableBlock1.getComponentId());
      assertNotNull(tableBlock1);
      
      Table table2 = new Table(table0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_1", table2.getComponentId());
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      assertNotNull(table2);
      
      TextInput textInput0 = new TextInput(table1, "6ZX", "2iVk9");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("S3lBEcVXIqaCx%i", table1.getComponentId());
      assertEquals("6ZX", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("2iVk9", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertNotNull(textInput0);
      
      ComponentCreator componentCreator0 = textInput0.create();
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("S3lBEcVXIqaCx%i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("S3lBEcVXIqaCx%i", table1.getComponentId());
      assertEquals("6ZX", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("2iVk9", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertNotNull(componentCreator0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = "&g\\8;*5+xb`Ff@@";
      String string1 = "Q7]bHGtUru97";
      ErrorPage errorPage1 = (ErrorPage)errorPage0.renderHint("&g8;*5+xb`Ff@@");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
      
      Block block0 = new Block(errorPage1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("java.lang.String@0000000005");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      // Undeclared exception!
      try { 
        block0.select("&g8;*5+xb`Ff@@", dynamicSelectModel1, "&g8;*5+xb`Ff@@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Any any0 = (Any)errorPage0.iframe();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      
      Block block0 = (Block)errorPage0.wBlock((CharSequence) null);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
  }
}
