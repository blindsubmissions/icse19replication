/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:50:41 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.sql.Connection;
import java.util.List;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBLocalTransaction;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.command.dml.ScriptCommand;
import org.h2.engine.Session;
import org.h2.value.ValueLob;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("w0#YaISck:rH+");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "w0#YaISck:rH+";
      stringArray0[2] = "w0#YaISck:rH+";
      stringArray0[3] = "derby.";
      stringArray0[4] = "w0#YaISck:rH+";
      stringArray0[5] = "w0#YaISck:rH+";
      stringArray0[6] = "w0#YaISck:rH+";
      String string0 = SQLUtil.join("w0#YaISck:rH+", "w0#YaISck:rH+", stringArray0, "=n*!:u@S;", "w0#YaISck:rH+", stringArray0);
      assertEquals("w0#YaISck:rH+ join =n*!:u@S; as w0#YaISck:rH+ on w0#YaISck:rH+. = w0#YaISck:rH+. and w0#YaISck:rH+.w0#YaISck:rH+ = w0#YaISck:rH+.w0#YaISck:rH+ and w0#YaISck:rH+.w0#YaISck:rH+ = w0#YaISck:rH+.w0#YaISck:rH+ and w0#YaISck:rH+.derby. = w0#YaISck:rH+.derby. and w0#YaISck:rH+.w0#YaISck:rH+ = w0#YaISck:rH+.w0#YaISck:rH+ and w0#YaISck:rH+.w0#YaISck:rH+ = w0#YaISck:rH+.w0#YaISck:rH+ and w0#YaISck:rH+.w0#YaISck:rH+ = w0#YaISck:rH+.w0#YaISck:rH+", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "q+aHX(>{s4";
      DBSchema dBSchema0 = new DBSchema("q+aHX(>{s4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z*um\"s]}@W`(", dBSchema0);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      FBCallableStatement fBCallableStatement0 = new FBCallableStatement(gDSHelper0, "4", 16384, 0, 0, (FBObjectListener.StatementListener) null, internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      // Undeclared exception!
      try { 
        fBCallableStatement0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractStatement", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      int int0 = 1895;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1895, 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1895
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.mutatesStructure("PRIMARY KEY ");
      SQLUtil.removeComments(" and ");
      String string0 = null;
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[^JD`Wfr*,x,k", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[^JD`Wfr*,x,k", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      SQLUtil.parseColumnTypeAndSize("");
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isDDL("T</]`x W(2i<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i!})7l";
      stringArray0[1] = "i!})7l";
      stringArray0[2] = "i!})7l";
      stringArray0[3] = "T</]`x W(2i<";
      stringArray0[4] = "T</]`x W(2i<";
      stringArray0[5] = "i!})7l";
      stringArray0[6] = "T</]`x W(2i<";
      SQLUtil.renderColumnListWithTableName("i!})7l", stringArray0);
      SQLUtil.isQuery("T</]`x W(2i<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%{");
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("-- head ", false, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      charArray0[4] = '#';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "N6NfOCCJMQp|OBw*u";
      streamTokenizer0.parseNumbers();
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.parseColumnTypeAndSize("");
      String string0 = SQLUtil.renderValue("");
      Object object0 = new Object();
      String string1 = SQLUtil.substituteMarkers("''", "", object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "alter index";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter index";
      stringArray0[1] = "alter index";
      stringArray0[2] = "alter index";
      stringArray0[3] = "alter index";
      SQLUtil.leftJoin("alter index", stringArray0, "alter index", "", stringArray0);
      SQLUtil.renderValue("alter index");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("S'mo@=9#+n0bu|?e>#", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("7G|q>c_w<bu+V7C0", dBPackage0);
      dBPackage0.setObjectType("S'mo@=9#+n0bu|?e>#");
      dBProcedure0.setSubProgramId("");
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      SQLUtil.ownerDotComponent(compositeDBObject0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S'mo@=9#+n0bu|?e>#";
      stringArray0[1] = "7G|q>c_w<bu+V7C0";
      stringArray0[2] = "";
      stringArray0[3] = "S'mo@=9#+n0bu|?e>#.";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("S'mo@=9#+n0bu|?e>#", true, "CONSTRAINT  ", "execfilename");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("CONSTRAINT  ", (String) null, dBCheckConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.isDDL("T</]`x W(2i<");
      SQLUtil.isQuery("T</]`x W(2i<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%{");
      SQLUtil.normalize("T</]`x W(2i<", true);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2161022480912633
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("fileName");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fileName");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fileName";
      stringArray0[1] = "fileName";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("fileName");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("fileName", (String) null, versionNumber0);
      defaultDatabase0.setDoc("$K{rJO1Jdz");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM fileName WHERE fileName = 'fileName' AND fileName = 'fileName'", string0);
      
      boolean boolean1 = SQLUtil.isDML("8^bv8k.{`y{-<x_\"[,");
      assertFalse(boolean1);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$K{rJO1Jdz", defaultDBTable0, 47, " or ");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("$K{rJO1Jdz  OR  NULL", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2047854169135204
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wOxZ-Tv] j}KD";
      stringArray0[1] = "wOxZ-Tv] j}KD";
      stringArray0[2] = "wOxZ-Tv] j}KD";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wOxZ-Tv] j}KD", false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.isProcedureCall("wOxZ-Tv] j}KD");
      SQLUtil.isProcedureCall("CONSTRAINT \"wOxZ-Tv] j}KD\" ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("wOxZ-Tv] j}KD", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      dBUniqueConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[^JD`Wfr*,x,k", false, dBUniqueConstraint0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.mutatesStructure("fileName");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "]^u^0B8", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("fileName", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueConstraint0.setDoc("]^u^0B8");
      DBTable dBTable1 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("]^u^0B8", false, dBTable0, stringArray0, dBTable1, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]^u^0B8", true, stringArray0);
      dBForeignKeyConstraint0.equals(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('&');
      SQLUtil.addOptionalCondition("FOREIGN KEY () REFERENCES null()", stringBuilder1);
      assertEquals("& or FOREIGN KEY () REFERENCES null()", stringBuilder1.toString());
      assertEquals("& or FOREIGN KEY () REFERENCES null()", stringBuilder0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("S'mo@=9#+n0bu|?e>#", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("7G|q>c_w<bu+V7C0", dBPackage0);
      dBPackage0.setObjectType("S'mo@=9#+n0bu|?e>#");
      dBProcedure0.setSubProgramId("");
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      SQLUtil.ownerDotComponent(compositeDBObject0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S'mo@=9#+n0bu|?e>#";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      SQLUtil.normalize(";Ns<`,", true);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.7950679780591773
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.isDDL("T</]`x W(2i<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i!})7l";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i!})7l");
      SQLUtil.normalize("i!})7l", false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("x\"<=L4tl'.#5");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("dHnm#=<A(U|HB&^QVh", "dHnm#=<A(U|HB&^QVh", versionNumber0);
      defaultDatabase0.setDoc(":f$jfT`EO_*$7uXH`d");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("$K{rJO1Jdz");
      SQLUtil.isDML("\"s0`FXhVIya");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("inne", defaultDBTable0, 1805, "dHnm#=<A(U|HB&^QVh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: dHnm#=<A(U|HB&^QVh
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.isDDL("T</]`x W(2i<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i!})7l";
      stringArray0[1] = "i!})7l";
      stringArray0[2] = "i!})7l";
      stringArray0[3] = "T</]`x W(2i<";
      stringArray0[4] = "T</]`x W(2i<";
      stringArray0[5] = "i!})7l";
      DBSchema dBSchema0 = new DBSchema("i!})7l");
      DBPackage dBPackage0 = new DBPackage("PostgreSQL DataSource unable to load PostgreSQL JUBC Driver", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("i!})7l", dBPackage0);
      dBProcedure0.setSubProgramId("create table");
      dBProcedure0.getOwner();
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      SQLUtil.ownerDotComponent(compositeDBObject0);
      String[] stringArray1 = new String[0];
      SQLUtil.renderColumnNames(stringArray1);
      SQLUtil.isDDL("alter tableorg.apache.derby.impl.sql.compile.staticmethodcallnode");
      String string0 = "_s";
      VersionNumber versionNumber0 = VersionNumber.valueOf("drop materialized view");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("T</]`x W(2i<", "org.apache.derby.impl.sq", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("T</]`x W(2i<", defaultDatabase0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("RK)rW1CEC-i>\">Pc", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'RK)rW1CEC-i>\">Pc'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9686932085049351
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.isDDL("T</]`x W(2i<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i!})7l";
      stringArray0[1] = "i!})7l";
      stringArray0[2] = "i!})7l";
      stringArray0[3] = "T</]`x W(2i<";
      stringArray0[4] = "T</]`x W(2i<";
      stringArray0[5] = "i!})7l";
      stringArray0[6] = "T</]`x W(2i<";
      SQLUtil.removeComments("T</]`x W(2i<");
      SQLUtil.isQuery("T</]`x W(2i<");
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("i!})7l = 'i!})7l' AND i!})7l = 'i!})7l' AND i!})7l = 'i!})7l' AND T</]`x W(2i< = 'T</]`x W(2i<' AND T</]`x W(2i< = 'T</]`x W(2i<' AND i!})7l = 'i!})7l' AND T</]`x W(2i< = 'T</]`x W(2i<'", string0);
      
      SQLUtil.renderValue("T</]`x W(2i<");
      boolean boolean0 = SQLUtil.isDDL("_en.properties");
      boolean boolean1 = SQLUtil.isQuery("");
      assertFalse(boolean1);
      
      SQLUtil.parseColumnTypeAndSize("i!})7l");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("drop materialized view");
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("S'mo@=9#+n0bu|?e>#", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("7G|q>c_w<bu+V7C0", dBPackage0);
      dBPackage0.setStatus("A2");
      dBProcedure0.setSubProgramId("");
      dBProcedure0.getOwner();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      dBSchema0.getTable("S'mo@=9#+n0bu|?e>#");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S'mo@=9#+n0bu|?e>#";
      stringArray0[1] = "7G|q>c_w<bu+V7C0";
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.typeAndName(dBSchema0);
      dBProcedure0.setObjectId("]@O:F+");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("S'mo@=9#+n0bu|?e>#", true, "CONSTRAINT  ", "execfilename");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("CONSTRAINT  ", (String) null, dBCheckConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("T</]`x W(2i<");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i!})7l";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i!})7l");
      String string0 = SQLUtil.normalize("i!})7l", false);
      assertEquals("i ! }) 7l", string0);
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("i!})7l");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("i ! }) 7l", defaultDBTable1, (-194), "inne");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("i ! }) 7l INNE NULL", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("T</]`x W(2i<", defaultDBTable1, (-194), "t</]`x");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      DBDataType dBDataType0 = DBDataType.getInstance((-194), "in best access path");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Total cost of non-sort-avoidance plan is ", defaultDBTable1, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("T</]`x W(2i<, Total cost of non-sort-avoidance plan is , i ! }) 7l, i ! }) 7l", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1700483464601645
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("x\"<=L4tl'.#5");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("dHnm#=<A(U|HB&^QVh", "dHnm#=<A(U|HB&^QVh", versionNumber0);
      defaultDatabase0.setDoc(":f$jfT`EO_*$7uXH`d");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("$K{rJO1Jdz");
      DBSchema dBSchema0 = new DBSchema("dHnm#=<A(U|HB&^QVh");
      DBPackage dBPackage0 = new DBPackage("dHnm#=<A(U|HB&^QVh", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("dHnm#=<A(U|HB&^QVh", dBPackage0);
      dBProcedure0.setSubProgramId(":f$jfT`EO_*$7uXH`d");
      dBProcedure0.getOwner();
      SQLUtil.ownerDotComponent(defaultDatabase0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dHnm#=<A(U|HB&^QVh";
      stringArray0[1] = ":f$jfT`EO_*$7uXH`d";
      stringArray0[2] = "$K{rJO1Jdz";
      stringArray0[3] = ":f$jfT`EO_*$7uXH`d";
      stringArray0[4] = "dHnm#=<A(U|HB&^QVh";
      stringArray0[5] = "$K{rJO1Jdz";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesDataOrStructure("x\"<=L4tl'.#5");
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.NEVER;
      GDSType.getType(":f$jfT`EO_*$7uXH`d");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.normalize("S'mo@=9#+n0bu|?e>#", true);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.isDML("T</]`x W(2i<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i!})7l";
      stringArray0[1] = "i!})7l";
      stringArray0[2] = "i!})7l";
      stringArray0[3] = "T</]`x W(2i<";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "i!})7l";
      stringArray1[1] = "i!})7l";
      SQLUtil.join("", "i!})7l", stringArray1, "List : size=", "i!})7l", stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("q72G#<K2CzJx}");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("1", "BoI", versionNumber0);
      defaultDatabase0.getTable("Q:|B4", false);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("T</]`x W(2i<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1274832349932322
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.isDDL("x\"<=L4tl'.#5");
      SQLUtil.isQuery("dHnm#=<A(U|HB&^QVh");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("x\"<=L4tl'.#5");
      SQLUtil.normalize("E{.<o7^=!U&1Y", false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter index";
      stringArray0[1] = "alter index";
      stringArray0[2] = "alter index";
      SQLUtil.join("#Q7AJq(", "left", stringArray0, "", "=n*!:u@S;", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("derby.", stringBuilder0);
      assertEquals("derby.", stringBuilder0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6885673693022827
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = 'D';
      charArray0[3] = ',';
      charArray0[4] = '#';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "N6NfOCCJMQp|OBw*u";
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.parseColumnTypeAndSize("");
      String string1 = SQLUtil.normalize("- 0", false);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2554823251787535
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("T</]`x W(2i<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i!})7l";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("i!})7l", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i!})7l", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "JY2iVk9E", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" as ", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("N76H8jo?/]7@Q@", false, dBTable0, stringArray0, dBTable0, stringArray0);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = SQLUtil.isDML("N76H8jo?/]7@Q@");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter index";
      stringArray0[1] = "alter index";
      SQLUtil.normalize("I,Ti}y# ;[f;nQ-", false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Object object0 = new Object();
      Character character0 = Character.valueOf('p');
      SQLUtil.renderValue(character0);
      SQLUtil.isDDL("alter index");
      SQLUtil.isQuery("4U2#U[hx4h}wM");
      SQLUtil.parseColumnTypeAndSize("P!YPF!");
      SQLUtil.mutatesDataOrStructure("P!YPF!");
      int int0 = (-115631787);
      Session session0 = new Session();
      ScriptCommand scriptCommand0 = null;
      try {
        scriptCommand0 = new ScriptCommand(session0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.command.Prepared", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      SQLUtil.join("#Q7AJq(", "Lc!M", stringArray0, "derby.", "[^JD`Wfr*,x,k", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "#Q7AJq( join derby. as [^JD`Wfr*,x,k on Lc!M.[^JD`Wfr*,x,k = [^JD`Wfr*,x,k.[^JD`Wfr*,x,k and Lc!M.null = [^JD`Wfr*,x,k.null");
      SQLUtil.addRequiredCondition("#Q7AJq(", stringBuilder1);
      assertEquals("#Q7AJq( join derby. as [^JD`Wfr*,x,k on Lc!M.[^JD`Wfr*,x,k = [^JD`Wfr*,x,k.[^JD`Wfr*,x,k and Lc!M.null = [^JD`Wfr*,x,k.null and #Q7AJq(", stringBuilder1.toString());
      assertEquals("#Q7AJq( join derby. as [^JD`Wfr*,x,k on Lc!M.[^JD`Wfr*,x,k = [^JD`Wfr*,x,k.[^JD`Wfr*,x,k and Lc!M.null = [^JD`Wfr*,x,k.null and #Q7AJq(", stringBuilder0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0947290475276494
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.isDDL("T</]`x W(2i<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i!})7l";
      stringArray0[2] = "i!})7l";
      stringArray0[3] = "T</]`x W(2i<";
      stringArray0[4] = "T</]`x W(2i<";
      stringArray0[5] = "i!})7l";
      stringArray0[6] = "T</]`x W(2i<";
      SQLUtil.removeComments("T</]`x W(2i<");
      SQLUtil.isQuery("T</]`x W(2i<");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderValue("T</]`x W(2i<");
      SQLUtil.isDDL("i!})7l");
      SQLUtil.isQuery("SYSALIASES");
      SQLUtil.innerJoin("i!})7l", stringArray0, "T</]`x W(2i<", "'T</]`x W(2i<'", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn(" NOT NULL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ' NOT NULL' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.615630577027551
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("i!})7l");
      SQLUtil.isQuery("i!})7l");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "i!})7l", false, stringArray0);
      SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      String string0 = ")r6_$\\Zu}()~Aes,[@I";
      SQLUtil.isDDL(")r6_$Zu}()~Aes,[@I");
      SQLUtil.isQuery("CLOB");
      String string1 = "instal";
      SQLUtil.innerJoin("", stringArray0, "instal", ")r6_$Zu}()~Aes,[@I", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray1 = new String[3];
      stringArray1[0] = " while locking ";
      stringArray1[1] = "CONSTRAINT i!})7l PRIMARY KEY ()";
      stringArray1[2] = "CONSTRAINT i!})7l PRIMARY KEY ()";
      defaultDBTable1.getUniqueConstraint(stringArray1);
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("CONSTRAINT i!})7l PRIMARY KEY ()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'CONSTRAINT i!})7l PRIMARY KEY ()' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = 'D';
      charArray0[3] = ',';
      charArray0[4] = '#';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "N6NfOCCJMQp|OBw*u";
      streamTokenizer0.parseNumbers();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U{QwaK%Zqj=_");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("42734", "sp&D,'hq+x0");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesStructure("$ku5 b/VC9");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.143952200643869
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.normalize("S'mo@=9#+n0bu|?e>#", true);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      SQLUtil.isDDL("java.lang.Object@209989");
      SQLUtil.isQuery("");
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.mutatesDataOrStructure("select into");
      SQLUtil.isQuery("execute");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("yCl8p~Z+$Ov3(V");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "execute";
      DBDataType dBDataType0 = DBDataType.getInstance(24, "execute");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewt</]`x w(2i<");
      defaultDBTable0.getPrimaryKeyConstraint();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("i!})", false, "CHECK ", "i!})");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8043716191528456
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = SQLUtil.isQuery("yCl8p~Z+$Ov3(V");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = SQLUtil.normalize("select", true);
      assertEquals("select", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "select";
      stringArray0[1] = "select";
      stringArray0[2] = "M?iE?BBaHRhz";
      stringArray0[3] = "yCl8p~Z+$Ov3(V";
      stringArray0[4] = "select";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("M?iE?BBaHRhz", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = SQLUtil.isProcedureCall("deleteselect into");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~IpxA)avJCz}m_@.");
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("drop tablef|ic[uc$x;q'", "NCLOB");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "drop tablef|ic[uc$x;q'";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.22371807606583377
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "6M8t#d;NG*9gS,N";
      SQLUtil.removeComments("6M8t#d;NG*9gS,N");
      SQLUtil.normalize("6M8t#d;NG*9gS,N", true);
      boolean boolean0 = false;
      TableContainer tableContainer0 = new TableContainer("UNIQUE ");
      tableContainer0.getTable("6M8t#d;NG*9gS,N");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6M8t#d;NG*9gS,N";
      stringArray0[1] = "UNIQUE ";
      stringArray0[2] = "6M8t#d;NG*9gS,N";
      stringArray0[3] = "UNIQUE ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("6M8t#d;NG*9gS,N", false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0578975319224093
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.isDDL("T</]`x W(2i<");
      SQLUtil.isProcedureCall("T</]`x W(2i<");
      TableContainer tableContainer0 = new TableContainer("T</]`x W(2i<");
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("T</]`x W(2i<", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("T</]`x W(2i<", dBPackage0);
      dBProcedure0.getOwner();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "T</]`x W(2i<";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "T</]`x W(2i<";
      stringArray0[4] = null;
      stringArray0[5] = "T</]`x W(2i<";
      stringArray0[6] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setName(stringArray0[2]);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      System.setCurrentTimeMillis(309L);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.8741412099026158
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      boolean boolean0 = SQLUtil.isDDL("alter tablekhby80\u0017[a<r{\"_");
      SQLUtil.isProcedureCall("=\"");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=\"", (DBSchema) null);
      String string0 = SQLUtil.normalize("alter tablekhby80\u0017[a<r{\"_", true);
      assertEquals("alter tablekhby80 \u0017 [ a < r  { \"_\"", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall(" NOT NULL");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "=a-dxN%/iNFPO_Du";
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("=a-dxN%/iNFPO_Du", "=a-dxN%/iNFPO_Du", versionNumber0);
      boolean boolean0 = false;
      defaultDatabase0.setImportedChecks(false);
      defaultDatabase0.getTable("call", false);
      DBDataType dBDataType0 = DBDataType.getInstance(1, "call");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer.toUnsignedString((-3394));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=a-dxN%/iNFPO_Du", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      SQLUtil.isProcedureCall("uB,b-1b'/*W`*5Ta~");
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~IpxA)avJCz}m_@.");
      defaultDBTable0.getColumns();
      MockFile.createTempFile("TRIGGERPRIV", "0$pH4+P|uP,lYd&c/U(");
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.derby.impl.sql.compile.DropTableNode", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[^JD`Wfr*,x,k");
      defaultDBTable0.getColumns();
      MockFile.createTempFile("[^JD`Wfr*,x,k", "RSN<N2?f%?TLCL_{:.");
      MockFileWriter mockFileWriter0 = new MockFileWriter("drop materialized view", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table [^JD`Wfr*,x,k", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4*;Weq'Z5CZ>M", true, "wmnJl33T%u{$4Cqql o", "not nul");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 4*;Weq'Z5CZ>M CHECK not nul", string1);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      assertEquals("CHECK not nul", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.951108670745811
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("u/;P_0=F");
      SQLUtil.normalize("u/;P_0=F", false);
      SQLUtil.parseColumnTypeAndSize("u / ; P_0 = F");
      System.setCurrentTimeMillis((-1191L));
      jdbcClob jdbcClob0 = new jdbcClob("|");
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBSchema dBSchema0 = new DBSchema("[^JD`WFR*,X,K");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u / ; P_0 = F", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "- 0", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("^;+N");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("^;+NCONSTRAINT \"- 0\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("h-=", true);
      DBCatalog dBCatalog0 = new DBCatalog("h - =", (Database) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "h-=";
      stringArray0[1] = "h - =";
      stringArray0[2] = "~9v(3?";
      stringArray0[3] = "h - =";
      stringArray0[4] = "~9v(3?";
      stringArray0[5] = "h - =";
      stringArray0[6] = "h - =";
      stringArray0[7] = "h - =";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "~9v(3?", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("~9v(3?", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b9");
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("alter indext</]`x w(2i<");
      SQLUtil.removeComments("alter materialized view");
      SQLUtil.normalize("alter materialized view)r6_$zu}()~aes,[@i", false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter materialized view) r6_ $  zu } () ~ aes, [ @ i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
