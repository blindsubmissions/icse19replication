/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:37:40 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.not();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('%');
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CVuB*X");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("CVuB", token0.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.isIdentifierChar('H');
      xPathLexer0.identifier();
      xPathLexer0.hasMoreChars();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.consume(0);
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.div();
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      assertEquals("com.werken.saxpath.Token", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.consume(0);
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.identifier();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.setXPath(".>}{Lrm@[m>qgw6x(Ht");
      Token token2 = xPathLexer0.identifier();
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (13) (>)", string0);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token3);
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("{", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(19, int0);
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals(">", token3.getTokenText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.currentPosition();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      boolean boolean0 = xPathLexer0.isIdentifierChar('g');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.consume((-2949));
      xPathLexer0.consume();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4724866746526006
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer0.LA(0);
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("");
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      Token token0 = xPathLexer0.identifier();
      assertEquals("Dnj", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("*", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("(", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("A", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("v", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("-eZ.", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.colon();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0778338475913798
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(")", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9896905520108047
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.setXPath(".>}{Lrm@[m>qgw6x(Ht");
      Token token2 = xPathLexer0.number();
      assertEquals(".", token2.getTokenText());
      assertEquals(31, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(9, token3.getTokenType());
      assertEquals(">", token3.getTokenText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9490351379851405
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.setXPath(".");
      Token token4 = xPathLexer0.nextToken();
      assertEquals(".", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(".");
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer1.dots();
      xPathLexer0.setXPath(".");
      Token token7 = xPathLexer0.equals();
      assertEquals(".", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.number();
      Token token10 = xPathLexer1.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      char char0 = xPathLexer0.LA(119);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.hasMoreChars();
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4671420945314075
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("to+^72u2%xu1\"$'8");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dots();
      assertEquals("t", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("^", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.or();
      Token token4 = xPathLexer0.colon();
      assertEquals("2", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("u", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token6 = xPathLexer0.star();
      assertEquals("2", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      assertEquals("%", token8.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals("xu1", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.nextToken();
      assertEquals("", token10.getTokenText());
      
      xPathLexer0.operatorName();
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3201178399047757
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("to+^72u2%xu1\"$'8");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("to", token0.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.dots();
      assertEquals("", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("72", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("u", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.colon();
      Token token5 = xPathLexer0.minus();
      assertEquals("x", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token6 = xPathLexer0.star();
      assertEquals("u", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.leftParen();
      Token token7 = xPathLexer0.leftParen();
      assertEquals("\"", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals("$", token8.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      assertNotNull(token9);
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.nextToken();
      assertEquals("", token10.getTokenText());
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer0.operatorName();
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2494452434116239
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("[b", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("q", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("}", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      Token token6 = xPathLexer0.equals();
      assertEquals("", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals("b", token8.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("");
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('a');
      assertTrue(boolean0);
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token10 = xPathLexer0.nextToken();
      assertNotSame(token10, token1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3733623059714435
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-D`?{R");
      Token token0 = xPathLexer0.at();
      assertEquals("-", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      xPathLexer0.setXPath("*\"uiG*N\"n'g)KWC'u<");
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(20, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3904343886591328
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("to+^72u2%xu1\"$'8");
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      assertEquals("to", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.dots();
      assertEquals("^", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.dollar();
      assertEquals("", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("to+^72u2%xu1\"$'8");
      xPathLexer1.operatorName();
      xPathLexer1.number();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("72", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6959863796689305
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.number();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('h');
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4150032210265342
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y0$D\"+[=h0");
      xPathLexer0.and();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      token0.toString();
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.dots();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }
}
