/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:25:40 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(44);
      SimpleNode simpleNode1 = new SimpleNode((-123));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode1.children = nodeArray0;
      simpleNode0.parent = (Node) simpleNode1;
      simpleNode0.jjtAddChild((Node) null, 44);
      simpleNode0.jjtOpen();
      assertEquals(45, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 15;
      SimpleNode simpleNode0 = new SimpleNode(15);
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2048);
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'w';
      charArray0[2] = '6';
      charArray0[3] = 'x';
      charArray0[4] = '(';
      charArray0[5] = 'H';
      charArray0[6] = 't';
      charArray0[7] = ':';
      charArray0[8] = 'K';
      stringReader0.read(charArray0);
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.jjtClose();
      simpleNode0.jjtSetParent((Node) null);
      SimpleNode simpleNode1 = null;
      try {
        simpleNode1 = new SimpleNode((JavaParser) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4427833121586762
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.dump("\"<\"", stringWriter0);
      simpleNode0.setIdentifier("");
      simpleNode0.setIdentifier("");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      simpleNode0.jjtClose();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtClose();
      simpleNode0.jjtAddChild((Node) null, 0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.172993472439513
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = ',';
      charArray0[2] = '\"';
      charArray0[3] = '/';
      stringWriter0.write(charArray0, 0, 0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      simpleNode0.dump("", stringWriter1);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter1.toString());
      
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(862);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtAddChild((Node) null, 1);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add(";");
      simpleNode0.jjtGetParent();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("cJE[", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 862
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6336632569776562
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump((String) null, stringWriter0);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.dump("\"<\"", stringWriter0);
      simpleNode0.jjtGetParent();
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      simpleNode0.dump(" : ", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 102);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter2);
      simpleNode0.dump((String) null, stringWriter2);
      assertEquals(103, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.172993472439513
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.dump("\"<\"", stringWriter0);
      simpleNode0.setIdentifier("");
      simpleNode0.setIdentifier("");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.setIdentifier("\"protected\"");
      simpleNode0.toString();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("\"<\"", stringWriter1);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.48509409130221154
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      arrayList0.add("<<");
      SimpleNode simpleNode2 = new SimpleNode(10);
      simpleNode2.jjtGetParent();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode1.dump(";", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*lshft</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9278749699972223
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("Z-Tv] j}KDhavj #e{");
      simpleNode0.setIdentifier("Z-Tv] j}KDhavj #e{");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("", stringWriter1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.40945861869508926
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-531));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("");
      simpleNode0.id = 10;
      simpleNode0.setIdentifier("&");
      arrayList0.add(">\">Pc-jFyy{h>");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("RWW2XUzxX", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*amp</identifier>\n  <identifier>>\">Pc-jFyy{h></identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*amp</identifier>\n  <identifier>>\">Pc-jFyy{h></identifier>\n</EnumConstant>\n", stringWriter0.toString());
      
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("", stringWriter2);
      assertEquals("<EnumConstant>\n  <identifier>*amp</identifier>\n  <identifier>>\">Pc-jFyy{h></identifier>\n</EnumConstant>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8734641445321513
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      StringWriter stringWriter0 = new StringWriter(8);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("\"<\"", stringWriter0);
      simpleNode0.setIdentifier("");
      simpleNode0.setIdentifier("\"<\"");
      simpleNode0.setIdentifier("&");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.setIdentifier(">=");
      simpleNode0.toString("13e");
      simpleNode0.jjtClose();
      StringReader stringReader0 = new StringReader("");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Node node0 = javaParser0.currNode;
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("na<!V@", stringWriter2);
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<EnumDeclaration>\n  <identifier>\"<\"</identifier>\n  <identifier>*amp</identifier>\n  <identifier>*ge</identifier>\n</EnumDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5305096302300272
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      StringWriter stringWriter0 = new StringWriter(8);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("\"<\"", stringWriter0);
      simpleNode0.setIdentifier("");
      simpleNode0.setIdentifier("\"<\"");
      simpleNode0.jjtSetParent((Node) null);
      stringWriter0.flush();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      StringWriter stringWriter1 = new StringWriter();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter2 = new StringWriter(8);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "&&");
      StringWriter stringWriter4 = stringWriter2.append((CharSequence) "");
      simpleNode0.dump("G3)eJUf{n}tT Mp+Qvw", stringWriter4);
      simpleNode0.dump("|=", stringWriter3);
      simpleNode0.dump("ni", stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<EnumDeclaration>\n  <identifier>\"<\"</identifier>\n  <identifier>*amp</identifier>\n</EnumDeclaration>\n<EnumDeclaration>\n  <identifier>\"<\"</identifier>\n  <identifier>*amp</identifier>\n</EnumDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.806504609875222
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      StringWriter stringWriter0 = new StringWriter(8);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("\"<\"", stringWriter0);
      simpleNode0.setIdentifier("");
      simpleNode0.setIdentifier("\"<\"");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.setIdentifier("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      simpleNode0.setIdentifier(">>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(">>");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("Y,+wIXPdx", stringWriter1);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) null);
      simpleNode0.setIdentifier("z'|)F%\"k|^X");
      simpleNode0.toString();
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump(">>", stringWriter1);
      simpleNode0.dump("Y,+wIXPdx", stringWriter1);
      simpleNode0.dump("*lt", stringWriter2);
      assertEquals("null<EnumDeclaration>\n  <identifier>\"<\"</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>z'|)F%\"k|^X</identifier>\n</EnumDeclaration>\n", stringWriter2.toString());
      assertEquals("null<EnumDeclaration>\n  <identifier>\"<\"</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>z'|)F%\"k|^X</identifier>\n</EnumDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6598720137848267
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      StringWriter stringWriter0 = new StringWriter(8);
      SimpleNode simpleNode1 = new SimpleNode(761);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      arrayList0.add("");
      simpleNode0.setIdentifier("<=");
      arrayList0.add("");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(485);
      SimpleNode simpleNode2 = new SimpleNode(8);
      simpleNode2.setIdentifier("mhV)*lA7v}w'u;+)u8");
      simpleNode0.toString();
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("EnumDeclaration : <=", stringWriter1);
      assertEquals("<EnumDeclaration>\n  <identifier>*le</identifier>\n</EnumDeclaration>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-514));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("G");
      simpleNode0.id = 63;
      simpleNode0.setIdentifier("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      arrayList0.add("NormalAnnotation");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(63);
      SystemInUtil.addInputLine("Modifiers");
      simpleNode0.dump("\"&\"", stringWriter0);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      simpleNode0.dump("f)aY_)AB", stringWriter0);
      simpleNode0.dump("\"&\"", stringWriter2);
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\ncom.soops.CEN4010.JMCA.JParser.JavaCharStream<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter2.toString());
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\ncom.soops.CEN4010.JMCA.JParser.JavaCharStream<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.073542846408523
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 30;
      SimpleNode simpleNode0 = new SimpleNode(30);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.setIdentifier("BHj");
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      arrayList1.add(";");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("<=");
      simpleNode0.dump("<=", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('n');
      stringWriter1.append((CharSequence) ";");
      SimpleNode simpleNode1 = new SimpleNode(1039);
      simpleNode0.setIdentifier("BHj");
      simpleNode1.setIdentifier(";");
      simpleNode0.toString();
      StringWriter stringWriter2 = null;
      try {
        stringWriter2 = new StringWriter((-1528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.7549967581308246
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-520));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.iterator();
      arrayList0.add("G");
      simpleNode0.id = 5;
      simpleNode0.setIdentifier("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      arrayList0.add("NormalAnnotation");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(5);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.setIdentifier("<");
      simpleNode0.toString();
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("G", stringWriter0);
      StringWriter stringWriter4 = new StringWriter();
      simpleNode0.dump("NormalAnnotation", stringWriter3);
      assertEquals("<ClassOrInterfaceDeclaration>\n  <identifier>G</identifier>\n  <identifier>com.soops.CEN4010.JMCA.JParser.JavaCharStream</identifier>\n  <identifier>NormalAnnotation</identifier>\n  <identifier>*lt</identifier>\n</ClassOrInterfaceDeclaration>\n", stringWriter3.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("{");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.setIdentifier("{");
      simpleNode0.toString("");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = ',';
      charArray0[2] = '\"';
      charArray0[3] = '/';
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{");
      simpleNode0.dump("", stringWriter1);
      assertEquals("{<CompilationUnit>\n</CompilationUnit>\n", stringWriter1.toString());
      assertEquals("{<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      StringWriter stringWriter0 = new StringWriter(30);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'w';
      charArray0[2] = ')';
      charArray0[3] = '|';
      charArray0[4] = '8';
      simpleNode0.setIdentifier("}");
      simpleNode0.toString();
      StringWriter stringWriter1 = new StringWriter(1238);
      StringReader stringReader0 = new StringReader("}");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 30);
      simpleNode1.dump("/2Os|xbK", stringWriter0);
      simpleNode1.dump("?y4OtZn4", stringWriter1);
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals("<ClassOrInterfaceType>\n</ClassOrInterfaceType>\n", stringWriter1.toString());
  }
}
