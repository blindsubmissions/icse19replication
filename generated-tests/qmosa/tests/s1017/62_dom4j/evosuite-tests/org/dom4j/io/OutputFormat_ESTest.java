/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:27:54 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y8M8[nr;$?*M@ecb4g");
      outputFormat0.setIndentSize(0);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertTrue(boolean0);
      
      outputFormat0.getIndent();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setEncoding("");
      outputFormat0.setIndent("");
      outputFormat0.setPadText(false);
      outputFormat0.setNewlines(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setIndent(false);
      outputFormat2.setPadText(false);
      outputFormat0.setEncoding("t");
      assertEquals("t", outputFormat0.getEncoding());
      
      boolean boolean0 = outputFormat1.isNewLineAfterDeclaration();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("S'~ enaz]taE`F09H");
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(282);
      outputFormat0.setLineSeparator("S'~ enaz]taE`F09H");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(false);
      outputFormat0.isPadText();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat1.isTrimText();
      outputFormat0.setOmitEncoding(false);
      assertEquals("S'~ enaz]taE`F09H", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(false);
      outputFormat0.setLineSeparator("3ZL*f'{]Uyr%T@SY");
      outputFormat0.setIndent("");
      outputFormat0.setIndent("li<E?:_7bl?b8Ym\"");
      outputFormat0.setIndent(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isExpandEmptyElements();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3ZL*f'{]Uyr%T@SY";
      stringArray0[1] = "3ZL*f'{]Uyr%T@SY";
      stringArray0[2] = "li<E?:_7bl?b8Ym\"";
      stringArray0[3] = "3ZL*f'{]Uyr%T@SY";
      stringArray0[4] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setPadText(false);
      OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding("b");
      outputFormat0.setExpandEmptyElements(false);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "b";
      stringArray1[2] = "b";
      stringArray1[3] = "li<E?:_7bl?b8Ym\"";
      int int0 = outputFormat0.parseOptions(stringArray1, 34);
      assertEquals("3ZL*f'{]Uyr%T@SY", outputFormat0.getLineSeparator());
      assertEquals(34, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("FDLX&o2", false, "WuGAQeqAYL;Im");
      outputFormat0.isPadText();
      outputFormat0.setNewlines(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "FDLX&o2";
      stringArray0[1] = "\n";
      outputFormat0.setNewlines(true);
      stringArray0[2] = "FDLX&o2";
      stringArray0[3] = "\n";
      stringArray0[4] = "\n";
      stringArray0[5] = "WuGAQeqAYL;Im";
      stringArray0[6] = "WuGAQeqAYL;Im";
      outputFormat0.parseOptions(stringArray0, 3099);
      assertTrue(outputFormat0.isNewlines());
      
      outputFormat1.setExpandEmptyElements(false);
      outputFormat1.setOmitEncoding(false);
      OutputFormat.createCompactFormat();
      outputFormat1.setIndent(true);
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("");
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setLineSeparator("");
      outputFormat0.getNewLineAfterNTags();
      OutputFormat.createPrettyPrint();
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent((String) null);
      outputFormat0.isNewlines();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setTrimText(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(false);
      outputFormat0.setLineSeparator("szd]7R)h");
      outputFormat0.setNewlines(false);
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("szd]7R)h", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.getEncoding();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isPadText();
      outputFormat0.setLineSeparator("UTF-8");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setIndent(true);
      outputFormat0.getNewLineAfterNTags();
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals("UTF-8", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterNTags(1);
      char char0 = '{';
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('{');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ({)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("i[%u2o+z6.5KEUV", false, "i[%u2o+z6.5KEUV");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("i[%u2o+z6.5KEUV");
      outputFormat0.setPadText(false);
      outputFormat0.setEncoding("i[%u2o+z6.5KEUV");
      outputFormat0.getIndent();
      outputFormat0.setLineSeparator("i[%u2o+z6.5KEUV");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setXHTML(false);
      outputFormat0.setXHTML(true);
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertTrue(outputFormat0.isXHTML());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "W";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "-expandEmpty";
      stringArray0[4] = "-expandEmpty";
      stringArray0[5] = "-expandEmpty";
      stringArray0[6] = "-expandEmpty";
      stringArray0[7] = "-expandEmpty";
      stringArray0[8] = "-expandEmpty";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndentSize(0);
      outputFormat0.setExpandEmptyElements(true);
      assertEquals("", outputFormat0.getIndent());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(" ");
      outputFormat0.setLineSeparator(" ");
      outputFormat0.setIndent("");
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(" ");
      outputFormat0.setNewlines(false);
      outputFormat0.setPadText(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setXHTML(true);
      OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7309439966762843
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setXHTML(false);
      OutputFormat.createPrettyPrint();
      outputFormat0.setNewlines(true);
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-xhtmlO[v}>R1#\"Bb+^3X;";
      stringArray0[1] = "W;NNSGC4lp1e";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "\"T<*#M";
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (r)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = new OutputFormat((String) null);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.setEncoding((String) null);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2892729643178154
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|!~75mEE*i~", false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat1.isSuppressDeclaration();
      outputFormat0.setIndent("|!~75mEE*i~");
      outputFormat1.isNewLineAfterDeclaration();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[1];
      outputFormat0.setNewLineAfterNTags(0);
      stringArray0[0] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.216228098485001
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize(0);
      outputFormat0.isSuppressDeclaration();
      outputFormat2.setIndent("-lineSeparator");
      outputFormat2.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-expandEmpty\"T<*#MdOeQ&<r";
      stringArray0[2] = "-expandEmpty\"T<*#MdOeQ&<r";
      stringArray0[3] = "#(U_GGn>S-";
      outputFormat2.parseOptions(stringArray0, 0);
      outputFormat1.setLineSeparator("-xhtmlhV}SXq&SLD");
      outputFormat2.setNewLineAfterDeclaration(false);
      assertEquals("-expandEmpty\"T<*#MdOeQ&<r", outputFormat2.getLineSeparator());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6650690731287026
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      outputFormat0.setEncoding("~zRGdk@4<0k>8q<:I");
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat0.isNewLineAfterDeclaration();
      OutputFormat.createCompactFormat();
      outputFormat0.isSuppressDeclaration();
      outputFormat1.setIndent("-omitEncoding");
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.isSuppressDeclaration();
      OutputFormat outputFormat3 = new OutputFormat(" ", true);
      outputFormat3.setNewlines(false);
      OutputFormat outputFormat4 = new OutputFormat("~zRGdk@4<0k>8q<:I");
      outputFormat3.setIndentSize(1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "-expandEmpty-xhtmlO[v}>";
      stringArray0[2] = "-expandEmpty-xhtmlO[v}>";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize(0);
      outputFormat1.isNewlines();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmlO[v}>";
      stringArray0[1] = "LBp2S+z";
      stringArray0[2] = "-xhtmlO[v}>";
      stringArray0[3] = "5d`[X>0t]";
      stringArray0[4] = "-suppressDeclaration";
      stringArray0[5] = "-xhtmlO[v}>";
      stringArray0[5] = "-indentSize";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-suppressDeclaration";
      stringArray1[1] = "-indentSize";
      stringArray1[2] = "-suppressDeclaration";
      stringArray1[3] = "5d`[X>0t]";
      stringArray1[4] = "LBp2S+z";
      stringArray1[5] = "LBp2S+z";
      stringArray1[6] = "-omitEncoding";
      stringArray1[7] = "-suppressDeclaration";
      stringArray1[8] = "%!ko!";
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray1, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-suppressDeclaration\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize(0);
      String[] stringArray0 = new String[8];
      outputFormat1.setXHTML(true);
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-expandEmpty";
      stringArray0[3] = "-omitEncoding";
      OutputFormat outputFormat2 = new OutputFormat("-suppressDeclaration", true, "4hg");
      outputFormat1.setIndentSize((-12));
      assertTrue(outputFormat1.isXHTML());
      
      OutputFormat outputFormat3 = new OutputFormat("-indentSize", false);
      outputFormat3.setIndent(false);
      outputFormat0.parseOptions(stringArray0, 1328);
      outputFormat2.parseOptions(stringArray0, 2110);
      outputFormat3.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat3.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.669976803113512
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize(0);
      outputFormat1.isNewlines();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "zWe}>b7_>ZxhW3";
      stringArray0[2] = "Y<xerj";
      outputFormat1.parseOptions(stringArray0, 0);
      OutputFormat outputFormat3 = new OutputFormat("?Fp>~4<2Jk'", false, "zWe}>b7_>ZxhW3");
      outputFormat1.setIndentSize((-823));
      outputFormat2.setIndent(true);
      outputFormat2.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, (-823));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -823
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0791615912646864
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty");
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = new OutputFormat("-trimText", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "-expandEmpty";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "-trimText";
      outputFormat1.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('#');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (#)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "-expandEmpty";
      String string1 = "5d`X>0]";
      String[] stringArray0 = new String[4];
      stringArray0[1] = "-expandEmpty";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "5d`X>0]";
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", false);
      outputFormat0.parseOptions(stringArray0, 558);
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setNewLineAfterDeclaration(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-297020930));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -297020930
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2638576869792812
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndentSize(0);
      OutputFormat outputFormat2 = new OutputFormat("-indent", true, "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-omitEncoding";
      stringArray0[3] = "-omitEncoding";
      String string0 = "^\\uqgPunEM5";
      stringArray0[4] = string0;
      stringArray0[5] = "De$";
      stringArray0[6] = "-indent";
      stringArray0[7] = "-indent";
      stringArray0[8] = "-omitEncoding";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.parseOptions(stringArray0, 1);
      assertEquals("-omitEncoding", outputFormat1.getEncoding());
      
      OutputFormat outputFormat3 = new OutputFormat(":vn:=K", false, "-indent");
      outputFormat3.setIndent("-omitEncoding");
      outputFormat3.parseOptions(stringArray0, 39);
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3020613918729727
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-padText";
      stringArray0[1] = " B'XZyHAJlP5^V";
      stringArray0[2] = "/VFn+8$2o_f7`2~8\"6";
      stringArray0[3] = "-padText";
      stringArray0[4] = "!qHeX<m";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isTrimText());
      assertEquals(1, int0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
  }
}
