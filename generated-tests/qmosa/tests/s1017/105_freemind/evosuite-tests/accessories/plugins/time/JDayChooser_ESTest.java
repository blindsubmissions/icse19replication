/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:05:40 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import freemind.controller.Controller;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.net.URI;
import java.sql.Time;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFCIDSystemInfo;
import org.apache.fop.pdf.PDFCMap;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemExtensionDecl;
import org.apache.xerces.parsers.SecurityConfiguration;
import org.apache.xml.serializer.EmptySerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.red;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-4829);
      Color.RGBtoHSB(2474, 2474, 315, floatArray0);
      floatArray0[1] = (float) (-4829);
      floatArray0[2] = (float) (-4829);
      jDayChooser0.getMouseListeners();
      color0.getColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      Color color1 = null;
      try {
        color1 = new Color((-4829), 3307, 80, 3307);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red Green
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.PINK;
      Color.getColor("");
      jDayChooser0.setWeekdayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getMinSelectableDate();
      int int0 = (-4228);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-4228));
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("freemind.controller.actions.generated.instance.CollaborationHello");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Insets insets0 = jDayChooser0.getInsets((Insets) null);
      jDayChooser0.getInsets(insets0);
      jDayChooser0.setDay(209);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBackground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.keyTyped((KeyEvent) null);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      java.sql.Date date0 = new java.sql.Date(4117L);
      // Undeclared exception!
      try { 
        unmarshallingContext0.parseElementDate("day", "' 0w5}j=", (Date) date0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolkit();
      jDayChooser0.setFocus();
      int int0 = 3668;
      jDayChooser0.setMonth(3668);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getVerifyInputWhenFocusTarget();
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getDay();
      ActionEvent actionEvent0 = new ActionEvent("org.apache.batik.css.engine.CSSEngine$DOMCharacterDataModifiedListener", (-478), "Must provide yChannel");
      actionEvent0.setSource(jDayChooser0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.validate();
      jDayChooser0.firePropertyChange("s<W", (short)7, (short)3039);
      jDayChooser0.firePropertyChange("", 2912.3743597913, 2912.3743597913);
      jDayChooser0.getInsets();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("#yg)Egff] 2_lsRJ}s");
      jCheckBoxMenuItem0.getAccelerator();
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      jDayChooser0.setDecorationBordersVisible(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "s<W";
      stringArray0[1] = "day";
      stringArray0[2] = "s<W";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.weekPanel;
      jDayChooser0.weekPanel = jPanel0;
      jDayChooser0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, 0, "5`&ta`o_&", 0, 210);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      JButton jButton0 = jDayChooser0.selectedDay;
      jDayChooser0.selectedDay = null;
      String string0 = "A-.";
      jDayChooser0.firePropertyChange("A-.", (short)181, (short)181);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Time time0 = new Time(0L);
      jDayChooser0.setSelectableDateRange(time0, time0);
      jDayChooser0.getSundayForeground();
      int int0 = 4;
      ActionEvent actionEvent0 = new ActionEvent(color0, 4, "A-.", 28);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Color cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.validate();
      jDayChooser0.firePropertyChange("s<W", (short)7, (short)3039);
      jDayChooser0.firePropertyChange("", 2912.3743597913, 2912.3743597913);
      jDayChooser0.getInsets();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("#yg)Egff] 2_lsRJ}s");
      jCheckBoxMenuItem0.getAccelerator();
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      jDayChooser0.setDecorationBordersVisible(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "s<W";
      stringArray0[1] = "day";
      stringArray0[2] = "s<W";
      stringArray0[3] = "day";
      SystemColor systemColor0 = SystemColor.textInactiveText;
      systemColor0.getRGBComponents((float[]) null);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.keyReleased((KeyEvent) null);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3251, 3251, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusPainted();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3251;
      floatArray0[2] = (float) (-56);
      SystemColor systemColor1 = SystemColor.textHighlightText;
      jDayChooser0.setSundayForeground(systemColor1);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.691693794629735
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setMaxSelectableDate(date0);
      int int0 = (-4228);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-4228));
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("freemind.controller.actions.generated.instance.CollaborationHello");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7734338836114287
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      jDayChooser0.isOptimizedDrawingEnabled();
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(28);
      jDayChooser0.setDay(28);
      jDayChooser0.getMaxSelectableDate();
      Locale locale0 = Locale.ENGLISH;
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8199156776450796
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      Time time0 = new Time((-1L));
      jDayChooser0.setSelectableDateRange(time0, (Date) null);
      jDayChooser0.getSundayForeground();
      int int0 = 4;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 4, "day", 4);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBackground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      Color color0 = Color.white;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDisplayedMnemonic();
      Color color1 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setBackground(color1);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton1.getLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3251, 3251, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      Locale locale0 = Locale.ITALIAN;
      MockCalendar.getInstance(locale0);
      jDayChooser0.getFocusTraversalPolicy();
      ActionEvent actionEvent0 = new ActionEvent(mockSimpleDateFormat0, 13, (String) null);
      jDayChooser0.getTreeLock();
      Locale locale1 = Locale.CHINESE;
      SecurityConfiguration securityConfiguration0 = new SecurityConfiguration();
      Locale locale2 = securityConfiguration0.getLocale();
      jDayChooser0.setLocale(locale2);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
