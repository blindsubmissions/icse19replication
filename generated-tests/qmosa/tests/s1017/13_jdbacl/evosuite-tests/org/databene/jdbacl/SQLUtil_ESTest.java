/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:17:21 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.net.InetAddress;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueLobDb;
import org.hsqldb.lib.HsqlByteArrayOutputStream;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A CallableStatement function was executed and the out parameter {0} was of type {1} however type {2} was registered.";
      stringArray0[1] = "A CallableStatement function was executed and the out parameter {0} was of type {1} however type {2} was registered.";
      stringArray0[2] = "A CallableStatement function was executed and the out parameter {0} was of type {1} however type {2} was registered.";
      stringArray0[3] = "A CallableStatement function was executed and the out parameter {0} was of type {1} however type {2} was registered.";
      SQLUtil.leftJoin("A CallableStatement function was executed and the out parameter {0} was of type {1} however type {2} was registered.", stringArray0, "A CallableStatement function was executed and the out parameter {0} was of type {1} however type {2} was registered.", "Le}pZ:Ik", stringArray0);
      String string0 = "alter session";
      int int0 = (-217);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-217));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "42Z20";
      SQLUtil.substituteMarkers("42Z20", "IL6&W^8eVdvg^P-6", (Object) null);
      String string1 = "u(m< #6zBT!ej)9:Z|";
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("u(m< #6zBT!ej)9:Z|", "IL6&W^8eVdvg^P-6", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("42Z20");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '42Z20'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "";
      stringArray0[1] = "";
      stringArray0[2] = ",";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("FOREIGN KEY ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "alter materialized view";
      stringArray0[7] = "";
      SQLUtil.innerJoin("", stringArray0, "", ".p2", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "alter materialized view";
      stringArray1[2] = "";
      stringArray1[3] = " as .p2 on . = .p2. and . = .p2. and . = .p2. and . = .p2. and . = .p2. and . = .p2. and .alter materialized view = .p2.alter materialized view and . = .p2.";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, alter materialized view, ,  as .p2 on . = .p2. and . = .p2. and . = .p2. and . = .p2. and . = .p2. and . = .p2. and .alter materialized view = .p2.alter materialized view and . = .p2.)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/#ZKq9~iQT>;IPl");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/#ZKq9~iQT>;IPl";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = "hI^0p`Y rk^am{{.";
      VersionNumber versionNumber0 = VersionNumber.valueOf("hI^0p`Y rk^am{{.");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "/#ZKq9~iQT>;IPl", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("G(M40p<S%t+D;6Nnl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'G(M40p<S%t+D;6Nnl'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("${)G", dBCatalog0);
      dBCatalog0.isIdentical(dBSchema0);
      SQLUtil.ownerDotComponent(dBCatalog0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isQuery("");
      String string0 = "{Mg\"u";
      SQLUtil.isDML("{Mg\"u");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{Mg\"u";
      stringArray0[1] = "";
      stringArray0[2] = "BTREE";
      stringArray0[3] = "{Mg\"u";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.isProcedureCall("WVt<`75%/~3Z");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      String string0 = "NX81^i@V$l";
      TableContainer tableContainer0 = new TableContainer("WVt<`75%/~3Z");
      String string1 = "";
      tableContainer0.getTable("");
      int int0 = 13;
      String string2 = "\\w/+)ky%I55}+x!r";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NX81^i@V$l", (DBTable) null, 13, "w/+)ky%I55}+x!r");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) null, 0, "");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string3 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6020559154587262
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.isProcedureCall("1ACfj51|Lax6P");
      SQLUtil.isDDL("1ACfj51|Lax6P");
      SQLUtil.normalize("1ACfj51|Lax6P", false);
      SQLUtil.mutatesStructure("1ACf  j51 | Lax6P");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "k&~VyijnyKo~";
      String string1 = "";
      int int0 = 481;
      StringBuilder stringBuilder0 = new StringBuilder(481);
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'h';
      charArray0[2] = '1';
      charArray0[3] = '`';
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 3185, (-3383));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("exec");
      tableContainer0.getSchema();
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container exec", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "54038";
      stringArray0[1] = "54038";
      String string1 = SQLUtil.renderColumnListWithTableName("54038", stringArray0);
      assertEquals("54038.54038, 54038.54038", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.704478497322478
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.normalize("'L(i#q", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("'L(i#q");
      assertNull(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      int int0 = 807;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view1acfj51|lax6p", (DBTable) null, 807, "drop materialized view1acfj51|lax6p");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder(807);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder0.appendCodePoint(462);
      stringBuilder0.append((float) (-1145));
      stringBuilder1.append((long) 462);
      SQLUtil.addOptionalCondition("DROP MATERIALIZED VIEW1ACFJ51|LAX6P", stringBuilder2);
      TableContainer tableContainer0 = new TableContainer("LOY", (CompositeDBObject<? extends DBObject>) null);
      TableContainer tableContainer1 = new TableContainer((String) null);
      tableContainer1.getTable("DROP MATERIALIZED VIEW1ACFJ51|LAX6P");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("inner", false, (DBTable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.172993472439513
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.normalize("'L(i#q", false);
      SQLUtil.isQuery("org.apache.derby.impl.sql.GenericColumnDescriptor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.sql.GenericColumnDescriptor";
      stringArray0[1] = "\"}1_V`|~A v";
      stringArray0[2] = "'L(i#q";
      stringArray0[3] = "org.apache.derby.impl.sql.GenericColumnDescriptor";
      stringArray0[4] = "F";
      stringArray0[5] = "'L(i#q'";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7489015016365568
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.isQuery("");
      SQLUtil.isDML("");
      SQLUtil.normalize("org.hsqldb.Library.substring", false);
      SQLUtil.mutatesStructure("org.hsqldb.Library.substring");
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder(3037);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.isQuery("");
      SQLUtil.isDML("{Mg\"u");
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("exec");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(0);
      int int0 = 2147483645;
      StringBuilder stringBuilder2 = new StringBuilder(0);
      stringBuilder2.append(0);
      SQLUtil.addRequiredCondition("", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-3577), (-4948));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3577
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("{Mg\"u");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      String string0 = SQLUtil.normalize("rename", true);
      assertEquals("rename", string0);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("rename");
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.isDDL("1ACfj51|Lax6P");
      SQLUtil sQLUtil0 = new SQLUtil();
      int int0 = 481;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-463280523), "PeBZby_zhc%ru^C");
      Integer integer0 = new Integer((-463280523));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1ACfj51|Lax6P", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDML("h2.shareLinkedConnections");
      SQLUtil.isQuery("");
      String string0 = " WHERE ";
      TableContainer tableContainer0 = new TableContainer(" NULL");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" WHERE ", (DBSchema) null);
      defaultDBTable1.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        defaultDBTable1.addUniqueConstraint((DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view1acfj51|lax6p", (DBTable) null, 807, "drop materialized view1acfj51|lax6p");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder(807);
      StringBuffer stringBuffer0 = new StringBuffer();
      VersionNumber versionNumber0 = VersionNumber.valueOf("1nneQr");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("DROP MATERIALIZED VIEW1ACFJ51|LAX6P", "org.hsqldb.library.sub", versionNumber0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      SQLUtil.addOptionalCondition("drop materialized view1acfj51|lax6p", stringBuilder0);
      assertEquals("drop materialized view1acfj51|lax6p", stringBuilder0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6393025427119405
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("K");
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isDML("K");
      boolean boolean1 = SQLUtil.isQuery("K");
      assertFalse(boolean1);
      
      SQLUtil sQLUtil1 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder(95);
      Boolean boolean2 = SQLUtil.mutatesStructure("insert,");
      assertTrue(boolean2.equals((Object)boolean0));
      
      String string0 = SQLUtil.normalize("1>/Cq%4)`6~H.P", true);
      assertEquals("1 > / Cq % 4) ` 6 ~ H.P", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5229550675313182
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("create tableinsert,", true);
      SQLUtil.mutatesStructure("org.hsqldb.Library.substring");
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder(1984);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.toString();
      DBSchema dBSchema0 = new DBSchema("${)G", dBCatalog0);
      String string0 = SQLUtil.normalize("${)G", true);
      assertEquals("$ {) G", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.${)G", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.isQuery("");
      SQLUtil.isDML("{Mg\"u");
      String string0 = "H(q";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("H(q");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "H(q", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("exec");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(0);
      int int0 = 2147483645;
      StringBuilder stringBuilder2 = new StringBuilder(0);
      StringBuilder stringBuilder3 = stringBuilder2.append(0);
      SQLUtil.addRequiredCondition("", stringBuilder1);
      StringBuilder stringBuilder4 = stringBuilder0.insert(0, (-4958));
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder3, nameSpec0);
      StringBuilder stringBuilder5 = stringBuilder4.append(0.0);
      // Undeclared exception!
      try { 
        stringBuilder5.replace(476, 189, "H(q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Character character0 = Character.valueOf('J');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'J'", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.589280063598296
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.normalize("L(#q", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L (# q";
      stringArray0[1] = "L (# q";
      stringArray0[2] = "L(#q";
      stringArray0[3] = "L(#q";
      stringArray0[4] = "L (# q";
      stringArray0[5] = "L(#q";
      stringArray0[6] = "L(#q";
      stringArray0[7] = "L (# q";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("L (# q", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      int int0 = 940;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(940, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 940
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.removeComments("");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDML("");
      SQLUtil.isQuery("");
      SQLUtil sQLUtil1 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("insert,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1>/Cq%4)`6~H.P";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = "";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      SQLUtil.addOptionalCondition("1>/Cq%4)`6~H.P", stringBuilder1);
      SQLUtil.isDML("");
      Random.setNextRandom(283);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3445982481028228
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.normalize("L(#q", false);
      StringBuilder stringBuilder0 = new StringBuilder("L (# q");
      SQLUtil.addRequiredCondition("L (# q", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("Y{)SKs", dBCatalog0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("Y{)SKs");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Y{)SKs", (String) null, versionNumber0);
      defaultDatabase0.getTable("Ey5gRsjg", false);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4184836619456567
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = "${)G";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-2114);
      DBDataType dBDataType0 = DBDataType.getInstance((-2114), "\u0001\u018C");
      Integer integer0 = new Integer((-2114));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PeBZby_zhc%ru^C", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDML("insert)");
      SQLUtil.isQuery("");
      TableContainer tableContainer0 = new TableContainer("PeBZby_zhc%ru^C");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("\u0001\u018C", (DBSchema) null);
      defaultDBTable1.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        defaultDBTable0.addUniqueConstraint((DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9836002995230935
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.isQuery("");
      SQLUtil.isDML("Mg\"u");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("H(q");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "H(q", false, stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rjX");
      boolean boolean0 = SQLUtil.isDML("RENAME ");
      boolean boolean1 = SQLUtil.isQuery("4O2 Rm$8QukI(>H|ze4");
      assertTrue(boolean1 == boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8751218560198155
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isDDL("1ACfj51|Lax6P");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("bW?lMg<k-4*", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("bW?lMg<k-4*", stringBuilder0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("u!?&xpQ_lqh");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "u!?&xpQ_lqh";
      stringArray0[1] = "CHECK ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop index", false, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (u!?&xpQ_lqh, CHECK )", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(11, "^OF\"DjFDtE");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("catalog null", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("catalog null", (DBTable) null, dBDataType0, integer2);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("catalog null", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("catalog null, catalog null, catalog null", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "alter session";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.mutatesDataOrStructure("alter session");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter session";
      stringArray0[1] = "alter session";
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(431);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 431, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.removeComments("tu1zML^m[");
      int int0 = 4126;
      Random.setNextRandom(4126);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tu1zML^m[");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isQuery("org.h2.command.dml.Update");
      System.setCurrentTimeMillis(4126);
      System.setCurrentTimeMillis((-3080L));
      SQLUtil.normalize("6&<\"Kra%=)O(}", false);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("P06 41G>+1[.,Rp]", false);
      assertEquals("P06 41G > + 1 [., Rp ]", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = SQLUtil.normalize("M=QuAvosY)Hv*;Y^", false);
      assertEquals("M = QuAvosY) Hv * ; Y ^", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.05772231676108
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.isQuery("");
      boolean boolean0 = SQLUtil.isDML("Mg\"u");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Mg\"u");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Mg\"u", false, stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean1 = SQLUtil.isQuery("4O2 Rm$8QukI(>H|ze4");
      assertFalse(boolean1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("select4o2 rm$8quki(>h|ze4");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(",=q:{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W6F+XK(+ke*k},f,2e=", dBSchema0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "W6F+XK(+ke*k},f,2e=", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT ", defaultDBTable0, (DBDataType) null, integer0, integer1);
      StringBuilder stringBuilder0 = new StringBuilder(327682);
      StringBuilder stringBuilder1 = stringBuilder0.append(2);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("create table", false);
      assertEquals("create table", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder("L(#q");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("create table");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.removeComments("/E>.O!bu.-N");
      DBDataType dBDataType0 = DBDataType.getInstance(45, "ikt@MC+q2q,6*w8y");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deletecall", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, ",", "E0v33gHIR");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      assertEquals("CHECK E0v33gHIR", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.808045719583997
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("delete");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, "\u0001Z{l/`e", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1485);
      String string0 = SQLUtil.normalize("/E>.O!bu.-N", true);
      assertEquals("/ E >.O ! bu.- N", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "P06 41G>+1[.,Rp]";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("V=6xZ");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "H0EHGyJxx!SF^pMRy", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("P06 41G>+1[.,Rp]", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) "H0EHGyJxx!SF^pMRy");
      int int0 = (-122);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-122), "1acfj51|lax6p");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -122
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("/*");
      SQLUtil.removeComments("/Oto");
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2114), "\u0001\u018C");
      Integer integer0 = new Integer((-2114));
      dBDataType0.isNumber();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0001\u018C");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("gS6'Qm5ro~-Y6", defaultDBTable0, dBDataType0, integer1);
      Integer integer2 = new Integer(244);
      defaultDBColumn0.setFractionDigits(integer2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("P06 41G>+1[.,Rp]");
      defaultDBTable0.getPrimaryKeyConstraint();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      boolean boolean0 = false;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop i";
      stringArray0[1] = "drop i";
      stringArray0[2] = "P06 41G>+1[.,Rp]";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop i", false, stringArray0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "select4";
      stringArray0[1] = "select4";
      stringArray0[2] = "select4";
      stringArray0[3] = "select4";
      stringArray0[4] = "select4";
      stringArray0[5] = "select4";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("select4", false, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select4", defaultDBTable0, 42, "rollback");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      Random.setNextRandom((-585));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("--");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("--");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Rj}e";
      stringArray0[1] = "delete";
      stringArray0[2] = "--";
      stringArray0[3] = null;
      stringArray0[4] = " NULL";
      stringArray0[5] = "--";
      stringArray0[6] = null;
      stringArray0[7] = "--";
      stringArray0[8] = "--";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBDataType dBDataType0 = DBDataType.getInstance(2873, "callselect4");
      Integer integer0 = new Integer((-3620));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" CALLSELECT4(-3620) NULL", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("P06 41G>+1[.,Rp]");
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2873, "");
      Integer integer0 = new Integer(2873);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" on ", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)57;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(2873, byteArray0, (-1L));
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      HsqlByteArrayOutputStream hsqlByteArrayOutputStream0 = rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(hsqlByteArrayOutputStream0);
      mockPrintWriter0.println(17);
      PrintWriter printWriter0 = mockPrintWriter0.append('j');
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.removeComments("`IS_JA}`l%uRqx m+t");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("|R1!B0(6w5@~ay*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: |R1!B0(6w5@~ay*
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.7224980276090903
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.normalize("A$;~72", false);
      SQLUtil.isQuery("select into");
      SQLUtil.removeComments("A $ ; ~ 72");
      System.setCurrentTimeMillis(1118L);
      String string0 = "zLeKe3jya+";
      DBCatalog dBCatalog0 = new DBCatalog("e:[A)PWUS?>!Y3?i");
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("zLeKe3jya+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'zLeKe3jya+'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter session";
      stringArray0[1] = "alter session";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[3], true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "dro3pi";
      stringArray0[2] = "dro3pi";
      stringArray0[1] = "P06 41G>+1[.,Rp]";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "dro3pi", false, stringArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("dro3pi");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(pipedWriter0, false);
      mockPrintWriter2.append((CharSequence) "dro3pi");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      String string0 = " ADD ";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("kC#.CW>JT2qE1/<jT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("P06 41G>+1[.,Rp]");
      defaultDBTable0.getPrimaryKeyConstraint();
      DBDataType dBDataType0 = DBDataType.getInstance(14, "8f]YMQ5,$HC.rg");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "7^Ii+zbwk~zbFj", (SchemaDescriptor) null, 14, '5');
      ConstraintDescriptorList constraintDescriptorList0 = tableDescriptor0.getConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("8f]YMQ5,$HC.rg", "P06 41G>+1[.,Rp]", versionNumber0);
      defaultDatabase0.getTable("7^Ii+zbwk~zbFj", false);
      defaultDBTable0.addReferrer((DBTable) null);
      Integer integer0 = new Integer(14);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("P06 41G>+1[.,Rp]", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("P06 41G>+1[.,Rp] 8F]YMQ5,$HC.RG(14) NULL", string0);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("P06 41G>+1[.,Rp] 8F]YMQ5,$HC.RG(14) NULL");
      assertEquals(2, objectArray0.length);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader(6);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.nval = (double) 6;
      String string0 = SQLUtil.renderNumber(streamTokenizer1);
      assertEquals("6", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, (-2218), "execute1acf  j51 | lax6p");
      defaultDBColumn0.setDefaultValue("O*vD^");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop table EXECUTE1ACF  J51 | LAX6P DEFAULT O*vD^ NULL", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop table";
      stringArray0[1] = "drop table";
      stringArray0[2] = "drop table";
      stringArray0[3] = "eEr";
      stringArray0[4] = "drop table";
      stringArray0[5] = "drop table";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop table", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("drop table");
      assertEquals(1, objectArray0.length);
  }
}
