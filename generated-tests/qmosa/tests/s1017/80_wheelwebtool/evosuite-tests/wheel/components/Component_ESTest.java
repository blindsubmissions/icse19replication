/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:36:43 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "'";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'");
      DateInput dateInput0 = new DateInput((Component) null, "'", "'", stringBuilder0);
      Table table0 = null;
      try {
        table0 = new Table(dateInput0, "'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "wg6vm7aWg]t^&48";
      String string1 = "[ykN=]T";
      ISelectModel iSelectModel0 = null;
      String string2 = null;
      ElExpression elExpression0 = new ElExpression((String) null);
      ElExpression elExpression1 = elExpression0.errorMessage((String) null);
      RadioGroup radioGroup0 = new RadioGroup((Component) null, "wg6vm7aWg]t^&48", "[ykN=]T", (ISelectModel) null, elExpression1);
      String string3 = "";
      Select select0 = null;
      try {
        select0 = new Select(radioGroup0, "(2~2q 4)ye!S'~ ena", "", (CharSequence) null, (ISelectModel) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._injectExposedFields();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6762349391347309
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "li";
      Form form0 = new Form("li");
      Hidden hidden0 = new Hidden(form0, "`=xN_;&90O<D+ct", "li");
      // Undeclared exception!
      try { 
        form0.addFormElement(hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ",K.J;";
      Form form0 = new Form(",K.J;");
      Form form1 = form0.renderHint(",K.J;");
      // Undeclared exception!
      try { 
        form1.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Table table1 = table0.renderHint("");
      String string0 = "\\&r";
      // Undeclared exception!
      try { 
        table1.id("&r");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("~iQT>;I");
      dynamicSelectModel1.getTopLevelComponent();
      Checkbox checkbox0 = new Checkbox((Component) null, "~iQT>;I", "~iQT>;I");
      FormElement formElement0 = checkbox0.value("");
      // Undeclared exception!
      try { 
        formElement0.meta();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Form form0 = new Form("label");
      String string0 = "/R6rF&\\uV~#}";
      Form form1 = form0.addFormValidationRule(string0, "label");
      form1.addFirst(form0);
      String string1 = "";
      Table table0 = new Table(form1, string1);
      table0.head();
      String string2 = "http://www.w3.org/2001/XMLSchema-instance";
      form0.field(string2);
      form0.strong();
      form1.defaultDomEvent();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "Could not evaluate finder expression ' ";
      Form form0 = new Form("Could not evaluate finder expression ' ");
      // Undeclared exception!
      try { 
        form0.acronym((Object) "Could not evaluate finder expression ' ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      xmlEntityRef0.getTagName();
      xmlEntityRef0.defaultTagName();
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Form form0 = new Form("s");
      DynamicSelectModel dynamicSelectModel0 = form0.selectModel();
      dynamicSelectModel0.enumeration("s");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.var(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = null;
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox(xmlEntityRef0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "A8$,vc";
      Form form0 = new Form("A8$,vc");
      Form form1 = form0.addFormValidationRule("", "");
      String string1 = "";
      ElExpression elExpression0 = new ElExpression("");
      ElExpression elExpression1 = elExpression0.errorMessage("");
      // Undeclared exception!
      try { 
        form1.fileInput("", elExpression1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      Table table0 = new Table(errorPage0, "");
      Table table1 = table0.renderHint("");
      TableBlock tableBlock0 = table1.thead();
      TableRow tableRow0 = tableBlock0.tr();
      Text text0 = new Text(tableRow0, errorPage0);
      tableRow0.sub();
      tableRow0.h2();
      text0.setHtml(true);
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = null;
      dynamicSelectModel0.value((String) null);
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("~iQT>;I");
      dynamicSelectModel1.getTopLevelComponent();
      Checkbox checkbox0 = new Checkbox((Component) null, "~iQT>;I", "~iQT>;I");
      ElExpression elExpression0 = new ElExpression("{8]m#08Iw[+y");
      ElExpression elExpression1 = elExpression0.errorMessage("");
      dynamicSelectModel1.empty(elExpression1);
      String string1 = "";
      // Undeclared exception!
      try { 
        checkbox0.encode("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.173586056146555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      Table table0 = new Table(errorPage0, "");
      Table table1 = table0.renderHint("");
      Checkbox checkbox0 = new Checkbox(table1, "", "");
      checkbox0.value("&0Y");
      // Undeclared exception!
      try { 
        checkbox0.meta();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder("");
      stringBuilder0.append(0L);
      String string1 = "d.";
      Checkbox checkbox0 = new Checkbox((Component) null, "d.", "d.");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4065110034591957
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Table table1 = table0.renderHint("");
      TableBlock tableBlock0 = table1.tfoot();
      TableRow tableRow0 = tableBlock0.tr();
      Block block0 = tableRow0.createTd();
      Table table2 = new Table(block0, "");
      table0.renderHint("");
      table2.tr();
      block0.script();
      TableRow tableRow1 = table2.tr();
      Block block1 = tableRow1.createTh();
      tableBlock0.hashCode();
      block1.text(table0);
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value((String) null);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.enumeration("~iQT>;I");
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertNotNull(dynamicSelectModel2);
      
      StandaloneComponent standaloneComponent0 = dynamicSelectModel2.getTopLevelComponent();
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertNull(standaloneComponent0);
      
      Checkbox checkbox0 = new Checkbox((Component) null, "~iQT>;I", "~iQT>;I");
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("~iQT>;I", checkbox0.getComponentId());
      assertEquals("~iQT>;I", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.value("");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("~iQT>;I", checkbox0.getComponentId());
      assertEquals("~iQT>;I", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("~iQT>;I", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("~iQT>;I", formElement0.getFormElementName());
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0449311748495913
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      StandaloneComponent standaloneComponent0 = dynamicSelectModel0.getTopLevelComponent();
      assertNull(standaloneComponent0);
      
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) null);
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("~iQT>;I");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      StandaloneComponent standaloneComponent1 = dynamicSelectModel1.getTopLevelComponent();
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNull(standaloneComponent1);
      
      Checkbox checkbox0 = new Checkbox((Component) null, "~iQT>;I", "~iQT>;I");
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("~iQT>;I", checkbox0.getFormElementName());
      assertEquals("~iQT>;I", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        checkbox0.htmlText(dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4065110034591957
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = "";
      Table table0 = new Table(errorPage0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Table table2 = new Table(block0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertNotNull(table2);
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      
      Table table3 = table0.renderHint("");
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertSame(table3, table1);
      assertSame(table3, table0);
      assertNotSame(table3, table2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertTrue(table3._isGeneratedId());
      assertNotNull(table3);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table3.equals((Object)table2));
      
      TableRow tableRow1 = table2.tr();
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertNotSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table1, table3);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(tableRow1, tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertEquals("TableRow_2", tableRow1.getComponentId());
      assertTrue(tableRow1._isGeneratedId());
      assertNotNull(tableRow1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(tableRow1.equals((Object)tableRow0));
      
      TableRow tableRow2 = table2.tr();
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertNotSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table1, table3);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(table2, table3);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(tableRow2, tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertNotNull(tableRow2);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(tableRow2.equals((Object)tableRow0));
      
      Block block1 = (Block)tableRow2.pre();
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertNotSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table1, table3);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(block0, block1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(tableRow2, tableRow0);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(tableRow2.equals((Object)tableRow0));
      assertFalse(block1.equals((Object)block0));
      
      Block block2 = tableRow2.createTh();
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertNotSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table1, table3);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(block0, block1);
      assertNotSame(block0, block2);
      assertNotSame(table2, table3);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(tableRow2, tableRow0);
      assertNotSame(block2, block0);
      assertNotSame(block2, block1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertEquals("Block_3", block2.getComponentId());
      assertTrue(block2._isGeneratedId());
      assertEquals("div", block2.defaultTagName());
      assertNotNull(block2);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(tableRow2.equals((Object)tableRow0));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block2.equals((Object)block1));
      
      tableBlock0.hashCode();
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertNotSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table1, table3);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      
      ErrorPage errorPage1 = new ErrorPage();
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Table table4 = (Table)table0.requestFocus();
      assertNotSame(errorPage0, errorPage1);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table0, table4);
      assertNotSame(table0, table2);
      assertSame(table4, table1);
      assertSame(table4, table3);
      assertSame(table4, table0);
      assertNotSame(table4, table2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table4.getComponentId());
      assertEquals("table", table4.defaultTagName());
      assertTrue(table4._isGeneratedId());
      assertNotNull(table4);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(table0.equals((Object)table2));
      assertFalse(table4.equals((Object)table2));
      
      // Undeclared exception!
      try { 
        errorPage1.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9085352816435597
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      String string0 = xmlEntityRef0.getTagName();
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNull(string0);
      
      Form form0 = new Form((String) null);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      Checkbox checkbox0 = new Checkbox(form0, "RRJY3--w(z^TTI", "RRJY3--w(z^TTI");
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("RRJY3--w(z^TTI", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("RRJY3--w(z^TTI", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.li();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      String string0 = "[v'5";
      TableBlock tableBlock0 = new TableBlock(errorPage0, "[v'5");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Table table0 = new Table(block0, "[v'5");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      Block block1 = (Block)tableRow0.u();
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      
      Table table1 = table0.id("[v'5");
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("[v'5", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertNotNull(table1);
      assertFalse(block0.equals((Object)block1));
      
      ErrorPage errorPage1 = (ErrorPage)table1.getPage();
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("[v'5", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertNotNull(errorPage1);
      assertFalse(block0.equals((Object)block1));
      
      Block block2 = (Block)table1.abbr();
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block1);
      assertNotSame(block0, block2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(block2, block0);
      assertNotSame(block2, block1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("[v'5", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertTrue(block2._isGeneratedId());
      assertEquals("div", block2.defaultTagName());
      assertEquals("Block_3", block2.getComponentId());
      assertNotNull(block2);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block2.equals((Object)block1));
      
      Label label0 = (Label)block2.label((Object) "[v'5");
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block1);
      assertNotSame(block0, block2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(block2, block0);
      assertNotSame(block2, block1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("[v'5", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertTrue(block2._isGeneratedId());
      assertEquals("div", block2.defaultTagName());
      assertEquals("Block_3", block2.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertNotNull(label0);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block0.equals((Object)block2));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block2.equals((Object)block1));
      
      Image image0 = (Image)label0.img("fOCmd>", "2\"gQr");
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block1);
      assertNotSame(block0, block2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(block2, block0);
      assertNotSame(block2, block1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("[v'5", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertTrue(block2._isGeneratedId());
      assertEquals("div", block2.defaultTagName());
      assertEquals("Block_3", block2.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      assertFalse(block0.equals((Object)block1));
      assertFalse(block0.equals((Object)block2));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block2.equals((Object)block1));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[v'5";
      stringArray0[1] = "[v'5";
      stringArray0[2] = "[v'5";
      stringArray0[3] = "[v'5";
      stringArray0[4] = "[v'5";
      stringArray0[5] = "[v'5";
      stringArray0[6] = "[v'5";
      stringArray0[7] = "[v'5";
      stringArray0[8] = "[v'5";
      // Undeclared exception!
      try { 
        label0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9085352816435597
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "_U~R:4C0";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      String string1 = xmlEntityRef0.getTagName();
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8463238594677285
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "zsVR7`Y[k!");
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("zsVR7`Y[k!");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Table table2 = new Table(block0, "zsVR7`Y[k!");
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("zsVR7`Y[k!", table2.getComponentId());
      assertNotNull(table2);
      assertTrue(table2.equals((Object)table1));
      assertTrue(table2.equals((Object)table0));
      
      Table table3 = table2.id("zsVR7`Y[k!");
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table0, table3);
      assertNotSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(table2, table0);
      assertSame(table2, table3);
      assertNotSame(table2, table1);
      assertSame(table3, table2);
      assertNotSame(table3, table0);
      assertNotSame(table3, table1);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("zsVR7`Y[k!", table2.getComponentId());
      assertFalse(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertEquals("zsVR7`Y[k!", table3.getComponentId());
      assertNotNull(table3);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table2.equals((Object)table1));
      assertTrue(table2.equals((Object)table0));
      assertTrue(table3.equals((Object)table1));
      assertTrue(table3.equals((Object)table0));
      
      Submit submit0 = new Submit(table0, "zsVR7`Y[k!", "U+T~8_");
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(submit0.isEmpty());
      assertTrue(submit0.isValid());
      assertEquals("U+T~8_", submit0.getComponentId());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("zsVR7`Y[k!", submit0.getFormElementName());
      assertNotNull(submit0);
      assertTrue(table0.equals((Object)table3));
      assertTrue(table0.equals((Object)table2));
      
      String string0 = submit0.defaultDomEvent();
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table0, table3);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(submit0.isEmpty());
      assertTrue(submit0.isValid());
      assertEquals("U+T~8_", submit0.getComponentId());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("zsVR7`Y[k!", submit0.getFormElementName());
      assertEquals("onclick", string0);
      assertNotNull(string0);
      assertTrue(table0.equals((Object)table3));
      assertTrue(table0.equals((Object)table2));
      
      Table table4 = (Table)tableBlock0.end();
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table0, table4);
      assertNotSame(table0, table3);
      assertNotSame(table1, table3);
      assertSame(table1, table4);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table4, table1);
      assertNotSame(table4, table2);
      assertSame(table4, table0);
      assertNotSame(table4, table3);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("zsVR7`Y[k!", table4.getComponentId());
      assertEquals("table", table4.defaultTagName());
      assertFalse(table4._isGeneratedId());
      assertNotNull(table4);
      assertTrue(table0.equals((Object)table3));
      assertTrue(table0.equals((Object)table2));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertTrue(table4.equals((Object)table2));
      assertTrue(table4.equals((Object)table3));
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertNotNull(stringSelectModel0);
      
      ElExpression elExpression0 = new ElExpression("");
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertNotNull(elExpression0);
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(table3, "org.mvel.conversion.IntegerCH$8", "U+T~8_", stringSelectModel0, elExpression0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("zsVR7`Y[k!", table2.getComponentId());
      assertFalse(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertEquals("zsVR7`Y[k!", table3.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertFalse(checkboxGroup0._isBuilt());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("U+T~8_", checkboxGroup0.getComponentId());
      assertEquals("org.mvel.conversion.IntegerCH$8", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertNotNull(checkboxGroup0);
      assertTrue(table0.equals((Object)table3));
      assertTrue(table0.equals((Object)table2));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertTrue(table2.equals((Object)table4));
      assertTrue(table2.equals((Object)table1));
      assertTrue(table2.equals((Object)table0));
      assertTrue(table3.equals((Object)table4));
      assertTrue(table3.equals((Object)table1));
      assertTrue(table3.equals((Object)table0));
      
      checkboxGroup0.buildComponent();
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table0, table4);
      assertNotSame(table0, table3);
      assertNotSame(table1, table3);
      assertSame(table1, table4);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(table2, table0);
      assertNotSame(table2, table4);
      assertSame(table2, table3);
      assertNotSame(table2, table1);
      assertSame(table3, table2);
      assertNotSame(table3, table4);
      assertNotSame(table3, table0);
      assertNotSame(table3, table1);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("zsVR7`Y[k!", table2.getComponentId());
      assertFalse(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertEquals("zsVR7`Y[k!", table3.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertFalse(checkboxGroup0._isBuilt());
      assertTrue(checkboxGroup0.isEmpty());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isValid());
      assertEquals("U+T~8_", checkboxGroup0.getComponentId());
      assertEquals("org.mvel.conversion.IntegerCH$8", checkboxGroup0.getFormElementName());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(table0.equals((Object)table3));
      assertTrue(table0.equals((Object)table2));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertTrue(table2.equals((Object)table4));
      assertTrue(table2.equals((Object)table1));
      assertTrue(table2.equals((Object)table0));
      assertTrue(table3.equals((Object)table4));
      assertTrue(table3.equals((Object)table1));
      assertTrue(table3.equals((Object)table0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.133381930264545
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      
      String string0 = xmlEntityRef0.getTagName();
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNull(string0);
      
      Form form0 = new Form((String) null);
      assertFalse(form0._isBuilt());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      Checkbox checkbox0 = new Checkbox(form0, "RRJY3--w(z^TTI", "RRJY3--w(z^TTI");
      assertFalse(form0._isBuilt());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("RRJY3--w(z^TTI", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("RRJY3--w(z^TTI", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.hidden("_U~R:4C0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2316069516089354
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(dynamicSelectModel0);
      
      String string0 = xmlEntityRef0.getTagName();
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(string0);
      
      Form form0 = new Form((String) null);
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("_U~R:4C0");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(dynamicSelectModel1);
      
      Checkbox checkbox0 = new Checkbox(form0, "RRJY3--w(z^TTI", "RRJY3--w(z^TTI");
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("RRJY3--w(z^TTI", checkbox0.getComponentId());
      assertEquals("RRJY3--w(z^TTI", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        form0.select("_U~R:4C0", dynamicSelectModel0, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      String string0 = "[v'5";
      TableBlock tableBlock0 = new TableBlock(errorPage0, "[v'5");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Block block1 = (Block)block0.h5();
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      
      Table table0 = new Table(block0, "[v'5");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      assertFalse(block0.equals((Object)block1));
      
      Block block2 = (Block)tableRow0.u();
      assertNotSame(block2, block0);
      assertNotSame(block2, block1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_3", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertNotNull(block2);
      assertFalse(block2.equals((Object)block0));
      assertFalse(block2.equals((Object)block1));
      
      Table table1 = table0.id("[v'5");
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("[v'5", table1.getComponentId());
      assertNotNull(table1);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      
      ErrorPage errorPage1 = (ErrorPage)table1.getPage();
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block2);
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(errorPage1, errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("[v'5", table1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertNotNull(errorPage1);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      
      Block block3 = (Block)table1.abbr();
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block2);
      assertNotSame(block0, block3);
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(block3, block1);
      assertNotSame(block3, block2);
      assertNotSame(block3, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("[v'5", table1.getComponentId());
      assertTrue(block3._isGeneratedId());
      assertEquals("Block_4", block3.getComponentId());
      assertEquals("div", block3.defaultTagName());
      assertNotNull(block3);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block3.equals((Object)block1));
      assertFalse(block3.equals((Object)block2));
      assertFalse(block3.equals((Object)block0));
      
      Label label0 = (Label)block3.label((Object) "[v'5");
      assertSame(errorPage0, errorPage1);
      assertNotSame(block0, block2);
      assertNotSame(block0, block3);
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(block3, block1);
      assertNotSame(block3, block2);
      assertNotSame(block3, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("[v'5", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("[v'5", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("[v'5", table1.getComponentId());
      assertTrue(block3._isGeneratedId());
      assertEquals("Block_4", block3.getComponentId());
      assertEquals("div", block3.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      assertFalse(block0.equals((Object)block2));
      assertFalse(block0.equals((Object)block3));
      assertFalse(block0.equals((Object)block1));
      assertFalse(block3.equals((Object)block1));
      assertFalse(block3.equals((Object)block2));
      assertFalse(block3.equals((Object)block0));
      
      String string1 = ";iueX/& 7zmU";
      ElExpression elExpression0 = new ElExpression("2\"gQr");
      assertEquals("2\"gQr", elExpression0.getExpression());
      assertEquals("2\"gQr", elExpression0.toString());
      assertEquals(5, elExpression0.length());
      assertNotNull(elExpression0);
      
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.dd();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      String string0 = block0.getComponentName();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.io.tmpdir";
      stringArray0[1] = "Block";
      stringArray0[2] = "Block";
      stringArray0[3] = "Block";
      stringArray0[4] = "java.io.tmpdir";
      stringArray0[5] = "Block";
      Block block1 = (Block)block0.attributes(stringArray0);
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_1", block1.getComponentId());
      assertNotNull(block1);
      assertEquals(6, stringArray0.length);
      
      Table table0 = new Table(block1, "java.io.tmpdir");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_1", block1.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("java.io.tmpdir", table0.getComponentId());
      assertNotNull(table0);
      assertEquals(6, stringArray0.length);
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("aN");
      assertEquals("aN", initialFieldValue0.getStringReplacement());
      assertNotNull(initialFieldValue0);
      
      Label label0 = (Label)block0.q((Object) initialFieldValue0);
      assertSame(block0, block1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("aN", initialFieldValue0.getStringReplacement());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        errorPage0.textarea("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8239111192308055
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "zsVR7`Y[k!");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("zsVR7`Y[k!");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Block block1 = (Block)block0.dd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      
      Table table2 = new Table(block0, "zsVR7`Y[k!");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table2.getComponentId());
      assertNotNull(table2);
      assertFalse(block0.equals((Object)block1));
      assertTrue(table2.equals((Object)table0));
      assertTrue(table2.equals((Object)table1));
      
      Table table3 = table2.id("zsVR7`Y[k!");
      assertNotSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(block0, block1);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertSame(table2, table3);
      assertSame(table3, table2);
      assertNotSame(table3, table0);
      assertNotSame(table3, table1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table2.getComponentId());
      assertFalse(table3._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertNotNull(table3);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table1.equals((Object)table2));
      assertFalse(block0.equals((Object)block1));
      assertTrue(table2.equals((Object)table0));
      assertTrue(table2.equals((Object)table1));
      assertTrue(table3.equals((Object)table0));
      assertTrue(table3.equals((Object)table1));
      
      Image image0 = new Image(errorPage0, "zsVR7`Y[k!", "zsVR7`Y[k!");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      
      Submit submit0 = new Submit(table0, "zsVR7`Y[k!", "U+T~8_");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isEmpty());
      assertEquals("zsVR7`Y[k!", submit0.getFormElementName());
      assertEquals("U+T~8_", submit0.getComponentId());
      assertFalse(submit0._isGeneratedId());
      assertNotNull(submit0);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      
      String string0 = submit0.defaultDomEvent();
      assertNotSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isEmpty());
      assertEquals("zsVR7`Y[k!", submit0.getFormElementName());
      assertEquals("U+T~8_", submit0.getComponentId());
      assertFalse(submit0._isGeneratedId());
      assertEquals("onclick", string0);
      assertNotNull(string0);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      
      Table table4 = (Table)tableBlock0.end();
      assertNotSame(table0, table3);
      assertSame(table0, table4);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table1, table4);
      assertNotSame(table4, table3);
      assertNotSame(table4, table2);
      assertSame(table4, table1);
      assertSame(table4, table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("table", table4.defaultTagName());
      assertFalse(table4._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table4.getComponentId());
      assertNotNull(table4);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertTrue(table4.equals((Object)table3));
      assertTrue(table4.equals((Object)table2));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "zsVR7`Y[k!";
      stringArray0[2] = "onclick";
      stringArray0[3] = "onclick";
      Block block2 = (Block)block0.attributes(stringArray0);
      assertNotSame(table0, table3);
      assertSame(table0, table4);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(block2, block1);
      assertSame(block2, block0);
      assertNotSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table1, table4);
      assertSame(block0, block2);
      assertNotSame(block0, block1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("Block_1", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertTrue(block2._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block2);
      assertEquals(4, stringArray0.length);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      assertFalse(block2.equals((Object)block1));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertFalse(block0.equals((Object)block1));
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)table1.date();
      assertNotSame(table0, table3);
      assertSame(table0, table4);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table1, table4);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      
      // Undeclared exception!
      try { 
        table2.textInput("onclick");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.026229622995291
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      String string0 = xmlEntityRef0.getTagName();
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(string0);
      
      Form form0 = new Form((String) null);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3596612545186137
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "java.io.tmpdir";
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.dd();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      errorPage0._clear();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      
      String string1 = block0.getComponentName();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "");
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel1);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("Qy GO}D:Y");
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(dynamicSelectModel2);
      
      ElExpression elExpression0 = new ElExpression("0!b'Y$A)CSl0Y");
      assertEquals("0!b'Y$A)CSl0Y", elExpression0.getExpression());
      assertEquals("0!b'Y$A)CSl0Y", elExpression0.toString());
      assertEquals(13, elExpression0.length());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("0!b'Y$A)CSl0Y", elExpression0.getExpression());
      assertEquals("0!b'Y$A)CSl0Y", elExpression0.toString());
      assertEquals(13, elExpression0.length());
      assertEquals(13, elExpression1.length());
      assertEquals("0!b'Y$A)CSl0Y", elExpression1.toString());
      assertEquals("0!b'Y$A)CSl0Y", elExpression1.getExpression());
      assertNotNull(elExpression1);
      
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "br", "", dynamicSelectModel1, elExpression1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("0!b'Y$A)CSl0Y", elExpression0.getExpression());
      assertEquals("0!b'Y$A)CSl0Y", elExpression0.toString());
      assertEquals(13, elExpression0.length());
      assertEquals(13, elExpression1.length());
      assertEquals("0!b'Y$A)CSl0Y", elExpression1.toString());
      assertEquals("0!b'Y$A)CSl0Y", elExpression1.getExpression());
      assertEquals("input", radioGroup0.defaultTagName());
      assertFalse(radioGroup0._isBuilt());
      assertTrue(radioGroup0.isEmpty());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0._isGeneratedId());
      assertEquals("RadioGroup_1", radioGroup0.getComponentId());
      assertEquals("br", radioGroup0.getFormElementName());
      assertNotNull(radioGroup0);
      
      // Undeclared exception!
      try { 
        radioGroup0.submit("Cgl0wt6`3vF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9085352816435601
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      String string0 = xmlEntityRef0.getTagName();
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(string0);
      
      Form form0 = new Form((String) null);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertNotNull(form0);
      
      Checkbox checkbox0 = new Checkbox(form0, "RRJY3--w(z^TTI", "RRJY3--w(z^TTI");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("RRJY3--w(z^TTI", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("RRJY3--w(z^TTI", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.dl();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0262296229952916
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      String string0 = xmlEntityRef0.getTagName();
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253857589601352
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Text text0 = new Text(errorPage0, (Object) null);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertNotNull(text0);
      
      TableBlock tableBlock0 = new TableBlock(text0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      String string0 = "body";
      Checkbox checkbox0 = new Checkbox(tableBlock0, "body", "body");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("body", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("body", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.validationRule("body", "body");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("body", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("body", checkbox0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("body", formElement0.getFormElementName());
      assertEquals("body", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertNotNull(formElement0);
      
      ActionExpression actionExpression0 = new ActionExpression("body");
      assertEquals("body", actionExpression0.getActionExpression());
      assertEquals(4, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertEquals("body", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("body", actionExpression0.toString());
      assertFalse(actionExpression0.isExternalUrl());
      assertNotNull(actionExpression0);
      
      Form form0 = new Form(formElement0, "body", actionExpression0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isHtml());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("body", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("body", checkbox0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("body", formElement0.getFormElementName());
      assertEquals("body", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("body", actionExpression0.getActionExpression());
      assertEquals(4, actionExpression0.length());
      assertEquals("body", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("body", actionExpression0.toString());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("body", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "body";
      stringArray0[1] = "body";
      stringArray0[2] = "body";
      stringArray0[3] = "body";
      stringArray0[4] = "body";
      // Undeclared exception!
      try { 
        form0._buildFromSerializedString(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.components.Form", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      String string0 = "zsVR7`Y[k!";
      // Undeclared exception!
      try { 
        errorPage0.imageSubmit("", "When using table with only tr-elements, you can't create a thead-element.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5475313664679273
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Block block0 = (Block)errorPage1.dd();
      assertNotSame(errorPage1, errorPage0);
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      errorPage0._clear();
      assertNotSame(errorPage0, errorPage1);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      String string0 = block0.getComponentName();
      assertNotSame(errorPage1, errorPage0);
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block", string0);
      assertNotNull(string0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      ErrorPage errorPage2 = new ErrorPage();
      assertTrue(errorPage2.isPage());
      assertEquals("wheel_ErrorPage", errorPage2.getComponentId());
      assertFalse(errorPage2._isGeneratedId());
      assertEquals("div", errorPage2.defaultTagName());
      assertFalse(errorPage2._isBuilt());
      assertNotNull(errorPage2);
      assertTrue(errorPage2.equals((Object)errorPage0));
      assertTrue(errorPage2.equals((Object)errorPage1));
      
      // Undeclared exception!
      try { 
        errorPage2.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "zsVR7`Y[k!");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("zsVR7`Y[k!");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Table table2 = new Table(block0, "zsVR7`Y[k!");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("zsVR7`Y[k!", table2.getComponentId());
      assertNotNull(table2);
      assertTrue(table2.equals((Object)table1));
      assertTrue(table2.equals((Object)table0));
      
      Table table3 = table2.id("zsVR7`Y[k!");
      assertSame(table0, table1);
      assertNotSame(table0, table3);
      assertNotSame(table0, table2);
      assertNotSame(table1, table3);
      assertNotSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table3);
      assertNotSame(table2, table0);
      assertNotSame(table2, table1);
      assertNotSame(table3, table1);
      assertSame(table3, table2);
      assertNotSame(table3, table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("zsVR7`Y[k!", table2.getComponentId());
      assertFalse(table3._isGeneratedId());
      assertEquals("zsVR7`Y[k!", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertNotNull(table3);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table2.equals((Object)table1));
      assertTrue(table2.equals((Object)table0));
      assertTrue(table3.equals((Object)table0));
      assertTrue(table3.equals((Object)table1));
      
      Submit submit0 = new Submit(table0, "zsVR7`Y[k!", "U+T~8_");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("U+T~8_", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertNotNull(submit0);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      
      String string0 = submit0.defaultDomEvent();
      assertSame(table0, table1);
      assertNotSame(table0, table3);
      assertNotSame(table0, table2);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("U+T~8_", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("onclick", string0);
      assertNotNull(string0);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      
      Table table4 = (Table)tableBlock0.end();
      assertSame(table0, table1);
      assertNotSame(table0, table3);
      assertSame(table0, table4);
      assertNotSame(table0, table2);
      assertNotSame(table1, table3);
      assertNotSame(table1, table2);
      assertSame(table1, table4);
      assertSame(table1, table0);
      assertNotSame(table4, table3);
      assertSame(table4, table0);
      assertSame(table4, table1);
      assertNotSame(table4, table2);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(table4._isGeneratedId());
      assertEquals("table", table4.defaultTagName());
      assertEquals("zsVR7`Y[k!", table4.getComponentId());
      assertNotNull(table4);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertTrue(table4.equals((Object)table2));
      assertTrue(table4.equals((Object)table3));
      
      TextArea textArea0 = new TextArea(errorPage0, "U+T~8_", "");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0._isGeneratedId());
      assertEquals("TextArea_1", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("U+T~8_", textArea0.getFormElementName());
      assertNotNull(textArea0);
      
      String string1 = textArea0.getComponentName();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0._isGeneratedId());
      assertEquals("TextArea_1", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("U+T~8_", textArea0.getFormElementName());
      assertEquals("TextArea", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Radio radio0 = new Radio(submit0, "ins", "");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertEquals("zsVR7`Y[k!", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("U+T~8_", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("ins", radio0.getFormElementName());
      assertNotNull(radio0);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      
      TableBlock tableBlock1 = new TableBlock(tableRow0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertNotNull(tableBlock1);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      
      TableRow tableRow1 = tableBlock0.tr();
      assertSame(table0, table1);
      assertNotSame(table0, table3);
      assertSame(table0, table4);
      assertNotSame(table0, table2);
      assertNotSame(table1, table3);
      assertNotSame(table1, table2);
      assertSame(table1, table4);
      assertSame(table1, table0);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableRow1, tableRow0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow1._isGeneratedId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertEquals("TableRow_2", tableRow1.getComponentId());
      assertNotNull(tableRow1);
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableRow1.equals((Object)tableRow0));
      
      tableRow0._setParent(errorPage0);
      assertSame(table0, table1);
      assertNotSame(table0, table3);
      assertSame(table0, table4);
      assertNotSame(table0, table2);
      assertNotSame(table1, table3);
      assertNotSame(table1, table2);
      assertSame(table1, table4);
      assertSame(table1, table0);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableRow0, tableRow1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("zsVR7`Y[k!", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("zsVR7`Y[k!", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertTrue(table0.equals((Object)table2));
      assertTrue(table0.equals((Object)table3));
      assertTrue(table1.equals((Object)table2));
      assertTrue(table1.equals((Object)table3));
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableRow0.equals((Object)tableRow1));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      Label label0 = (Label)tableBlock0.cite((Object) null);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Table table2 = new Table(block0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertNotNull(table2);
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      
      Table table3 = table0.renderHint("");
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table3, table1);
      assertNotSame(table3, table2);
      assertSame(table3, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table3.defaultTagName());
      assertTrue(table3._isGeneratedId());
      assertEquals("Table_1", table3.getComponentId());
      assertNotNull(table3);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table3.equals((Object)table2));
      
      TableRow tableRow1 = table2.tr();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(tableRow1, tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertTrue(tableRow1._isGeneratedId());
      assertEquals("TableRow_2", tableRow1.getComponentId());
      assertNotNull(tableRow1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(tableRow1.equals((Object)tableRow0));
      
      TableRow tableRow2 = table2.tr();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(tableRow2, tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertNotNull(tableRow2);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(tableRow2.equals((Object)tableRow0));
      
      Block block1 = tableRow2.createTh();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(block0, block1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(tableRow2, tableRow0);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(tableRow2.equals((Object)tableRow0));
      assertFalse(block1.equals((Object)block0));
      
      tableBlock0.hashCode();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      
      Any any0 = (Any)tableBlock0.col();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      
      TextArea textArea0 = new TextArea(table0, "^%e,1E", "^%e,1E");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("^%e,1E", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("^%e,1E", textArea0.getFormElementName());
      assertNotNull(textArea0);
      assertFalse(table0.equals((Object)table2));
      
      TextArea textArea1 = (TextArea)textArea0.value("");
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(textArea0, textArea1);
      assertSame(textArea1, textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("^%e,1E", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("^%e,1E", textArea0.getFormElementName());
      assertFalse(textArea1._isGeneratedId());
      assertEquals("^%e,1E", textArea1.getFormElementName());
      assertEquals("^%e,1E", textArea1.getComponentId());
      assertTrue(textArea1.isEmpty());
      assertTrue(textArea1.isValid());
      assertEquals("textarea", textArea1.defaultTagName());
      assertNotNull(textArea1);
      assertFalse(table0.equals((Object)table2));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7143227412345774
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "java.io.tmpdir";
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.dd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      String string1 = block0.getComponentName();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("Block", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.io.tmpdir";
      stringArray0[1] = "Block";
      stringArray0[2] = "Block";
      stringArray0[3] = "Block";
      stringArray0[4] = "java.io.tmpdir";
      stringArray0[5] = "Block";
      Block block1 = block0.id("Block");
      assertSame(block0, block1);
      assertSame(block1, block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertNotNull(block1);
      
      Table table0 = new Table(block1, "java.io.tmpdir");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block", block1.getComponentId());
      assertFalse(block1._isGeneratedId());
      assertEquals("java.io.tmpdir", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("aN");
      assertEquals("aN", initialFieldValue0.getStringReplacement());
      assertNotNull(initialFieldValue0);
      
      Label label0 = (Label)block0.q((Object) initialFieldValue0);
      assertSame(block0, block1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("aN", initialFieldValue0.getStringReplacement());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        errorPage0.textarea("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_U~R:4C0");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "_U~R:4C0", "_U~R:4C0");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_U~R:4C0", checkbox0.getFormElementName());
      assertEquals("_U~R:4C0", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      Checkbox checkbox1 = new Checkbox(xmlEntityRef0, "u", "u");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("u", checkbox1.getComponentId());
      assertEquals("u", checkbox1.getFormElementName());
      assertEquals("input", checkbox1.defaultTagName());
      assertNotNull(checkbox1);
      assertFalse(checkbox1.equals((Object)checkbox0));
      
      Checkbox checkbox2 = (Checkbox)checkbox0.actionBinding("_U~R:4C0");
      assertSame(checkbox0, checkbox2);
      assertNotSame(checkbox0, checkbox1);
      assertSame(checkbox2, checkbox0);
      assertNotSame(checkbox2, checkbox1);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_U~R:4C0", checkbox0.getFormElementName());
      assertEquals("_U~R:4C0", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox2.isEmpty());
      assertEquals("_U~R:4C0", checkbox2.getComponentId());
      assertTrue(checkbox2.isValid());
      assertEquals("_U~R:4C0", checkbox2.getFormElementName());
      assertFalse(checkbox2._isGeneratedId());
      assertEquals("input", checkbox2.defaultTagName());
      assertNotNull(checkbox2);
      assertFalse(checkbox0.equals((Object)checkbox1));
      assertFalse(checkbox2.equals((Object)checkbox1));
      
      Checkbox checkbox3 = (Checkbox)checkbox0.value("Sn%*zy9;nNf");
      assertSame(checkbox0, checkbox2);
      assertSame(checkbox0, checkbox3);
      assertNotSame(checkbox0, checkbox1);
      assertNotSame(checkbox3, checkbox1);
      assertSame(checkbox3, checkbox2);
      assertSame(checkbox3, checkbox0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("_U~R:4C0", checkbox0.getFormElementName());
      assertEquals("_U~R:4C0", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox3.isEmpty());
      assertEquals("input", checkbox3.defaultTagName());
      assertTrue(checkbox3.isValid());
      assertEquals("_U~R:4C0", checkbox3.getComponentId());
      assertEquals("_U~R:4C0", checkbox3.getFormElementName());
      assertFalse(checkbox3._isGeneratedId());
      assertNotNull(checkbox3);
      assertFalse(checkbox0.equals((Object)checkbox1));
      assertFalse(checkbox3.equals((Object)checkbox1));
      
      Checkbox checkbox4 = (Checkbox)checkbox1.setFormElementName("_U~R:4C0");
      assertNotSame(checkbox1, checkbox2);
      assertNotSame(checkbox1, checkbox3);
      assertSame(checkbox1, checkbox4);
      assertNotSame(checkbox1, checkbox0);
      assertSame(checkbox4, checkbox1);
      assertNotSame(checkbox4, checkbox2);
      assertNotSame(checkbox4, checkbox3);
      assertNotSame(checkbox4, checkbox0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("_U~R:4C0", xmlEntityRef0.getComponentId());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("u", checkbox1.getComponentId());
      assertEquals("_U~R:4C0", checkbox1.getFormElementName());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox4.isEmpty());
      assertTrue(checkbox4.isValid());
      assertFalse(checkbox4._isGeneratedId());
      assertEquals("u", checkbox4.getComponentId());
      assertEquals("_U~R:4C0", checkbox4.getFormElementName());
      assertEquals("input", checkbox4.defaultTagName());
      assertNotNull(checkbox4);
      assertFalse(checkbox1.equals((Object)checkbox2));
      assertFalse(checkbox1.equals((Object)checkbox3));
      assertFalse(checkbox1.equals((Object)checkbox0));
      assertFalse(checkbox4.equals((Object)checkbox2));
      assertFalse(checkbox4.equals((Object)checkbox3));
      assertFalse(checkbox4.equals((Object)checkbox0));
      
      // Undeclared exception!
      try { 
        checkbox3.meta();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "");
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertNotNull(tableRow0);
      
      Label label0 = (Label)errorPage0.strike((Object) table1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertNotNull(label0);
      
      Block block0 = tableRow0.createTd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Table table2 = new Table(block0, "");
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertNotNull(table2);
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      
      Table table3 = table0.renderHint("");
      assertSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table3, table0);
      assertSame(table3, table1);
      assertNotSame(table3, table2);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertTrue(table3._isGeneratedId());
      assertEquals("Table_1", table3.getComponentId());
      assertNotNull(table3);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table3.equals((Object)table2));
      
      TableRow tableRow1 = table2.tr();
      assertSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table0);
      assertNotSame(table2, table1);
      assertNotSame(tableRow1, tableRow0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertTrue(tableRow1._isGeneratedId());
      assertEquals("TableRow_2", tableRow1.getComponentId());
      assertNotNull(tableRow1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      assertFalse(tableRow1.equals((Object)tableRow0));
      
      TableRow tableRow2 = table2.tr();
      assertSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table0);
      assertNotSame(table2, table1);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(tableRow2, tableRow0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertNotNull(tableRow2);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(tableRow2.equals((Object)tableRow0));
      
      Block block1 = tableRow2.createTh();
      assertSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(block0, block1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table0);
      assertNotSame(table2, table1);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(tableRow2, tableRow0);
      assertNotSame(block1, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(tableRow2.equals((Object)tableRow0));
      assertFalse(block1.equals((Object)block0));
      
      tableRow2.hashCode();
      assertSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(block0, block1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table0);
      assertNotSame(table2, table1);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(tableRow2, tableRow0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(block0.equals((Object)block1));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(tableRow2.equals((Object)tableRow0));
      
      Any any0 = (Any)tableBlock0.col();
      assertSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      
      TextInput textInput0 = new TextInput(tableRow0, "dd", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("dd", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertNotNull(textInput0);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      
      TextArea textArea0 = new TextArea(textInput0, "", "unbalanced brace '['");
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("dd", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("unbalanced brace '['", textArea0.getComponentId());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertNotNull(textArea0);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      
      TextArea textArea1 = (TextArea)textArea0.value("<Y23YV}lmIzB");
      assertSame(textArea1, textArea0);
      assertSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(tableRow0, tableRow1);
      assertSame(textArea0, textArea1);
      assertEquals("unbalanced brace '['", textArea1.getComponentId());
      assertTrue(textArea1.isEmpty());
      assertTrue(textArea1.isValid());
      assertEquals("textarea", textArea1.defaultTagName());
      assertFalse(textArea1._isGeneratedId());
      assertEquals("", textArea1.getFormElementName());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("dd", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("unbalanced brace '['", textArea0.getComponentId());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertNotNull(textArea1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      
      TableBlock tableBlock1 = tableBlock0.id("<Y23YV}lmIzB");
      assertSame(tableBlock1, tableBlock0);
      assertSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(tableBlock0, tableBlock1);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("<Y23YV}lmIzB", tableBlock1.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("<Y23YV}lmIzB", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6880480301937815
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertNotNull(table1);
      
      Table table2 = new Table(table0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertNotNull(table2);
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      
      TableBlock tableBlock0 = table2.tfoot();
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_2", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      
      Table table3 = new Table(table1, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("Table_3", table3.getComponentId());
      assertTrue(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertNotNull(table3);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table3.equals((Object)table2));
      assertFalse(table3.equals((Object)table1));
      assertFalse(table3.equals((Object)table0));
      
      Table table4 = table2.id("");
      assertNotSame(table0, table4);
      assertNotSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(table2, table3);
      assertSame(table2, table4);
      assertNotSame(table4, table3);
      assertNotSame(table4, table0);
      assertSame(table4, table2);
      assertNotSame(table4, table1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table4._isGeneratedId());
      assertEquals("", table4.getComponentId());
      assertEquals("table", table4.defaultTagName());
      assertNotNull(table4);
      assertFalse(table0.equals((Object)table3));
      assertFalse(table0.equals((Object)table2));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table4.equals((Object)table3));
      assertFalse(table4.equals((Object)table0));
      assertFalse(table4.equals((Object)table1));
      
      Any any0 = (Any)table2.hr();
      assertNotSame(table0, table4);
      assertNotSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(table2, table3);
      assertSame(table2, table4);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      assertFalse(table0.equals((Object)table4));
      assertFalse(table0.equals((Object)table3));
      assertFalse(table0.equals((Object)table2));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      
      Image image0 = new Image(tableBlock0, "", "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertNotNull(image0);
      assertFalse(table0.equals((Object)table4));
      assertFalse(table0.equals((Object)table3));
      assertFalse(table0.equals((Object)table2));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      
      Submit submit0 = new Submit(table2, "\"hy]o~]-|Jh3JYDC$", (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("\"hy]o~]-|Jh3JYDC$", submit0.getFormElementName());
      assertNotNull(submit0);
      assertFalse(table0.equals((Object)table4));
      assertFalse(table0.equals((Object)table3));
      assertFalse(table0.equals((Object)table2));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      
      String string0 = submit0.defaultDomEvent();
      assertNotSame(table0, table4);
      assertNotSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(table2, table3);
      assertSame(table2, table4);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Submit_1", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertEquals("\"hy]o~]-|Jh3JYDC$", submit0.getFormElementName());
      assertEquals("onclick", string0);
      assertNotNull(string0);
      assertFalse(table0.equals((Object)table4));
      assertFalse(table0.equals((Object)table3));
      assertFalse(table0.equals((Object)table2));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      
      Table table5 = (Table)tableBlock0.end();
      assertNotSame(table0, table4);
      assertNotSame(table0, table5);
      assertNotSame(table0, table3);
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table2, table5);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(table2, table3);
      assertSame(table2, table4);
      assertNotSame(table5, table3);
      assertNotSame(table5, table0);
      assertSame(table5, table2);
      assertSame(table5, table4);
      assertNotSame(table5, table1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("table", table5.defaultTagName());
      assertEquals("", table5.getComponentId());
      assertFalse(table5._isGeneratedId());
      assertNotNull(table5);
      assertFalse(table0.equals((Object)table4));
      assertFalse(table0.equals((Object)table3));
      assertFalse(table0.equals((Object)table2));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table5.equals((Object)table3));
      assertFalse(table5.equals((Object)table0));
      assertFalse(table5.equals((Object)table1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.360105998285909
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Table table2 = new Table(block0, "");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertNotNull(table2);
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      
      Table table3 = table0.renderHint("");
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertSame(table3, table0);
      assertNotSame(table3, table2);
      assertSame(table3, table1);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertTrue(table3._isGeneratedId());
      assertEquals("table", table3.defaultTagName());
      assertEquals("Table_1", table3.getComponentId());
      assertNotNull(table3);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table3.equals((Object)table2));
      
      TableRow tableRow1 = table2.tr();
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table2, table3);
      assertNotSame(table2, table0);
      assertNotSame(table2, table1);
      assertNotSame(tableRow1, tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(tableRow1._isGeneratedId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertEquals("TableRow_2", tableRow1.getComponentId());
      assertNotNull(tableRow1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table2.equals((Object)table3));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      assertFalse(tableRow1.equals((Object)tableRow0));
      
      Block block1 = tableRow0.createTh();
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotNull(block1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(block1.equals((Object)block0));
      
      Any any0 = (Any)tableBlock0.col();
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      
      TextArea textArea0 = new TextArea(table0, "^%e,1E", "^%e,1E");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("^%e,1E", textArea0.getComponentId());
      assertEquals("^%e,1E", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertNotNull(textArea0);
      assertFalse(table0.equals((Object)table2));
      
      TextArea textArea1 = (TextArea)textArea0.value("");
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertNotSame(table0, table2);
      assertSame(textArea0, textArea1);
      assertSame(textArea1, textArea0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("^%e,1E", textArea0.getComponentId());
      assertEquals("^%e,1E", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea1.isValid());
      assertEquals("^%e,1E", textArea1.getComponentId());
      assertTrue(textArea1.isEmpty());
      assertEquals("textarea", textArea1.defaultTagName());
      assertFalse(textArea1._isGeneratedId());
      assertEquals("^%e,1E", textArea1.getFormElementName());
      assertNotNull(textArea1);
      assertFalse(table0.equals((Object)table2));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4302698428275176
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint("");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Table table2 = new Table(block0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertNotNull(table2);
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      
      Table table3 = table0.renderHint("");
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table3, table1);
      assertSame(table3, table0);
      assertNotSame(table3, table2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table3.defaultTagName());
      assertTrue(table3._isGeneratedId());
      assertEquals("Table_1", table3.getComponentId());
      assertNotNull(table3);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table3.equals((Object)table2));
      
      TableRow tableRow1 = table2.tr();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(table2, table3);
      assertNotSame(tableRow1, tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(tableRow1._isGeneratedId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertEquals("TableRow_2", tableRow1.getComponentId());
      assertNotNull(tableRow1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      assertFalse(tableRow1.equals((Object)tableRow0));
      
      TableRow tableRow2 = table2.tr();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(table2, table3);
      assertNotSame(tableRow2, tableRow0);
      assertNotSame(tableRow2, tableRow1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertNotNull(tableRow2);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      assertFalse(tableRow2.equals((Object)tableRow0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      
      Block block1 = tableRow2.createTh();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(block0, block1);
      assertNotSame(table2, table1);
      assertNotSame(table2, table0);
      assertNotSame(table2, table3);
      assertNotSame(tableRow2, tableRow0);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_2", table2.getComponentId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table3));
      assertFalse(tableRow2.equals((Object)tableRow0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(block1.equals((Object)block0));
      
      tableBlock0.hashCode();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      
      Any any0 = (Any)tableBlock0.col();
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(table1, table3);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      
      TextArea textArea0 = new TextArea(table0, "^%e,1E", "^%e,1E");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("^%e,1E", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("^%e,1E", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertNotNull(textArea0);
      assertFalse(table0.equals((Object)table2));
      
      TextArea textArea1 = (TextArea)textArea0.value("");
      assertNotSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(textArea0, textArea1);
      assertSame(textArea1, textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("^%e,1E", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("^%e,1E", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea1.defaultTagName());
      assertEquals("^%e,1E", textArea1.getFormElementName());
      assertFalse(textArea1._isGeneratedId());
      assertTrue(textArea1.isValid());
      assertTrue(textArea1.isEmpty());
      assertEquals("^%e,1E", textArea1.getComponentId());
      assertNotNull(textArea1);
      assertFalse(table0.equals((Object)table2));
      
      // Undeclared exception!
      try { 
        block0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.tfoot();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertNotNull(tableRow0);
      
      Block block0 = tableRow0.createTd();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Table table1 = new Table(block0, "");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_2", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertNotNull(table1);
      assertFalse(table1.equals((Object)table0));
      
      Table table2 = table0.renderHint("");
      assertSame(table0, table2);
      assertNotSame(table0, table1);
      assertNotSame(table2, table1);
      assertSame(table2, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_1", table2.getComponentId());
      assertNotNull(table2);
      assertFalse(table0.equals((Object)table1));
      assertFalse(table2.equals((Object)table1));
      
      TableRow tableRow1 = table1.tr();
      assertSame(table0, table2);
      assertNotSame(table0, table1);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(table1, table2);
      assertNotSame(table1, table0);
      assertNotSame(tableRow1, tableRow0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_2", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableRow1._isGeneratedId());
      assertEquals("tr", tableRow1.defaultTagName());
      assertEquals("TableRow_2", tableRow1.getComponentId());
      assertNotNull(tableRow1);
      assertFalse(table0.equals((Object)table1));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table1.equals((Object)table0));
      assertFalse(tableRow1.equals((Object)tableRow0));
      
      TableRow tableRow2 = table1.tr();
      assertSame(table0, table2);
      assertNotSame(table0, table1);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(table1, table2);
      assertNotSame(table1, table0);
      assertNotSame(tableRow2, tableRow0);
      assertNotSame(tableRow2, tableRow1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_2", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertNotNull(tableRow2);
      assertFalse(table0.equals((Object)table1));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table1.equals((Object)table0));
      assertFalse(tableRow2.equals((Object)tableRow0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      
      Block block1 = tableRow2.createTh();
      assertSame(table0, table2);
      assertNotSame(table0, table1);
      assertNotSame(tableRow0, tableRow1);
      assertNotSame(tableRow0, tableRow2);
      assertNotSame(block0, block1);
      assertNotSame(table1, table2);
      assertNotSame(table1, table0);
      assertNotSame(tableRow2, tableRow0);
      assertNotSame(tableRow2, tableRow1);
      assertNotSame(block1, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_2", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertTrue(tableRow2._isGeneratedId());
      assertEquals("tr", tableRow2.defaultTagName());
      assertEquals("TableRow_3", tableRow2.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      assertFalse(table0.equals((Object)table1));
      assertFalse(tableRow0.equals((Object)tableRow1));
      assertFalse(tableRow0.equals((Object)tableRow2));
      assertFalse(table1.equals((Object)table2));
      assertFalse(table1.equals((Object)table0));
      assertFalse(tableRow2.equals((Object)tableRow0));
      assertFalse(tableRow2.equals((Object)tableRow1));
      assertFalse(block1.equals((Object)block0));
      
      tableBlock0.hashCode();
      assertSame(table0, table2);
      assertNotSame(table0, table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(table0.equals((Object)table1));
      
      Any any0 = (Any)tableBlock0.col();
      assertSame(table0, table2);
      assertNotSame(table0, table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      assertFalse(table0.equals((Object)table1));
      
      TextArea textArea0 = new TextArea(table0, "^%e,1E", "^%e,1E");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("^%e,1E", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("^%e,1E", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertNotNull(textArea0);
      assertFalse(table0.equals((Object)table1));
      
      // Undeclared exception!
      try { 
        textArea0.link();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "|E lj8g";
      FileInput fileInput0 = new FileInput((Component) null, "|E lj8g", "|E lj8g");
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("|E lj8g", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("|E lj8g", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertNotNull(fileInput0);
      
      // Undeclared exception!
      try { 
        fileInput0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
