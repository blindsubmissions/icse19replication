/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:28:08 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y]$!VI;yBA$Y*FS(f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.commentChar(0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(k[emN-`^^5eKGE2.(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.flagLevel = 0;
      String string0 = "Expecting Term";
      jSPredicateForm0.print();
      jSTerm0.add((Object) jSPredicateForm0);
      jSPredicateForm0.parallelStream();
      jSTerm0.add((Object) "Expecting Term");
      jSPredicateForm0.removeAll(jSTerm0);
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) null);
      jSTerm0.removeElement(jSPredicateForm0);
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d;2Y&-?@,S1g=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSPredicateForm0);
      jSSubstitution0.add((Object) "d;2Y&-?@,S1g=");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm2.clonePF();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSTerm0.equals(jSPredicateForm0);
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(1203L);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d;2Y&-?@,S1g=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm2.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      jSPredicateForm1.print();
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals(5, stringBuffer0.length());
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3579778549873245
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(k[emN-`^^5eKGE2.(");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(k[emN-`^^5eKGE2.(");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.removeElement(jSTerm1);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      StringReader stringReader1 = new StringReader("(k[emN-`^^5eKGE2.(");
      jSSubstitution0.add((Object) stringReader0);
      jSTerm0.clonePF();
      jSTerm0.add((Object) jSPredicateForm0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSPredicateForm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.844621476365503
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7[RcB'5#'nMH.XRZs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      stringReader0.close();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSTerm0.iterator();
      jSPredicateForm0.print();
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSPredicateForm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9913464134109882
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7[RcB'5#'nMH.XRZs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.toStr();
      stringReader0.close();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSPredicateForm2);
      // Undeclared exception!
      try { 
        jSTerm2.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7[RcB'5#'nMH.XRZs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Iterator iterator0 = jSTerm0.iterator();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      StringReader stringReader1 = new StringReader("+B|ew_");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSTerm0.clonePF();
      jSPredicateForm0.parallelStream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.parallelStream();
      jSPredicateForm5.print();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm5.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm6.print();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm4.standarizerPredicateForm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm4.replaceAll(unaryOperator0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) streamTokenizer0;
      objectArray0[3] = (Object) stringReader1;
      objectArray0[4] = (Object) stringReader0;
      objectArray0[5] = (Object) jSPredicateForm7;
      jSPredicateForm2.toArray(objectArray0);
      jSPredicateForm0.addAll((Collection) jSPredicateForm2);
      jSTerm0.equals(jSPredicateForm5);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "CaT");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSPredicateForm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) "%%%");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.857200790585802
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n9Q)6-inzt/8v>J|(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      jSPredicateForm1.add((Object) jSTerm0);
      stringReader0.close();
      streamTokenizer0.whitespaceChars(1686, 975);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      StringBuffer stringBuffer1 = jSPredicateForm1.toStr();
      assertEquals("(n9Qn9Q )", stringBuffer1.toString());
      
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      boolean boolean0 = jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.clonePF();
      jSPredicateForm5.clonePF();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm5.replaceAll(unaryOperator0);
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) jSPredicateForm5;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) jSPredicateForm4;
      objectArray0[5] = (Object) unaryOperator0;
      JSPredicateForm jSPredicateForm6 = (JSPredicateForm)jSPredicateForm5.clone();
      objectArray0[6] = (Object) streamTokenizer0;
      objectArray0[7] = (Object) stringBuffer1;
      objectArray0[8] = (Object) jSSubstitution0;
      jSPredicateForm5.toArray(objectArray0);
      jSPredicateForm2.addAll((Collection) jSSubstitution0);
      JSPredicateForm jSPredicateForm7 = (JSPredicateForm)jSPredicateForm1.clone();
      jSPredicateForm5.removeElement(jSPredicateForm7);
      jSPredicateForm4.equals(jSPredicateForm5);
      boolean boolean1 = jSPredicateForm4.equals(jSPredicateForm6);
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSPredicateForm5, jSPredicateForm1);
      assertFalse(jSSubstitution0.fail());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "NOT");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0578975319224093
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n9Q)6-inzt/8v>J|(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.toStr();
      jSPredicateForm1.add((Object) jSTerm0);
      stringReader0.close();
      streamTokenizer0.whitespaceChars(1686, 975);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm5.clonePF();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.add((Object) jSPredicateForm4);
      jSPredicateForm5.replaceAll(unaryOperator0);
      Object[] objectArray0 = new Object[17];
      objectArray0[2] = (Object) jSPredicateForm5;
      objectArray0[1] = (Object) jSTerm0;
      JSPredicateForm jSPredicateForm7 = jSTerm0.clonePF();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = jSPredicateForm6.matches(jSPredicateForm4);
      jSPredicateForm7.toStr();
      jSPredicateForm5.print();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm8.matches(jSPredicateForm5, jSSubstitution1);
      assertEquals("[[n9Q, [n9Q]]]", jSSubstitution0.toString());
      assertFalse(jSPredicateForm0.equals((Object)jSPredicateForm6));
  }
}
