/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:07:45 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(248);
      advancedSettings0.setPerformancePreferencesConnectionTime(3918);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(248, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketSendBufferSize((-1377));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-128));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger((-1377));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.toXML("}/C4NQ7K.Ahnv");
      advancedSettings0.setPerformancePreferencesLatency(1220);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize(3947);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker("\t<charset>");
      advancedSettings0.setMaxThreadsForNioWrite(3947);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(3947, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(3947, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("BKSk#Z&");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("D7\"iv=");
      advancedSettings0.setSocketLinger(2113);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize((-1053));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("f{43ZL*f'{]Uyr%T");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setBacklog(2113);
      advancedSettings0.setByteBufferSize(2113);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(1935);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketSendBufferSize(2113);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getSocketLinger();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(0, advancedSettings0.getSocketLinger());
      assertEquals(2113, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-197));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketSendBufferSize((-563));
      assertEquals((-197), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.120291565301284
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.toXML((String) null);
      advancedSettings0.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setQSObjectPoolMaker("</performance-preferences-connection-time>\n");
      advancedSettings0.setClientIdentifier("%~7kb,_2,!d@bJ");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientIdentifier("L::)2AYSF OBb%");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      assertEquals("L::)2AYSF OBb%", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0246955538582476
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1447);
      advancedSettings0.setClientSocketReceiveBufferSize(1447);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("+");
      advancedSettings0.setClientIdentifier("dM!qe$Y");
      advancedSettings0.setPerformancePreferencesLatency((-980));
      advancedSettings0.toXML("}h<leOaZQ#Xy'#Rj2");
      advancedSettings0.setClientIdentifier("fmnOfYoNWA?");
      advancedSettings0.setClientSocketReceiveBufferSize((-980));
      assertEquals((-980), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2047775241322567
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("\t<debug-non-blocking-mode>");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setBacklog(492);
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getBacklog();
      assertEquals("\t<debug-non-blocking-mode>", advancedSettings0.getClientIdentifier());
      assertEquals(492, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6859453246697877
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(10);
      advancedSettings0.setSocketLinger((-171));
      advancedSettings0.setBacklog((-171));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-171));
      advancedSettings0.setCharset("");
      advancedSettings0.setSocketLinger((-1699));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setByteBufferSize(0);
      assertEquals((-1699), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2706069569402985
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize((-295));
      advancedSettings0.setClientSocketTrafficClass("jJ(k)");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setClientIdentifier("</byte-buffer-size>\n");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.toXML("jJ(k)");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(268);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setByteBufferSize((-239));
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("<r");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setBacklog((-239));
      assertEquals("<r", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setQSObjectPoolMaker("oJK");
      advancedSettings0.setClientIdentifier("\t<charset>");
      advancedSettings0.setDebugNonBlockingMode(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("oJK");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // oJK
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }
}
