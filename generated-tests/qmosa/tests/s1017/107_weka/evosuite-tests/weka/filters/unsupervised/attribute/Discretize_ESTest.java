/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:05:20 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.ListIterator;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("y8M8[nr;$?*M@ecb4g");
      discretize0.globalInfo();
      discretize0.makeBinaryTipText();
      discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useEqualFrequencyTipText();
      discretize0.listOptions();
      int int0 = 1314;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1314);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("}");
      discretize0.getRevision();
      discretize0.toString();
      discretize0.m_UseBinNumbers = true;
      int[] intArray0 = new int[5];
      intArray0[0] = (-874);
      intArray0[1] = (-709);
      intArray0[2] = 258;
      intArray0[3] = (-1927);
      intArray0[4] = (-3378);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.m_CutPoints = null;
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getFindNumBins();
      discretize0.findNumBinsTipText();
      assertTrue(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(false);
      discretize0.getAttributeIndices();
      discretize0.getBins();
      discretize0.useBinNumbersTipText();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.findNumBinsTipText();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1369.32548;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2012.371749740481;
      int int0 = (-3203);
      discretize0.getBinRangesString((-3203));
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2686.96318971525);
      doubleArray0[3] = 0.0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = " EVSiv_.=x<X|In|";
      stringArray0[1] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[2] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      Discretize.main(stringArray0);
      DenseInstance denseInstance0 = new DenseInstance(2012.371749740481, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("ucUB?+bk@Y;l %Jc=");
      discretize0.setFindNumBins(false);
      discretize0.m_UseBinNumbers = true;
      discretize0.setFindNumBins(true);
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      Filter.makeCopy(discretize0);
      discretize0.m_UseBinNumbers = true;
      discretize0.getUseBinNumbers();
      String[] stringArray0 = new String[6];
      discretize0.m_UseBinNumbers = true;
      stringArray0[0] = "";
      stringArray0[1] = "dLU5_gTr7: 2$rT";
      stringArray0[2] = "-B <num>";
      stringArray0[3] = "a_s@";
      discretize0.getCapabilities();
      stringArray0[4] = "";
      stringArray0[5] = "";
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 1674;
      Filter.runFilter(discretize0, (String[]) null);
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1674);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_ClassIndex = 295;
      discretize0.setUseBinNumbers(true);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.getCutPoints(3);
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "(4p_tm;c5nxId'AL";
      stringArray0[4] = "e6";
      discretize0.setOptions(stringArray0);
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(6, stringArray1.length);
      
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.133628922152431
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      
      discretize0.setMakeBinary(false);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize("z)]&+E.}");
      String[] stringArray0 = new String[3];
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2067.3013353);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-250.7050999365);
      doubleArray1[5] = 2769.04;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = (-2067.3013353);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = (-2067.3013353);
      doubleArray4[4] = Double.NaN;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-2067.3013353);
      doubleArray5[1] = 2033.4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-2067.3013353);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-250.7050999365);
      doubleArray6[6] = (-1676.7);
      doubleArray6[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_IgnoreClass = false;
      stringArray0[0] = "z)]&+E.}";
      stringArray0[1] = "z)]&+E.}";
      stringArray0[2] = "z)]&+E.}";
      Discretize.main(stringArray0);
      discretize0.setUseEqualFrequency(false);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.invertSelectionTipText();
      discretize0.invertSelectionTipText();
      AllFilter allFilter0 = new AllFilter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_NumBins = 1795;
      discretize0.setIgnoreClass(false);
      discretize0.setIgnoreClass(false);
      discretize0.setMakeBinary(true);
      discretize0.m_UseBinNumbers = true;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setBins(0);
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      discretize0.toString();
      discretize0.setAttributeIndicesArray(intArray0);
      intArray0[2] = 0;
      intArray0[3] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setUseBinNumbers(false);
      discretize0.getInvertSelection();
      discretize0.setFindNumBins(true);
      discretize0.setBins(0);
      discretize0.setDesiredWeightOfInstancesPerInterval((-2529.9927));
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setBins(0);
      discretize0.setOptions(stringArray0);
      assertEquals((-2529.9927), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.809678234077784
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("z)0+,d}");
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertNotNull(discretize0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-2067.3013353);
      doubleArray0[2] = Double.NaN;
      discretize0.m_UseBinNumbers = true;
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-250.7050999365);
      Discretize discretize1 = new Discretize("z)0+,d}");
      assertFalse(discretize1.equals((Object)discretize0));
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertTrue(discretize1.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.getUseBinNumbers());
      assertNotNull(discretize1);
      
      discretize1.setDesiredWeightOfInstancesPerInterval(Double.NaN);
      assertFalse(discretize1.equals((Object)discretize0));
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertTrue(discretize1.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals(Double.NaN, discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.getUseBinNumbers());
      assertNotSame(discretize1, discretize0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertFalse(discretize0.equals((Object)discretize1));
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotSame(discretize0, discretize1);
      
      discretize1.setOptions(stringArray0);
      assertFalse(discretize0.equals((Object)discretize1));
      assertFalse(discretize1.equals((Object)discretize0));
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertTrue(discretize1.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertTrue(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getIgnoreClass());
      assertEquals(7, stringArray0.length);
      assertNotSame(discretize0, discretize1);
      assertNotSame(discretize1, discretize0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9848697993327096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[1] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[2] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[3] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[4] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[5] = "H%Y";
      stringArray0[6] = "sPmprm5;#`HU76V*";
      stringArray0[7] = "Dist";
      stringArray0[8] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      Discretize.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      discretize0.setUseEqualFrequency(true);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setOutputFormat();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      
      String[] stringArray1 = discretize0.getOptions();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4582044327855743
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getIgnoreClass());
      assertNotNull(discretize0);
      
      discretize0.setInvertSelection(true);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getIgnoreClass());
      
      discretize0.setOutputFormat();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getIgnoreClass());
      
      discretize0.setUseEqualFrequency(true);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      
      Discretize discretize1 = new Discretize("-Z'n");
      assertFalse(discretize1.equals((Object)discretize0));
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize1.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertNotNull(discretize1);
      
      discretize1.setOutputFormat();
      assertFalse(discretize1.equals((Object)discretize0));
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize1.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertNotSame(discretize1, discretize0);
      
      System.setCurrentTimeMillis((-763L));
      String[] stringArray0 = discretize0.getOptions();
      assertFalse(discretize0.equals((Object)discretize1));
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotSame(discretize0, discretize1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6062413911624556
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("$Revision: 8964 $", 161);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals(161, attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertNotNull(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(3, Attribute.DATE);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals(161, attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(3, Attribute.DATE);
      
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 161);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1214);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1214
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.871476118054867
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("$Revision: 8964 $", 161);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertEquals(161, attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertNotNull(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertEquals(161, attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 161);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 730.7594833586196;
      doubleArray0[4] = (double) 2;
      discretize0.m_IgnoreClass = false;
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(730.7594833586196, doubleArray0);
      assertEquals(7, sparseInstance0.numAttributes());
      assertEquals(6, sparseInstance0.numValues());
      assertEquals(730.7594833586196, sparseInstance0.weight(), 0.01);
      assertNotNull(sparseInstance0);
      assertArrayEquals(new double[] {0.0, 2.0, 3.0, 730.7594833586196, 2.0, 1.0, 4.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.544744938111471
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Attribute attribute0 = new Attribute("$Revision: 8964 $", 161);
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertEquals(161, attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isString());
      assertNotNull(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertEquals(161, attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isString());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 161);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 730.7594833586196;
      doubleArray0[4] = (double) 2;
      discretize0.m_IgnoreClass = false;
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(730.7594833586196, doubleArray0);
      assertEquals(6, sparseInstance0.numValues());
      assertEquals(7, sparseInstance0.numAttributes());
      assertEquals(730.7594833586196, sparseInstance0.weight(), 0.01);
      assertNotNull(sparseInstance0);
      assertArrayEquals(new double[] {0.0, 2.0, 3.0, 730.7594833586196, 2.0, 1.0, 4.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      discretize0.convertInstance(sparseInstance0);
      assertEquals(6, sparseInstance0.numValues());
      assertEquals(7, sparseInstance0.numAttributes());
      assertEquals(730.7594833586196, sparseInstance0.weight(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertArrayEquals(new double[] {0.0, 2.0, 3.0, 730.7594833586196, 2.0, 1.0, 4.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-1952257859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1952257859
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7144523517424957
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertNotNull(protectedProperties0);
      
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertNotNull(protectedProperties1);
      
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertTrue(protectedProperties2.equals((Object)protectedProperties1));
      assertTrue(protectedProperties2.equals((Object)protectedProperties0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertEquals(0, protectedProperties2.size());
      assertTrue(protectedProperties2.isEmpty());
      assertNotNull(protectedProperties2);
      
      Attribute attribute0 = new Attribute("Sets the desired weight of instances per interval for equal-frequency binning.", arrayList1, protectedProperties2);
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(protectedProperties0.equals((Object)protectedProperties2));
      assertTrue(protectedProperties1.equals((Object)protectedProperties2));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertTrue(protectedProperties2.equals((Object)protectedProperties1));
      assertTrue(protectedProperties2.equals((Object)protectedProperties0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertEquals(0, protectedProperties2.size());
      assertTrue(protectedProperties2.isEmpty());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isAveragable());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", attribute0.name());
      assertEquals(0, attribute0.numValues());
      assertEquals(1, attribute0.type());
      assertNotNull(attribute0);
      assertFalse(arrayList1.contains("Sets the desired weight of instances per interval for equal-frequency binning."));
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(protectedProperties0.equals((Object)protectedProperties2));
      assertTrue(protectedProperties1.equals((Object)protectedProperties2));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertTrue(protectedProperties2.equals((Object)protectedProperties1));
      assertTrue(protectedProperties2.equals((Object)protectedProperties0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertEquals(0, protectedProperties2.size());
      assertTrue(protectedProperties2.isEmpty());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isAveragable());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", attribute0.name());
      assertEquals(0, attribute0.numValues());
      assertEquals(1, attribute0.type());
      assertTrue(arrayList0.contains(attribute0));
      assertFalse(arrayList1.contains("Sets the desired weight of instances per interval for equal-frequency binning."));
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertNotSame(protectedProperties0, protectedProperties1);
      assertNotSame(protectedProperties0, protectedProperties2);
      assertNotSame(protectedProperties1, protectedProperties2);
      assertNotSame(protectedProperties1, protectedProperties0);
      assertNotSame(protectedProperties2, protectedProperties1);
      assertNotSame(protectedProperties2, protectedProperties0);
      
      Instances instances0 = new Instances("Sets the desired weight of instances per interval for equal-frequency binning.", arrayList0, 1288);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 730.7594833586196;
      doubleArray0[1] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(725.14239, doubleArray0);
      assertEquals(725.14239, sparseInstance0.weight(), 0.01);
      assertEquals(1, sparseInstance0.numValues());
      assertEquals(2, sparseInstance0.numAttributes());
      assertNotNull(sparseInstance0);
      assertArrayEquals(new double[] {730.7594833586196, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9122553964722835
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Attribute attribute0 = new Attribute("$Revision: 8964 $", 161);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertEquals(161, attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertNotNull(attribute0);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertEquals(161, attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 161);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "real";
      stringArray0[1] = "'Gi-*{BVS#k}{&P-";
      stringArray0[2] = "ssn";
      stringArray0[3] = "relational";
      stringArray0[4] = "integer";
      stringArray0[5] = "integer";
      Filter.runFilter(discretize0, stringArray0);
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6, stringArray0.length);
      
      Range range0 = discretize0.m_DiscretizeCols;
      assertNotNull(range0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("$Revision: 8964 $", 161);
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(161, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertNotNull(attribute0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(161, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 161);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(arrayList0.contains(attribute0));
      
      SparseInstance sparseInstance0 = new SparseInstance(0);
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(0, sparseInstance0.numValues());
      assertEquals(0, sparseInstance0.numAttributes());
      assertNotNull(sparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(0, sparseInstance0.numValues());
      assertEquals(0, sparseInstance0.numAttributes());
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(0, binarySparseInstance0.numAttributes());
      assertNotNull(binarySparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("$Revnsion: 8964 $", 161);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(161, attribute0.index());
      assertEquals("$Revnsion: 8964 $", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertNotNull(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(161, attribute0.index());
      assertEquals("$Revnsion: 8964 $", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      
      Instances instances0 = new Instances("$Revnsion: 8964 $", arrayList0, 161);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals("$Revnsion: 8964 $", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals("$Revnsion: 8964 $", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(arrayList0.contains(attribute0));
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(0, binarySparseInstance0.numAttributes());
      assertEquals(0, binarySparseInstance0.numValues());
      assertNotNull(binarySparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7253427410034803
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Attribute attribute0 = new Attribute("$Revision: 8964 $", 161);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(161, attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertNotNull(attribute0);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(161, attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 161);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      instances0.setClass(attribute0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals(0, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals(0, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      doubleArray0[6] = 730.7594833586196;
      doubleArray0[4] = (double) 2;
      discretize0.m_IgnoreClass = false;
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(730.7594833586196, doubleArray0);
      assertEquals(5, sparseInstance0.numValues());
      assertEquals(7, sparseInstance0.numAttributes());
      assertEquals(730.7594833586196, sparseInstance0.weight(), 0.01);
      assertNotNull(sparseInstance0);
      assertArrayEquals(new double[] {0.0, 2.0, 3.0, 0.0, 2.0, 1.0, 4.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      discretize0.convertInstance(sparseInstance0);
      assertEquals(5, sparseInstance0.numValues());
      assertEquals(7, sparseInstance0.numAttributes());
      assertEquals(730.7594833586196, sparseInstance0.weight(), 0.01);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertArrayEquals(new double[] {0.0, 2.0, 3.0, 0.0, 2.0, 1.0, 4.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      Capabilities capabilities0 = discretize0.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertNotNull(capabilities0);
      
      int int0 = attribute0.addStringValue("first-last");
      assertEquals((-1), int0);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-1952257859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1952257859
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.564178145766516
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("K9=/)S2r4gY4bEqNT", (-2135212310));
      assertTrue(attribute0.isRegular());
      assertEquals((-2135212310), attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals("K9=/)S2r4gY4bEqNT", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertNotNull(attribute0);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.isRegular());
      assertEquals((-2135212310), attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals("K9=/)S2r4gY4bEqNT", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      
      Instances instances0 = new Instances("integer", arrayList0, 0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      
      discretize0.calculateCutPoints();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-2135212310);
      intArray0[2] = 66;
      intArray0[3] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 2507);
      assertEquals(2507, binarySparseInstance0.numAttributes());
      assertEquals(4, binarySparseInstance0.numValues());
      assertEquals(2.0, binarySparseInstance0.weight(), 0.01);
      assertNotNull(binarySparseInstance0);
      assertArrayEquals(new int[] {0, (-2135212310), 66, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      boolean boolean3 = discretize0.input(binarySparseInstance0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals(2507, binarySparseInstance0.numAttributes());
      assertEquals(4, binarySparseInstance0.numValues());
      assertEquals(2.0, binarySparseInstance0.weight(), 0.01);
      assertArrayEquals(new int[] {0, (-2135212310), 66, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      SparseInstance sparseInstance0 = new SparseInstance(694);
      assertEquals(694, sparseInstance0.numValues());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(694, sparseInstance0.numAttributes());
      assertNotNull(sparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      boolean boolean4 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      assertFalse(binarySparseInstance1.equals((Object)binarySparseInstance0));
      assertEquals(694, sparseInstance0.numValues());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(694, sparseInstance0.numAttributes());
      assertEquals(694, binarySparseInstance1.numAttributes());
      assertEquals(1.0, binarySparseInstance1.weight(), 0.01);
      assertEquals(694, binarySparseInstance1.numValues());
      assertNotNull(binarySparseInstance1);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      boolean boolean5 = discretize0.input(binarySparseInstance1);
      assertTrue(boolean5);
      assertFalse(binarySparseInstance1.equals((Object)binarySparseInstance0));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertEquals(694, sparseInstance0.numValues());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(694, sparseInstance0.numAttributes());
      assertEquals(694, binarySparseInstance1.numAttributes());
      assertEquals(1.0, binarySparseInstance1.weight(), 0.01);
      assertEquals(694, binarySparseInstance1.numValues());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotSame(binarySparseInstance1, binarySparseInstance0);
      
      Capabilities capabilities0 = discretize0.getCapabilities();
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertNotNull(capabilities0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6289610024393806
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("K9=/)S2r4gY4bEqNT", (-2135212310));
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("K9=/)S2r4gY4bEqNT", attribute0.name());
      assertEquals((-2135212310), attribute0.index());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertNotNull(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("K9=/)S2r4gY4bEqNT", attribute0.name());
      assertEquals((-2135212310), attribute0.index());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      
      Instances instances0 = new Instances("integer", arrayList0, 0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("integer", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertNotNull(discretize0);
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("integer", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean3 = discretize0.batchFinished();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      
      discretize0.calculateCutPoints();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      
      SparseInstance sparseInstance0 = new SparseInstance(694);
      assertEquals(694, sparseInstance0.numAttributes());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(694, sparseInstance0.numValues());
      assertNotNull(sparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      Discretize discretize1 = new Discretize("B");
      assertFalse(discretize1.equals((Object)discretize0));
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize1.getIgnoreClass());
      assertTrue(discretize1.isNewBatch());
      assertNotNull(discretize1);
      
      boolean boolean4 = discretize0.input(sparseInstance0);
      assertTrue(boolean4);
      assertFalse(discretize0.equals((Object)discretize1));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals(694, sparseInstance0.numAttributes());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(694, sparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotSame(discretize0, discretize1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.492033661018917
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("$Revision: 8964 $", 161);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertEquals(161, attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isString());
      assertNotNull(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("$Revision: 8964 $", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertEquals(161, attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isString());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 161);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("$Revision: 8964 $", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 161;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 161;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 161;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0);
      assertEquals(4.0, sparseInstance0.weight(), 0.01);
      assertEquals(5, sparseInstance0.numValues());
      assertEquals(6, sparseInstance0.numAttributes());
      assertNotNull(sparseInstance0);
      assertArrayEquals(new double[] {161.0, 2.0, 0.0, 161.0, 1.0, 161.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      discretize0.convertInstance(sparseInstance0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals(4.0, sparseInstance0.weight(), 0.01);
      assertEquals(5, sparseInstance0.numValues());
      assertEquals(6, sparseInstance0.numAttributes());
      assertArrayEquals(new double[] {161.0, 2.0, 0.0, 161.0, 1.0, 161.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      boolean boolean3 = discretize0.batchFinished();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      
      boolean boolean4 = discretize0.batchFinished();
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.411338396907008
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("If set to true, equal-frequency binning will be used instead of equal-width binning.", 161);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(161, attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", attribute0.name());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertNotNull(attribute0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(161, attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", attribute0.name());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      Instances instances0 = new Instances("integer", arrayList0, 1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("integer", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("integer", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.m_FindNumBins = false;
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(161, doubleArray0);
      assertEquals(161.0, denseInstance0.weight(), 0.01);
      assertEquals(8, denseInstance0.numValues());
      assertEquals(8, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      discretize0.convertInstance(denseInstance0);
      assertEquals(161.0, denseInstance0.weight(), 0.01);
      assertEquals(8, denseInstance0.numValues());
      assertEquals(8, denseInstance0.numAttributes());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.908133893291109
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = new Attribute("oU$'.n3Sts$XU", 39);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(39, attribute0.index());
      assertTrue(attribute0.isRegular());
      assertEquals("oU$'.n3Sts$XU", attribute0.name());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertNotNull(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(attribute0));
      
      String string0 = attribute0.value((-2004318069));
      assertEquals("", string0);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(39, attribute0.index());
      assertTrue(attribute0.isRegular());
      assertEquals("oU$'.n3Sts$XU", attribute0.name());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertNotNull(string0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      Instances instances0 = new Instances("real", arrayList0, 2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("real", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertNotNull(instances0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(39, attribute0.index());
      assertTrue(attribute0.isRegular());
      assertEquals("oU$'.n3Sts$XU", attribute0.name());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(discretize0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("real", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.calculateCutPoints();
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      
      System.setCurrentTimeMillis(4422L);
      String string1 = discretize0.getBinRangesString(0);
      assertEquals("All", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(string1);
      
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-363));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("K9=/)S2r4gY4bEqNT", (-2135212310));
      assertEquals((-2135212310), attribute0.index());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals("K9=/)S2r4gY4bEqNT", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertNotNull(attribute0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-2135212310), attribute0.index());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals("K9=/)S2r4gY4bEqNT", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      Instances instances0 = new Instances("integer", arrayList0, 0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals("K9=/)S2r4gY4bEqNT", attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.index());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      double double0 = instances0.meanOrMode(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertTrue(arrayList0.contains(attribute0));
      
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertNotNull(discretize0);
      
      discretize0.m_FindNumBins = true;
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(discretize0.getFindNumBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      
      boolean boolean3 = discretize0.setInputFormat(instances0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(discretize0.getFindNumBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(arrayList0.contains(attribute0));
      
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'K9=/)S2r4gY4bEqNT' 
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
