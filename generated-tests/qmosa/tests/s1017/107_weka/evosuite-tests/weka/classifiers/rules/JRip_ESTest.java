/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:05:17 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(158L);
      assertEquals(158L, jRip0.getSeed());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 1);
      jRip0.toString();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("(]7,18]%rt`4K", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-1101));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Y}Y^SGvF";
      stringArray0[1] = "Y}Y^SGvF";
      stringArray0[2] = "Y}Y^SGvF";
      stringArray0[3] = "6w";
      stringArray0[4] = "Y}Y^SGvF";
      stringArray0[5] = "Y}Y^SGvF";
      stringArray0[6] = "/#z_hp[S|z";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Attribute attribute0 = new Attribute("Y}Y^SGvF", (-1101));
      Attribute.main(stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      try { 
        jRip0.classifyInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\"6ZzA.=15^~^G", arrayList0, 716);
      try { 
        jRip0.rulesetForOneClass(0.0, instances0, 716, 2.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.toString();
      jRip0.getRevision();
      jRip0.getFolds();
      jRip0.getCheckErrorRate();
      Attribute attribute0 = new Attribute("': infoGain = ", 3);
      // Undeclared exception!
      try { 
        attribute0.parseDate("8118");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only parse date values for date attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann";
      jRip0.enumerateMeasures();
      stringArray0[1] = "";
      stringArray0[2] = "r%Vm.+-\"";
      JRip.main(stringArray0);
      jRip0.foldsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.getConsequent();
      JRip jRip1 = new JRip();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("m", "Morgan Kaufmann");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getMinNo();
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lS*G";
      stringArray0[1] = "Lk@j3XRx{AylC~\"";
      stringArray0[2] = "O";
      stringArray0[3] = "AUPRC (area under the precision-recall curve - discrete class only)";
      stringArray0[4] = "\nNumber of Rules : ";
      stringArray0[5] = "9Wq}Y5UC`{A9Toof";
      stringArray0[6] = "\n\nClass ";
      stringArray0[7] = "9^u5";
      stringArray0[8] = "PQw*k;;";
      jRip0.setOptions(stringArray0);
      jRip0.setUsePruning(true);
      String string0 = jRip0.getRevision();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("8118", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(297.0);
      jRip_RipperRule0.copy();
      jRip_RipperRule0.getRevision();
      Attribute attribute0 = new Attribute("<uOr8Zq\"-7Pv", "8118");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.maxInfoGain = (double) 2;
      jRip_NumericAntd0.getSplitPoint();
      attribute0.indexOfValue("po]o0`_+kvV@^bfS^");
      jRip0.getRevision();
      jRip_NumericAntd0.getAttr();
      jRip_NumericAntd0.getAccuRate();
      jRip0.setUsePruning(false);
      int[] intArray0 = new int[0];
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\tUse normalization.\n\t(default: no)");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccu();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.copy();
      jRip0.setFolds(1);
      jRip0.setUsePruning(true);
      double double0 = (-1520.39335456);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(291);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      arrayList0.trimToSize();
      jRip0.getDebug();
      jRip0.usePruningTipText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.globalInfo();
      String string0 = jRip0.debugTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether debug information is output to the console.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = new Locale("", "-V <double>");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("", list1, 83);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.setOptimizations((-155));
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.hasAntds();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals((-155), jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.getOptions();
      jRip0.setOptimizations((-27));
      assertEquals((-27), jRip0.getOptimizations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V";
      stringArray0[1] = "<H@W";
      stringArray0[2] = "\tSubset evaluation: RMSE (probability estimates)\n";
      stringArray0[3] = "D*IT},wi-yuAW$3;HG-";
      stringArray0[4] = ":2%{Kr'cM";
      stringArray0[5] = "";
      jRip0.setOptions(stringArray0);
      jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.getOptions();
      String string0 = jRip0.minNoTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.seedTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)100;
      intArray0[1] = (int) (byte)100;
      intArray0[2] = (int) (byte)78;
      intArray0[3] = 110;
      intArray0[4] = (int) (byte)78;
      intArray0[5] = (int) (byte)100;
      intArray0[6] = (int) (byte)4;
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot((int) (byte)100, (int) (byte)100, intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 716;
      Instances instances0 = new Instances("\"6ZzA.=15^~^G", arrayList0, 716);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      Attribute attribute0 = null;
      jRip0.setDebug(true);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      
      Locale.getISOLanguages();
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-516.70352099), intArray0, (-567));
      boolean boolean1 = jRip_RipperRule0.covers(binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule1.getConsequent();
      assertEquals((-1.0), double0, 0.01);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      ArrayList<String> arrayList0 = new ArrayList<String>(list0);
      Attribute attribute0 = new Attribute("qpu>]!", arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean2 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(boolean2 == boolean1);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      Attribute attribute0 = new Attribute("\nStopwords:", 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("\nStopwords: <= NaN", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      Attribute attribute0 = new Attribute("@t]FZXVO ");
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5665989181145106
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2450.5;
      doubleArray0[1] = 2450.5;
      doubleArray0[2] = 2450.5;
      doubleArray0[3] = 2450.5;
      doubleArray0[4] = 2450.5;
      doubleArray0[5] = 2450.5;
      doubleArray0[6] = 2450.5;
      doubleArray0[7] = 2450.5;
      SparseInstance sparseInstance0 = new SparseInstance(2450.5, doubleArray0);
      Attribute attribute0 = new Attribute("\tEnables debugging output (if available) to be printed.\n\t(default: off)", 2610);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.covers(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, doubleArray0);
      sparseInstance0.replaceMissingValues(doubleArray0);
      JRip jRip1 = new JRip();
      String string0 = jRip1.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      jRip1.usePruningTipText();
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(0.0, double1, 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      boolean boolean1 = jRip_RipperRule1.covers(binarySparseInstance0);
      double double2 = jRip_RipperRule0.getConsequent();
      assertEquals((-1.0), double2, 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean2 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean2 == boolean1);
      
      jRip_NominalAntd0.getRevision();
      String string1 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("8118", string1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("D");
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      locale0.getUnicodeLocaleAttributes();
      JRip jRip1 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      jRip1.setOptions(stringArray0);
      jRip0.setUsePruning(true);
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3383.529), doubleArray0);
      binarySparseInstance0.dataset();
      jRip0.checkErrorRateTipText();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy("*+?to%|W3A");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-58);
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 4;
      intArray0[6] = 2;
      intArray0[7] = 4;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, (-719));
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Locale.getISOLanguages();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      Attribute attribute0 = new Attribute((String) null, 512);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(742);
      boolean boolean1 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList1, protectedProperties0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList2, 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 860.372265, 4);
      System.setCurrentTimeMillis(0L);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setDebug(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.getOptions();
      jRip0.setOptimizations((-27));
      assertEquals((-27), jRip0.getOptimizations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      jRip0.setUsePruning(false);
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-58);
      doubleArray0[2] = 4538.2447627;
      doubleArray0[3] = (double) (-58);
      doubleArray0[4] = (double) (-58);
      doubleArray0[5] = (-3383.529);
      doubleArray0[6] = (-1.0E-6);
      doubleArray0[7] = (double) (-58);
      doubleArray0[8] = (double) (-58);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-58), doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("\tSet number of olds for REP\n\tOne fofd is used as prunig set.\n\t(default3)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \tSet number of olds for REP
         // \tOne fofd is used as prunig set.
         // \t(default3) not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getSeed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList1, protectedProperties0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList2, 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 860.372265, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList1, protectedProperties0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList2, 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      jRip0.setCheckErrorRate(false);
      binarySparseInstance0.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      arrayList2.add(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "This will allow the network to reset with a lower learning rate. If the network diverges from the answer this will automatically reset the network with a lower learning rate and begin training again. This option is only available if the gui is not set. Note that if the network diverges but isn't allowed to reset it will fail the training process and return an error message.");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7721393884375285
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tWhether NOT check the error rate>=0.5\n\tin stopping criteria \t(default: check)";
      stringArray0[1] = "5th Australian Joint Conference on Artificial Intelligence";
      stringArray0[2] = "\tWhether NOT check the error rate>=0.5\n\tin stopping criteria \t(default: check)";
      stringArray0[3] = "]rWM1(89]W X4N";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tProduce a ranked list of attributes.");
      stringArray0[4] = "dxUnZw0CjA`IA,";
      stringArray0[5] = "Yoav Freund and Robert E. Schapire";
      stringArray0[6] = "Yoav Freund and Robert E. Schapire";
      stringArray0[7] = "\tWhether NOT check the error rate>=0.5\n\tin stopping criteria \t(default: check)";
      stringArray0[8] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      jRip0.setOptions(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("z", arrayList0, 1025);
      System.setCurrentTimeMillis(0L);
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("GiFLV.8[-pRNW", linkedList0, 1025);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 2.147483647E9, 3240.74);
      JRip.RipperRule jRip_RipperRule2 = jRip2.new RipperRule();
      try { 
        jRip_RipperRule2.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("date", arrayList0, 3);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      binarySparseInstance0.copy();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Instances instances1 = new Instances("@end", arrayList0, 2610);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      jRip0.setCheckErrorRate(false);
      binarySparseInstance0.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances1, true);
      jRip_NumericAntd1.splitData(instances1, 2610, (-2367.71894139));
      assertEquals(0.0, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("D");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list0, (-1168));
      attribute0.copy("Whether the initial anchor is chosen randomly.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("OK0=g=J,]7SA{v0I", arrayList0, 117);
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) (-1168);
      doubleArray0[8] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2.0, 1058.2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }
}
