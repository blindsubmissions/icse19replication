/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:52:51 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(10);
      optimization_DynamicIntArray0.removeElementAt(0);
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 10;
      doubleArray1[2] = (double) 10;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1924.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 10;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 10;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = 1924.0;
      doubleArray4[3] = (double) 10;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = 1924.0;
      doubleArray6[2] = 1924.0;
      doubleArray6[3] = (double) 10;
      doubleArray6[4] = (double) 10;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = (double) 0;
      doubleArray6[7] = (double) 10;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (double) 0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = 1924.0;
      doubleArray8[2] = (double) 10;
      doubleArray8[3] = (double) 0;
      doubleArray8[4] = 1.0;
      doubleArray8[5] = 1924.0;
      doubleArray8[6] = (-4.0);
      doubleArray8[7] = 1924.0;
      doubleArray8[8] = (-966.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = (-966.0);
      doubleArray9[1] = (double) 0;
      doubleArray9[2] = (double) 0;
      doubleArray0[8] = doubleArray9;
      weka.core.matrix.Matrix matrix0 = null;
      try {
        matrix0 = new weka.core.matrix.Matrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All rows must have the same length.
         //
         verifyException("weka.core.matrix.Matrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(15);
      optimization_DynamicIntArray0.addElement(26);
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(15, 15);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 26;
      doubleArray0[2] = (double) 26;
      doubleArray0[3] = (double) 26;
      doubleArray0[4] = (double) 26;
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = (double) 15;
      doubleArray0[7] = (double) 15;
      doubleArray0[8] = (double) 26;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(241);
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = (Optimization.DynamicIntArray)optimization_DynamicIntArray0.copy();
      assertNotSame(optimization_DynamicIntArray1, optimization_DynamicIntArray0);
      assertEquals(0, optimization_DynamicIntArray1.size());
      
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(241, 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 241;
      doubleArray0[1] = (double) 241;
      doubleArray0[2] = 1.0000000002328306;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {241.0, 241.0, 1.0000000002328306}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(241);
      optimization_DynamicIntArray0.copy();
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(241, 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 241;
      doubleArray0[1] = (double) 241;
      doubleArray0[2] = 1.0000000002328306;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 241;
      doubleArray1[1] = (double) 241;
      doubleArray1[2] = (double) 241;
      doubleArray1[3] = (-1376.009489854);
      doubleArray1[4] = (double) 241;
      doubleArray1[5] = (double) 241;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(15);
      optimization_DynamicIntArray0.addElement(26);
      weka.core.matrix.Matrix.random(15, 15);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 26;
      doubleArray0[2] = (double) 26;
      doubleArray0[3] = (double) 26;
      doubleArray0[4] = (double) 26;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(26, 26);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(15);
      optimization_DynamicIntArray0.addElement(26);
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(15, 15);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 26;
      doubleArray0[2] = (double) 26;
      doubleArray0[3] = (double) 26;
      doubleArray0[4] = (double) 26;
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = (double) 15;
      doubleArray0[7] = (double) 15;
      doubleArray0[8] = (double) 26;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(3);
      Random.setNextRandom(3);
      Random.setNextRandom((-3581));
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(5);
      optimization_DynamicIntArray0.addElement(27);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.size();
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 5;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 27;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 3;
      doubleArray3[3] = (double) (-3581);
      doubleArray3[4] = (double) (-3581);
      doubleArray3[5] = (double) 5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 3;
      doubleArray5[1] = (double) 3;
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (double) 3;
      doubleArray5[4] = (double) 3;
      doubleArray5[5] = Double.NaN;
      doubleArray5[6] = (double) 27;
      doubleArray5[7] = (double) 27;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 27;
      doubleArray6[1] = Double.NaN;
      doubleArray6[2] = (double) (-3581);
      doubleArray6[3] = (double) 1;
      doubleArray0[5] = doubleArray6;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-2901), 1);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray7 = Optimization.solveTriangle(matrix0, doubleArray4, true, booleanArray0);
      assertNotSame(doubleArray7, doubleArray4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 26;
      doubleArray0[2] = (double) 26;
      doubleArray0[3] = (double) 26;
      doubleArray0[4] = (double) 26;
      doubleArray0[8] = (double) 26;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 26, (-592));
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(15);
      optimization_DynamicIntArray0.addElement(0);
      assertEquals(1, optimization_DynamicIntArray0.size());
      
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(15, 15);
      weka.core.matrix.Matrix.random(15, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 15;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-7.8125), (-65.625), 18.75}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 42, 0);
      int[] intArray0 = new int[0];
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray0, 0, (-2770));
      matrix0.setMatrix(intArray0, intArray0, matrix1);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 22.0;
      boolean[] booleanArray0 = new boolean[6];
      weka.core.matrix.Matrix.random(42, 42);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 42;
      doubleArray2[1] = (double) 42;
      double[] doubleArray3 = Optimization.solveTriangle(matrix0, doubleArray2, true, booleanArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {42.0, 42.0}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1469);
      matrix0.clone();
      weka.core.matrix.Matrix.random(69, 69);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(69, 26);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 69;
      doubleArray0[1] = (double) 69;
      doubleArray0[2] = (double) 69;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertEquals(3, doubleArray1.length);
  }
}
