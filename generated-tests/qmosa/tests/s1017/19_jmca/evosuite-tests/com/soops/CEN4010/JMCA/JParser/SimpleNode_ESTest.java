/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:21:55 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1938);
      simpleNode0.jjtClose();
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1499));
      simpleNode0.setIdentifier("");
      simpleNode0.jjtClose();
      simpleNode0.setIdentifier("\"if\"");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"if\"");
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '4';
      charArray0[2] = ')';
      charArray0[3] = 'y';
      charArray0[4] = 'e';
      charArray0[5] = '!';
      charArray0[6] = 'S';
      charArray0[7] = '\'';
      charArray0[8] = '~';
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append('`');
      stringWriter2.close();
      // Undeclared exception!
      try { 
        simpleNode0.dump("\"if\"", stringWriter2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1499
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1667);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1094);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString(",");
      simpleNode0.toString(",");
      simpleNode0.toString();
      simpleNode0.setIdentifier("sY}Y^SGv");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*amp");
      simpleNode0.dump("*amp", stringWriter1);
      simpleNode0.toString(" Yo<L/#C`~dgBkC");
      simpleNode0.jjtOpen();
      simpleNode0.toString();
      simpleNode0.toString();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-2007);
      SimpleNode simpleNode0 = new SimpleNode((-2007));
      JavaParser javaParser0 = new JavaParser("</");
      int int1 = (-863);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3556;
      SimpleNode simpleNode0 = new SimpleNode(3556);
      simpleNode0.jjtGetNumChildren();
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.peekNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.toString("");
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('w');
      StringWriter stringWriter2 = stringWriter1.append('W');
      stringWriter0.write("CastLookahead");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetNumChildren();
      stringWriter2.append((CharSequence) "CompilationUnit");
      // Undeclared exception!
      try { 
        simpleNode0.dump("CompilationUnit", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString(",");
      simpleNode0.toString(",");
      simpleNode0.toString();
      simpleNode0.toString(",");
      simpleNode0.toString("");
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      StringWriter stringWriter2 = stringWriter1.append('f');
      stringWriter1.append((CharSequence) "CompilationUnit");
      simpleNode0.dump("CompilationUnit", stringWriter2);
      simpleNode0.dump("", stringWriter1);
      simpleNode0.dump("", stringWriter1);
      StringWriter stringWriter3 = null;
      try {
        stringWriter3 = new StringWriter((-1470));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8143075196071252
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*amp");
      simpleNode0.dump("*amp", stringWriter1);
      simpleNode0.toString(";");
      simpleNode0.jjtOpen();
      simpleNode0.toString();
      simpleNode0.toString();
      JavaParser javaParser0 = new JavaParser(">jw?k#UHL3`");
      int int0 = 1932;
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1932);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild((-5113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.152564616149156
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString(",");
      simpleNode0.toString(",");
      simpleNode0.toString();
      simpleNode0.toString("Hl2-{");
      simpleNode0.toString();
      simpleNode0.jjtAddChild((Node) null, 1);
      StringWriter stringWriter0 = new StringWriter(162);
      StringWriter stringWriter1 = stringWriter0.append('Z');
      stringWriter1.append((CharSequence) "CompilationUnit");
      simpleNode0.dump("CompilationUnit", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.jjtAddChild((Node) null, 60);
      assertEquals(61, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(10);
      simpleNode0.toString(">=");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ",");
      simpleNode0.toString("}");
      simpleNode0.toString();
      simpleNode1.setIdentifier(">=");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.flush();
      StringWriter stringWriter2 = new StringWriter(10);
      stringWriter2.append((CharSequence) "CompilationUnit");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter0.append((CharSequence) "*amp");
      simpleNode1.dump("nw4xR96<jNrI", stringWriter1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 0);
      simpleNode2.dump(">=", stringWriter0);
      assertEquals(",*amp", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.toString("");
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      simpleNode0.setIdentifier("{");
      nodeArray0[5] = (Node) simpleNode0;
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(nodeArray0[1], 0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('2');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "CompilationUnit");
      stringWriter2.close();
      simpleNode1.dump("", stringWriter2);
      simpleNode1.dump("CompilationUnit", stringWriter2);
      simpleNode0.dump("", stringWriter1);
      simpleNode1.dump("", stringWriter1);
      assertEquals(1, simpleNode1.jjtGetNumChildren());
      
      simpleNode0.dump("{", stringWriter1);
      assertEquals("2CompilationUnit<CompilationUnit><CompilationUnit>\n</CompilationUnit>\n</CompilationUnit>\n<CompilationUnit><CompilationUnit>\n</CompilationUnit>\n</CompilationUnit>\n<CompilationUnit>\n</CompilationUnit>\n<CompilationUnit><CompilationUnit>\n</CompilationUnit>\n</CompilationUnit>\n<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681098
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(10);
      simpleNode0.toString(">=");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ",");
      simpleNode0.toString("}");
      simpleNode0.toString();
      simpleNode1.setIdentifier("");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter(10);
      stringWriter3.flush();
      StringWriter stringWriter4 = new StringWriter(626);
      stringWriter1.append((CharSequence) "*amp");
      StringWriter stringWriter5 = new StringWriter();
      stringWriter1.append((CharSequence) "}CompilationUnit");
      char[] charArray0 = new char[0];
      stringWriter5.write(charArray0);
      simpleNode1.dump("f)H^V~)RHLg)_O6FPBA", stringWriter2);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.777661295762166
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("\"<\"");
      simpleNode0.toString();
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      stringWriter1.append((CharSequence) "\"<\"CompilationUnit");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter1.append((CharSequence) ",");
      simpleNode0.dump("alEEtM", stringWriter0);
      simpleNode0.dump("CompilationUnit", stringWriter3);
      assertEquals("]\"<\"CompilationUnit,<CompilationUnit>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter3.toString());
      assertEquals("]\"<\"CompilationUnit,<CompilationUnit>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1240357221909014
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.toString("");
      simpleNode0.setIdentifier("<");
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode1.dump("CompilationUnit", stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.dump("{", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode(1);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("{", stringWriter1);
      simpleNode1.dump("", stringWriter1);
      assertEquals(1, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.806504609875222
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.toString("<<");
      simpleNode0.setIdentifier("<<");
      simpleNode0.setIdentifier("/1\u0000TI)}(2");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "<<");
      stringWriter1.flush();
      simpleNode1.dump("", stringWriter0);
      stringWriter0.write((-353));
      simpleNode0.dump("Ry/*_[T^B", stringWriter1);
      simpleNode1.dump("Ry/*_[T^B", stringWriter0);
      assertEquals("<<\uFE9F<CompilationUnit>\n  <identifier>*lshft</identifier>\n  <identifier>/1\u0000TI)}(2</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.toString("");
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.setIdentifier("}");
      simpleNode0.setIdentifier("d#j");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CompilationUnit");
      stringWriter1.flush();
      simpleNode0.dump("}", stringWriter1);
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'F';
      charArray0[2] = 'T';
      charArray0[3] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter2.write("CompilationUnit");
      stringWriter2.write(107);
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "}");
      stringWriter3.close();
      simpleNode0.dump("", stringWriter3);
      simpleNode0.dump("", stringWriter0);
      assertEquals("CompilationUnit<CompilationUnit>\n  <identifier>d#j</identifier>\n</CompilationUnit>\n2FTdCompilationUnitk}<CompilationUnit>\n  <identifier>d#j</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>d#j</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9278749699972223
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("/");
      simpleNode0.toString("/");
      simpleNode0.toString();
      simpleNode0.setIdentifier("/");
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      StringWriter stringWriter1 = new StringWriter(1);
      StringWriter stringWriter2 = stringWriter0.append('2');
      StringBuffer stringBuffer0 = new StringBuffer(1);
      simpleNode0.dump((String) null, stringWriter2);
      JavaParser javaParser0 = new JavaParser((Reader) null);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, (-2986));
      simpleNode2.dump("hlu\"nn5<mBj6Cpa<#", stringWriter0);
      simpleNode1.dump("hlu\"nn5<mBj6Cpa<#", stringWriter2);
      Node[] nodeArray0 = new Node[0];
      simpleNode2.children = nodeArray0;
      simpleNode2.dump((String) null, stringWriter2);
      simpleNode0.dump("hlu\"nn5<mBj6Cpa<#", stringWriter0);
      simpleNode1.dump("Sw~<Hx,@X+(:5K@q&", stringWriter1);
      simpleNode0.dump(">=", stringWriter2);
      simpleNode2.dump("1`F>EuYxt3lL2nyYQWO", stringWriter2);
      assertEquals("2<CompilationUnit>\n  <identifier>/</identifier>\n</CompilationUnit>\n<CompilationUnit><CompilationUnit>\n  <identifier>/</identifier>\n</CompilationUnit>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>/</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>/</identifier>\n</CompilationUnit>\n", stringWriter2.toString());
      assertEquals("2<CompilationUnit>\n  <identifier>/</identifier>\n</CompilationUnit>\n<CompilationUnit><CompilationUnit>\n  <identifier>/</identifier>\n</CompilationUnit>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>/</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>/</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.908908734898781
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("D");
      simpleNode0.toString();
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      simpleNode0.dump("CompilationUnit", stringWriter0);
      simpleNode0.dump("{", stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump(">>", stringWriter0);
      StringWriter stringWriter1 = new StringWriter(0);
      simpleNode0.dump("DCompilationUnit", stringWriter1);
      simpleNode0.dump("#Bk>$< ,1U{*E", stringWriter0);
      simpleNode0.dump("DCompilationUnit", stringWriter1);
      simpleNode0.dump("*le", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*rshft</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*rshft</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*rshft</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*rshft</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*rshft</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>*rshft</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }
}
