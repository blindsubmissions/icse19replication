/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:03:56 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 10, (byte)80);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)0);
      simpleNode0.jjtAddChild((Node) null, (byte)0);
      simpleNode0.toString(". EgpCqTQZ8[MfR74[E");
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ">>";
      JavaParser javaParser0 = new JavaParser(">>");
      int int0 = 1;
      try { 
        javaParser0.Name();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-2026));
      SimpleNode simpleNode1 = new SimpleNode((-2026));
      simpleNode1.jjtAddChild(simpleNode0, 496);
      simpleNode1.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier((String) null);
      simpleNode0.jjtClose();
      simpleNode0.jjtClose();
      String string0 = simpleNode0.toString();
      assertEquals("CompilationUnit : null", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 10, (byte)80);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)0);
      simpleNode0.jjtAddChild((Node) null, (byte)0);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("d<\"K^I5a%v");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.setIdentifier((String) null);
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter(259);
      // Undeclared exception!
      try { 
        simpleNode0.dump("d<\"K^I5a%v", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.jjtGetParent();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = null;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild((Node) null, 26);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-2802));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2802
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-35);
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("\rYe)(!g2kj(Oj{Y(");
      SimpleNode simpleNode1 = new SimpleNode((byte)14);
      simpleNode1.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter(1225);
      simpleNode1.dump("$=mB", stringWriter0);
      simpleNode0.dump("$=mB", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>\rYe)(!g2kj(Oj{Y(</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5775137153768709
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-35);
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("\rYe)(!g2kj(Oj{Y(");
      SimpleNode simpleNode1 = new SimpleNode((byte)25);
      simpleNode1.jjtGetNumChildren();
      simpleNode1.jjtAddChild(simpleNode0, 1395);
      StringWriter stringWriter0 = new StringWriter(1225);
      simpleNode1.dump("$=mB", stringWriter0);
      assertEquals(1396, simpleNode1.jjtGetNumChildren());
      
      simpleNode0.dump("$=mB", stringWriter0);
      assertEquals("<ConstructorDeclaration><EnumConstant>\n  <identifier>\rYe)(!g2kj(Oj{Y(</identifier>\n</EnumConstant>\n</ConstructorDeclaration>\n<EnumConstant>\n  <identifier>\rYe)(!g2kj(Oj{Y(</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1240357221909014
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)14;
      SimpleNode simpleNode0 = new SimpleNode(3);
      simpleNode0.setIdentifier("<");
      SimpleNode simpleNode1 = new SimpleNode((byte)14);
      simpleNode1.jjtGetNumChildren();
      simpleNode1.children = null;
      StringWriter stringWriter0 = new StringWriter(1257);
      simpleNode1.dump("(8k=N;uM8--%LNn", stringWriter0);
      simpleNode0.toString("2:WcmD`FWnqmw");
      simpleNode1.dump("8&(<_)/n", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('=');
      simpleNode0.dump("(8k=N;uM8--%LNn", stringWriter1);
      assertEquals("=<Modifiers>\n  <identifier>*lt</identifier>\n</Modifiers>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2265558156134033
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      SimpleNode simpleNode0 = new SimpleNode(3);
      simpleNode0.setIdentifier("");
      SimpleNode simpleNode1 = new SimpleNode((byte)80);
      simpleNode1.jjtAddChild(simpleNode0, (byte)80);
      simpleNode1.children = null;
      StringWriter stringWriter0 = new StringWriter(1257);
      simpleNode1.dump("(8k=N;uM8--%LNn", stringWriter0);
      simpleNode1.toString("");
      simpleNode0.dump("OL~NlX:jK(9+08?S", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('=');
      stringWriter0.flush();
      simpleNode0.dump("(8k=N;uM8--%LNn", stringWriter1);
      simpleNode1.dump("2:WcmD`FWnqmw", stringWriter1);
      assertEquals("<Modifiers>\n</Modifiers>\n=<Modifiers>\n</Modifiers>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("&&");
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      simpleNode0.dump(")", stringWriter0);
      simpleNode0.jjtGetParent();
      SimpleNode simpleNode1 = new SimpleNode((-75999875));
      Node node0 = javaParser0.currNode;
      simpleNode1.jjtAddChild((Node) null, 535);
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, (-1));
      StringWriter stringWriter2 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode1.dump("t&9X<45V2;tApbN^K[\"", stringWriter1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -75999875
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9017412329512398
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("&&");
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter0.append('a');
      simpleNode0.dump("*ge", stringWriter2);
      simpleNode0.jjtGetParent();
      simpleNode0.toString("&&");
      StringWriter stringWriter3 = stringWriter0.append('j');
      simpleNode0.dump("*ge", stringWriter1);
      stringWriter3.append('q');
      simpleNode0.dump("M", stringWriter0);
      assertEquals("a<CompilationUnit>\n  <identifier>*amp</identifier>\n</CompilationUnit>\njq<CompilationUnit>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6425990774875225
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(" ");
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier(" ");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 18);
      Node[] nodeArray0 = new Node[0];
      simpleNode1.children = nodeArray0;
      SimpleNode simpleNode2 = new SimpleNode(9);
      simpleNode1.toString();
      simpleNode2.setIdentifier(" ");
      StringWriter stringWriter0 = new StringWriter(1273);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode2.dump("y", stringWriter1);
      SimpleNode simpleNode3 = new SimpleNode((-2013914344));
      StringWriter stringWriter2 = new StringWriter();
      simpleNode1.dump(" ", stringWriter2);
      StringWriter stringWriter3 = new StringWriter();
      simpleNode1.dump(" ", stringWriter2);
      simpleNode0.dump((String) null, stringWriter2);
      simpleNode2.dump((String) null, stringWriter3);
      assertEquals("<EnumBody>\n  <identifier> </identifier>\n</EnumBody>\n", stringWriter3.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("&&");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("{", stringWriter0);
      simpleNode0.setIdentifier("&&");
      int int0 = 1273;
      StringWriter stringWriter1 = new StringWriter(0);
      simpleNode0.dump("{", stringWriter1);
      int int1 = (-1);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-1));
      simpleNode1.dump("H", stringWriter0);
      simpleNode0.dump("H", stringWriter1);
      simpleNode0.toString("{");
      StringWriter stringWriter2 = new StringWriter();
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        simpleNode0.dump("{CompilationUnit : { : &&", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7937300551584248
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("#n=");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(18);
      simpleNode1.setIdentifier(")");
      StringWriter stringWriter1 = new StringWriter((byte)0);
      simpleNode1.dump(")", stringWriter1);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) ")");
      stringWriter2.flush();
      simpleNode1.toString();
      StringWriter stringWriter3 = stringWriter2.append('<');
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) ")");
      simpleNode1.dump("&&", stringWriter4);
      StringWriter stringWriter5 = stringWriter4.append((CharSequence) "#n=");
      stringWriter0.write(1);
      simpleNode0.dump("VariableDeclaratorId : )", stringWriter3);
      simpleNode0.dump("*zz<J^Dc7m96", stringWriter5);
      assertEquals(")<)<VariableDeclaratorId>\n</VariableDeclaratorId>\n#n=\u0001<VariableDeclaratorId>\n  <identifier>#n=</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>#n=</identifier>\n</VariableDeclaratorId>\n", stringWriter5.toString());
      assertEquals(")<)<VariableDeclaratorId>\n</VariableDeclaratorId>\n#n=\u0001<VariableDeclaratorId>\n  <identifier>#n=</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>#n=</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.14839214282331
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("&&");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.setIdentifier("9");
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("9", stringWriter0);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter1 = new StringWriter(0);
      simpleNode0.dump("9", stringWriter1);
      simpleNode0.toString("}3{");
      SystemInUtil.addInputLine("VariableDeclaratorId");
      String string0 = "<<";
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("*gt", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(1);
      SimpleNode simpleNode2 = new SimpleNode(1);
      simpleNode1.jjtSetParent(simpleNode0);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "", 2018, (-155952485));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(27);
      simpleNode0.setIdentifier(" ");
      simpleNode0.setIdentifier("$");
      StringWriter stringWriter0 = new StringWriter();
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.toString("$");
      simpleNode0.setIdentifier("}");
      SystemInUtil.addInputLine(" ");
      stringWriter0.write("&");
      stringWriter0.close();
      simpleNode0.dump("", stringWriter0);
      simpleNode0.dump(" ", stringWriter0);
      stringWriter0.flush();
      simpleNode0.dump("}", stringWriter0);
      simpleNode0.dump("}", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      simpleNode0.dump(" ", stringWriter0);
      simpleNode0.dump("rv", stringWriter1);
      assertEquals("&<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\nnull<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n", stringWriter0.toString());
      assertEquals("&<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\nnull<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n<Initializer>\n  <identifier> </identifier>\n  <identifier>$</identifier>\n</Initializer>\n", stringWriter1.toString());
  }
}
