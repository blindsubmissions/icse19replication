/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:53:21 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 998, 998);
      javaCharStream0.adjustBeginLineColumn(998, (-690));
      StringReader stringReader0 = new StringReader("");
      javaCharStream0.ReInit((Reader) stringReader0, 998, 998, 1398);
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = (-1538);
      int int1 = 1;
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1538), 1, 1);
      javaCharStream0.Done();
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.buffer = null;
      sequenceInputStream0.close();
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 2095, 2095, 2095);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ex<3:F!M");
      int int0 = (-4221);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4221), (-235), 0);
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream(696);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int1 = (-908);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (-908));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rN(A5D*");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      javaCharStream0.FillBuff();
      javaCharStream0.getBeginLine();
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('Z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 0;
      int int1 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      javaCharStream0.inBuf = 0;
      javaCharStream0.AdjustBuffSize();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Dd8HE)= #NKap");
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '=';
      charArray0[2] = '~';
      charArray0[3] = '@';
      charArray0[4] = '0';
      charArray0[5] = 'X';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 0, 0);
      javaCharStream0.backup((-1304));
      assertEquals(1303, javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, 241);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      int int0 = 0;
      byteArrayInputStream0.read(byteArray0, 0, 0);
      sequenceInputStream0.close();
      byteArrayInputStream0.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6|");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 909, 909);
      MockFile mockFile0 = new MockFile("6|");
      File file0 = MockFile.createTempFile("XZf|DFssi(E]3xAtc", "6|", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.release();
      javaCharStream0.ReInit((InputStream) mockFileInputStream0, (-1662), (-1662), 909);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 1955;
      stringReader0.markSupported();
      stringReader0.markSupported();
      int int1 = 1;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1955, 1);
      javaCharStream0.tokenBegin = 0;
      javaCharStream0.GetImage();
      PipedInputStream pipedInputStream0 = new PipedInputStream(167);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char char0 = '<';
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      pushbackInputStream0.unread(0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      javaCharStream0.bufpos = 0;
      javaCharStream0.adjustBeginLineColumn(0, 13);
      javaCharStream0.readChar();
      StringReader stringReader0 = new StringReader("BJK$MZ_WEX");
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(13, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.GetImage();
      javaCharStream0.bufline = null;
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1216, 1216);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1), 670);
      char[] charArray0 = new char[2];
      javaCharStream0.column = 11;
      charArray0[0] = 'm';
      pipedInputStream0.skip((-1));
      charArray0[1] = 'l';
      javaCharStream0.nextCharBuf = charArray0;
      StringReader stringReader0 = new StringReader("");
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'l';
      intArray0[1] = 670;
      javaCharStream0.bufline = intArray0;
      pipedInputStream0.close();
      javaCharStream0.ReInit((Reader) stringReader0, 3547, 0, 0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 670, 1767, 670);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, 670);
      StringReader stringReader1 = new StringReader("Invalid escape character at line ");
      stringReader1.read(charArray0);
      javaCharStream0.ReInit((Reader) stringReader1, 2048, 670);
      try { 
        JavaCharStream.hexval('m');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 179, 179);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      int int0 = 574;
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, (-5635), 574, (-5635));
      javaCharStream0.getBeginLine();
      javaCharStream0.ExpandBuff(false);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '=';
      charArray0[2] = '~';
      charArray0[3] = '@';
      charArray0[4] = '0';
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.read(charArray0);
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ex<3:F!M");
      int int0 = (-235);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 88, 88, 9);
      javaCharStream0.readChar();
      javaCharStream0.GetImage();
      javaCharStream0.getBeginColumn();
      javaCharStream0.BeginToken();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Invalid escape character at line ";
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char char0 = '_';
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6682776521110269
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaCharStream.hexval('a');
      StringReader stringReader0 = new StringReader("nKB;lKWv6~");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("a|VkXg%pK92|G;");
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 604, 604, 1200);
      javaCharStream0.GetSuffix(89);
      javaCharStream0.adjustBeginLineColumn(84, 5);
      assertEquals(85, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 998, 998);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(998, (-690));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-690), javaCharStream0.getBeginColumn());
      assertEquals(999, javaCharStream0.getBeginLine());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-690), (-861));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("a|VkXg%pK92|G;");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = ',';
      charArray0[0] = ',';
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = stringReader0.read(charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int2 = JavaCharStream.hexval('2');
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '=';
      charArray0[2] = '~';
      charArray0[3] = '@';
      charArray0[4] = '0';
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '}';
      charArray0[2] = '%';
      int int1 = stringReader0.read(charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'3', '}', '%'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int2 = JavaCharStream.hexval('3');
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '=';
      charArray0[2] = '~';
      charArray0[3] = '@';
      charArray0[4] = '0';
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read(charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {',', '=', '~', '@', '0', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.35569801063169865
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 604, 604, 1200);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = javaCharStream0.GetSuffix(89);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(charArray0);
      assertEquals(89, charArray0.length);
      
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")u=*;*");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(41, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '=';
      charArray0[2] = '0';
      charArray0[3] = '@';
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '=';
      charArray0[2] = '~';
      charArray0[3] = '@';
      charArray0[4] = '0';
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1572), (-1572));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('c', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1572), javaCharStream0.getLine());
      assertEquals((-1572), javaCharStream0.getEndLine());
      assertEquals((-1572), javaCharStream0.getEndColumn());
      assertEquals((-1572), javaCharStream0.getColumn());
      assertEquals((-1572), javaCharStream0.getBeginLine());
      assertEquals((-1572), javaCharStream0.getBeginColumn());
      
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      char char1 = javaCharStream0.BeginToken();
      assertEquals('o', char1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1572), javaCharStream0.getLine());
      assertEquals((-1571), javaCharStream0.getEndColumn());
      assertEquals((-1572), javaCharStream0.getEndLine());
      assertEquals((-1571), javaCharStream0.getBeginColumn());
      assertEquals((-1571), javaCharStream0.getColumn());
      assertEquals((-1572), javaCharStream0.getBeginLine());
      assertFalse(char1 == char0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.26401375003681654
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 14, (-395));
      assertEquals((-395), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)34, (byte)34, (byte)34, (byte)0, (byte)34, (byte)34}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 61);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 94, 89);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2973225173308878
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      pushbackInputStream0.unread(0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 87);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(pushbackInputStream1);
      
      char[] charArray0 = javaCharStream0.GetSuffix(72);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertNotNull(charArray0);
      assertEquals(72, charArray0.length);
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = ',';
      charArray0[0] = ',';
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      StringReader stringReader0 = new StringReader("yIp=");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '~';
      StringReader stringReader0 = new StringReader("yIp=");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      int int1 = JavaCharStream.hexval('b');
      assertEquals(11, int1);
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
      
      int int1 = JavaCharStream.hexval('a');
      assertEquals(10, int1);
      assertTrue(int1 == int0);
      
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3629234715124521
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[3] = (byte)34;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)34;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)34;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 61);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 94, 89);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("a|VkXg%pK92|G;");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(88);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 88, 73, 88);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(88, 15);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(73, 88);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '=';
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9928820116099507
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      boolean boolean0 = pushbackInputStream0.markSupported();
      assertFalse(boolean0);
      
      pushbackInputStream0.unread(20);
      byte[] byteArray0 = new byte[0];
      int int0 = sequenceInputStream0.read(byteArray0, 357, (-584));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('\u0014', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1148383971136544
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("a|VkXg%pK92|G;");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('a', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.21262682366313784
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      boolean boolean0 = pushbackInputStream0.markSupported();
      assertFalse(boolean0);
      
      pushbackInputStream0.unread(20);
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)20, 1061);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArray0.length);
      
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char char0 = 'E';
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 14);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 14, 14);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int1 = 2749;
      javaCharStream0.backup(2749);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1346, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char1 = javaCharStream0.BeginToken();
      assertEquals('\u0000', char1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1347, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(char1 == char0);
      
      try { 
        pipedInputStream0.connect(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
