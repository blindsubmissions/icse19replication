/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:21:36 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Properties;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("u1dK\"@-Y/|}");
      discretize0.m_MakeBinary = true;
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      int int0 = 1507;
      discretize0.setBins(1507);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int1 = 3234;
      arrayList0.parallelStream();
      Instances instances0 = new Instances((String) null, arrayList0, 3234);
      int int2 = 35;
      // Undeclared exception!
      try { 
        instances0.renameAttribute(35, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 0;
      Filter.makeCopies(discretize0, 0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.getRevision();
      discretize0.getOptions();
      discretize0.m_UseBinNumbers = true;
      discretize0.findNumBinsTipText();
      discretize0.attributeIndicesTipText();
      discretize0.getUseEqualFrequency();
      discretize0.findNumBinsTipText();
      discretize0.getCutPoints(2176);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("This should never happen!");
      discretize0.getFindNumBins();
      discretize0.makeBinaryTipText();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 68;
      intArray0[2] = 0;
      intArray0[3] = 1336;
      intArray0[4] = 77;
      intArray0[5] = 9;
      intArray0[6] = 0;
      intArray0[7] = (-3896);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setBins((-2766));
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) (-2766);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1881));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getOptions();
      discretize0.setIgnoreClass(true);
      discretize0.setUseEqualFrequency(false);
      discretize0.invertSelectionTipText();
      discretize0.getBinRangesString(758);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setUseBinNumbers(false);
      discretize0.binsTipText();
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("i%S12_ncsJ");
      discretize0.getCapabilities();
      discretize0.m_MakeBinary = false;
      assertEquals(10, discretize0.getBins());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "i%S12_ncsJ";
      stringArray0[1] = "";
      stringArray0[2] = "i%S12_ncsJ";
      stringArray0[3] = "i%S12_ncsJ";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "i%S12_ncsJ";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "i%S12_ncsJ";
      Discretize.main(stringArray0);
      discretize0.m_NumBins = 3100;
      discretize0.getMakeBinary();
      discretize0.setOutputFormat();
      discretize0.getUseEqualFrequency();
      discretize0.attributeIndicesTipText();
      discretize0.setInvertSelection(false);
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      discretize0.setFindNumBins(false);
      discretize0.getFindNumBins();
      discretize0.makeBinaryTipText();
      discretize0.findNumBinsTipText();
      discretize0.invertSelectionTipText();
      discretize0.findNumBinsTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.setUseBinNumbers(false);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.03195622385697
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      Range range0 = new Range("");
      discretize0.m_DiscretizeCols = range0;
      String[] stringArray0 = null;
      Range.main((String[]) null);
      boolean boolean0 = false;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        range0.getSelection();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      discretize0.m_DefaultCols = "/eI";
      discretize0.useBinNumbersTipText();
      discretize0.invertSelectionTipText();
      discretize0.setAttributeIndices("l(N52I(C");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1825.8304015504498));
      assertEquals((-1825.8304015504498), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.m_IgnoreClass = true;
      boolean boolean0 = true;
      discretize0.setIgnoreClass(true);
      discretize0.setOptions(stringArray0);
      discretize0.getUseBinNumbers();
      Discretize discretize1 = new Discretize("first-last");
      discretize1.setOutputFormat();
      discretize1.setOutputFormat();
      discretize1.setDesiredWeightOfInstancesPerInterval(1.0);
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.582306344313967
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("f&tId/u.1/ ");
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(discretize0);
      
      discretize0.setFindNumBins(true);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f&tId/u.1/ ";
      stringArray0[1] = "f&tId/u.1/ ";
      stringArray0[2] = "f&tId/u.1/ ";
      stringArray0[3] = "f&tId/u.1/ ";
      stringArray0[4] = "f&tId/u.1/ ";
      stringArray0[5] = "f&tId/u.1/ ";
      stringArray0[6] = "f&tId/u.1/ ";
      stringArray0[7] = "f&tId/u.1/ ";
      stringArray0[8] = "f&tId/u.1/ ";
      Discretize.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(string0);
      assertEquals("8964", string0);
      
      SparseInstance sparseInstance0 = new SparseInstance(1003);
      assertEquals(1003, sparseInstance0.numValues());
      assertEquals(1003, sparseInstance0.numAttributes());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertNotNull(sparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(40);
      assertEquals(40, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(40, binarySparseInstance0.numAttributes());
      assertNotNull(binarySparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      BinarySparseInstance binarySparseInstance1 = (BinarySparseInstance)binarySparseInstance0.copy();
      assertEquals(1.0, binarySparseInstance1.weight(), 0.01);
      assertEquals(40, binarySparseInstance1.numValues());
      assertEquals(40, binarySparseInstance1.numAttributes());
      assertEquals(40, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(40, binarySparseInstance0.numAttributes());
      assertFalse(binarySparseInstance1.equals((Object)binarySparseInstance0));
      assertNotSame(binarySparseInstance1, binarySparseInstance0);
      assertNotSame(binarySparseInstance0, binarySparseInstance1);
      assertNotNull(binarySparseInstance1);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(discretize0);
      
      String[] stringArray0 = new String[3];
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize1.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertTrue(discretize1.isNewBatch());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotSame(discretize0, discretize1);
      assertNotSame(discretize1, discretize0);
      assertNotNull(discretize1);
      
      stringArray0[0] = "xn<IhS8uw77NOW6^u";
      stringArray0[1] = "MinimumNumberInstancesTest";
      discretize0.m_IgnoreClass = true;
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertTrue(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      stringArray0[2] = "cJHy+WJ4DGJe1Zx";
      discretize0.setOutputFormat();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertTrue(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.equals((Object)discretize1));
      assertNotSame(discretize0, discretize1);
      
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(3, stringArray0.length);
      assertFalse(discretize0.equals((Object)discretize1));
      assertNotSame(discretize0, discretize1);
      
      discretize0.m_MakeBinary = true;
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.equals((Object)discretize1));
      assertNotSame(discretize0, discretize1);
      assertFalse(boolean0);
      
      discretize0.setOutputFormat();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.equals((Object)discretize1));
      assertNotSame(discretize0, discretize1);
      
      discretize0.setUseEqualFrequency(true);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.equals((Object)discretize1));
      assertNotSame(discretize0, discretize1);
      
      Capabilities capabilities0 = discretize0.getCapabilities();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertFalse(discretize0.equals((Object)discretize1));
      assertNotSame(discretize0, discretize1);
      assertNotNull(capabilities0);
      
      String string0 = discretize1.invertSelectionTipText();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize1.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertTrue(discretize1.isNewBatch());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize0.equals((Object)discretize1));
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotSame(discretize0, discretize1);
      assertNotSame(discretize1, discretize0);
      assertNotNull(string0);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      
      boolean boolean1 = discretize0.getMakeBinary();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.equals((Object)discretize1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(discretize0, discretize1);
      assertTrue(boolean1);
      
      String string1 = discretize1.invertSelectionTipText();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize1.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertTrue(discretize1.isNewBatch());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize0.equals((Object)discretize1));
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotSame(discretize0, discretize1);
      assertNotSame(discretize1, discretize0);
      assertNotNull(string1);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
      
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      Range range0 = new Range("u1dK\"@-Y/|}");
      assertNotNull(range0);
      
      discretize0.m_DiscretizeCols = range0;
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setOutputFormat();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setIgnoreClass(false);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^p<'R");
      assertFalse(boolean0);
      
      discretize0.m_IgnoreClass = true;
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1618);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertNotNull(discretize0);
      
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize1.isNewBatch());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getIgnoreClass());
      assertEquals(10, discretize1.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotSame(discretize0, discretize1);
      assertNotSame(discretize1, discretize0);
      assertNotNull(discretize1);
      
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.equals((Object)discretize1));
      assertNotSame(discretize0, discretize1);
      assertNotNull(string0);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.equals((Object)discretize1));
      assertNotSame(discretize0, discretize1);
      assertFalse(boolean0);
      
      String string1 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.equals((Object)discretize1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(discretize0, discretize1);
      assertNotNull(string1);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string1);
      
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 10.538411166085;
      doubleArray1[2] = (-1947.8563466);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1947.8563466);
      doubleArray2[1] = 10.538411166085;
      doubleArray2[2] = 1.7976931348623157E308;
      doubleArray2[3] = (-1947.8563466);
      doubleArray2[4] = (-1947.8563466);
      doubleArray2[5] = (-1947.8563466);
      doubleArray2[6] = 10.538411166085;
      doubleArray2[7] = (-1947.8563466);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1947.8563466);
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 10.538411166085;
      doubleArray3[6] = 10.538411166085;
      doubleArray3[7] = 10.538411166085;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 3.4;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 10.538411166085;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-1947.8563466);
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 10.538411166085;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 10.538411166085;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      
      Discretize discretize2 = new Discretize("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      assertFalse(discretize2.getUseEqualFrequency());
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize2.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize2.globalInfo());
      assertEquals(10, discretize2.getBins());
      assertFalse(discretize2.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize2.makeBinaryTipText());
      assertFalse(discretize2.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize2.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize2.findNumBinsTipText());
      assertEquals("Number of bins.", discretize2.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize2.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize2.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize2.ignoreClassTipText());
      assertFalse(discretize2.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize2.invertSelectionTipText());
      assertFalse(discretize2.isFirstBatchDone());
      assertFalse(discretize2.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize2.isNewBatch());
      assertFalse(discretize2.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize2.useBinNumbersTipText());
      assertFalse(discretize2.equals((Object)discretize0));
      assertFalse(discretize2.equals((Object)discretize1));
      assertNotNull(discretize2);
      
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(discretize0);
      
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(string0);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      
      String string1 = discretize0.binsTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Number of bins.", string1);
      
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(boolean0);
      
      String string2 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.532591160801121
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      discretize0.setInvertSelection(true);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      discretize0.setIgnoreClass(true);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      boolean boolean0 = false;
      discretize0.setUseEqualFrequency(false);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(string0);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      
      String string1 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string1);
      
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Discretize discretize0 = new Discretize("An instance filter tat discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertNotNull(discretize0);
      
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3663.84516712);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-3663.84516712);
      doubleArray4[1] = (-3663.84516712);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-3663.84516712);
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1.7976931348623157E308);
      doubleArray5[1] = (-987.862390472923);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (-1.7976931348623157E308);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-987.862390472923);
      doubleArray7[3] = (-987.862390472923);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (-1.7976931348623157E308);
      doubleArray7[6] = (-3663.84516712);
      doubleArray7[7] = (-679.192588952);
      doubleArray7[8] = (-1.7976931348623157E308);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (-3663.84516712);
      doubleArray9[2] = (-3663.84516712);
      doubleArray9[3] = (-3663.84516712);
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-1908874351));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1908874351
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4260151319598084
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("b9e`8@fw`PPK>&H3");
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      discretize0.m_UseEqualFrequency = true;
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertNotNull(discretize0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2656.714;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = (-119.17315943312819);
      doubleArray1[4] = 10.0;
      doubleArray1[5] = 843.7794381389;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      
      int int0 = 776;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(776);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 776
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Discretize discretize0 = new Discretize();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertNotNull(discretize0);
      
      discretize0.m_MakeBinary = true;
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      
      Capabilities capabilities0 = discretize0.getCapabilities();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }
}
