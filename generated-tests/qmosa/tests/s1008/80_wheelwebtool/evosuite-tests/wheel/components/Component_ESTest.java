/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:08:38 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.IEngine;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Form form0 = new Form("#`XhFY");
      String string0 = "8cDm";
      Hidden hidden0 = new Hidden(form0, "8cDm", "\"gIeuBfO{");
      ActionExpression actionExpression0 = new ActionExpression("#`XhFY");
      ActionExpression actionExpression1 = actionExpression0.updateComponent("#`XhFY");
      ActionExpression actionExpression2 = actionExpression1.javascript("\"gIeuBfO{");
      ActionExpression actionExpression3 = actionExpression2.setOwner(hidden0);
      ActionExpression actionExpression4 = actionExpression3.submissible(true);
      // Undeclared exception!
      try { 
        hidden0.form("][,mqx6lPYV6", actionExpression4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Form form0 = new Form("fWlF${KiVnz4u");
      Form form1 = form0.renderHint("fWlF${KiVnz4u");
      // Undeclared exception!
      try { 
        form1.remove((Component) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Form form0 = new Form("t2%0SI,Q~");
      String string0 = "0iPDb";
      TextInput textInput0 = new TextInput(form0, "0iPDb", "0iPDb");
      Checkbox checkbox0 = new Checkbox(textInput0, "0iPDb", "samp");
      FormElement formElement0 = checkbox0.validationRule("D0l3D88", "t2%0SI,Q~");
      TableBlock tableBlock0 = null;
      try {
        tableBlock0 = new TableBlock(formElement0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("");
      dynamicSelectModel1.getComponent();
      String string1 = "%|~ZG";
      Checkbox checkbox0 = new Checkbox((Component) null, "%|~ZG", "~A");
      checkbox0.validationRule("ZD'kc]>Z-#F7N,", "");
      Link link0 = null;
      try {
        link0 = new Link(checkbox0, dynamicSelectModel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "ZPuq[N'";
      Form form0 = new Form("ZPuq[N'");
      // Undeclared exception!
      try { 
        form0.id("ZPuq[N'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "gl>oYZ";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("gl>oYZ");
      String string1 = ";eAN{!F^cUI|P&6n";
      TextInput textInput0 = new TextInput(xmlEntityRef0, "gl>oYZ", ";eAN{!F^cUI|P&6n");
      String string2 = "89onpA";
      ElExpression elExpression0 = new ElExpression("89onpA");
      // Undeclared exception!
      try { 
        xmlEntityRef0.a((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "?*/L+";
      Submit submit0 = new Submit((Component) null, "?*/L+", "?*/L+");
      FormElement formElement0 = submit0.value("?*/L+");
      Block block0 = null;
      try {
        block0 = new Block(formElement0, "?*/L+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      Component component0 = label0.p();
      Double double0 = new Double(874.040076);
      Label label1 = new Label(label0, double0);
      Component component1 = errorPage0.b((Object) double0);
      String string0 = null;
      Any any0 = new Any(component0, (CharSequence) null);
      DynamicSelectModel dynamicSelectModel0 = any0.selectModel();
      String string1 = "";
      dynamicSelectModel0.translator("");
      String string2 = "v*AIo`vn{1hjb@jR4f";
      // Undeclared exception!
      try { 
        component1.fileInput("v*AIo`vn{1hjb@jR4f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("xeIXl\"zP_aPE");
      Form form0 = new Form(errorPage0, "xeIXl\"zP_aPE", actionExpression0);
      Table table0 = new Table(form0, "xeIXl\"zP_aPE");
      table0.div();
      Table table1 = table0.renderHint("xeIXl\"zP_aPE");
      TableBlock tableBlock0 = table1.tbody();
      Double double0 = new Double(0.0);
      table0.h1();
      tableBlock0.dd((Object) double0);
      tableBlock0.var((Object) form0);
      // Undeclared exception!
      try { 
        table1.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // When using table with thead, tfoot and tbody, you can't create rows directly under a table-component.
         //
         verifyException("wheel.components.Table", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      String string0 = null;
      errorPage0._setBuilt(false);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      ISelectModel iSelectModel0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        errorPage0.id((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Component component0 = null;
      String string0 = "attribute name can not be null";
      Hidden hidden0 = new Hidden((Component) null, "attribute name can not be null", "attribute name can not be null");
      assertNotNull(hidden0);
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("attribute name can not be null", hidden0.getFormElementName());
      assertEquals("attribute name can not be null", hidden0.getComponentId());
      
      // Undeclared exception!
      try { 
        hidden0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      
      // Undeclared exception!
      try { 
        form0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4914937218794377
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression1.length());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression1.length());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertEquals(1, objectArray0.length);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(0, actionExpression3.length());
      assertTrue(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getJavascript());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("", actionExpression3.getExpression());
      assertEquals("", actionExpression3.getActionExpression());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals("", actionExpression3.toString());
      assertEquals(1, objectArray0.length);
      
      TextArea textArea0 = new TextArea(errorPage0, "", "7");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      
      FormElement formElement0 = textArea0.value("7");
      assertNotNull(formElement0);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertTrue(formElement0.isEmpty());
      assertEquals("7", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      
      // Undeclared exception!
      try { 
        textArea0.address();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertEquals("", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals(0, actionExpression1.length());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertEquals("", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals(0, actionExpression1.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression2.isSubmissible());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertEquals(1, objectArray0.length);
      
      Table table0 = new Table(errorPage0, "");
      assertNotNull(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) actionExpression0);
      assertNotNull(charBuffer0);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      
      Table table1 = table0.renderHint(charBuffer0);
      assertNotNull(table1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      
      Block block0 = (Block)table1.h1();
      assertNotNull(block0);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      TableBlock tableBlock0 = new TableBlock(table0);
      assertNotNull(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      TableBlock tableBlock1 = tableBlock0.renderHint("");
      assertNotNull(tableBlock1);
      assertSame(table0, table1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      
      Label label0 = (Label)tableBlock1.dd((Object) charBuffer0);
      assertNotNull(label0);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      Label label1 = (Label)tableBlock0.var((Object) table0);
      assertNotNull(label1);
      assertSame(table0, table1);
      assertSame(tableBlock0, tableBlock1);
      assertNotSame(label1, label0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertFalse(label1.equals((Object)label0));
      
      TableRow tableRow0 = table1.tr();
      assertNotNull(tableRow0);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      
      Block block1 = (Block)tableRow0.td();
      assertNotNull(block1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(block1, block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertFalse(block1.equals((Object)block0));
      
      FileInput fileInput0 = new FileInput(tableBlock0, "", "reader must be set before parsing is started");
      assertNotNull(fileInput0);
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("reader must be set before parsing is started", fileInput0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      fileInput0.setTempFileLocation("dp0");
      assertSame(table0, table1);
      assertSame(tableBlock0, tableBlock1);
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("dp0", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("reader must be set before parsing is started", fileInput0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      Label label0 = new Label(errorPage0, errorPage0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      Block block0 = (Block)label0.p();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      
      Double double0 = new Double(874.040076);
      assertNotNull(double0);
      assertEquals(874.040076, (double)double0, 0.01);
      
      Label label1 = new Label(label0, double0);
      assertNotNull(label1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertFalse(label1.equals((Object)label0));
      
      Submit submit0 = new Submit(errorPage0, "", "OA`qmm)^Q-G))b#&'G");
      assertNotNull(submit0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("OA`qmm)^Q-G))b#&'G", submit0.getComponentId());
      assertEquals("", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      
      Label label2 = new Label(errorPage0, "u[E2w >h7N,8");
      assertNotNull(label2);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label2._isGeneratedId());
      assertEquals("Label_3", label2.getComponentId());
      assertEquals("span", label2.defaultTagName());
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      
      ActionExpression actionExpression0 = new ActionExpression("aSgjE-^@");
      assertNotNull(actionExpression0);
      assertEquals(8, actionExpression0.length());
      assertEquals("aSgjE-^@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("aSgjE-^@", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("aSgjE-^@", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      
      Form form0 = new Form(label0, "u[E2w >h7N,8", actionExpression0);
      assertNotNull(form0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals(8, actionExpression0.length());
      assertEquals("aSgjE-^@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("aSgjE-^@", actionExpression0.getActionExpression());
      assertEquals("aSgjE-^@", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      
      Form form1 = form0.addFormValidationRule("aSgjE-^@", "u[E2w >h7N,8");
      assertNotNull(form1);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals(8, actionExpression0.length());
      assertEquals("aSgjE-^@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("aSgjE-^@", actionExpression0.getActionExpression());
      assertEquals("aSgjE-^@", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      
      Form form2 = form1.renderHint("");
      assertNotNull(form2);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals(8, actionExpression0.length());
      assertEquals("aSgjE-^@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("aSgjE-^@", actionExpression0.getActionExpression());
      assertEquals("aSgjE-^@", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("u[E2w >h7N,8", form2.getComponentId());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      
      String string0 = "processing instruction can not have PITarget with reserveld xml name";
      Form form3 = form2.addFormValidationError("processing instruction can not have PITarget with reserveld xml name");
      assertNotNull(form3);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form3);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertSame(form2, form3);
      assertSame(form3, form1);
      assertSame(form3, form0);
      assertSame(form3, form2);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals(8, actionExpression0.length());
      assertEquals("aSgjE-^@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("aSgjE-^@", actionExpression0.getActionExpression());
      assertEquals("aSgjE-^@", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("u[E2w >h7N,8", form2.getComponentId());
      assertEquals("u[E2w >h7N,8", form3.getComponentId());
      assertFalse(form3._isGeneratedId());
      assertFalse(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      
      Label label3 = (Label)form3.code((Object) form0);
      assertNotNull(label3);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertNotSame(label0, label3);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form3);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertSame(form2, form3);
      assertSame(form3, form1);
      assertSame(form3, form0);
      assertSame(form3, form2);
      assertNotSame(label3, label2);
      assertNotSame(label3, label0);
      assertNotSame(label3, label1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals(8, actionExpression0.length());
      assertEquals("aSgjE-^@", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("aSgjE-^@", actionExpression0.getActionExpression());
      assertEquals("aSgjE-^@", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("u[E2w >h7N,8", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("u[E2w >h7N,8", form2.getComponentId());
      assertEquals("u[E2w >h7N,8", form3.getComponentId());
      assertFalse(form3._isGeneratedId());
      assertFalse(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertEquals("Label_4", label3.getComponentId());
      assertTrue(label3._isGeneratedId());
      assertEquals("span", label3.defaultTagName());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label3.equals((Object)label2));
      assertFalse(label3.equals((Object)label0));
      assertFalse(label3.equals((Object)label1));
      
      // Undeclared exception!
      try { 
        form3._buildFromSerializedString((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Form", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6715952780212542
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertEquals("", actionExpression2.toString());
      assertEquals(0, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(1, objectArray0.length);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertEquals(0, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression3.toString());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.getExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getJavascript());
      assertEquals("", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isExternalUrl());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(1, objectArray0.length);
      
      TextArea textArea0 = new TextArea(errorPage0, "", "7");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      
      FormElement formElement0 = textArea0.value("7");
      assertNotNull(formElement0);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("7", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      
      ActionExpression actionExpression4 = actionExpression3.setOwner(formElement0);
      assertNotNull(actionExpression4);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression4);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression1);
      assertSame(actionExpression4, actionExpression0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("7", actionExpression0.getSourceId());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("7", actionExpression1.getSourceId());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertEquals(0, actionExpression2.length());
      assertEquals("7", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression3.toString());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.getExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getJavascript());
      assertEquals("", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("7", actionExpression3.getSourceId());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals("7", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("7", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("", actionExpression4.getActionExpression());
      assertNull(actionExpression4.getJavascript());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals("", actionExpression4.getExpression());
      assertEquals(0, actionExpression4.length());
      assertTrue(actionExpression4.isSubmitForm());
      assertNull(actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals("", actionExpression4.toString());
      assertEquals("7", actionExpression4.getSourceId());
      assertEquals(1, objectArray0.length);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.actionBinding(actionExpression4);
      assertNotNull(errorPage1);
      assertSame(errorPage0, errorPage1);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression4);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression1);
      assertSame(actionExpression4, actionExpression0);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertEquals(0, actionExpression2.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("wheel_ErrorPage", actionExpression2.getSourceId());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression3.toString());
      assertEquals("wheel_ErrorPage", actionExpression3.getSourceId());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.getExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getJavascript());
      assertEquals("", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isExternalUrl());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals("7", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("7", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("", actionExpression4.getActionExpression());
      assertNull(actionExpression4.getJavascript());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals("", actionExpression4.getExpression());
      assertEquals(0, actionExpression4.length());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals("wheel_ErrorPage", actionExpression4.getSourceId());
      assertNull(actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals("", actionExpression4.toString());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        textArea0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals(0, actionExpression1.length());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getEvent());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals(0, actionExpression1.length());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertEquals(1, objectArray0.length);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("", actionExpression3.getExpression());
      assertNull(actionExpression3.getJavascript());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("", actionExpression3.getActionExpression());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmitForm());
      assertTrue(actionExpression3.isSubmissible());
      assertNull(actionExpression3.getEvent());
      assertEquals(1, objectArray0.length);
      
      String string0 = "7";
      TextArea textArea0 = new TextArea(errorPage0, "", "7");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      
      FormElement formElement0 = textArea0.value("7");
      assertNotNull(formElement0);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("7", formElement0.getComponentId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      // Undeclared exception!
      try { 
        textArea0.message("2XX6]}=7%}xW", objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Component component0 = null;
      String string0 = "org.mvel";
      String string1 = "wheel.components.Table";
      DateInput dateInput0 = new DateInput((Component) null, "org.mvel", "wheel.components.Table", "org.mvel");
      assertNotNull(dateInput0);
      assertEquals("org.mvel", dateInput0.getFormElementName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("wheel.components.Table", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      
      dateInput0._clear();
      assertEquals("org.mvel", dateInput0.getFormElementName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("wheel.components.Table", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      
      // Undeclared exception!
      try { 
        dateInput0._applyFormat((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      assertEquals(1, objectArray0.length);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.getExpression());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.toString());
      assertEquals("", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isExternalUrl());
      assertTrue(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getJavascript());
      assertEquals("", actionExpression3.getExpression());
      assertEquals(1, objectArray0.length);
      
      TextArea textArea0 = new TextArea(errorPage0, "", "7");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("7", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      
      FormElement formElement0 = textArea0.value("7");
      assertNotNull(formElement0);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("7", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("7", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      
      TextArea textArea1 = (TextArea)textArea0.addInternalRenderHint("uZ");
      assertNotNull(textArea1);
      assertSame(textArea0, formElement0);
      assertSame(textArea0, textArea1);
      assertSame(textArea1, formElement0);
      assertSame(textArea1, textArea0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("7", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea1.isEmpty());
      assertEquals("", textArea1.getFormElementName());
      assertFalse(textArea1._isGeneratedId());
      assertEquals("7", textArea1.getComponentId());
      assertEquals("textarea", textArea1.defaultTagName());
      assertTrue(textArea1.isValid());
      
      ActionExpression actionExpression4 = actionExpression3.setOwner(formElement0);
      assertNotNull(actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(textArea0, formElement0);
      assertSame(textArea0, textArea1);
      assertSame(formElement0, textArea1);
      assertSame(formElement0, textArea0);
      assertSame(actionExpression4, actionExpression1);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression3);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("7", actionExpression0.getSourceId());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("", actionExpression1.toString());
      assertEquals("7", actionExpression1.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.getExpression());
      assertEquals("7", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      assertEquals("7", actionExpression3.getSourceId());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.toString());
      assertEquals("", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isExternalUrl());
      assertTrue(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getJavascript());
      assertEquals("", actionExpression3.getExpression());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("7", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("7", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals(0, actionExpression4.length());
      assertEquals("", actionExpression4.toString());
      assertNull(actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals("", actionExpression4.getExpression());
      assertEquals("7", actionExpression4.getSourceId());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals("", actionExpression4.getActionExpression());
      assertNull(actionExpression4.getJavascript());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        actionExpression4.getActionUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertFalse(actionExpression1.isSubmissible());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.updateComponent("");
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertEquals("", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.getExpression());
      
      ActionExpression actionExpression3 = actionExpression2.parameters(objectArray0);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertEquals("", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("", actionExpression3.toString());
      assertNull(actionExpression3.getEvent());
      assertEquals(0, actionExpression3.length());
      assertNull(actionExpression3.getJavascript());
      assertEquals("", actionExpression3.getActionExpression());
      assertEquals("", actionExpression3.getExpression());
      assertTrue(actionExpression3.isSubmitForm());
      assertFalse(actionExpression3.isSubmissible());
      assertEquals(5, objectArray0.length);
      
      String string0 = "XUgqvo";
      TextArea textArea0 = new TextArea(errorPage0, "ul", "XUgqvo");
      assertNotNull(textArea0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(textArea0.isEmpty());
      assertEquals("XUgqvo", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("ul", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      
      // Undeclared exception!
      try { 
        errorPage0.reset("XUgqvo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression2.toString());
      assertEquals(0, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getExpression());
      assertEquals("", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isSubmissible());
      assertNull(actionExpression2.getEvent());
      assertEquals(1, objectArray0.length);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(0, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getExpression());
      assertEquals("", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertNull(actionExpression2.getEvent());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("", actionExpression3.toString());
      assertEquals("", actionExpression3.getExpression());
      assertNull(actionExpression3.getJavascript());
      assertEquals(0, actionExpression3.length());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals("", actionExpression3.getActionExpression());
      assertEquals(1, objectArray0.length);
      
      IntStream intStream0 = actionExpression2.chars();
      assertNotNull(intStream0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertEquals(0, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("", actionExpression2.getExpression());
      assertEquals("", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertNull(actionExpression2.getEvent());
      assertEquals(1, objectArray0.length);
      
      String string0 = "7";
      TextArea textArea0 = new TextArea(errorPage0, "", "7");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      
      TextArea textArea1 = (TextArea)textArea0.value("7");
      assertNotNull(textArea1);
      assertSame(textArea0, textArea1);
      assertSame(textArea1, textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("", textArea1.getFormElementName());
      assertTrue(textArea1.isValid());
      assertTrue(textArea1.isEmpty());
      assertEquals("7", textArea1.getComponentId());
      assertEquals("textarea", textArea1.defaultTagName());
      assertFalse(textArea1._isGeneratedId());
      
      String string1 = "tY*R$y+KYLP3s";
      String string2 = "";
      // Undeclared exception!
      try { 
        textArea1.map("_!Lmf&I|A6ia=~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1500602244842355
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "gl>oYZ";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("gl>oYZ");
      assertNotNull(xmlEntityRef0);
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      String string1 = ";eAN{!F^cUI|P&6n";
      // Undeclared exception!
      try { 
        xmlEntityRef0.buttonInput("gl>oYZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.toString());
      assertNull(actionExpression1.getEvent());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.toString());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression2.toString());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals("", actionExpression2.getExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(1, objectArray0.length);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("", actionExpression1.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals("", actionExpression2.getExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("", actionExpression3.toString());
      assertEquals("", actionExpression3.getExpression());
      assertNull(actionExpression3.getJavascript());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.getActionExpression());
      assertEquals(1, objectArray0.length);
      
      TextArea textArea0 = new TextArea(errorPage0, "", "7");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      
      FormElement formElement0 = textArea0.value("7");
      assertNotNull(formElement0);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("7", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      
      TextArea textArea1 = (TextArea)textArea0.addInternalRenderHint("uZ");
      assertNotNull(textArea1);
      assertSame(textArea0, textArea1);
      assertSame(textArea0, formElement0);
      assertSame(textArea1, textArea0);
      assertSame(textArea1, formElement0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertTrue(textArea1.isEmpty());
      assertTrue(textArea1.isValid());
      assertFalse(textArea1._isGeneratedId());
      assertEquals("7", textArea1.getComponentId());
      assertEquals("", textArea1.getFormElementName());
      assertEquals("textarea", textArea1.defaultTagName());
      
      ActionExpression actionExpression4 = actionExpression3.setOwner(formElement0);
      assertNotNull(actionExpression4);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertSame(textArea0, textArea1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertSame(formElement0, textArea1);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression1);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("7", actionExpression0.getSourceId());
      assertEquals("", actionExpression0.toString());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("7", actionExpression1.getSourceId());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertEquals(0, actionExpression2.length());
      assertEquals("7", actionExpression2.getSourceId());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals("", actionExpression2.getExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("7", actionExpression3.getSourceId());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("", actionExpression3.toString());
      assertEquals("", actionExpression3.getExpression());
      assertNull(actionExpression3.getJavascript());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.getActionExpression());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("7", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals(0, actionExpression4.length());
      assertFalse(actionExpression4.isExternalUrl());
      assertNull(actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmitForm());
      assertNull(actionExpression4.getJavascript());
      assertEquals("", actionExpression4.getExpression());
      assertEquals("", actionExpression4.getActionExpression());
      assertEquals("7", actionExpression4.getSourceId());
      assertEquals("", actionExpression4.toString());
      assertEquals(1, objectArray0.length);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.actionBinding(actionExpression4);
      assertNotNull(errorPage1);
      assertSame(errorPage0, errorPage1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertSame(textArea0, textArea1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertSame(formElement0, textArea1);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression1);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(actionExpression0.isSubmissible());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmissible());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("wheel_ErrorPage", actionExpression2.getSourceId());
      assertNull(actionExpression2.getEvent());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals("", actionExpression2.getExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals("", actionExpression3.toString());
      assertEquals("", actionExpression3.getExpression());
      assertNull(actionExpression3.getJavascript());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals("wheel_ErrorPage", actionExpression3.getSourceId());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.getActionExpression());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("7", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("wheel_ErrorPage", actionExpression4.getSourceId());
      assertTrue(actionExpression4.isSubmissible());
      assertEquals(0, actionExpression4.length());
      assertFalse(actionExpression4.isExternalUrl());
      assertNull(actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmitForm());
      assertNull(actionExpression4.getJavascript());
      assertEquals("", actionExpression4.getExpression());
      assertEquals("", actionExpression4.getActionExpression());
      assertEquals("", actionExpression4.toString());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals(1, objectArray0.length);
      
      NumberInput numberInput0 = new NumberInput(errorPage0, (String) null, "");
      assertNotNull(numberInput0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertNull(numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("NumberInput_1", numberInput0.getComponentId());
      assertTrue(numberInput0.isEmpty());
      
      // Undeclared exception!
      try { 
        formElement0.h4((Object) numberInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("gl>oYZ");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      TextInput textInput0 = new TextInput(xmlEntityRef0, "gl>oYZ", ";eAN{!F^cUI|P&6n");
      assertNotNull(textInput0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      
      ElExpression elExpression0 = new ElExpression("895onpA");
      assertNotNull(elExpression0);
      assertEquals("895onpA", elExpression0.toString());
      assertEquals(7, elExpression0.length());
      assertEquals("895onpA", elExpression0.getExpression());
      
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      FileInput fileInput0 = new FileInput(textInput0, "gl>oYZ", ";eAN{!F^cUI|P&6n");
      assertNotNull(fileInput0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      
      fileInput0.setTempFileLocation("output stream can not be null");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("output stream can not be null", fileInput0.getTempFileLocation());
      
      Radio radio0 = new Radio(errorPage0, "gl>oYZ", "895onpA");
      assertNotNull(radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("gl>oYZ", radio0.getFormElementName());
      assertEquals("895onpA", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      
      String string0 = fileInput0.eval(radio0);
      assertNotNull(string0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("output stream can not be null", fileInput0.getTempFileLocation());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("gl>oYZ", radio0.getFormElementName());
      assertEquals("895onpA", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("Could not evaluate expression ");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression0.toString());
      assertEquals(30, actionExpression0.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "gl>oYZ";
      objectArray0[1] = (Object) "output stream can not be null";
      objectArray0[2] = (Object) actionExpression0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      ActionExpression actionExpression1 = actionExpression0.parameters(objectArray0);
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression0.toString());
      assertEquals(30, actionExpression0.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(30, actionExpression1.length());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression1.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals(4, objectArray0.length);
      
      ActionExpression actionExpression2 = actionExpression1.setOwner(fileInput0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("Could not evaluate expression ", actionExpression2.toString());
      assertEquals(30, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getEvent());
      assertNull(actionExpression2.getJavascript());
      assertEquals("Could not evaluate expression ", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression2.getExpression());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("output stream can not be null", fileInput0.getTempFileLocation());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression0.getExpression());
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression0.getSourceId());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression0.toString());
      assertEquals(30, actionExpression0.length());
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression1.getSourceId());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(30, actionExpression1.length());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression1.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals(4, objectArray0.length);
      
      Form form0 = new Form(radio0, "m9>G{d[^b=EJsuK`Hc\"", actionExpression2);
      assertNotNull(form0);
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("Could not evaluate expression ", actionExpression2.toString());
      assertEquals(30, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertEquals("Could not evaluate expression ", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("action", actionExpression2.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression2.getExpression());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("output stream can not be null", fileInput0.getTempFileLocation());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("gl>oYZ", radio0.getFormElementName());
      assertEquals("895onpA", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression0.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression0.getExpression());
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression0.getSourceId());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression0.toString());
      assertEquals(30, actionExpression0.length());
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression1.getSourceId());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(30, actionExpression1.length());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression1.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression1.getExpression());
      assertEquals(4, objectArray0.length);
      
      String[] stringArray0 = new String[0];
      FileInput fileInput1 = (FileInput)fileInput0.attributes(stringArray0);
      assertNotNull(fileInput1);
      assertSame(fileInput1, fileInput0);
      assertSame(fileInput0, fileInput1);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(fileInput1._isGeneratedId());
      assertEquals("gl>oYZ", fileInput1.getFormElementName());
      assertEquals("output stream can not be null", fileInput1.getTempFileLocation());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput1.getComponentId());
      assertTrue(fileInput1.isValid());
      assertEquals("input", fileInput1.defaultTagName());
      assertTrue(fileInput1.isEmpty());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("output stream can not be null", fileInput0.getTempFileLocation());
      assertEquals(0, stringArray0.length);
      
      Form form1 = form0._buildFromSerializedString(stringArray0);
      assertNotNull(form1);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertSame(fileInput0, fileInput1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("Could not evaluate expression ", actionExpression2.toString());
      assertEquals(30, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertEquals("Could not evaluate expression ", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("action", actionExpression2.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression2.getExpression());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", form1.getComponentId());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("output stream can not be null", fileInput0.getTempFileLocation());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("gl>oYZ", radio0.getFormElementName());
      assertEquals("895onpA", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression0.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression0.getExpression());
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression0.getSourceId());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression0.toString());
      assertEquals(30, actionExpression0.length());
      assertEquals(";eAN{!F^cUI|P&6n", actionExpression1.getSourceId());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(30, actionExpression1.length());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression1.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression1.getExpression());
      assertEquals(0, stringArray0.length);
      assertEquals(4, objectArray0.length);
      
      form1.buildComponent();
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertSame(fileInput0, fileInput1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("Could not evaluate expression ", actionExpression2.toString());
      assertEquals(30, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertEquals("Could not evaluate expression ", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("action", actionExpression2.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression2.getExpression());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", form1.getComponentId());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("output stream can not be null", fileInput0.getTempFileLocation());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("gl>oYZ", radio0.getFormElementName());
      assertEquals("895onpA", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression0.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", actionExpression0.getSourceId());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression0.toString());
      assertEquals(30, actionExpression0.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", actionExpression1.getSourceId());
      assertEquals(30, actionExpression1.length());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression1.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression1.getExpression());
      assertEquals(0, stringArray0.length);
      assertEquals(4, objectArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Label label0 = (Label)form0.samp((Object) boolean0);
      assertNotNull(label0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(fileInput0, fileInput1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("Could not evaluate expression ", actionExpression2.toString());
      assertEquals(30, actionExpression2.length());
      assertFalse(actionExpression2.isExternalUrl());
      assertNull(actionExpression2.getJavascript());
      assertEquals("Could not evaluate expression ", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("action", actionExpression2.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression2.getExpression());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("gl>oYZ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals(";eAN{!F^cUI|P&6n", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("gl>oYZ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("gl>oYZ", fileInput0.getFormElementName());
      assertEquals(";eAN{!F^cUI|P&6n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("output stream can not be null", fileInput0.getTempFileLocation());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("gl>oYZ", radio0.getFormElementName());
      assertEquals("895onpA", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("Could not evaluate expression ", actionExpression0.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", actionExpression0.getSourceId());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression0.toString());
      assertEquals(30, actionExpression0.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("m9>G{d[^b=EJsuK`Hc\"", actionExpression1.getSourceId());
      assertEquals(30, actionExpression1.length());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("Could not evaluate expression ", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals("Could not evaluate expression ", actionExpression1.getActionExpression());
      assertEquals("Could not evaluate expression ", actionExpression1.getExpression());
      assertEquals(4, objectArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals(0, actionExpression1.length());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getJavascript());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.toString());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals(0, actionExpression2.length());
      assertEquals(1, objectArray0.length);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmissible());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.toString());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals(0, actionExpression2.length());
      assertEquals(0, actionExpression3.length());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals("", actionExpression3.getActionExpression());
      assertEquals("", actionExpression3.getExpression());
      assertNull(actionExpression3.getJavascript());
      assertFalse(actionExpression3.isExternalUrl());
      assertNull(actionExpression3.getEvent());
      assertEquals("", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals(1, objectArray0.length);
      
      TextArea textArea0 = new TextArea(errorPage0, "", "7");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      
      FormElement formElement0 = textArea0.value("7");
      assertNotNull(formElement0);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("7", formElement0.getComponentId());
      
      ActionExpression actionExpression4 = actionExpression3.setOwner(errorPage0);
      assertNotNull(actionExpression4);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression4);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression4);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression4);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression4, actionExpression1);
      assertSame(actionExpression4, actionExpression3);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertTrue(actionExpression0.isSubmissible());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertTrue(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getExpression());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmissible());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.toString());
      assertEquals("wheel_ErrorPage", actionExpression2.getSourceId());
      assertEquals("", actionExpression2.getActionExpression());
      assertEquals(0, actionExpression2.length());
      assertEquals(0, actionExpression3.length());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals("wheel_ErrorPage", actionExpression3.getSourceId());
      assertEquals("", actionExpression3.getActionExpression());
      assertEquals("", actionExpression3.getExpression());
      assertNull(actionExpression3.getJavascript());
      assertFalse(actionExpression3.isExternalUrl());
      assertNull(actionExpression3.getEvent());
      assertEquals("", actionExpression3.toString());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals("", actionExpression4.getActionExpression());
      assertNull(actionExpression4.getJavascript());
      assertEquals("", actionExpression4.getExpression());
      assertEquals("", actionExpression4.toString());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals("wheel_ErrorPage", actionExpression4.getSourceId());
      assertNull(actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmissible());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals(0, actionExpression4.length());
      assertEquals(1, objectArray0.length);
      
      String string0 = "uZ";
      // Undeclared exception!
      try { 
        formElement0.radio("ap?S09- 96h)Qp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Component component0 = null;
      String string0 = "S)H";
      Checkbox checkbox0 = new Checkbox((Component) null, "S)H", "S)H");
      assertNotNull(checkbox0);
      assertEquals("S)H", checkbox0.getComponentId());
      assertEquals("S)H", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        checkbox0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Link link0 = (Link)errorPage0.a();
      assertNotNull(link0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      
      // Undeclared exception!
      try { 
        form0.radio((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "frame";
      Select select0 = new Select((Component) null, "frame", "frame", "frame", (ISelectModel) null, false);
      assertNotNull(select0);
      assertEquals("frame", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("frame", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertFalse(select0._isGeneratedId());
      
      String string1 = "textarea";
      Checkbox checkbox0 = new Checkbox(select0, "frame", "textarea");
      assertNotNull(checkbox0);
      assertEquals("frame", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("frame", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertFalse(select0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("textarea", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("frame", checkbox0.getFormElementName());
      
      FormElement formElement0 = checkbox0.setFormElementName("textarea");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertEquals("frame", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("frame", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertFalse(select0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("textarea", checkbox0.getFormElementName());
      assertEquals("textarea", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("textarea", formElement0.getComponentId());
      assertEquals("textarea", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      
      // Undeclared exception!
      try { 
        formElement0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertNotNull(actionExpression2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.getExpression());
      assertEquals(1, objectArray0.length);
      
      ActionExpression actionExpression3 = actionExpression2.submissible(true);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression1);
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertTrue(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertEquals("", actionExpression1.getExpression());
      assertNull(actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmissible());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getJavascript());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmissible());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.getExpression());
      assertEquals("", actionExpression3.getExpression());
      assertTrue(actionExpression3.isSubmissible());
      assertEquals("", actionExpression3.toString());
      assertNull(actionExpression3.getEvent());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(0, actionExpression3.length());
      assertNull(actionExpression3.getJavascript());
      assertEquals("", actionExpression3.getActionExpression());
      assertFalse(actionExpression3.isExternalUrl());
      assertEquals(1, objectArray0.length);
      
      TextArea textArea0 = new TextArea(errorPage0, "", "7");
      assertNotNull(textArea0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      
      FormElement formElement0 = textArea0.value("7");
      assertNotNull(formElement0);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("7", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      
      TextArea textArea1 = (TextArea)textArea0.addInternalRenderHint("b/3BjY(E<");
      assertNotNull(textArea1);
      assertSame(textArea0, textArea1);
      assertSame(textArea0, formElement0);
      assertSame(textArea1, textArea0);
      assertSame(textArea1, formElement0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea1.isEmpty());
      assertEquals("", textArea1.getFormElementName());
      assertTrue(textArea1.isValid());
      assertEquals("textarea", textArea1.defaultTagName());
      assertFalse(textArea1._isGeneratedId());
      assertEquals("7", textArea1.getComponentId());
      
      ActionExpression actionExpression4 = actionExpression0.setOwner(formElement0);
      assertNotNull(actionExpression4);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(textArea0, textArea1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertSame(formElement0, textArea1);
      assertSame(actionExpression4, actionExpression1);
      assertSame(actionExpression4, actionExpression2);
      assertSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression3);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("7", actionExpression0.getSourceId());
      assertTrue(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("7", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertNull(actionExpression4.getJavascript());
      assertEquals("", actionExpression4.getActionExpression());
      assertTrue(actionExpression4.isSubmitForm());
      assertEquals("", actionExpression4.getExpression());
      assertNull(actionExpression4.getEvent());
      assertTrue(actionExpression4.isSubmissible());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(0, actionExpression4.length());
      assertEquals("", actionExpression4.toString());
      assertEquals("7", actionExpression4.getSourceId());
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.actionBinding(actionExpression0);
      assertNotNull(errorPage1);
      assertSame(errorPage0, errorPage1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression4);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(errorPage1, errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertTrue(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      
      Block block0 = (Block)errorPage0.kbd();
      assertNotNull(block0);
      assertSame(errorPage0, errorPage1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      DateInput dateInput0 = new DateInput(formElement0, "", "", actionExpression0);
      assertNotNull(dateInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertTrue(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("7", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("7", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      
      // Undeclared exception!
      try { 
        formElement0.dateFormat("", dateInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Label label0 = new Label(errorPage0, errorPage0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      
      Block block0 = (Block)label0.p();
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Double double0 = new Double(1717.32983399494);
      assertNotNull(double0);
      assertEquals(1717.32983399494, (double)double0, 0.01);
      
      Label label1 = new Label(label0, double0);
      assertNotNull(label1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertFalse(label1.equals((Object)label0));
      
      Label label2 = (Label)errorPage0.b((Object) double0);
      assertNotNull(label2);
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label2._isGeneratedId());
      assertEquals("Label_3", label2.getComponentId());
      assertEquals("span", label2.defaultTagName());
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      
      Any any0 = new Any(block0, (CharSequence) null);
      assertNotNull(any0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("");
      assertNotNull(dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      
      Block block1 = (Block)errorPage0.noscript();
      assertNotNull(block1);
      assertNotSame(block1, block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertFalse(block1.equals((Object)block0));
      
      // Undeclared exception!
      try { 
        label2.fileInput("M#4ife54SSIf]E +");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.requestFocus();
      assertNotNull(errorPage1);
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      
      IEngine iEngine0 = errorPage1.getEngine();
      assertNull(iEngine0);
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      
      // Undeclared exception!
      try { 
        errorPage0.imageSubmit("M#", "org.mvel.conversion.DoubleCH$5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9092494286512087
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      
      ActionExpression actionExpression1 = actionExpression0.parameter("");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getEvent());
      assertEquals("", actionExpression1.toString());
      assertEquals("", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) actionExpression0;
      FileInput fileInput0 = new FileInput(errorPage0, "Checkbox", "Checkbox");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      
      fileInput0.setTempFileLocation("Checkbox");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      
      Radio radio0 = new Radio(fileInput0, "", "p");
      assertNotNull(radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertEquals("p", radio0.getComponentId());
      
      FileInput fileInput1 = new FileInput(fileInput0, "Checkbox", "p");
      assertNotNull(fileInput1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertFalse(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isEmpty());
      assertEquals("p", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("Checkbox", fileInput1.getFormElementName());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertFalse(fileInput1.equals((Object)fileInput0));
      
      String string0 = fileInput1.eval(radio0);
      assertNotNull(string0);
      assertNotSame(fileInput0, fileInput1);
      assertNotSame(fileInput1, fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertEquals("p", radio0.getComponentId());
      assertFalse(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isEmpty());
      assertEquals("p", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("Checkbox", fileInput1.getFormElementName());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertFalse(fileInput1.equals((Object)fileInput0));
      
      ActionExpression actionExpression2 = new ActionExpression("");
      assertNotNull(actionExpression2);
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertTrue(actionExpression2.equals((Object)actionExpression0));
      assertTrue(actionExpression2.equals((Object)actionExpression1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ActionExpression actionExpression3 = actionExpression0.parameters(objectArray0);
      assertNotNull(actionExpression3);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertNotSame(actionExpression0, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertSame(actionExpression3, actionExpression1);
      assertNotSame(actionExpression3, actionExpression2);
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression3.isSubmitForm());
      assertEquals(0, actionExpression3.length());
      assertEquals("", actionExpression3.toString());
      assertNull(actionExpression3.getEvent());
      assertEquals("", actionExpression3.getExpression());
      assertFalse(actionExpression3.isSubmissible());
      assertFalse(actionExpression3.isExternalUrl());
      assertNull(actionExpression3.getJavascript());
      assertEquals("", actionExpression3.getActionExpression());
      assertEquals(1, objectArray0.length);
      assertTrue(actionExpression0.equals((Object)actionExpression2));
      assertTrue(actionExpression3.equals((Object)actionExpression2));
      
      ActionExpression actionExpression4 = actionExpression2.setOwner(fileInput0);
      assertNotNull(actionExpression4);
      assertNotSame(fileInput0, fileInput1);
      assertNotSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression4);
      assertNotSame(actionExpression2, actionExpression0);
      assertNotSame(actionExpression2, actionExpression3);
      assertNotSame(actionExpression4, actionExpression3);
      assertNotSame(actionExpression4, actionExpression0);
      assertSame(actionExpression4, actionExpression2);
      assertNotSame(actionExpression4, actionExpression1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertEquals("Checkbox", actionExpression2.getSourceId());
      assertNull(actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(actionExpression4.isSubmissible());
      assertEquals("", actionExpression4.getExpression());
      assertNull(actionExpression4.getJavascript());
      assertEquals("", actionExpression4.getActionExpression());
      assertFalse(actionExpression4.isExternalUrl());
      assertEquals(0, actionExpression4.length());
      assertEquals("", actionExpression4.toString());
      assertEquals("Checkbox", actionExpression4.getSourceId());
      assertTrue(actionExpression4.isSubmitForm());
      assertNull(actionExpression4.getEvent());
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertTrue(actionExpression2.equals((Object)actionExpression0));
      assertTrue(actionExpression2.equals((Object)actionExpression3));
      assertTrue(actionExpression2.equals((Object)actionExpression1));
      assertTrue(actionExpression4.equals((Object)actionExpression1));
      assertTrue(actionExpression4.equals((Object)actionExpression0));
      assertTrue(actionExpression4.equals((Object)actionExpression3));
      
      Form form0 = new Form(fileInput1, "output stream can not be null", actionExpression2);
      assertNotNull(form0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertFalse(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isEmpty());
      assertEquals("p", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("Checkbox", fileInput1.getFormElementName());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertEquals("Checkbox", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("output stream can not be null", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertFalse(fileInput1.equals((Object)fileInput0));
      assertFalse(actionExpression2.equals((Object)actionExpression1));
      assertFalse(actionExpression2.equals((Object)actionExpression0));
      assertFalse(actionExpression2.equals((Object)actionExpression3));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Checkbox";
      FileInput fileInput2 = (FileInput)fileInput1.attributes(stringArray0);
      assertNotNull(fileInput2);
      assertSame(fileInput2, fileInput1);
      assertNotSame(fileInput2, fileInput0);
      assertNotSame(fileInput0, fileInput1);
      assertNotSame(fileInput0, fileInput2);
      assertSame(fileInput1, fileInput2);
      assertNotSame(fileInput1, fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("/tmp", fileInput2.getTempFileLocation());
      assertEquals(1000, fileInput2.getMaxMemoryFileSize());
      assertEquals("p", fileInput2.getComponentId());
      assertEquals("Checkbox", fileInput2.getFormElementName());
      assertEquals("input", fileInput2.defaultTagName());
      assertTrue(fileInput2.isEmpty());
      assertTrue(fileInput2.isValid());
      assertFalse(fileInput2._isGeneratedId());
      assertEquals(1000, fileInput2.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertFalse(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isEmpty());
      assertEquals("p", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("Checkbox", fileInput1.getFormElementName());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals(2, stringArray0.length);
      assertFalse(fileInput2.equals((Object)fileInput0));
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertFalse(fileInput1.equals((Object)fileInput0));
      
      Form form1 = form0._buildFromSerializedString(stringArray0);
      assertNotNull(form1);
      assertSame(form1, form0);
      assertNotSame(fileInput0, fileInput1);
      assertNotSame(fileInput0, fileInput2);
      assertSame(fileInput1, fileInput2);
      assertNotSame(fileInput1, fileInput0);
      assertNotSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression4);
      assertNotSame(actionExpression2, actionExpression0);
      assertNotSame(actionExpression2, actionExpression3);
      assertSame(form0, form1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("output stream can not be null", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertFalse(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isEmpty());
      assertEquals("p", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("Checkbox", fileInput1.getFormElementName());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertEquals("Checkbox", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("output stream can not be null", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals(2, stringArray0.length);
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertFalse(fileInput0.equals((Object)fileInput2));
      assertFalse(fileInput1.equals((Object)fileInput0));
      assertFalse(actionExpression2.equals((Object)actionExpression1));
      assertFalse(actionExpression2.equals((Object)actionExpression0));
      assertFalse(actionExpression2.equals((Object)actionExpression3));
      
      form0.buildComponent();
      assertNotSame(fileInput0, fileInput1);
      assertNotSame(fileInput0, fileInput2);
      assertSame(fileInput1, fileInput2);
      assertNotSame(fileInput1, fileInput0);
      assertNotSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression4);
      assertNotSame(actionExpression2, actionExpression0);
      assertNotSame(actionExpression2, actionExpression3);
      assertSame(form0, form1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertFalse(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isEmpty());
      assertEquals("p", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("Checkbox", fileInput1.getFormElementName());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertEquals("output stream can not be null", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("output stream can not be null", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertFalse(fileInput0.equals((Object)fileInput2));
      assertFalse(fileInput1.equals((Object)fileInput0));
      assertFalse(actionExpression2.equals((Object)actionExpression1));
      assertFalse(actionExpression2.equals((Object)actionExpression0));
      assertFalse(actionExpression2.equals((Object)actionExpression3));
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Label label0 = (Label)form0.samp((Object) "");
      assertNotNull(label0);
      assertNotSame(fileInput0, fileInput1);
      assertNotSame(fileInput0, fileInput2);
      assertSame(fileInput1, fileInput2);
      assertNotSame(fileInput1, fileInput0);
      assertNotSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression4);
      assertNotSame(actionExpression2, actionExpression0);
      assertNotSame(actionExpression2, actionExpression3);
      assertSame(form0, form1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Checkbox", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("Checkbox", fileInput0.getFormElementName());
      assertEquals("Checkbox", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertFalse(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isEmpty());
      assertEquals("p", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("Checkbox", fileInput1.getFormElementName());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals("", actionExpression2.toString());
      assertEquals("output stream can not be null", actionExpression2.getSourceId());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertNull(actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("action", actionExpression2.getEvent());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("output stream can not be null", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertFalse(fileInput0.equals((Object)fileInput2));
      assertFalse(fileInput1.equals((Object)fileInput0));
      assertFalse(actionExpression2.equals((Object)actionExpression1));
      assertFalse(actionExpression2.equals((Object)actionExpression0));
      assertFalse(actionExpression2.equals((Object)actionExpression3));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      Label label0 = new Label(errorPage0, errorPage0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      Block block0 = (Block)label0.p();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      Double double0 = new Double(874.040076);
      assertNotNull(double0);
      assertEquals(874.040076, (double)double0, 0.01);
      
      Label label1 = new Label(label0, double0);
      assertNotNull(label1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertFalse(label1.equals((Object)label0));
      
      Label label2 = (Label)errorPage0.b((Object) double0);
      assertNotNull(label2);
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(label2._isGeneratedId());
      assertEquals("span", label2.defaultTagName());
      assertEquals("Label_3", label2.getComponentId());
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      
      String string0 = null;
      Any any0 = new Any(block0, (CharSequence) null);
      assertNotNull(any0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      
      DynamicSelectModel dynamicSelectModel0 = any0.selectModel();
      assertNotNull(dynamicSelectModel0);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      
      String string1 = "";
      String string2 = ":/8!y2%? fQ[t";
      // Undeclared exception!
      try { 
        label0.frame(":/8!y2%? fQ[t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }
}
