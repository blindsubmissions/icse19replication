/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:44:48 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.Any;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.Form;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("Could not evaluate expression ");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("Could not evaluate expression ");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.translator("Could not evaluate expression ");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.value("Could not evaluate expression ");
      Object object0 = new Object();
      dynamicSelectModel1.getTopLevelComponent();
      dynamicSelectModel1.setTopLevelComponent((StandaloneComponent) null);
      dynamicSelectModel3.enumeration("+G[/UQFc");
      dynamicSelectModel1.collection("org.xmlpull.v1.wrapper.XmlPullWrapperFactory");
      dynamicSelectModel4.empty(object0);
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression org.xmlpull.v1.wrapper.XmlPullWrapperFactory evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "`z]U:";
      ElExpression elExpression0 = new ElExpression("`z]U:");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty((Object) null);
      dynamicSelectModel1.value((String) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getLabel(65534);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(object0);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.label("nil");
      dynamicSelectModel0.reset();
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.empty("nil");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.enumeration((String) null);
      dynamicSelectModel3.getComponent();
      dynamicSelectModel1.setComponent((Component) null);
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel1.value("nil");
      assertSame(dynamicSelectModel5, dynamicSelectModel4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.enumeration("expected ELEMENT or ENTITY after <! in DTD not ");
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("w");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.empty(dynamicSelectModel0);
      Object object0 = new Object();
      dynamicSelectModel2.empty(object0);
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel0.collection((String) null);
      dynamicSelectModel3.translator((String) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getLabel(67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression null evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "Could not evaluate expression ";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("Could not evaluate expression ");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("Could not evaluate expression ");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.translator("Could not evaluate expression ");
      dynamicSelectModel3.value("Could not evaluate expression ");
      dynamicSelectModel1.getTopLevelComponent();
      dynamicSelectModel1.setTopLevelComponent((StandaloneComponent) null);
      dynamicSelectModel2.label("org.xmlpull.v1.wrapper.XmlPullWrapperFactory");
      dynamicSelectModel1.collection("org.xmlpull.v1.wrapper.XmlPullWrapperFactory");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel0.empty("org.xmlpull.v1.wrapper.XmlPullWrapperFactory");
      Object object0 = new Object();
      dynamicSelectModel1.validate();
      // Undeclared exception!
      try { 
        dynamicSelectModel4.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression org.xmlpull.v1.wrapper.XmlPullWrapperFactory evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) null);
      dynamicSelectModel0.label("");
      String string0 = "1V%";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("1V%");
      dynamicSelectModel1.collection("");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.empty(dynamicSelectModel1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dynamicSelectModel2.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "wheel.util.DynamicSelectModel";
      ElExpression elExpression0 = new ElExpression("wheel.util.DynamicSelectModel");
      ErrorPage errorPage0 = new ErrorPage();
      int int0 = 36;
      int int1 = (-756);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("e+3?L3v}Q,T@Wl.vY");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.translator("wheel.util.DynamicSelectModel");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.collection("(l;$N#^E%");
      // Undeclared exception!
      try { 
        dynamicSelectModel3.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.347437588209871
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("org.xmlpull.mxp1.MXParserCachingStrings");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.enumeration("org.xmlpull.mxp1.MXParserCachingStrings");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel0.translator("startTag() must be called before attribute()");
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel3.enumeration("startTag() must be called before attribute()");
      dynamicSelectModel5.value("");
      dynamicSelectModel1.getTopLevelComponent();
      dynamicSelectModel5.setTopLevelComponent((StandaloneComponent) null);
      DynamicSelectModel dynamicSelectModel6 = dynamicSelectModel1.label("");
      DynamicSelectModel dynamicSelectModel7 = dynamicSelectModel6.collection("[]");
      Object object1 = new Object();
      DynamicSelectModel dynamicSelectModel8 = dynamicSelectModel4.empty(object1);
      Object object2 = new Object();
      dynamicSelectModel0.validate();
      dynamicSelectModel5.getObjects();
      DynamicSelectModel dynamicSelectModel9 = dynamicSelectModel2.collection("");
      dynamicSelectModel7.enumeration("{[a9/=(ZhQ");
      dynamicSelectModel8.getObjects();
      dynamicSelectModel9.getObjects();
      // Undeclared exception!
      try { 
        dynamicSelectModel8.translateValue("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression ordinal() to create a value for dynamic ISelectModel. Index was 0
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1186492470699507
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("org.xmlpull.mxp1.MXParserCachingStrings");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.enumeration("org.xmlpull.mxp1.MXParserCachingStrings");
      dynamicSelectModel0.translator("startTag() must be called before attribute()");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.enumeration("startTag() must be called before attribute()");
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel4.value("");
      dynamicSelectModel1.getTopLevelComponent();
      dynamicSelectModel4.setTopLevelComponent((StandaloneComponent) null);
      DynamicSelectModel dynamicSelectModel6 = dynamicSelectModel1.label("");
      dynamicSelectModel6.collection("[]");
      Object object1 = new Object();
      dynamicSelectModel5.validate();
      dynamicSelectModel1.getObjects();
      dynamicSelectModel1.collection("[]");
      DynamicSelectModel dynamicSelectModel7 = new DynamicSelectModel();
      dynamicSelectModel7.enumeration("");
      // Undeclared exception!
      try { 
        dynamicSelectModel7.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression .values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9459347757561138
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("org.xmlpull.mxp1.MXParserCachingStrings");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("org.xmlpull.mxp1.MXParserCachingStrings");
      dynamicSelectModel0.translator("startTag(_ must be called before attribute()");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel0.translator("startTag(_ must be called before attribute()");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.value("");
      dynamicSelectModel4.enumeration("startTag(_ must be called before attribute()");
      dynamicSelectModel1.getTopLevelComponent();
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel1.label("startTag(_ must be called before attribute()");
      dynamicSelectModel5.collection("[]");
      dynamicSelectModel0.translateValue("startTag(_ must be called before attribute()");
      dynamicSelectModel3.getObjects();
      Object object1 = dynamicSelectModel2.translateValue("");
      assertNull(object1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.951848439223888
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("[]");
      Object object0 = new Object();
      Object object1 = new Object();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(object1);
      Collection collection0 = new LinkedList<Integer>();
      dynamicSelectModel0.getObjects();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.enumeration((String) null);
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.value("[]");
      dynamicSelectModel3.getObjects();
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel0.label((String) null);
      dynamicSelectModel4.getObjects();
      dynamicSelectModel3.translateValue("8");
      Object object2 = dynamicSelectModel1.translateValue((String) null);
      assertNull(object2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.668173971997397
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("[]");
      Object object0 = new Object();
      Object object1 = new Object();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(object1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      dynamicSelectModel0.getObjects();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("[]");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.value("[]");
      dynamicSelectModel3.getObjects();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      dynamicSelectModel1.getObjects();
      dynamicSelectModel1.translateValue("org.mvel.util.FastList@0000000027");
      dynamicSelectModel3.getObjects();
      dynamicSelectModel2.translateValue("[]");
      Object object2 = dynamicSelectModel1.translateValue("org.mvel.util.FastList@0000000027");
      assertNull(object2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7666900269684684
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[]");
      Object object0 = new Object();
      Object object1 = new Object();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.empty(object1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection collection0 = dynamicSelectModel0.getObjects();
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel0.translator("[]");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.value("[]");
      dynamicSelectModel4.getObjects();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      dynamicSelectModel2.getObjects();
      dynamicSelectModel2.translateValue("org.mvel.util.FastList@0000000027");
      dynamicSelectModel4.getObjects();
      dynamicSelectModel3.translateValue("[]");
      dynamicSelectModel3.getObjects();
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel1.collection((String) null);
      Object object2 = new Object();
      Collection collection1 = dynamicSelectModel5.getObjects();
      assertSame(collection1, collection0);
  }
}
