/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:21:58 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.NodeMouseMotionListener;
import freemind.controller.StructuredMenuHolder;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.extensions.ExportHook;
import freemind.main.FreeMind;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.Reader;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.PropertyResourceBundle;
import java.util.SimpleTimeZone;
import javax.help.HelpSet;
import javax.help.JHelpIndexNavigator;
import javax.help.TOCView;
import javax.help.plaf.basic.BasicIndexNavigatorUI;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalScrollBarUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.ImageNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.TransformerIdentityImpl;
import org.apache.xml.utils.DefaultErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.jdbc.jdbcConnection;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;
import plugins.map.Registration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInheritsPopupMenu();
      int int0 = 10161;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-3992L), 916, 10161, '\"');
      KeyEvent.getKeyText((-5399));
      jDayChooser0.keyReleased(keyEvent0);
      MockInstant.now();
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Locale locale0 = jMonthChooser0.getLocale();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("X;R[f!MOiA1\"?Q#~C4r", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'R'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getAlignmentX();
      jDayChooser0.getVisibleRect();
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getToolTipText();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4458, false);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.X;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (-4261), "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      Object object0 = new Object();
      long long0 = 0L;
      int int0 = (-1996);
      ActionEvent actionEvent0 = new ActionEvent(object0, 278, "day", 0L, (-1996));
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.getDefaultButton();
      actionEvent0.paramString();
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initialized = true;
      Locale locale0 = Locale.ROOT;
      ImageNode imageNode0 = new ImageNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) imageNode0, (Collection<Locale>) imageNode0, locale_FilteringMode0);
      locale0.getExtensionKeys();
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.validate();
      jDayChooser0.drawWeeks();
      jDayChooser0.setMaxDayCharacters(8736);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getLocale();
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.759895175471732
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.revalidate();
      Timestamp timestamp0 = new Timestamp(20L);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      MockDate mockDate0 = new MockDate(0, 0, 0);
      jDayChooser0.setSelectableDateRange(timestamp0, mockDate0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.GRAY;
      int int0 = (-4515);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-4515), (-3677));
      jDayChooser0.getActionForKeyStroke(keyStroke0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isDecorationBordersVisible();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int1 = (-3226);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", (-3226));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalScrollBarUI metalScrollBarUI0 = new MetalScrollBarUI();
      metalScrollBarUI0.getMaximumSize(jDayChooser0);
      Dimension dimension0 = metalScrollBarUI0.getMaximumSize(jDayChooser0);
      dimension0.width = Integer.MAX_VALUE;
      jDayChooser0.setPreferredSize(dimension0);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getDayPanel();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "day";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "";
      String string1 = "#G/CRz.R9/ik#^G";
      stringArray1[2] = "#G/CRz.R9/ik#^G";
      stringArray1[3] = "";
      stringArray1[4] = "day";
      stringArray1[5] = "";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext(0, stringArray0, stringArray1, stringArray1, stringArray1, iBindingFactory0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setDoubleBuffered(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.revalidate();
      Timestamp timestamp0 = new Timestamp(27L);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      MockDate mockDate0 = new MockDate(27L);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.65970797168196
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalScrollBarUI metalScrollBarUI0 = new MetalScrollBarUI();
      metalScrollBarUI0.getMaximumSize(jDayChooser0);
      metalScrollBarUI0.getMaximumSize(jDayChooser0);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Rectangle rectangle0 = new Rectangle(430, 430, 430, (-1921));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1921), 0L, 430, 1165, ',');
      keyEvent0.setSource("x");
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setEnabled(true);
      jDayChooser0.init();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x";
      stringArray0[1] = "day";
      stringArray0[2] = "x";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Rectangle rectangle0 = new Rectangle(430, 430, 430, (-1921));
      Rectangle2D.union(rectangle0, rectangle0, rectangle0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x");
      jDayChooser0.paintImmediately(rectangle0);
      jDayChooser0.setMaxDayCharacters(430);
      MockDate mockDate0 = new MockDate(0, 0, 10);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      mockSimpleDateFormat0.setLenient(true);
      mockSimpleDateFormat0.clone();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.getMinSelectableDate();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setYear(2031);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.606610584382382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-455), 2776L, (-455), (-455), 'P', (-455));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7438550678980893
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Timestamp timestamp0 = new Timestamp((-1921));
      jDayChooser1.setMinSelectableDate(timestamp0);
      jDayChooser1.getMinSelectableDate();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.691693794629735
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date(20L);
      Point point0 = jDayChooser0.getLocation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getLocation(point0);
      jDayChooser0.setMonth((-4294));
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.CYAN;
      jDayChooser0.setSundayForeground(color0);
      int int0 = 269;
      long long0 = (-2923L);
      int int1 = 7;
      int int2 = (-5373);
      char char0 = '9';
      MenuElement[] menuElementArray0 = new MenuElement[9];
      String string0 = "Windows";
      JPopupMenu jPopupMenu0 = new JPopupMenu("Windows");
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      TransformerIdentityImpl transformerIdentityImpl0 = new TransformerIdentityImpl();
      transformerIdentityImpl0.getOutputProperties();
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7730946365785596
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Rectangle rectangle0 = new Rectangle(430, 430, 430, (-1921));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x");
      jDayChooser0.paintImmediately(rectangle0);
      jDayChooser0.setMaxDayCharacters(430);
      MockDate mockDate0 = new MockDate(0, 0, 10);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(465);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      mockSimpleDateFormat0.clone();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.updateUI();
      Date date2 = jDayChooser0.getMinSelectableDate();
      assertNotSame(date2, date1);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      Locale locale0 = jDayChooser0.locale;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jDayChooser0.setCalendar(calendar0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.688950631131343
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 89, 9223372036854775807L, 3, 210, 'v');
      jDayChooser0.getPropertyChangeListeners();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 210, 5000L, 2373, 89, 'v');
      keyEvent1.setSource(jDayChooser0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockDate mockDate0 = new MockDate(89, 8907, 145);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser1.setMonth(8907);
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay((-2165));
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUI();
      jDayChooser0.getX();
      MockDate mockDate0 = new MockDate(5, 0, 0);
      jDayChooser0.setSelectableDateRange((Date) null, mockDate0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(465);
      jDayChooser1.updateUI();
      boolean boolean0 = jDayChooser1.isDecorationBackgroundVisible();
      assertEquals(28, jDayChooser1.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      MockDate mockDate0 = new MockDate(5, 0, 0);
      Instant instant0 = mockDate0.toInstant();
      Timestamp timestamp0 = Timestamp.from(instant0);
      mockDate0.after(timestamp0);
      jDayChooser0.setSelectableDateRange((Date) null, mockDate0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth((-1000));
      jDayChooser1.isDayBordersVisible();
      boolean boolean0 = jDayChooser1.isDayBordersVisible();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.removeNotify();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 269, 0L, 269, 1, '/', 1);
      jDayChooser0.keyTyped(keyEvent0);
      jdbcClob jdbcClob0 = new jdbcClob(".O;}Nbb/");
      // Undeclared exception!
      try { 
        jdbcClob0.getCharacterStream((long) 1, 0L);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.UK;
      Locale.setDefault(locale1);
      jDayChooser0.setLocale(locale0);
      MenuElement[] menuElementArray0 = new MenuElement[8];
      JMenu jMenu0 = new JMenu("day");
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8730, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      menuElementArray0[0] = (MenuElement) jMenu0;
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }
}
