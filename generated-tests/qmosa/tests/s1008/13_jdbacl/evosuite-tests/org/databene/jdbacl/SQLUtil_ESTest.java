/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:55:56 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.raw.xact.GlobalXactId;
import org.apache.derby.impl.store.raw.xact.TransactionTable;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.AbstractIscDbHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.engine.SessionRemote;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "X\"`u+\\G[/UQ";
      SQLUtil.isDML("X\"`u+G[/UQ");
      SQLUtil.isDDL("X\"`u+G[/UQ");
      SQLUtil.substituteMarkers("R008", "", "X\"`u+G[/UQ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      stringArray0[2] = ":QQ>A,!I@Rq";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "UQ's6maX%-QNr4`";
      stringArray0[6] = "";
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "zuC^lgg}MxAGmeJ";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) ":QQ>A,!I@Rq";
      objectArray0[5] = (Object) "UQ's6maX%-QNr4`";
      objectArray0[6] = (Object) "";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      SQLUtil.mutatesDataOrStructure("].");
      SQLUtil.isQuery("org.databene.commons.file.PatternFileFilter");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      DBDataType dBDataType0 = DBDataType.getInstance((-884), "T}.F@=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_8X.n@C*<*oE", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("T}.F@=(3,3)", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8200759753606213
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$G*QfLh1#v1_";
      stringArray0[1] = "$G*QfLh1#v1_";
      stringArray0[2] = "gUf";
      stringArray0[3] = "gUf";
      stringArray0[4] = "$G*QfLh1#v1_";
      stringArray0[5] = "gUf";
      stringArray0[6] = "$G*QfLh1#v1_";
      String string0 = SQLUtil.join("$G*QfLh1#v1_", "gUf", stringArray0, "$G*QfLh1#v1_", "?*/L+", stringArray0);
      assertEquals("$G*QfLh1#v1_ join $G*QfLh1#v1_ as ?*/L+ on gUf.$G*QfLh1#v1_ = ?*/L+.$G*QfLh1#v1_ and gUf.$G*QfLh1#v1_ = ?*/L+.$G*QfLh1#v1_ and gUf.gUf = ?*/L+.gUf and gUf.gUf = ?*/L+.gUf and gUf.$G*QfLh1#v1_ = ?*/L+.$G*QfLh1#v1_ and gUf.gUf = ?*/L+.gUf and gUf.$G*QfLh1#v1_ = ?*/L+.$G*QfLh1#v1_", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("$G*QfLh1#v1_");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(2001, "4yJ?gmM=\"");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Yk\"F", (DBTable) null, dBDataType0);
      String string1 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("Yk\"F : 4YJ?GMM=\"", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("null.null, null.null, null.null", (Database) null);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "in best access path";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "", "in best access path", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isDDL("org.databene.jdbacl.SQLUtil");
      SQLUtil.normalize("org.databene.jdbacl.SQLUtil", false);
      SQLUtil.isProcedureCall("org.databene.jdbacl.SQLUtil");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("v:/,Jv_Tw3", (DBTable) null, (-3644), "create materialized view");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.addOptionalCondition("create table ", stringBuilder0);
      assertEquals("create table ", stringBuilder0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "", versionNumber0);
      defaultDatabase0.getTable("getNCharacterStream(int)", false);
      String string0 = SQLUtil.normalize("alter indexauc<;5_<y6)s8k^", true);
      assertEquals("alter indexauc < ; 5_ < y6) s8k ^", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("select");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "(zn9<-Eja(DcE9";
      SQLUtil.removeComments("(zn9<-Eja(DcE9");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(zn9<-Eja(DcE9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (zn9<-Eja(DcE9
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      DBDataType dBDataType0 = DBDataType.getInstance((-884), "T}.F@=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_8X.n@C*<*oE", defaultDBTable0, dBDataType0, integer0, integer0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T}.F@=";
      stringArray0[1] = "qByL";
      stringArray0[2] = "_8X.n@C*<*oE";
      stringArray0[3] = "_8X.n@C*<*oE";
      stringArray0[4] = "T}.F@=";
      stringArray0[5] = "T}.F@=";
      stringArray0[6] = "qByL";
      stringArray0[7] = "T}.F@=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qByL", true, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("_8X.n@C*<*oE, _8X.n@C*<*oE, _8X.n@C*<*oE", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "", versionNumber0);
      defaultDatabase0.getTable("getNCharacterStream(int)", false);
      String string0 = SQLUtil.typeAndName(defaultDatabase0);
      assertEquals("database null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1531071174453749
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("=f");
      String string0 = SQLUtil.normalize("w;v*+", true);
      assertEquals("w ; v * +", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("=f");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2436185137418785
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(".&b4G?ke#dl*");
      SQLUtil.mutatesDataOrStructure(".&b4G?ke#dl*");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".&b4G?ke#dl*";
      stringArray0[2] = ".&b4G?ke#dl*";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = ".&b4G?ke#dl*";
      stringArray0[5] = ".&b4G?ke#dl*";
      stringArray0[6] = "getQualifier";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rur");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("alter materialized view", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("rur", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1966), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1966
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2436185137418785
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(".&b4G?ke#dl*");
      SQLUtil.mutatesDataOrStructure(".&b4G?ke#dl*");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".&b4G?ke#dl*";
      stringArray0[2] = ".&b4G?ke#dl*";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = ".&b4G?ke#dl*";
      stringArray0[5] = ".&b4G?ke#dl*";
      stringArray0[6] = "getQualifier";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rur");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("rur", stringBuilder1);
      char[] charArray0 = new char[2];
      SQLUtil.join("org.", "alter materialized view", stringArray0, ".&b4G?ke#dl*", "getQualifier", stringArray0);
      charArray0[0] = 'F';
      charArray0[1] = 'H';
      stringBuilder1.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1966), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1966
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5665989181145106
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(".&b4G?ke#dl*");
      SQLUtil.mutatesDataOrStructure(".&b4G?ke#dl*");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".&b4G?ke#dl*";
      stringArray0[2] = ".&b4G?ke#dl*";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = ".&b4G?ke#dl*";
      stringArray0[5] = ".&b4G?ke#dl*";
      stringArray0[6] = "getQualifier";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rur");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(.&b4G?ke#dl*, , .&b4G?ke#dl*, alter materialized view, .&b4G?ke#dl*, .&b4G?ke#dl*, getQualifier)", (DBTable) null, (-3644), "getQualifier");
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("(.&b4G?ke#dl*, , .&b4G?ke#dl*, alter materialized view, .&b4G?ke#dl*, .&b4G?ke#dl*, getQualifier)", stringBuilder0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "=f";
      stringArray0[2] = "=f";
      stringArray0[3] = "=f";
      stringArray0[5] = "=f";
      stringArray0[6] = "=f";
      String string0 = SQLUtil.leftJoin("=f", stringArray0, "=f", "", stringArray0);
      assertEquals("left join =f as  on =f.null = .null and =f.=f = .=f and =f.=f = .=f and =f.=f = .=f and =f.null = .null and =f.=f = .=f and =f.=f = .=f", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=f", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, =f, =f, =f, , =f, =f)", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.normalize("K'/}4>6X`ajp", false);
      int int0 = 41;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3v[1?PKhG*>", (DBTable) null, 41, "/$*");
      defaultDBColumn0.getNotNullConstraint();
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin("3v[1?PKhG*>", stringArray0, "JwedWyZ!](I?fa|p?b>", "K '/}4>6X`ajp'", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "JwedWyZ!](I?fa|p?b> as K '/}4>6X`ajp' on ");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      // Undeclared exception!
      try { 
        stringBuilder1.insert(45, (float) 41);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 45
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "(z'n9<-E$a(DcE9";
      SQLUtil.removeComments("(z'n9<-E$a(DcE9");
      SQLUtil sQLUtil0 = new SQLUtil();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("XSCB0.S", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Gx(bE", (DBSchema) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "XSCB0.S";
      stringArray0[1] = "UM\"7QPAtT";
      stringArray0[2] = "(z'n9<-E$a(DcE9";
      stringArray0[3] = "(z'n9<-E$a(DcE9";
      stringArray0[4] = "Gx(bE";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      System.setCurrentTimeMillis(74L);
      SQLUtil.mutatesDataOrStructure("ALTER TABLE ");
      SQLUtil.renderValue(sQLUtil0);
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("auc<;5_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(13, "auc<;5_");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("auc<;5_", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      stringArray0[2] = ":QQ>A,!I@Rq";
      stringArray0[3] = "";
      stringArray0[5] = "UQ's6maX%-QNr4`";
      stringArray0[6] = "";
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) ":QQ>A,!I@Rq";
      objectArray0[5] = (Object) "UQ's6maX%-QNr4`";
      objectArray0[6] = (Object) "";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      SQLUtil.mutatesDataOrStructure("].");
      SQLUtil.isQuery("org.databene.commons.file.PatternFileFilter");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.normalize("", false);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "null = java.lang.Object@7891e49 AND org.databene.commons.file.PatternFileFilter = null AND :QQ>A,!I@Rq = null AND  = '' AND null = ':QQ>A,!I@Rq' AND UQ's6maX%-QNr4` = 'UQ's6maX%-QNr4`' AND  = ''", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter tableorg.databene.jdbacl.sqlutil", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null = java.lang.Object@7891e49 AND org.databene.commons.file.PatternFileFilter = null AND :QQ>A,!I@Rq = null AND  = '' AND null = ':QQ>A,!I@Rq' AND UQ's6maX%-QNr4` = 'UQ's6maX%-QNr4`' AND  = ''", dBTable0, (DBDataType) null);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1940559836782532
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]gT  @6d_2;r");
      VersionNumber versionNumber0 = VersionNumber.valueOf("0y8`01#Nq<Fx");
      VersionNumber.valueOf(",-9\"oisMMaL");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(",-9\"oisMMaL", "create materialized view.&b4g?ke#dl*", versionNumber0);
      defaultDatabase0.getTable((String) null, false);
      String string0 = SQLUtil.normalize(")MGR0IeeVC", false);
      assertEquals(") MGR0IeeVC", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure(") MGR0IeeVC");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery(")MGR0IeeVC");
      assertFalse(boolean1);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("]gT  @6d_2;r", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("~/3ztsIaso`6F<", true);
      assertEquals("~ / 3ztsIaso ` 6F <", string0);
      
      Character character0 = Character.valueOf('c');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'c'", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "", versionNumber0);
      defaultDatabase0.getComponents();
      defaultDatabase0.toString();
      defaultDatabase0.getTable("getNCharacterStream(int)", false);
      String string0 = SQLUtil.normalize("[zO`$RRM-!U8R.", false);
      assertEquals("[ zO ` $ RRM - ! U8R.", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "=f";
      stringArray0[3] = "=f";
      stringArray0[5] = "=f";
      stringArray0[6] = "=f";
      String string0 = SQLUtil.leftJoin("=f", stringArray0, "=f", "", stringArray0);
      assertEquals("left join =f as  on =f.null = .null and =f.=f = .=f and =f.null = .null and =f.=f = .=f and =f.null = .null and =f.=f = .=f and =f.=f = .=f", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, =f, , =f, , =f, =f)", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      DBDataType dBDataType0 = DBDataType.getInstance((-884), "T}.F@=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T}.F@=", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table T}.F@=", string0);
      
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize("E;k1[r\"U", true);
      assertEquals("E ; k1 [ r \"U\"", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      DBDataType dBDataType0 = DBDataType.getInstance((-892), "T}.F@=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_8X.n@C*<*oE", defaultDBTable0, dBDataType0, integer0, integer0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T}.F@=";
      stringArray0[1] = "qByL";
      stringArray0[2] = "_8X.n@C*<*oE";
      stringArray0[3] = "_8X.n@C*<*oE";
      stringArray0[4] = "T}.F@=";
      stringArray0[5] = "T}.F@=";
      stringArray0[6] = "qByL";
      stringArray0[7] = "T}.F@=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qByL", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT qByL UNIQUE (T}.F@=, qByL, _8X.n@C*<*oE, _8X.n@C*<*oE, T}.F@=, T}.F@=, qByL, T}.F@=)", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT qByL ", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]gT  @6d_2;r");
      String string0 = "0y8`01#\\Nq<Fx";
      VersionNumber.valueOf("0y8`01#Nq<Fx");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Unknown constraint type: ");
      SQLUtil.mutatesDataOrStructure("exec");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType.getInstance(1563, "exec");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        defaultDBTable1.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "=f";
      stringArray0[2] = "=f";
      stringArray0[3] = "=f";
      stringArray0[5] = "=f";
      stringArray0[6] = "=f";
      String string0 = SQLUtil.leftJoin("=f", stringArray0, "=f", "", stringArray0);
      assertEquals("left join =f as  on =f.null = .null and =f.=f = .=f and =f.=f = .=f and =f.=f = .=f and =f.null = .null and =f.=f = .=f and =f.=f = .=f", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=f", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT =f UNIQUE (, =f, =f, =f, , =f, =f)", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1949), "~/3ztsIaso`6F<");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~/3ztsIaso`6F<", (DBSchema) null);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~/3ztsIaso`6F<", defaultDBTable0, dBDataType0, integer1, integer1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = "~/3ztsIaso`6F<";
      stringArray0[2] = "drop table";
      stringArray0[3] = "drop table";
      stringArray0[4] = "drop table";
      stringArray0[5] = "drop table";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop table", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop table\" UNIQUE (alter materialized view, ~/3ztsIaso`6F<, drop table, drop table, drop table, drop table)", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "*/ ", versionNumber0);
      defaultDatabase0.getComponents();
      defaultDatabase0.toString();
      defaultDatabase0.getTable("", false);
      String string0 = SQLUtil.normalize("*/ ", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery(")MGR0IeeVC");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.store.raw.log.ChecksumOperation", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("m:lTY", true, dBPrimaryKeyConstraint0);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueIndex0);
      assertEquals("null.m:lTY", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("K'/}4>6X`ajp", false);
      assertEquals("K '/}4>6X`ajp'", string0);
      
      SQLUtil.removeComments("K'/}4>6X`ajp");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "O#M)\"%", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K'/}4>6X`ajp", dBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("K'/}4>6X`ajp NCLOB NULL", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a--:wvE");
      DBDataType dBDataType0 = DBDataType.getInstance((-883), "org.databene.jdbacl.SQLUtil");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!,JR&", defaultDBTable0, dBDataType0, integer1, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ORG.DATABENE.JDBACL.SQLUTIL(3)", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      VersionNumber versionNumber0 = VersionNumber.valueOf("auc<;5_vy6)s8");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("auc<;5_vy6)s8", "auc<;5_vy6)s8", versionNumber0);
      defaultDatabase0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("auc<;5_vy6)s8");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E{WC";
      stringArray0[1] = "E{WC";
      stringArray0[2] = "auc<;5_vy6)s8";
      stringArray0[3] = "E{WC";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", true, stringArray0);
      TableContainer tableContainer0 = new TableContainer("E{WC", defaultDatabase0);
      tableContainer0.getSchema();
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("auc<;5_vy6)s8", (DBSchema) null);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "call";
      stringArray1[1] = "G&w0hYpB 7=zLEuN";
      stringArray1[2] = "E{WC";
      stringArray1[3] = "E{WC";
      stringArray1[4] = "auc<;5_vy6)s8";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize("w;v*+", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncateorg.hsqldb.jdbc.jdbcclob", defaultDBTable0, 2764, "org.hsqldb.");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("w;v*+", "~z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8200759753606213
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil.mutatesDataOrStructure("truncatenjk:<zd,w\"&lt");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BACKUP.HISTORY");
      DBDataType.getInstance((-280361493), "BACKUP.HISTORY");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      assertEquals(3, (int)integer0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3265432531941137
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" DEFAULT ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("lKxEA|j6 H~%QM UFeF");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "4FS9)Ps)7b";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "lKxEA|j6 H~%QM UFeF";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ( DEFAULT , 4FS9)Ps)7b, , , lKxEA|j6 H~%QM UFeF)", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-3644);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e54SSIf]E ", (DBTable) null, (-3644), "e54SSIf]E ");
      defaultDBColumn0.setDefaultValue("e54SSIf]E ");
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder("e54SSIf]E ");
      String string0 = "i>p_v.hhI(`u`";
      int int1 = 1186;
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("e54SSIf]E ", (DBTable) null, 1186, "q[o (cah");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: q[o (cah
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0075563074378375
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" DEFAULT ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("lKxEA|j6 H~%QM UFeF");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("#GA?yU3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("J8oL~ohm/KwzJ");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.660947433286918
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys(basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8506348611123125
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "updatedefault";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "updatedefault");
      String string1 = "\\Kz)O&|edxY@hoi$,W";
      SQLUtil.normalize("Kz)O&|edxY@hoi$,W", true);
      SQLUtil.mutatesDataOrStructure("Kz)O&|edxY@hoi$,W");
      SQLUtil.normalize("Kz)O&|edxY@hoi$,W", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updatedefault");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-283248096));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.474222705851588
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" DEFAULT ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("lKxEA|j6 H~%QM UFeF");
      assertNull(boolean0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("#GA?yU3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(" NOT", "mC)3&xgwM]<Bj[.s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "x<S6[]CX";
      stringArray0[1] = " DEFAULT ";
      stringArray0[2] = "#GA?yU3";
      stringArray0[3] = "lKxEA|j6 H~%QM UFeF";
      stringArray0[4] = " NOT";
      stringArray0[5] = "x<S6[]CX";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "x<S6[]CX", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT x<S6[]CX UNIQUE (x<S6[]CX,  DEFAULT , #GA?yU3, lKxEA|j6 H~%QM UFeF,  NOT, x<S6[]CX)", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.464507779299039
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(".&b4G?ke#dl*");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".&b4G?ke#dl*";
      stringArray0[2] = ".&b4G?ke#dl*";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = ".&b4G?ke#dl*";
      stringArray0[5] = ".&b4G?ke#dl*";
      stringArray0[6] = "getQualifier";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rur");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(.&b4G?ke#dl*, , .&b4G?ke#dl*, alter materialized view, .&b4G?ke#dl*, .&b4G?ke#dl*, getQualifier)", (DBTable) null, (-3644), "getQualifier");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("(.&b4G?ke#dl*, , .&b4G?ke#dl*, alter materialized view, .&b4G?ke#dl*, .&b4G?ke#dl*, getQualifier)", stringBuilder0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      SQLUtil.typeAndName((DBObject) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringBuilder1.append("PqE%$z0\"'{=");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("(`+O=!)U", true);
      assertEquals("(` + O = !) U", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter sessiontruncatelkxea|j6 h~%qm ufef");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FileUtil.canonicalFile("{o4NxG%>~=n2nN*q");
      MockFile mockFile0 = new MockFile("drop indextruncatelkxea|j6 h~%qm ufef", "mC)3&xgwM]<Bj[.s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.checkError();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("drop indextruncatelkxea|j6 h~%qm ufef", "mC)3&xgwM]<Bj[.s", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("{o4NxG%>~=n2nN*q", defaultDatabase0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("{o4NxG%>~=n2nN*q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '{o4NxG%>~=n2nN*q'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "removeConnectionEventListener(listener);";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("removeConnectionEventListener(listener);", defaultDBTable0, 65, "removeConnectionEventListener(listener);");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"listener\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("9>B!}d~>O", false, "9>B!}d~>O", "SYS_REF_");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK SYS_REF_", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("setCharacterStream(int, Reader)", defaultDBTable0, (-1309), "setCharacterStream(int, Reader)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("8jGd2y3U,");
      defaultDBTable0.setSchema(dBSchema0);
      String[] stringArray0 = new String[8];
      MockFile mockFile0 = new MockFile(stringArray0[2], "Sm?jaK");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "updateCharaceterStream(int, Reader)", false, stringArray0);
      mockPrintWriter0.append((CharSequence) "8jGd2y3U,");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("updateCharaceterStream(int, Reader)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830685528790343
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("z'4u%/renametruncatelkxea|j6 h~%qm ufef");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%ER&L&}s", defaultDBTable0, 1310, "@g.hsqdR.");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("z'4u%", "renametruncatelkxea|j6 h~%qm ufef");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "renametruncatelkxea|j6 h~%qm ufef";
      stringArray0[1] = "%ER&L&}s";
      stringArray0[2] = "select";
      stringArray0[3] = "renametruncatelkxea|j6 h~%qm ufef";
      stringArray0[4] = "@g.hsqdR.";
      stringArray0[5] = "@g.hsqdR.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("@g.hsqdR.", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }
}
