/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:45:15 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = 1L;
      Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      Range.of(range_CoordinateSystem0, (-608L), 1L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("@/Gd,,1&]HkyM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.@/Gd,,1&]HkyM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      Range.Comparators.values();
      Range range1 = Range.of((-1L), 0L);
      range1.iterator();
      range0.intersects(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-359L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2 .. 2 ]/RB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.iterator();
      range0.spliterator();
      range_Builder0.contractBegin((-917L));
      range_Builder0.expandBegin(1L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1L);
      range_Builder1.expandEnd(1L);
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.intersects(range2);
      assertTrue(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      range_Builder1.shift(0L);
      Range range4 = Range.parseRange("[ 2 .. 2 ]/RB");
      Range range5 = range_Builder1.build();
      assertSame(range0, range3);
      assertNotSame(range5, range0);
      assertFalse(range5.equals((Object)range4));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.997068727089017
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 1689L;
      Range range0 = Range.of(1689L, 1689L);
      long long1 = (-889L);
      // Undeclared exception!
      try { 
        range0.split((-889L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.98296502921777
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be >=0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandBegin(1L);
      range_Builder0.copy();
      Range range0 = Range.of(1L, 1249L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      range0.getLength();
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2451263407580138
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      range_Builder1.shift(0L);
      Object object0 = new Object();
      range2.equals(object0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3276698862269427
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-128L);
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd(range_CoordinateSystem1);
      Range.of(range_CoordinateSystem1, (-127L), (-127L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      range0.getEnd(range_CoordinateSystem2);
      range0.split(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$EmptyByteRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$EmptyByteRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = (-2017L);
      range_Builder1.expandBegin((-2017L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin(1L);
      range_Builder0.expandEnd(1L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 0L;
      range_Builder0.expandEnd(0L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractEnd(1L);
      range0.split(1L);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.parseRange("SPACE_BASED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SPACE_BASED into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.730632919046993
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 176L, 176L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 176L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1313335816367016
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1L);
      Range range1 = range0.asRange();
      range1.isSubRangeOf(range0);
      long long1 = 0L;
      long long2 = 2759L;
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 3305L;
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(3305L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4430167848873383
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 1621L;
      Range range0 = Range.of(1621L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.spliterator();
      // Undeclared exception!
      try { 
        Range.of(698L, (-721L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.288902505328238
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.contractEnd(0L);
      long long0 = 1274L;
      Range range0 = Range.ofLength(1274L);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range1.intersects(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.301664655176154
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = range0.asRange();
      range1.intersection(range0);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.628035249528543
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of((-476L), (-128L));
      Range.of((-476L));
      Range range1 = Range.of((-3345L));
      Range range2 = Range.ofLength(1033L);
      List<Range> list0 = range1.complement(range2);
      range0.complementFrom(list0);
      Range.ofLength(1033L);
      range0.split(441L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.contractEnd(0L);
      // Undeclared exception!
      try { 
        Range.of(4317L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.450950871418892
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-476L), (-128L));
      Range range1 = Range.of((-476L));
      Range range2 = range0.intersection(range1);
      Range.of(21L);
      range2.startsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertSame(range1, range2);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2432037034212606
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      long long0 = 1L;
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range1.getEnd();
      range0.complement(range1);
      range1.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-509L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4627109760739825
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.iterator();
      long long0 = 1L;
      range0.spliterator();
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.ofLength(1L);
      range0.split(4294967295L);
      long long1 = 0L;
      range_Builder1.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.508192821018
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      range0.startsBefore(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2073L, 65535L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.contractBegin(2073L);
      range_Builder2.shift((-1973L));
      range_Builder0.contractEnd((-1973L));
      Object object0 = new Object();
      range1.equals(range0);
      assertFalse(range0.isEmpty());
      
      range_Builder2.copy();
      Range range2 = Range.of((-2353L), 1L);
      boolean boolean0 = range1.endsBefore(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6603299628417556
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.shift(0L);
      Range range0 = Range.of(0L, 0L);
      range0.spliterator();
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1049L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range range2 = range_Builder1.build();
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3284718813307355
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.iterator();
      range0.spliterator();
      range_Builder0.contractBegin((-917L));
      range_Builder0.expandBegin(1L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.of((-476L), (-128L));
      Range range0 = Range.of((-476L));
      Range range1 = Range.of((-3345L));
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      range_Builder0.contractBegin((-128L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.shift((-476L));
      Object object0 = new Object();
      range1.equals(range_Builder1);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder2.copy();
      assertFalse(range_Builder3.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1686354922419264
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1L);
      range0.startsBefore(range1);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      range_Builder1.copy();
      range_Builder1.shift(0L);
      Object object0 = new Object();
      range2.equals(object0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1154750248807717
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.of((-359L), 9223372036854774247L);
      String string0 = "+b7k@[Ll(N";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-2147483648L), (-359L));
      // Undeclared exception!
      try { 
        Range.of((-257L), (-3345L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6990213651320345
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of((-476L), (-128L));
      Range range1 = Range.of((-476L));
      Range range2 = Range.of((-476L));
      Range range3 = Range.of((-3345L));
      Range range4 = Range.ofLength(1033L);
      boolean boolean0 = range4.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range3.complement(range4);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range3));
      
      Range.ofLength(1033L);
      range0.split(441L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range3.toString(range_CoordinateSystem1);
      assertEquals("[ -3345 .. -3345 ]/0B", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 176L, 176L);
      Range.Builder range_Builder0 = new Range.Builder(176L, 176L);
      range_Builder0.copy();
      range_Builder0.expandEnd(176L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.38205092020065
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.spliterator();
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range1.endsBefore(range0);
      range0.getBegin();
      range0.spliterator();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372036854775807 ]/RB", string0);
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
      
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Long.getLong("[ 0 .. 9223372036854775806 ]/0B", long1);
      boolean boolean2 = range1.equals(long0);
      long long2 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long2);
      
      boolean boolean3 = range0.isSubRangeOf(range1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1661660316783506
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.shift(0L);
      Range.of(0L, 0L);
      long long0 = (-9223372036854775808L);
      range_Builder1.expandBegin((-9223372036854775808L));
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967328L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 4294967328, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0407272942644323
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      long long0 = (-688L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-731L), 255L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.5998110602396154
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.shift(0L);
      Range range0 = Range.of(0L, 0L);
      range0.spliterator();
      boolean boolean0 = range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range range2 = range_Builder1.build();
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5503841468065978
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-476L), (-116L));
      Range range1 = Range.of((-476L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(21L);
      range3.intersection(range0);
      boolean boolean0 = range2.startsBefore(range0);
      List<Range> list0 = range0.complement(range2);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range0.intersects(range3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2950652257969137
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range1.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L, 9223372036854775807L);
      range_Builder0.copy();
      range_Builder0.expandEnd(1L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.getLength();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd((-3637L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2213525679687383
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), 2147483647L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.441041023954045
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.shift(0L);
      Range range0 = Range.of(0L, 0L);
      range0.spliterator();
      boolean boolean0 = range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1049L);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.endsBefore(range0);
      assertFalse(boolean1);
      
      Range.Builder range_Builder2 = new Range.Builder(0L);
      Range range2 = range_Builder2.build();
      boolean boolean2 = range2.equals(range_Builder1);
      assertTrue(range2.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.022851140160034
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 32767L;
      Range range1 = Range.of(range_CoordinateSystem1, 32767L, 4294967295L);
      range1.isSubRangeOf(range0);
      long long2 = (-2147483648L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, (-57L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2570972197438732
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.shift(0L);
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2695L, 2147483647L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1672688025320053
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Long long0 = new Long(383L);
      Long.getLong("", long0);
      Long long1 = new Long(383L);
      Long long2 = new Long(383L);
      Long.getLong("", long2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 383L, 383L);
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long3 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(383L, long3);
      
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      long long4 = range1.getBegin();
      assertEquals((-1L), long4);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2798922911303316
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      long long0 = 723L;
      Range.of(723L, 9223372036854775806L);
      // Undeclared exception!
      try { 
        Range.parseRange("5icfRTKa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 5icfRTKa into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.7376696182833657
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.shift(9223372036854775806L);
      range_Builder1.expandBegin((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range1 = Range.of((-9223372036854775808L), (-1076L));
      range1.complement(range0);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3182092746485927
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.startsBefore(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2073L, 65535L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.contractBegin(2073L);
      range_Builder2.shift((-1993L));
      range_Builder0.contractEnd((-1993L));
      Object object0 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1);
      
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder0.expandBegin(65535L);
      Range range2 = range_Builder3.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem1);
      assertEquals(81L, long0);
      
      boolean boolean2 = range2.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.513432975460271
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      range0.getBegin();
      Long long0 = new Long(1L);
      Object object0 = new Object();
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range3 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B");
      Range range4 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range4.complement(range3);
      assertTrue(list0.contains(range4));
      assertFalse(range4.isEmpty());
      
      Range range5 = range1.intersection(range3);
      assertFalse(range5.isEmpty());
      assertSame(range3, range1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.8286413964890924
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      range0.startsBefore(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2073L, 65535L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.contractBegin(2073L);
      Range.Builder range_Builder3 = new Range.Builder(2073L);
      range_Builder3.copy();
      Range.Builder range_Builder4 = range_Builder3.shift((-1111L));
      range_Builder4.expandBegin(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder3);
      assertFalse(boolean0);
      
      Range.Builder range_Builder5 = new Range.Builder();
      range_Builder2.copy();
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
      
      Range range2 = range0.intersection(range1);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.145394324120462
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483602L, 2147483602L);
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.util.MapUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.util.MapUtil into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.23201699826958
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Long long0 = new Long((-128L));
      Long long1 = new Long((-1L));
      Long.getLong("", long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of((-1L));
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      long long2 = range0.getBegin();
      assertEquals((-1L), long2);
  }
}
