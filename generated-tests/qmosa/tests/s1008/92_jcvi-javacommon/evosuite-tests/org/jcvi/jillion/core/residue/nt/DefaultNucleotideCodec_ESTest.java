/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:06:28 GMT 2018
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)81;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.encode(0, iterator0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1259), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte) (-86));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -86
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 1
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1006789212792607
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)43;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(397, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0377341947851506
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)14;
      byte[] byteArray1 = new byte[9];
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      byteArray1[0] = (byte)14;
      byte byte1 = (byte)101;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-84);
      byte byte1 = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-29);
      byte byte2 = (byte)0;
      byteArray0[6] = (byte)0;
      byte byte3 = (byte)7;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)83;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 66);
      byte[] byteArray1 = new byte[3];
      byte byte4 = (byte)0;
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)43;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray1, (-1640L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1640
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8492350266892
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)4;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte) (-84);
      byteArray1[5] = (byte)4;
      byteArray1[6] = (byte) (-36);
      byteArray1[7] = (byte) (-84);
      byteArray1[8] = (byte) (-84);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte) (-84));
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.decode(byteArray1, 2L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray2);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1079722759786073
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[18];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray0[3] = (byte)3;
      defaultNucleotideCodec0.isGap(byteArray0, (-176));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3128);
      int int0 = 0;
      Range range0 = Range.of((long) (-176), 2710L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -176 .. 2710 ]/0B is out of range of sequence which is only [ 0 .. 0 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 6);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)102;
      byteArray1[4] = (byte) (-85);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)99;
      byteArray1[8] = (byte) (-108);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.767923626502885
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Purine;
      linkedList0.push(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1770));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-64)}, byteArray0);
      assertEquals(1, int0);
      
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.isGap(byteArray1, (-515));
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)48}, byteArray1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0280290733074104
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.of(0L, 1L);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.iterator(byteArray0, range0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (byte)3);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.toString(byteArray0);
      Range.of((-3455L));
      Range range1 = Range.of((long) (byte)3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1, range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 3 .. 3 ]/0B is out of range of sequence which is only [ 0 .. 0 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.880058105880462
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.of(0L, 1L);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)3;
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte)3;
      byte byte0 = (byte)39;
      byteArray1[5] = (byte)39;
      byteArray1[6] = (byte)3;
      defaultNucleotideCodec1.iterator(byteArray1, range0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, (byte)3);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.toString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.737975555805786
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Purine;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Gap;
      linkedList0.push(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-1770));
      nucleotide0.getBasesFor();
      Nucleotide nucleotide2 = Nucleotide.Weak;
      defaultNucleotideCodec1.encode(nucleotide2);
      defaultNucleotideCodec0.isGap(byteArray0, (-515));
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6820160542919065
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[18];
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4);
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      byteArray0[3] = (byte)3;
      defaultNucleotideCodec0.isGap(byteArray0, (-176));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3128);
      Range.of((long) (-176), 2710L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      assertEquals(DefaultNucleotideCodec.INSTANCE, defaultNucleotideCodec1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6633286205860296
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 778);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("CG", string0);
      
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      assertEquals(0, int0);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 9);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.834661752244436
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[18];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray0[3] = (byte)3;
      defaultNucleotideCodec0.isGap(byteArray0, (-176));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3128);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 3128);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6112125994210036
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[18];
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4);
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, 9223372036854775807L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, (-3960));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, (-1558));
      Range.of((-1447L), 6L);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-1825));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6258781185817615
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[18];
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4);
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[1] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      byteArray0[3] = (byte)3;
      defaultNucleotideCodec0.isGap(byteArray0, (-176));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3128);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-83));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9829650292177696
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.of(2L, 1L);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.Unknown;
      defaultNucleotideCodec6.encode(nucleotide2);
      defaultNucleotideCodec5.toString(byteArray0);
      Range.of((-1482L));
      defaultNucleotideCodec5.iterator(byteArray0, range0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("AGT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.AGT
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
