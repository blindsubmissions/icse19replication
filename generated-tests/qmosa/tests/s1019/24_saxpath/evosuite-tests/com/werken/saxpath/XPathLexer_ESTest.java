/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:07:47 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.plus();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.div();
      token0.toString();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      String string0 = token0.toString();
      assertEquals("[ (5) ())", string0);
      
      xPathLexer0.setPreviousToken(token0);
      int int0 = xPathLexer0.currentPosition();
      assertEquals(7, int0);
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.plus();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("(O;@qzp^?6+{SB~'");
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.or();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1038));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lra^#");
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.consume((-2161));
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.setXPath("lra^#");
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.consume((-2161));
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.not();
      int int0 = (-954);
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.number();
      xPathLexer0.consume((-954));
      char char0 = 'g';
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.div();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.158039775219434
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.LA(0);
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath(",Q(+F=[p.eW#rl()<");
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.getXPath();
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9477470550986103
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.setXPath("");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.XPathLexer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.662247729572388
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals(") ", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.pipe();
      assertEquals("(", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath(") (");
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("(", token5.getTokenText());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1131003339267977
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.setXPath("Ykw{L1aqh?}#P9;l");
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("Ykw{L1aqh?}#P9;l");
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierChar('A');
      xPathLexer0.isIdentifierChar('A');
      xPathLexer0.dots();
      xPathLexer0.currentPosition();
      xPathLexer0.plus();
      xPathLexer0.star();
      String string0 = xPathLexer0.getXPath();
      assertEquals("Ykw{L1aqh?}#P9;l", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1592148401163038
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      token0.toString();
      char char0 = xPathLexer0.LA(250);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.operatorName();
      String string0 = token0.toString();
      assertEquals("[ (21) (c)", string0);
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.setXPath("[ (21) (c)");
      xPathLexer0.isIdentifierStartChar('R');
      Token token8 = xPathLexer0.leftBracket();
      assertEquals("[", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token9 = xPathLexer0.comma();
      assertEquals(" ", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0962480546679827
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Pgz?qb5[");
      Token token0 = xPathLexer0.pipe();
      assertEquals("P", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("#a%.yjUPrDw$zaL?");
      xPathLexer1.identifier();
      xPathLexer1.or();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("qb", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.identifier();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("[", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer2.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftParen();
      assertEquals("a", token9.getTokenText());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      xPathLexer1.mod();
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.slashes();
      Token token12 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer2.relationalOperator();
      xPathLexer0.consume();
      Token token14 = xPathLexer2.whitespace();
      assertEquals((-2), token14.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.291970937236568
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("we", token3.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("r", token4.getTokenText());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("c", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals("o", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("com.werken.saxpath.Token", token7.getTokenText());
      
      Token token8 = xPathLexer1.literal();
      assertNull(token8);
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.consume((-226));
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer0.literal();
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.or();
      xPathLexer2.star();
      Token token11 = xPathLexer2.minus();
      assertEquals(6, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4844496430362217
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.plus();
      xPathLexer0.star();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.colon();
      String string0 = token0.toString();
      assertEquals("[ (5) ())", string0);
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.setXPath("[ (5) ())");
      Token token3 = xPathLexer0.star();
      assertEquals("[", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("(", token4.getTokenText());
      
      xPathLexer0.setXPath(")");
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals(")", token5.getTokenText());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      Token token13 = xPathLexer0.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      Token token14 = xPathLexer0.star();
      assertEquals(20, token14.getTokenType());
      
      xPathLexer0.operatorName();
      Token token15 = xPathLexer0.dots();
      assertEquals(13, token15.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.490884952993672
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer0.number();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("Y", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("Ykw{L1aqh?}#P9;l");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("Y", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("k", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("w", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("L1aqh", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("?", token7.getTokenText());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("#", token9.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("Ykw{L1aqh?}#P9;l");
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2819408181404497
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer1.plus();
      Token token1 = xPathLexer0.star();
      String string0 = token1.toString();
      assertEquals("[ (20) (c)", string0);
      
      token0.toString();
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      xPathLexer1.colon();
      String string1 = token0.toString();
      assertEquals("[ (5) (c)", string1);
      
      Token token3 = xPathLexer0.not();
      assertEquals("o", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer1.setXPath("B=iF");
      xPathLexer1.star();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer1.setXPath("=z");
      Token token5 = xPathLexer1.colon();
      assertEquals("=", token5.getTokenText());
      
      xPathLexer1.or();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals("z", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer1.relationalOperator();
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer1.doubleColon();
      xPathLexer1.doubleColon();
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      xPathLexer0.star();
      xPathLexer1.operatorName();
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9490351379851405
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierChar('e');
      xPathLexer0.isIdentifierChar('A');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer1.dots();
      xPathLexer0.currentPosition();
      xPathLexer0.plus();
      xPathLexer0.star();
      String string0 = xPathLexer0.getXPath();
      assertEquals("com.werken.saxpath.Token", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.13689927988637
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(") ", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(")2Sr");
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token1 = xPathLexer0.plus();
      assertEquals("(", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer1.slashes();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      Token token3 = xPathLexer1.number();
      assertEquals("2", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("S", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftParen();
      assertEquals(1, token7.getTokenType());
      
      xPathLexer1.operatorName();
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer2.mod();
      Token token9 = xPathLexer2.comma();
      assertEquals(32, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.slashes();
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      assertNotNull(token10);
      assertEquals("", token10.getTokenText());
      
      Token token11 = xPathLexer3.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer3.relationalOperator();
      xPathLexer0.consume();
      Token token12 = xPathLexer3.whitespace();
      assertEquals((-2), token12.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2189357946754673
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Pgz?qb5[");
      Token token0 = xPathLexer0.pipe();
      assertEquals("P", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.star();
      assertEquals("z", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("#a%.yjUPrDw$zaL?");
      xPathLexer1.identifier();
      xPathLexer1.or();
      Token token2 = xPathLexer0.plus();
      assertEquals("?", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.slashes();
      Token token3 = xPathLexer1.notEquals();
      assertEquals("a%", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Pgz?qb5[");
      Token token4 = xPathLexer2.identifier();
      assertEquals("Pgz", token4.getTokenText());
      
      Token token5 = xPathLexer1.number();
      assertEquals(".", token5.getTokenText());
      assertEquals(31, token5.getTokenType());
      
      Token token6 = xPathLexer1.equals();
      assertEquals("y", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals("q", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftParen();
      assertEquals("j", token9.getTokenText());
      
      xPathLexer1.operatorName();
      Token token10 = xPathLexer1.leftBracket();
      assertEquals("U", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("#a%.yjUPrDw$zaL?");
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.comma();
      assertEquals(32, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer0.slashes();
      assertEquals("5", token12.getTokenText());
      
      Token token13 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token13);
      
      Token token14 = xPathLexer5.slashes();
      assertEquals(11, token14.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.mod();
      xPathLexer3.relationalOperator();
      xPathLexer2.consume();
      Token token15 = xPathLexer4.whitespace();
      assertEquals((-2), token15.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0149468801795942
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.plus();
      xPathLexer1.leftParen();
      xPathLexer1.dots();
      xPathLexer1.literal();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.identifier();
      xPathLexer1.slashes();
      xPathLexer2.leftParen();
      xPathLexer1.leftParen();
      xPathLexer0.isIdentifierChar('A');
      xPathLexer1.isIdentifierChar('A');
      xPathLexer0.dots();
      xPathLexer0.currentPosition();
      xPathLexer2.plus();
      xPathLexer2.star();
      String string0 = xPathLexer0.getXPath();
      assertEquals("com.werken.saxpath.Token", string0);
  }
}
