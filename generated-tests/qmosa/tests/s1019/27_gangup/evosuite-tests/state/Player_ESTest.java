/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:52:15 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(1464, "rI+", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 1464, 1464);
      player0.setConnected(true);
      player0.getMoney();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Player.unpack(): *** WARNING *** [IO] failed to unpack data: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "(O;@qzp^?6+{SB~'";
      Player player0 = new Player(2124, "(O;@qzp^?6+{SB~'", "state.Party", 2124, (-4034));
      player0.id = 2124;
      player0.reset(false);
      player0.getSubparty();
      player0.getSubparty();
      player0.setMoney((-1442.0F));
      player0.getY();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(4);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      player0.unpack(dataInputStream0);
      player0.setDead();
      Player player1 = new Player((-1283));
      player0.remove(player1);
      player0.setDead(1209L);
      player0.pack();
      player0.toString();
      player0.type();
      player1.getX();
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(1209L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(0L);
      Player player1 = new Player((short)4919, "gui.ModuleBrowserDialog$ModuleFilter", "]?NN>OYU8C,u:`3_q%e", (short)4919, (short)4919);
      player1.setDead();
      player0.remove(player1);
      assertEquals(1392409281320L, player1.getTimeOfDeath());
      
      player0.setConnected(true);
      boolean boolean0 = player0.isDead();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(2254, "K~H&<Zd", "", 2254);
      Player player1 = new Player((-636));
      player0.next = (Party) player1;
      player0.next = null;
      player0.setY(0.0F);
      player0.getSubparty();
      player0.setZ(651.1F);
      player0.setY(651.1F);
      player0.pack();
      player0.setY(0.0F);
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setZ(0);
      player0.setDead((long) 0);
      player0.setMoney((-3614.8574F));
      player0.setY(0.0F);
      player0.setZ(0.0F);
      player0.getSubparty();
      player0.setZ(0);
      player0.gangStrength();
      player0.getStrength();
      player0.getPictureId();
      player0.setX(0.0F);
      player0.setMoney(0);
      player0.setDead((long) 0, true);
      player0.setConnected(false);
      player0.setDead((long) 1);
      player0.setZ(0.0F);
      player0.setDead((long) 0);
      player0.setMoney((-1236.5001F));
      player0.getZ();
      player0.setZ(0.0F);
      player0.getPictureId();
      player0.isConnected();
      Player player1 = new Player(1, " ", " ", 0, 0);
      player0.setJoinOK(player1, true);
      player0.getTimeOfDeath();
      player0.getIP();
      player0.setDead((long) 0, false);
      player0.type();
      int int0 = player0.type();
      assertTrue(player0.isDead());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(3281);
      Player player1 = new Player(0);
      player0.head = (Party) player1;
      player0.pack();
      player0.remove(player1);
      byte[] byteArray0 = new byte[0];
      player0.unpack(byteArray0);
      float float0 = player0.getY();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("Player3281", player0.getName());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1175);
      String string0 = "/G";
      Player player0 = new Player((-1175), "/G", "/G", (-1175), 0);
      player0.getY();
      player0.getX();
      player0.id = 0;
      player0.setZ(0.0F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      player0.unpack(byteArray0);
      player0.getZ();
      player0.getX();
      player0.setDead(1941L);
      String string1 = "M3n0*P6";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ(0.0F);
      Player player1 = new Player();
      player0.gangStrength();
      player0.prev = (Party) player1;
      player1.setX(1);
      player1.setMoney(1);
      player0.head = (Party) player1;
      Player player2 = new Player((short)4919);
      player2.setX(1);
      player0.next = (Party) player2;
      player0.isDead();
      player2.getStrength();
      player2.gangStrength();
      player2.setDead();
      player1.setConnected(false);
      player2.setZ(0.2F);
      player2.isJoinOK(player1, false);
      player1.setJoinOK(player2, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(3, "", "", (-1));
      player0.reset(true);
      Party party0 = player0.gangBoss();
      player0.boss = party0;
      player0.setDead((long) (-1), true);
      player0.setY(610.1778F);
      party0.id = 582;
      player0.prev = party0;
      party0.remove((Party) null);
      player0.getZ();
      player0.prev = party0;
      player0.getMoney();
      player0.getStrength();
      byte[] byteArray0 = player0.pack();
      player0.setX(1899.3866F);
      player0.getName();
      player0.unpack(byteArray0);
      assertEquals(70, player0.getId());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-1));
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      Player player1 = new Player((-1), "3b7\"e-v<G", 0);
      player1.setConnected(true);
      player0.setJoinOK(player1, true);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player1.getPictureId());
      assertFalse(boolean0);
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6393405872324323
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ(0.0F);
      Player player1 = new Player();
      player0.gangStrength();
      player0.prev = (Party) player1;
      player1.setX(1);
      player1.setMoney(1);
      player0.head = (Party) player1;
      Player player2 = new Player((short)4919);
      player2.setX(1);
      player0.next = (Party) player2;
      player0.isDead();
      player2.getStrength();
      player2.gangStrength();
      player2.setDead();
      player1.setConnected(false);
      player2.setZ(0.2F);
      player1.setJoinOK(player2, false);
      player2.setJoinOK(player0, true);
      player0.setConnected(true);
      player1.setJoinOK(player2, false);
      boolean boolean0 = player1.isJoinOK(player2, false);
      assertEquals(1.0F, player1.getMoney(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.getY();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player1 = new Player((short)4919, "3b7\"e-v<G", (-5120));
      player1.setJoinOK(player0, true);
      player0.setConnected(false);
      Player player2 = new Player((-828), "H", "", (short)4919, (short)4919);
      player0.setJoinOK(player1, true);
      player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis(1392409296320L);
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertTrue(player1.isConnected());
      assertFalse(player0.isConnected());
      assertFalse(boolean0);
  }
}
