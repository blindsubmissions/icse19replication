/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:56:38 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m?T");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      stringReader0.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 0, 10);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.ReadByte();
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 3, 3, 67);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Vi%sK:3GBT");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      javaCharStream0.backup(0);
      stringReader0.read();
      javaCharStream0.UpdateLineColumn(']');
      int int0 = javaCharStream0.getLine();
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-48), 7);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1), (byte)0);
      StringReader stringReader0 = new StringReader(".");
      javaCharStream0.ReInit((Reader) stringReader0, 7, 1995, (int) (byte)16);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s");
      int int0 = 0;
      int int1 = 759;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 759, 759);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      StringReader stringReader1 = new StringReader("6w/C1=Cd+Z+As");
      stringReader1.reset();
      stringReader1.close();
      javaCharStream0.ReInit((Reader) stringReader1);
      intArray0[1] = (-26);
      intArray0[2] = (-1);
      intArray0[3] = 759;
      // Undeclared exception!
      try { 
        stringReader0.mark((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)45;
      sequenceInputStream0.read(byteArray0, (int) (byte) (-1), 3757);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'Y';
      charArray0[2] = '$';
      charArray0[3] = 'G';
      charArray0[4] = 'U';
      charArray0[5] = ')';
      charArray0[6] = 'V';
      charArray0[7] = 'h';
      charArray0[8] = 'P';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(2198);
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char char0 = '}';
      try { 
        JavaCharStream.hexval('}');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 3329, 4);
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = (-1);
      intArray0[2] = 3329;
      intArray0[3] = 4;
      intArray0[4] = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 3329, (-1246));
      intArray0[5] = 4;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = 3329;
      javaCharStream0.bufcolumn = intArray0;
      javaCharStream0.getBeginColumn();
      javaCharStream0.GetSuffix(4);
      assertEquals(4, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(1295L);
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3978), 0, 0);
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1077);
      pipedOutputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      javaCharStream0.GetImage();
      javaCharStream0.GetSuffix(0);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2047854169135204
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'9~Mbdy<Gild$774");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1744, 1744, 1744);
      javaCharStream0.bufsize = 1744;
      javaCharStream0.ReInit((Reader) stringReader0, (-1351), 0);
      javaCharStream0.GetImage();
      javaCharStream0.readChar();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 457, 0);
      assertEquals((-1351), javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5305096302300272
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reader reader0 = null;
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0);
      char char0 = '\\';
      char char1 = 'C';
      JavaCharStream.hexval('C');
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('\\');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = (-853);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-853), (-853));
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '|';
      charArray0[2] = '\\';
      charArray0[3] = 'T';
      charArray0[4] = 'L';
      charArray0[5] = 'x';
      charArray0[6] = ';';
      charArray0[7] = 'q';
      charArray0[8] = 'q';
      stringReader0.read(charArray0);
      int int1 = 0;
      javaCharStream0.adjustBeginLineColumn(0, 0);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3517947524930642
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'9~Mbdy<Gild$774");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1744, 1744, 1744);
      javaCharStream0.bufsize = 1744;
      javaCharStream0.ReInit((Reader) stringReader0, (-1351), 0);
      javaCharStream0.GetImage();
      javaCharStream0.readChar();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      javaCharStream0.getLine();
      assertEquals(0, javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2854), 0, 3174);
      javaCharStream0.FillBuff();
      javaCharStream0.adjustBeginLineColumn(2, (-2854));
      assertEquals(3, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< rCke5m]3ys7J]1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.FillBuff();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('<', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'9~Mbdy<Gild$774");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1744, 1744, 1744);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufsize = 1744;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1351), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('\'', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1351), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-1351), javaCharStream0.getLine());
      assertEquals((-1351), javaCharStream0.getEndLine());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)0;
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, 2107, 68, (int) (byte) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.20547074980230556
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Reader reader0 = null;
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = '\\';
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8926925622255135
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'9~Mbdy<Gild$774");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1744, 1744, 1744);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufsize = 1744;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1351), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('\'', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1351), javaCharStream0.getLine());
      assertEquals((-1351), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1351), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-26);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3552), (byte) (-16));
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals((-16), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte) (-26), (byte)0}, byteArray0);
      
      int int0 = javaCharStream0.getLine();
      assertEquals((-1351), int0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1351), javaCharStream0.getLine());
      assertEquals((-1351), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1351), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< rCke5m]3ys7J]1");
      assertNotNull(stringReader0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 75, 1, 1);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)86;
      int int1 = sequenceInputStream0.read(byteArray0, (int) (byte)101, 1);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)101, (byte)86}, byteArray0);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6811944027730754
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'>L");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      javaCharStream0.adjustBeginLineColumn(171, 366);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(366, javaCharStream0.getBeginColumn());
      assertEquals(172, javaCharStream0.getBeginLine());
      
      javaCharStream0.nextCharInd = 366;
      assertEquals(366, javaCharStream0.getBeginColumn());
      assertEquals(172, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.57924643071779
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
      
      StringReader stringReader0 = new StringReader(":,sb~_f|^6MKfh$}e7\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 11, 65);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(':', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MB0se(ps>%k]YsbE");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, (-2026));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)92, (byte)42, (byte)118}, byteArray0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)42, (-1515));
      assertEquals(5, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)92, (byte)42, (byte)118}, byteArray0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals(0, int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = javaCharStream0.nextCharBuf;
      assertNotNull(charArray0);
      assertEquals(4096, charArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('v', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1515), javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals((-1515), javaCharStream0.getEndColumn());
      assertEquals((-1515), javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(1, 81);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2014816819517358
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1351), 0, 100);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 65, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(' ', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(65, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.mark((-1734));
      StringReader stringReader1 = new StringReader("16[L0v>q&q!hIN`H,H6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5823063443139667
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< rCke5m]3ys7J]1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream1);
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-2212), 1);
      assertNotNull(byteArrayInputStream1);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaCharStream1.ReInit((InputStream) byteArrayInputStream1, (int) (byte)0, (-1));
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(1, byteArrayInputStream1.available());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = javaCharStream1.getBeginColumn();
      assertEquals(8, byteArray0.length);
      assertEquals(0, int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('<', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.026229622995291
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1351), 0, 100);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, 65, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(' ', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getLine());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)60, (byte)0, (byte) (-27)}, byteArray0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte) (-27), 0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)60, (byte)0, (byte) (-27)}, byteArray0);
      
      javaCharStream0.adjustBeginLineColumn((-1329), (byte)0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1327), javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn(6, 1394);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1394, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1309129368508009
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'9~Mbdy<Gild$774");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1744, 1744, 1744);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufsize = 1744;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1351), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('\'', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1351), javaCharStream0.getBeginLine());
      assertEquals((-1351), javaCharStream0.getLine());
      assertEquals((-1351), javaCharStream0.getEndLine());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-16);
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< rCke5m]3ys7J]1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 22, 22);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      StringReader stringReader1 = new StringReader("R:");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.mark((-807));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1534328631561568
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
      
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 1, 65);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 413, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('I', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(413, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(413, javaCharStream0.getLine());
      assertEquals(413, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6124426358633475
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m?T");
      assertNotNull(stringReader0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      int int0 = stringReader0.read(charBuffer0);
      assertEquals(0, int0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 789, 3010);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(10, 117);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char char0 = 'b';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      int int0 = 7;
      char char1 = '-';
      char char2 = '<';
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.808887195963341
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = "com.soops.CEN4010.JMCA.JParser.JavaCharStream";
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-700), 1, 1);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1), 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string1 = javaCharStream0.GetImage();
      assertNotNull(string1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('c', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.mark((-1734));
      StringReader stringReader1 = new StringReader("/Og&jV-w\"L");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1769342230909907
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 93, 93, 93);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 1, 77);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(' ', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)0;
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4677339293271525
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< rCke5m]3ys7J]1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 789, 2348);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(117, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 60);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)95, 1280);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals((-91), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-36), (byte)95, (byte)13, (byte)1}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream1);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-91), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-36), (byte)95, (byte)13, (byte)1}, byteArray0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9388104965920017
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< rCke5m]3ys7J]1");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2497), 1);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('<', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2497), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-2497), javaCharStream0.getBeginLine());
      assertEquals((-2497), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      int int1 = JavaCharStream.hexval('b');
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1498), 62);
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals("<", string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-2497), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-2497), javaCharStream0.getBeginLine());
      assertEquals((-2497), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.23317260237386986
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 66;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-676), 66);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8V8?-p");
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      int int1 = JavaCharStream.hexval('3');
      assertEquals(3, int1);
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      char char0 = 'M';
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.20619205063323187
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< rCke5m]3ys7U]1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 22, 22);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.09087612133300153
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char char0 = 'e';
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-79);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-1), (byte) (-84), (byte)0, (byte)80, (byte) (-79)}, byteArray0);
      
      StringReader stringReader0 = new StringReader("JwK;L1Vgae$5Ugu");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = (-2922);
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, 528, 14, (-2922));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }
}
