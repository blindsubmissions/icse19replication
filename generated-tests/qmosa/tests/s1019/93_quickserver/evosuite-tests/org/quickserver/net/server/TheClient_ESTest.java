/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:52:11 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.setCommunicationLogging(false);
      theClient0.setMaxAuthTry((-685));
      theClient0.getClientCommandHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getSocketChannel();
      theClient1.setSocketChannel((SocketChannel) null);
      theClient1.getTimeout();
      theClient1.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1234);
      blockingClientHandler0.getServer();
      assertEquals("<ClientHandler-Pool#1234-ID:1>", blockingClientHandler0.getName());
      
      theClient1.setServer((QuickServer) null);
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getCommunicationLogging();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setTrusted(true);
      theClient0.getAuthenticator();
      theClient0.getCommunicationLogging();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientData((ClientData) null);
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.setTimeoutMsg("");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeoutMsg("dW)M5B4hy=,3!");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTrusted(false);
      theClient0.getSocket();
      theClient0.setTimeout((-1999));
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientEventHandler();
      theClient0.setTimeoutMsg("Y1[p3hN=(_");
      theClient0.setMaxAuthTryMsg("Q^&Z=c5!K<8Ir&");
      theClient0.getClientEvent();
      theClient0.setMaxConnectionMsg("Y1[p3hN=(_");
      theClient0.setTimeoutMsg("");
      assertEquals((-1999), theClient0.getTimeout());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getCommunicationLogging();
      TheClient theClient1 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getMaxAuthTryMsg();
      theClient1.getTimeout();
      theClient1.getSocketChannel();
      theClient1.getClientCommandHandler();
      theClient1.setMaxAuthTry(1062);
      TheClient theClient2 = new TheClient();
      theClient2.setCommunicationLogging(false);
      theClient2.setClientWriteHandler((ClientWriteHandler) null);
      theClient2.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout(0);
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient2.getTimeout();
      theClient1.getSocket();
      assertEquals(1062, theClient1.getMaxAuthTry());
      
      theClient0.getTimeoutMsg();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient2.setClientEvent(clientEvent0);
      theClient2.setServer((QuickServer) null);
      assertFalse(theClient2.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(4471);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setCommunicationLogging(true);
      theClient0.getServer();
      theClient0.setMaxConnectionMsg((String) null);
      assertEquals(4471, theClient0.getTimeout());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTry();
      theClient0.getClientEvent();
      SocketChannel.open();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[3];
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte2 = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (-484), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setSocket((Socket) null);
      theClient0.setTimeoutMsg("");
      theClient0.getSocketChannel();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setTimeoutMsg("");
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.setMaxAuthTry(0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getAuthenticator();
      theClient0.getCommunicationLogging();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setCommunicationLogging(true);
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getServer();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientAuthenticationHandler();
      theClient1.getClientEventHandler();
      theClient0.getClientData();
      theClient0.getSocketChannel();
      theClient0.setServer((QuickServer) null);
      theClient1.getMaxAuthTryMsg();
      theClient0.setSocketChannel((SocketChannel) null);
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientData();
      theClient0.setTimeoutMsg("[t@ZTQ21vtWeU^yf");
      theClient0.setClientData((ClientData) null);
      theClient0.getTrusted();
      theClient0.toString();
      theClient0.getClientCommandHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientData((ClientData) null);
      theClient0.toString();
      theClient0.getServer();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeout(0);
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxConnectionMsg("A[b%|L{[R0UG");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg((String) null);
      theClient0.getTimeout();
      theClient0.getMaxAuthTry();
      theClient0.getTrusted();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((String) null, 0, inetAddress0, (-2940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2940
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTry();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.setTimeout(0);
      theClient0.setMaxAuthTryMsg("mVx~fc");
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientData();
      theClient0.getAuthenticator();
      try { 
        QuickServer.load("mVx~fc");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeout(0);
      theClient0.getTimeoutMsg();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxAuthTry(0);
      int int0 = 936;
      theClient0.setTimeout(936);
      theClient0.getTrusted();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getCommunicationLogging();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getServer();
      theClient0.setServer((QuickServer) null);
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setServer((QuickServer) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientEvent();
      theClient0.getTimeoutMsg();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-54);
      try { 
        MockInetAddress.getByAddress("UDo.}-9DaK", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [1, -54]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }
}
