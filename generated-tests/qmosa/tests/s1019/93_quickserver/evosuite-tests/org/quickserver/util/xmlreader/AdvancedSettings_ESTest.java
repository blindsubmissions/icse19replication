/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:51:47 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("lSX{ek1[%*co");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setBacklog((-131));
      advancedSettings0.setClientIdentifier("!<Z");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("w( hg89#99L/&");
      advancedSettings0.setBacklog((-1742));
      advancedSettings0.getSocketLinger();
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getPerformancePreferencesLatency();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals("w( hg89#99L/&", advancedSettings0.getClientIdentifier());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(3743);
      advancedSettings0.setQSObjectPoolMaker("sK:3G");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(577);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("sK:3G");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // sK:3G
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setMaxThreadsForNioWrite((-1378));
      advancedSettings0.setByteBufferSize(1746);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog(1746);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientIdentifier("/q3r");
      advancedSettings0.toXML("/q3r");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      assertEquals("/q3r", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(2087);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-1023));
      advancedSettings0.setPerformancePreferencesConnectionTime(4179);
      advancedSettings0.setMaxThreadsForNioWrite(4179);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesConnectionTime(1819);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesLatency((-1023));
      advancedSettings0.setMaxThreadsForNioWrite((-1447));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getBacklog();
      advancedSettings0.getClientIdentifier();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth((-2268));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setCharset("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3423560629361564
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(245);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(245);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setQSObjectPoolMaker("In/G*;y|Cypcj#K");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getCharset();
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesLatency(1847);
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketTrafficClass("T gM3n0*P6s\"Y");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setCharset("");
      advancedSettings0.getBacklog();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setQSObjectPoolMaker(":8xr'@et!!%>-0`@o=");
      advancedSettings0.toXML(":8xr'@et!!%>-0`@o=");
      advancedSettings0.setPerformancePreferencesBandwidth((-2275));
      assertEquals("ISO-8859-1", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2917144042300284
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-51));
      advancedSettings0.setClientIdentifier("oVA{I!cslyKq~");
      advancedSettings0.setClientSocketReceiveBufferSize((-51));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize((-51));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-507));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("</max-threads-for-nio-write>\n");
      advancedSettings0.setCharset("");
      advancedSettings0.getBacklog();
      advancedSettings0.setQSObjectPoolMaker("oVA{I!cslyKq~");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
      
      advancedSettings0.setCharset((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }
}
