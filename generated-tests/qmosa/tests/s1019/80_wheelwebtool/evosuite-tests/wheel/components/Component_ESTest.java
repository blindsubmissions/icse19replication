/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:13:01 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox(xmlEntityRef0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Thead component can be added only to a Table.");
      String string0 = "";
      Form form0 = new Form("");
      form0.addFormValidationError("");
      String string1 = "";
      String string2 = "cannot coerce Float to Integer since the value (";
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("meta");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(xmlEntityRef0, "_wrapper", "Thead component can be added only to a Table.", stringSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        form0.dfn((Object) checkboxGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4681399390162084
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "=V0";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("=V0");
      Table table0 = null;
      try {
        table0 = new Table(xmlEntityRef0, "=V0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "\\\"";
      Submit submit0 = new Submit((Component) null, "\"", "\"");
      String string1 = "";
      FormElement formElement0 = submit0.value("");
      String string2 = "wheel.ErrorPage";
      // Undeclared exception!
      try { 
        formElement0.passwordInput("wheel.ErrorPage");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      ActionExpression actionExpression1 = actionExpression0.parameters(objectArray0);
      ActionExpression actionExpression2 = actionExpression1.javascript("yjUPrDw$z");
      actionExpression2.setOwner(component0);
      Form form0 = new Form(errorPage0, "puXB90]i.xt)Lvdf", actionExpression2);
      Form form1 = form0.addFormValidationRule("{", "");
      form1.dt(object0);
      // Undeclared exception!
      try { 
        component0.numberInput("puXB90]i.xt)Lvdf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "No top level component found.";
      Form form0 = new Form("No top level component found.");
      String string1 = "5D#Kx\\";
      form0.el("5D#Kx");
      form0._isBuilt();
      String string2 = "NZ0EuR'Y@\\iw=Ve";
      TableBlock tableBlock0 = null;
      try {
        tableBlock0 = new TableBlock(form0, "NZ0EuR'Y@iw=Ve");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "I,zBkEKqW@";
      Form form0 = new Form("I,zBkEKqW@");
      // Undeclared exception!
      try { 
        form0.sup((Object) "I,zBkEKqW@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "wheel.components.SelectModelFormElement";
      Form form0 = new Form("wheel.components.SelectModelFormElement");
      String string1 = "=)g$+qBbs}Z+T)LCL";
      Form form1 = form0.addFormValidationRule("wheel.components.SelectModelFormElement", "=)g$+qBbs}Z+T)LCL");
      TextInput textInput0 = new TextInput(form1, "strong", "9M-D'=7[}");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        textInput0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "ul";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ul");
      String string1 = "internal error: threshold must be less than capacity: ";
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "ul", "internal error: threshold must be less than capacity: ");
      String string2 = null;
      ElExpression elExpression0 = new ElExpression("ul");
      ElExpression elExpression1 = elExpression0.errorMessage("ul");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput((String) null, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Component component0 = null;
      String string0 = "odd9NnVbn";
      Submit submit0 = new Submit((Component) null, "odd9NnVbn", "odd9NnVbn");
      FormElement formElement0 = submit0.value("odd9NnVbn");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) formElement0;
      objectArray0[1] = (Object) "odd9NnVbn";
      objectArray0[2] = (Object) formElement0;
      objectArray0[3] = (Object) "odd9NnVbn";
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        formElement0.message("odd9NnVbn", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      DateInput dateInput0 = new DateInput(errorPage0, "", "", "");
      // Undeclared exception!
      try { 
        errorPage0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      String string0 = "puXB90]i.xt)Lvdf";
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      actionExpression0.parameters(objectArray0);
      String string1 = "yjUPBDw$z";
      component0._getRenderableChildren();
      component0._setComponentId("{");
      component0._getChildren();
      Table table0 = new Table(errorPage0, "puXB90]i.xt)Lvdf");
      Table table1 = table0.renderHint("{");
      table1.sup();
      // Undeclared exception!
      try { 
        table1.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      ActionExpression actionExpression1 = actionExpression0.parameters(objectArray0);
      ActionExpression actionExpression2 = actionExpression1.javascript("yjUPrDw$z");
      ActionExpression actionExpression3 = actionExpression2.setOwner(component0);
      Form form0 = new Form(errorPage0, "puXB90]i.xt)Lvdf", actionExpression2);
      TableBlock tableBlock0 = new TableBlock(component0);
      TableBlock tableBlock1 = tableBlock0.id("");
      Submit submit0 = new Submit(errorPage0, "puXB90]i.xt)Lvdf", "{");
      Component component1 = tableBlock1.strong((Object) submit0);
      Checkbox checkbox0 = new Checkbox(component1, "", "");
      FormElement formElement0 = checkbox0.setBinding(actionExpression3);
      Table table0 = new Table(formElement0, "");
      Table table1 = table0.renderHint(actionExpression1);
      table1.getAttributes();
      Checkbox checkbox1 = new Checkbox(checkbox0, "yjUPrDw$z", "");
      checkbox1.value("");
      // Undeclared exception!
      try { 
        tableBlock0.radio("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "N";
      Form form0 = new Form("N");
      // Undeclared exception!
      try { 
        form0.radio("N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("reader used in parser must implement Cloneable!");
      String string0 = "wheel.components.ActionExpression";
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "reader used in parser must implement Cloneable!", "wheel.components.ActionExpression");
      // Undeclared exception!
      try { 
        checkbox0.h5((Object) "reader used in parser must implement Cloneable!");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6023807799324814
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "ul";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ul");
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      String string1 = "{";
      String string2 = "";
      ActionExpression actionExpression0 = new ActionExpression("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      actionExpression0.parameters(objectArray0);
      String string3 = "yjUPrDw$z";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        component0.find((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "N";
      Form form0 = new Form("N");
      form0.addFormValidationError("N");
      // Undeclared exception!
      try { 
        form0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "P:Ps@";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("P:Ps@");
      String string1 = "6?{-sB[AbE0y";
      String string2 = "could not create reader for encoding ";
      // Undeclared exception!
      try { 
        xmlEntityRef0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      String string0 = "puXB90]i.xt)Lvdf";
      String string1 = "{";
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      ActionExpression actionExpression1 = actionExpression0.parameters(objectArray0);
      String string2 = "yjUPrDw$z";
      ActionExpression actionExpression2 = actionExpression1.javascript("yjUPrDw$z");
      actionExpression2.setOwner(component0);
      Form form0 = new Form(errorPage0, "puXB90]i.xt)Lvdf", actionExpression2);
      String string3 = "";
      DynamicSelectModel dynamicSelectModel0 = form0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("");
      String string4 = "A#od5";
      // Undeclared exception!
      try { 
        dynamicSelectModel1.translateValue("A#od5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "`.B[W\\6_M0;$Fzh";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("`.B[W\u0006_M0;$Fzh");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      String string0 = "puXB90]i.xt)Lvdf";
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      objectArray0[1] = objectArray0[0];
      actionExpression0.parameters(objectArray0);
      String string1 = "yjUPBDw$z";
      component0._getRenderableChildren();
      component0._setComponentId("{");
      component0._getChildren();
      Table table0 = new Table(errorPage0, "puXB90]i.xt)Lvdf");
      Table table1 = table0.renderHint("{");
      table1.sup();
      // Undeclared exception!
      try { 
        table1.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      ActionExpression actionExpression1 = actionExpression0.parameters(objectArray0);
      component0._getRenderableChildren();
      component0._setComponentId("{");
      component0._getChildren();
      Table table0 = new Table(errorPage0, "puXB90]i.xt)Lvdf");
      table0.renderHint("{");
      Checkbox checkbox0 = new Checkbox(errorPage0, "yjUPBDw$z", "puXB90]i.xt)Lvdf");
      FormElement formElement0 = checkbox0.setBinding("yjUPBDw$z");
      Table table1 = new Table(formElement0, "yjUPBDw$z");
      Table table2 = table0.renderHint(actionExpression0);
      table0.getAttributes();
      Checkbox checkbox1 = new Checkbox(table2, "tZ_*AoSoa_5j!", "checkbox");
      Checkbox checkbox2 = new Checkbox(errorPage0, "yjUPBDw$z", "yjUPBDw$z");
      checkbox2.value("puXB90]i.xt)Lvdf");
      TableBlock tableBlock0 = new TableBlock(table2, "&j9z-b*i");
      TableBlock tableBlock1 = tableBlock0.renderHint(actionExpression1);
      // Undeclared exception!
      try { 
        tableBlock1.radio("Cannot add a form element. No surrounding form found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.strong();
      String string0 = "puXB90]i.xt)Lvdf";
      String string1 = "{";
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Table table0 = new Table(errorPage0, "f.");
      Table table1 = table0.renderHint("f.");
      TableRow tableRow0 = table1.tr();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      // Undeclared exception!
      try { 
        tableRow0.select("AsTRekd4/", stringSelectModel0, actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      objectArray0[1] = objectArray0[0];
      actionExpression0.parameters(objectArray0);
      component0._setComponentId("{");
      component0._getChildren();
      String string0 = "";
      TextInput textInput0 = new TextInput(component0, "type", "");
      textInput0.create();
      Checkbox checkbox0 = new Checkbox(component0, "", "puXB90]i.xt)Lvdf");
      FormElement formElement0 = checkbox0.setBinding("type");
      // Undeclared exception!
      try { 
        formElement0.blockquote();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Component component0 = null;
      String string0 = "odd9NnVbn";
      Submit submit0 = new Submit((Component) null, "odd9NnVbn", "odd9NnVbn");
      submit0.value("odd9NnVbn");
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        submit0.a((Object) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.607805034342705
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.strong();
      String string0 = "{";
      String string1 = "";
      ActionExpression actionExpression0 = new ActionExpression("Could not encode string '");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Can't add components to a component that is not an instance of IContainer.";
      objectArray0[2] = (Object) "Could not encode string '";
      actionExpression0.parameters(objectArray0);
      String string2 = "yjUPrDw$z";
      boolean boolean0 = true;
      String string3 = "wheel.components.ActionExpression@0000000005";
      // Undeclared exception!
      try { 
        errorPage0.find("wheel.components.ActionExpression@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id wheel.components.ActionExpression@0000000005 on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ul");
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = new Form("ul");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ul";
      stringArray0[1] = "ul";
      stringArray0[2] = "ul";
      stringArray0[3] = "ul";
      stringArray0[4] = "head";
      stringArray0[5] = "ul";
      Component component0 = form0.attributes(stringArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        component0.abbr(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Form form0 = new Form("Can't add components to a component that is not an instance of IContainer.");
      String[] stringArray0 = new String[0];
      Form form1 = (Form)form0.attributes(stringArray0);
      Form form2 = form1._buildFromSerializedString(stringArray0);
      // Undeclared exception!
      try { 
        form2.sub((Object) form1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.484590705719442
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      String string0 = "{";
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      ActionExpression actionExpression1 = actionExpression0.parameters(objectArray0);
      ActionExpression actionExpression2 = actionExpression1.javascript("yjUPrDw$z");
      actionExpression2.setOwner(component0);
      TableBlock tableBlock0 = new TableBlock(component0, "yjUPrDw$z");
      TableBlock tableBlock1 = tableBlock0.id("puXB90]i.xt)Lvdf");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string1 = ",FkDj ~";
      Select select0 = null;
      try {
        select0 = new Select(tableBlock1, "puXB90]i.xt)Lvdf", ",FkDj ~", dynamicSelectModel0, actionExpression2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      actionExpression0.parameters(objectArray0);
      Checkbox checkbox0 = new Checkbox(component0, "yjUPBDw$z", "yjUPBDw$z");
      String string0 = "Block_1";
      FormElement formElement0 = checkbox0.validationRule("CDATA section started on line ", "Block_1");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("OyH\"c:zW;MMnziYC@");
      xmlEntityRef0.addRenderAfter(formElement0);
      xmlEntityRef0.defaultTagName();
      // Undeclared exception!
      try { 
        xmlEntityRef0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      actionExpression0.parameters(objectArray0);
      component0._getRenderableChildren();
      component0._setComponentId("{");
      component0._getChildren();
      Table table0 = new Table(errorPage0, "puXB90]i.xt)Lvdf");
      Table table1 = table0.renderHint("{");
      Component component1 = table1.sup();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("puXB90]i.xt)Lvdf");
      TextInput textInput0 = new TextInput(component0, "yjUPBDw$z", "");
      textInput0.create();
      component1.em();
      Radio radio0 = new Radio(errorPage0, "U5%Y/i%", "");
      radio0.defaultTagName();
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "`.B[W\\6_M0;$Fzh";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("`.B[W\u0006_M0;$Fzh");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p((Object) "`.B[W\u0006_M0;$Fzh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Form form0 = new Form("N");
      Form form1 = new Form("wheel.components.ActionExpression@0000000005");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "N";
      stringArray0[1] = "can't parse int value";
      stringArray0[2] = "wheel.components.ActionExpression@0000000005";
      stringArray0[3] = "N";
      stringArray0[4] = "N";
      stringArray0[5] = "wheel.components.ActionExpression@0000000005";
      stringArray0[6] = "N";
      // Undeclared exception!
      try { 
        form1.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "N";
      Form form0 = new Form("N");
      form0.addFormValidationError("N");
      String string1 = "TextInput";
      // Undeclared exception!
      try { 
        form0.buttonInput("N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "The prefix must not be null", (String) null, "The prefix must not be null");
      Class<Calendar> class0 = Calendar.class;
      XmlPullParserFactory.newInstance("The prefix must not be null", class0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.xmlpull.v1.XmlPullParserFactory";
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        dateInput0.area(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      ActionExpression actionExpression0 = new ActionExpression("puXB90]i.xt)Lvdf");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) errorPage0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      actionExpression0.parameters(objectArray0);
      component0.end();
      Image image0 = new Image(component0, "puXB90]i.xt)Lvdf", actionExpression0);
      Class<MockCalendar> class0 = MockCalendar.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance("2Z2pvEjMv:ydhm$@=", class0);
      MXSerializer mXSerializer0 = new MXSerializer();
      XmlSerializerDelegate xmlSerializerDelegate0 = new XmlSerializerDelegate(mXSerializer0);
      xmlPullWrapperFactory0.newSerializerWrapper((XmlSerializer) xmlSerializerDelegate0);
      errorPage0.remove(component0);
      String string0 = "2=s/^ER|3/Nd-&[t";
      String string1 = "h2";
      // Undeclared exception!
      try { 
        component0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "{";
      ActionExpression actionExpression0 = new ActionExpression("{");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "puXB90]i.xt)Lvdf";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "puXB90]i.xt)Lvdf";
      objectArray0[4] = object0;
      ActionExpression actionExpression1 = actionExpression0.parameters(objectArray0);
      String string1 = "yjUPrDw$z";
      actionExpression1.javascript("puXB90]i.xt)Lvdf");
      actionExpression1.setOwner(errorPage0);
      TableBlock tableBlock0 = new TableBlock(errorPage0, "puXB90]i.xt)Lvdf");
      String string2 = "}";
      // Undeclared exception!
      try { 
        tableBlock0.id("}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "L\\5ovag$1I[$Ak2BLt6";
      String string1 = "kbd";
      Radio radio0 = new Radio(errorPage0, "L\u0005ovag$1I[$Ak2BLt6", "kbd");
      FormElement formElement0 = radio0.value("L\u0005ovag$1I[$Ak2BLt6");
      String string2 = "";
      Hidden hidden0 = new Hidden(formElement0, "", "kbd");
      String string3 = "W%Ol^LSjI4-}XZ";
      FormElement formElement1 = hidden0.value("W%Ol^LSjI4-}XZ");
      // Undeclared exception!
      try { 
        formElement1.entity("kbd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
