/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:24:19 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3577);
      jSONObject0.has("false");
      String string0 = jSONObject0.optString("{}");
      assertEquals("", string0);
      
      String string1 = jSONObject0.toString(123, 123);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("*Lyxv(4~q");
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String string0 = "!M1T gM3n0*P6s\"Y";
      String string1 = "k%Ar";
      int int0 = 2495;
      try { 
        jSONObject0.getBoolean("!M1T gM3n0*P6s\"Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!M1T gM3n0*P6s\\\"Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.min(1477.43225627496, 1593.9673327978287);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(1.0);
      String string0 = "";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      Byte.compare((byte)1, (byte) (-99));
      Byte.toUnsignedInt((byte) (-42));
      JSONObject.valueToString((Object) null, 0, (byte)1);
      jSONObject0.has("R{7O<+-5^]cVM\",yD");
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(48);
      JSONObject.valueToString(integer0, 48, 48);
      Short short0 = new Short((short)45);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.Integer@0000000001";
      stringArray0[1] = "`)0Vzk)R*IBbw#/";
      stringArray0[2] = "java.lang.Integer@0000000001";
      stringArray0[3] = "java.lang.Integer@0000000001";
      stringArray0[4] = "java.lang.Integer@0000000001";
      stringArray0[5] = "java.lang.Integer@0000000001";
      stringArray0[6] = "java.lang.Integer@0000000001";
      stringArray0[7] = "java.lang.Integer@0000000001";
      stringArray0[8] = "java.lang.Integer@0000000001";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      jSONObject0.put("java.lang.Integer@0000000001", (Map) hashMap0);
      jSONObject0.keys();
      JSONObject.quote("java.lang.Integer@0000000001");
      JSONObject.doubleToString((short)45);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null, (-791.15030753234));
      assertEquals((-791.15030753234), double0, 0.01);
      
      Double double1 = new Double(698.0215912);
      Long long0 = new Long(120);
      Long long1 = new Long(120);
      hashMap0.replace(double1, long0, long1);
      String string0 = jSONObject0.toString(120);
      assertEquals("{}", string0);
      
      Double double2 = new Double((-1.0));
      Long long2 = new Long(120);
      hashMap0.put(double2, long2);
      boolean boolean0 = jSONObject0.optBoolean("1]U.vG");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Short short0 = new Short((short)160);
      Short.toUnsignedInt((short) (-924));
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "jwXP<%(M";
      Short.toUnsignedLong((short) (-924));
      jSONObject0.optDouble("jwXP<%(M", Double.NaN);
      jSONObject0.optLong("jwXP<%(M", 0L);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = null;
      JSONObject.getNames((Object) null);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9656421724371469
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ",\n";
      int int0 = 0;
      JSONObject.valueToString(",\n", 0, 0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("H)'Mp3OM");
      jSONObject0.toString();
      jSONObject0.optBoolean(" of ");
      try { 
        jSONObject0.getBoolean(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = new String[1];
      jSONObject0.put("x5um((p|g3Z>#n", (Collection) null);
      stringArray0[0] = "Expected '";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = 0;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+`u";
      stringArray0[1] = "+`u";
      stringArray0[2] = "+`u";
      stringArray0[3] = "+`u";
      Boolean.getBoolean("");
      stringArray0[4] = "+`u";
      stringArray0[5] = "+`u";
      stringArray0[6] = "+`u";
      stringArray0[7] = "+`u";
      jSONObject0.optInt("+`u");
      stringArray0[8] = "+`u";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("+`u", (Object) "+`u");
      jSONObject2.optDouble("+`u", (double) 0);
      Long long0 = new Long(0);
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long((-6L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "IYw!nP/t";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = " of ";
      stringArray0[5] = "";
      stringArray0[6] = " `1x0lW}Fn]";
      stringArray0[7] = "Aq.";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject.valueToString("", 0, 0);
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte.compare((byte) (-99), (byte) (-99));
      Byte.toUnsignedInt((byte) (-42));
      Boolean boolean0 = Boolean.valueOf("'}Ph/A&ESW%M3+/ (");
      JSONObject.valueToString(boolean0, 0, 0);
      jSONObject0.has("'}Ph/A&ESW%M3+/ (");
      boolean boolean1 = jSONObject0.isNull("java.lang.Boolean@0000000002");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9869667702348361
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "+`u";
      stringArray0[2] = "+`u";
      stringArray0[3] = "+`u";
      Boolean.getBoolean("");
      stringArray0[4] = "+`u";
      stringArray0[6] = "+`u";
      stringArray0[7] = "+`u";
      jSONObject0.optInt("+`u");
      stringArray0[8] = "+`u";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.put(stringArray0[5], (Object) "+`u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7664123555634643
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>(0);
      jSONObject0.put("U\"3Z2^{8>", (Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(0);
      int int0 = 0;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "U\"3Z2^{8>", 0, 0);
      jSONObject1.write(stringWriter1);
      Object object0 = new Object();
      Long long0 = new Long(0);
      jSONObject0.accumulate("U\"3Z2^{8>", long0);
      try { 
        jSONObject1.getInt(".I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Short short0 = new Short((short) (-15557));
      JSONObject.getNames((Object) short0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Byte.compare((byte)1, (byte) (-99));
      String string0 = null;
      jSONObject1.put("", (int) (byte) (-99));
      Short.toUnsignedInt((short)6);
      jSONObject1.optBoolean("");
      try { 
        jSONObject1.getJSONArray("wa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Short short0 = new Short((short)160);
      Short.toUnsignedInt((short) (-924));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("ha", 0L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("iscompare", (Collection) linkedList0);
      Short.toUnsignedLong((short) (-924));
      Byte.toUnsignedInt((byte) (-42));
      JSONObject.valueToString((Object) null, 2808, (byte) (-42));
      boolean boolean0 = jSONObject0.isNull("null");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      JSONObject.valueToString("", 3, 1309);
      jSONObject0.put("", false);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Float float0 = new Float((-3238.3F));
      JSONObject.valueToString(float0, 44, 0);
      String string0 = JSONObject.doubleToString((-3238.3F));
      assertEquals("-3238.300048828125", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.851937179228349
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Long long0 = new Long(0L);
      jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject1 = new JSONObject("{}");
      try { 
        jSONObject1.getInt(".I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9208096943973296
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", 8);
      Short.toUnsignedInt((short)1790);
      jSONObject1.optBoolean("{}");
      try { 
        jSONObject0.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.910465511497843
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte)34, (byte) (-50));
      Byte.compare((byte) (-89), (byte) (-89));
      JSONObject jSONObject1 = jSONObject0.append("^~P#HCCXl<U)?", byte0);
      JSONObject.getNames(jSONObject1);
      String string0 = jSONObject0.toString(83, 69);
      jSONObject1.names();
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+`u";
      stringArray0[1] = "+`u";
      stringArray0[2] = "+`u";
      stringArray0[3] = "+`u";
      Byte.compare((byte) (-99), (byte) (-99));
      JSONObject jSONObject1 = jSONObject0.put("+`u", (int) (byte) (-99));
      Short.toUnsignedInt((short) (-1721));
      jSONObject1.optBoolean((String) null);
      String string0 = "wa";
      try { 
        jSONObject0.getJSONArray("iPA.1$;r4H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iPA.1$;r4H\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.281609469343154
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>(0);
      JSONObject jSONObject1 = jSONObject0.put("U\"3Z2^{8>", (Map) hashMap0);
      jSONObject0.getString("U\"3Z2^{8>");
      jSONObject1.optBoolean("U\"3Z2^{8>", true);
      JSONObject jSONObject2 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "U\"3Z2^{8>", 0, 0);
      jSONObject2.write(stringWriter1);
      assertEquals("{}", stringWriter1.toString());
      
      Object object0 = new Object();
      Long long0 = new Long(0);
      Long long1 = new Long(0);
      Double double0 = new Double(0);
      Long long2 = new Long(0L);
      JSONObject.quote("U\"3Z2^{8>");
      jSONObject0.toString(0);
      Double double1 = new Double(0.0);
      Long long3 = new Long(0L);
      Double double2 = new Double(0.0);
      Long.getLong("{\"java.lang.String@0000000005\": {}}");
      boolean boolean0 = jSONObject0.optBoolean("{\"java.lang.String@0000000005\": {}}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7787475133823716
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      JSONObject.valueToString("", 3, 1309);
      jSONObject1.optInt("-@L&E~7 `Ch&L]=Y", 682);
      jSONObject1.opt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      JSONObject.valueToString("", (byte)1, 1309);
      jSONObject1.put("\"java.lang.String@0000000002\"", true);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9633815843099565
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", hashMap0);
      JSONObject.valueToString(hashMap0, 3998, 3);
      jSONObject1.put("", false);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2740356017218626
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte)34, (byte) (-50));
      Byte.compare((byte)90, (byte) (-110));
      Double double0 = new Double((byte) (-89));
      Double.max((byte) (-50), (byte) (-50));
      JSONObject jSONObject1 = jSONObject0.append("^~P#HCCXl<U)?", double0);
      jSONObject1.optBoolean("^~P#HCCXl<U)?");
      jSONObject0.toString(167, (int) (byte)90);
      jSONObject1.names();
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(167);
      assertEquals("167", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3517839942896461
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-59));
      Byte.toUnsignedInt((byte) (-59));
      Byte.compare((byte)34, (byte) (-50));
      Byte.compare((byte) (-59), (byte) (-59));
      String string0 = jSONObject0.toString(1330, (-789));
      assertEquals("{}", string0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string1 = JSONObject.doubleToString(197);
      assertEquals("197", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      Byte.toUnsignedInt((byte) (-89));
      byte byte1 = (byte)34;
      Byte.compare((byte)34, (byte) (-50));
      Byte.compare((byte) (-89), (byte) (-89));
      jSONObject0.append("^~P#HCCXl<U)?", byte0);
      JSONObject jSONObject1 = jSONObject0.append("ishashCode", "^~P#HCCXl<U)?");
      try { 
        jSONObject1.getInt("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3576302876552417
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double((-3286.2302));
      Long long0 = new Long(0L);
      hashMap0.put(double0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      Float float0 = new Float((-887.71F));
      String string1 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Float float0 = new Float((-887.71F));
      JSONObject.quote(",a\n");
      Object object0 = jSONObject0.remove("qL");
      assertNull(object0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8301300387695691
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", 8);
      jSONObject1.optDouble("int", (double) 8);
      jSONObject0.toString();
      Float float0 = new Float((-887.71F));
      JSONObject.quote("toL");
      jSONObject0.optJSONArray("Eq0hOXXNO.^<FD,^>o");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9495936677167384
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("A(tGfqP]/G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A(tGfqP]/G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7264323508748651
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "false";
      JSONObject.quote("false");
      jSONObject0.remove("false");
      JSONObject.valueToString(object0);
      String string1 = "lB|ez_o$r5)b04xDB\\@";
      try { 
        jSONObject0.getJSONObject("lB|ez_o$r5)b04xDB@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lB|ez_o$r5)b04xDB@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0275755818461505
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", (-884));
      jSONObject1.optDouble("wheel.json.JSONArray", (-76.344001085));
      jSONObject0.toString();
      Float float0 = new Float((float) (-884));
      JSONObject.quote("getlongBitsToDouble");
      jSONObject0.optJSONArray("~@^bat");
      jSONObject0.optJSONObject("");
      assertEquals(1, jSONObject0.length());
  }
}
