/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:40:00 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.Icon;
import javax.swing.InputVerifier;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JInternalFrame;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.StyleContext;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      jDayChooser0.getFocusTraversalKeys(0);
      int int1 = 110;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1L, 110, 110, 'c');
      KeyEvent.getExtendedKeyCodeForChar(1368);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDaysInMonth();
      Locale locale0 = jDayChooser0.locale;
      jDayChooser0.setLocale(locale0);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusBackward();
      jDayChooser0.getDayPanel();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 733, 733, 940, 940, 0, 0, 228, 0, false, 8887, 1514, (-1775), 0);
      jDayChooser0.getToolTipText((MouseEvent) mouseWheelEvent0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      JTable jTable0 = new JTable();
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      JTable jTable1 = jTableHeader0.getTable();
      Color color0 = jTable1.getSelectionForeground();
      jDayChooser0.sundayForeground = color0;
      jDayChooser0.setMonth(28);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMaxSelectableDate();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.getDay();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 14;
      floatArray0[1] = (float) 28;
      floatArray0[2] = (float) 28;
      floatArray0[3] = (float) 14;
      floatArray0[4] = (float) 14;
      floatArray0[5] = 2269.0461F;
      floatArray0[6] = (float) 28;
      floatArray0[7] = (float) 28;
      floatArray0[8] = (float) 28;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      FileMode fileMode0 = new FileMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(28);
      Time time0 = Time.valueOf(localTime0);
      jDayChooser0.maxSelectableDate = (Date) time0;
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDayBordersVisible(true);
      time0.toLocalTime();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMaxDayCharacters(28);
      Locale locale0 = Locale.US;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.drawDays();
      ActionEvent actionEvent0 = new ActionEvent(locale0, 28, "day", (-2191));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint((-714L));
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      
      jDayChooser0.getDayPanel();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=5>l>vQ5P";
      stringArray0[1] = "0";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(100);
      GapContent gapContent0 = new GapContent(0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.isFocusOwner();
      Color color0 = jTextPane0.getDisabledTextColor();
      jDayChooser0.setSundayForeground(color0);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean1 = jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource0.getEditorComponent();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 160);
      metalComboBoxEditor_UIResource0.focusGained(focusEvent0);
      metalComboBoxEditor_UIResource0.getItem();
      jDayChooser0.removeFocusListener(metalComboBoxEditor_UIResource0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getBorder();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 707, 1742L, 8940, 0, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("w)!hG:APc/iS0V89J<U");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jDayChooser0.computeVisibleRect(rectangle0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 238);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 238, "6", (-428L), 14);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.65970797168196
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.init();
      jDayChooser0.setWeekOfYearVisible(false);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-546), 1424L, 507, 507, '2', 228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      LocalDate localDate0 = MockLocalDate.now();
      java.sql.Date date0 = java.sql.Date.valueOf(localDate0);
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      jDayChooser0.getDaysInMonth();
      date0.before(date1);
      jDayChooser0.enableInputMethods(false);
      date1.clone();
      jDayChooser0.defaultMaxSelectableDate = (Date) date0;
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setMinSelectableDate(date1);
      jDayChooser0.getMaxDayCharacters();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      jDayChooser_DecoratorButton0.getRolloverIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", (Icon) null, false);
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 0, (-1054), (-1054), 'z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      jDayChooser0.getMinSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 0, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9500921451745836
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jMonthChooser0.setComponentOrientation((ComponentOrientation) null);
      jDayChooser0.decorationBackgroundVisible = true;
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      jDayChooser1.getGraphicsConfiguration();
      ImageCapabilities imageCapabilities0 = bufferedImage0.getCapabilities((GraphicsConfiguration) null);
      jDayChooser1.createVolatileImage(0, 0, imageCapabilities0);
      jDayChooser1.getKeyListeners();
      jMonthChooser0.setInputVerifier((InputVerifier) null);
      jMonthChooser0.imageUpdate((Image) null, 369, 10000, 0, (-27), (-27));
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser1.init();
      jDayChooser1.setWeekOfYearVisible(true);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      MockDate mockDate0 = new MockDate(0, 6, (-27), 10000, 6);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.firePropertyChange("menu_bar/view/attributes/showSelectedAttributes", (byte) (-76), (byte) (-76));
      jDayChooser0.firePropertyChange("`:qs2CPx5c3l_u", (byte) (-30), (byte)0);
      jDayChooser0.setDay((-907));
      jDayChooser0.firePropertyChange("`:qs2CPx5c3l_u", false, false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 100, false, jDayChooser0);
      focusEvent0.paramString();
      focusEvent0.paramString();
      JDayChooser jDayChooser1 = (JDayChooser)focusEvent0.getOppositeComponent();
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMonth(100);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isDecorationBackgroundVisible();
      focusEvent0.paramString();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      jDayChooser1.setWeekdayForeground(color0);
      jDayChooser1.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(228, "accessories.plugins.time.JDayChooser$DecoratorButton");
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser1.setWeekOfYearVisible(false);
      Locale locale0 = new Locale("unknown type,permanent,opposite=accessories.plugins.time.JDayChooser[JDayChooser,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
      assertEquals("", locale0.getCountry());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0519657880158735
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate((-111), (-111), (-307));
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getDaysInMonth();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(28);
      Time time0 = Time.valueOf(localTime0);
      jDayChooser0.maxSelectableDate = (Date) time0;
      jDayChooser0.setRequestFocusEnabled(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDayBordersVisible(true);
      time0.toLocalTime();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMaxDayCharacters(4);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setMonth(10013);
      java.sql.Date date1 = new java.sql.Date((-307));
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.updateUI();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDay(28);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.766999542076208
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getBorder();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 707, 1742L, 8940, 0, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("w)!hG:APc/iS0V89J<U");
      jInternalFrame0.getNormalBounds();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.remove(hierarchyBoundsListener0, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1435), "");
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setWeekOfYearVisible(false);
      Locale locale0 = new Locale("day");
      jDayChooser0.setMaxDayCharacters(8707);
      jDayChooser0.setMaxDayCharacters(1299);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jMonthChooser0.setComponentOrientation((ComponentOrientation) null);
      jDayChooser0.decorationBackgroundVisible = true;
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      jDayChooser1.getGraphicsConfiguration();
      ImageCapabilities imageCapabilities0 = bufferedImage0.getCapabilities((GraphicsConfiguration) null);
      jDayChooser1.createVolatileImage(0, 0, imageCapabilities0);
      jDayChooser1.getKeyListeners();
      jMonthChooser0.imageUpdate((Image) null, 369, 10000, 0, (-27), (-27));
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser1.init();
      jDayChooser1.setWeekOfYearVisible(true);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      MockDate mockDate0 = new MockDate(0, 6, (-27), 10000, 6);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
  }
}
