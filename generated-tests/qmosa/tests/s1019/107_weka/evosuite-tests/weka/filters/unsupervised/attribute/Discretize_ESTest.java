/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:39:53 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("ma6:[z8W(%2_++X[5");
      discretize0.setInvertSelection(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ma6:[z8W(%2_++X[5";
      stringArray0[1] = "ma6:[z8W(%2_++X[5";
      stringArray0[2] = "ma6:[z8W(%2_++X[5";
      stringArray0[3] = "ma6:[z8W(%2_++X[5";
      stringArray0[4] = "ma6:[z8W(%2_++X[5";
      stringArray0[5] = "pv<X4\"T2E#((:rxF/f!";
      stringArray0[6] = "ma6:[z8W(%2_++X[5";
      Discretize.main(stringArray0);
      discretize0.invertSelectionTipText();
      double double0 = 44.9043;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 44.9043;
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3404);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2788.0361335);
      SparseInstance sparseInstance0 = new SparseInstance((-2788.0361335), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getAttributeIndices();
      discretize0.setDesiredWeightOfInstancesPerInterval(3785.69462);
      discretize0.setOutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "first-last";
      stringArray0[1] = "first-last";
      String string0 = "OOLodY";
      stringArray0[2] = "OOLodY";
      stringArray0[3] = "first-last";
      stringArray0[4] = "first-last";
      stringArray0[5] = "first-last";
      stringArray0[6] = "first-last";
      discretize0.setOptions(stringArray0);
      discretize0.setBins((-5883));
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-5883));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      discretize0.useBinNumbersTipText();
      discretize0.setBins(2928);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[1] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[2] = "weka.filters.unsupervised.attribute.Discretize";
      stringArray0[3] = "Ur";
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2100));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      discretize0.m_MakeBinary = true;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.7976931348623157E308;
      discretize0.binsTipText();
      discretize0.getOptions();
      discretize0.getBinRangesString((-1));
      discretize0.getRevision();
      assertEquals(1.7976931348623157E308, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.binsTipText();
      discretize0.listOptions();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      int int0 = 362;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(362);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric_attribute", arrayList0, 6);
      // Undeclared exception!
      try { 
        instances0.remove(2372);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2372, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(0);
      discretize0.getCutPoints(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[8];
      intArray0[0] = 466;
      intArray0[1] = 1504;
      intArray0[2] = 2316;
      intArray0[3] = 14;
      intArray0[4] = 20;
      intArray0[5] = 0;
      intArray0[6] = 89;
      intArray0[7] = 226;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 3379;
      Instances instances0 = new Instances("Le+)?[&=G#='Cb", arrayList0, 3379);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      
      discretize0.setAttributeIndices("");
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[4];
      intArray0[0] = 891;
      intArray0[1] = 86;
      intArray0[2] = 0;
      intArray0[3] = 1249;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 0);
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("#");
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[4];
      intArray0[0] = 891;
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 891;
      doubleArray0[1] = (double) 891;
      doubleArray0[3] = (double) 891;
      DenseInstance denseInstance0 = new DenseInstance(891, doubleArray0);
      String string1 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      
      discretize0.getBinRangesString((-1840700267));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.binsTipText();
      discretize0.m_DefaultCols = "Optimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.";
      String[] stringArray0 = discretize0.getOptions();
      discretize0.getBinRangesString((-1));
      Discretize.main(stringArray0);
      assertTrue(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.20082764903455
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.");
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1147;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1.0), (double[]) null, intArray0, 1147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5665989181145106
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Discretize discretize0 = new Discretize("-M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.setUseBinNumbers(true);
      discretize0.setOutputFormat();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getOptions();
      discretize0.setOutputFormat();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.133628922152431
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("");
      discretize0.binsTipText();
      discretize0.getOptions();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-643));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("EMPTY_NOMINAL_CLASS");
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-3648.0);
      doubleArray1[1] = (-1054.73506792072);
      doubleArray1[2] = (-2285.17536);
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1054.73506792072);
      doubleArray2[1] = (-3648.0);
      doubleArray2[2] = (-1054.73506792072);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3648.0);
      doubleArray2[5] = (-1054.73506792072);
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-2285.17536);
      doubleArray3[1] = (-2285.17536);
      doubleArray3[2] = (-3648.0);
      doubleArray3[3] = (-1054.73506792072);
      doubleArray3[4] = (-2285.17536);
      doubleArray3[5] = (-1054.73506792072);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-3648.0);
      doubleArray4[1] = (-1062.620979);
      doubleArray4[2] = (-1054.73506792072);
      doubleArray4[3] = (-2285.17536);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-3648.0);
      doubleArray5[2] = (-1062.620979);
      doubleArray5[3] = (-3648.0);
      doubleArray5[4] = (-1054.73506792072);
      doubleArray5[5] = (-1062.620979);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-3648.0);
      doubleArray6[1] = (-2285.17536);
      doubleArray6[2] = Double.NaN;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-2134061872));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2134061872
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("g");
      discretize0.setOutputFormat();
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1803.2);
      doubleArray1[3] = 1726.34;
      doubleArray1[4] = 1316.19;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-8.99122234509242);
      doubleArray1[7] = 1.7976931348623157E308;
      doubleArray1[8] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 1726.34;
      doubleArray2[2] = (-1803.2);
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-1952257859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1952257859
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6525875347201477
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_MakeBinary = true;
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.0));
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.7976931348623157E308;
      discretize0.getCapabilities();
      discretize0.binsTipText();
      discretize0.getOptions();
      discretize0.getBinRangesString((-1));
      discretize0.getRevision();
      assertEquals(1.7976931348623157E308, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3598492521638335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("g");
      discretize0.m_UseEqualFrequency = false;
      discretize0.setOutputFormat();
      discretize0.m_ClassIndex = 2;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      discretize0.m_FindNumBins = true;
      doubleArray0[4] = 1316.19;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      doubleArray0[5] = 0.0;
      discretize0.getOptions();
      discretize0.getOptions();
      System.setCurrentTimeMillis(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("^=z'S#N8tI3");
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2428.99);
      doubleArray1[1] = (-4322.0177);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 831.418004496;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 831.418004496;
      doubleArray2[2] = (-2428.99);
      doubleArray2[3] = (-2428.99);
      doubleArray2[4] = 831.418004496;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = 831.418004496;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2428.99);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-2428.99);
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 1725.74;
      doubleArray4[3] = (-2428.99);
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 831.418004496;
      doubleArray5[1] = 831.418004496;
      doubleArray5[2] = (-2428.99);
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 831.418004496;
      doubleArray5[6] = 1725.74;
      doubleArray5[7] = 831.418004496;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-4322.0177);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 831.418004496;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-4534.128);
      doubleArray7[1] = 1725.74;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      discretize0.getCapabilities();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("h&uYpUC]>5dku/m]CS");
      discretize0.m_ClassIndex = 102;
      double[][] doubleArray0 = new double[4][0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[3] = (double) 102;
      doubleArray1[4] = (double) (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h&uYpUC]>5dku/m]CS");
      doubleArray1[5] = (double) (byte) (-102);
      doubleArray1[4] = 0.0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray1[8] = (double) (byte)0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString((byte)0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("(-inf-0],(0-0],(0-0],(0-102],(102-0],(0--102],(-102-0],(0-0],(0-0],(0-inf)", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }
}
