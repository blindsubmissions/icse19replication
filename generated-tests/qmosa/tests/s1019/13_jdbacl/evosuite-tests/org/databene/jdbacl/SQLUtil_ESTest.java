/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:12:21 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.db.Database;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.SessionRemote;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.Recover;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.jdbc4.Jdbc4SQLXML;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "";
      stringArray0[1] = "";
      stringArray0[2] = "CONSTRAINT ";
      SQLUtil.renderColumnNames(stringArray0);
      String string2 = "\"^a";
      SQLUtil.substituteMarkers("\"^a", "", "\"^a");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "wCnpjbla[K~";
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "insert";
      stringArray0[1] = "insert";
      stringArray0[2] = "aX oIn/G*;";
      stringArray0[3] = "insert";
      stringArray0[4] = "insert";
      stringArray0[5] = "insert";
      String string0 = "k)gev~g)U>=YEcrb]$L";
      SQLUtil.leftJoin("insert", stringArray0, "loread", "k)gev~g)U>=YEcrb]$L", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("aX oIn/G*;", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "\"'[X5";
      String string1 = "\\EvKqIUC";
      String string2 = "";
      DBDataType dBDataType0 = DBDataType.getInstance((-5999), "\"'[X5");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0);
      SQLUtil.substituteMarkers("\"'[X5", "EvKqIUC", defaultDBColumn0);
      String string3 = "";
      String string4 = "\\lhhP1}&+{Ib";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("lhhP1}&+{Ib", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.isDDL("S%\"cj*W0N=\"9rnr[");
      SQLUtil.typeAndName((DBObject) null);
      Boolean boolean0 = SQLUtil.mutatesStructure("S%\"cj*W0N=\"9rnr[");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.renderValue("S%\"cj*W0N=\"9rnr[");
      assertEquals("'S%\"cj*W0N=\"9rnr['", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.normalize("", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c!oVA{I!");
      String string0 = "3Q";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3Q";
      stringArray0[1] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "3Q", true, stringArray0);
      String string1 = "\t";
      dBUniqueConstraint0.setName("\t");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5-u", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      int int0 = 0;
      dBUniqueConstraint0.addColumnName("");
      DBDataType.getInstance(0, "3Q");
      SQLUtil.typeAndName(dBUniqueConstraint0);
      SQLUtil.mutatesStructure("");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "", "XSRS7.S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      DBDataType dBDataType0 = DBDataType.getInstance((-5999), "\"'[X5");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0);
      SQLUtil.removeComments("EvKqIUC");
      String string1 = "";
      String string2 = "\\lhhP1}&+{Ib";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("lhhP1}&+{Ib", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5=5>l>vQ5PPZNd0", defaultDBTable0, (-96), "5=5>l>vQ5PPZNd0");
      defaultDBTable0.addColumn(defaultDBColumn0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SQLERRP");
      assertNull(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.406159575397821
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("_");
      SQLUtil.isDML("_");
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t";
      stringArray0[1] = "java.lang.Object@5e6c9fd5";
      stringArray0[2] = "java.lang.Object@5e6c9fd5";
      stringArray0[3] = "_";
      SQLUtil.renderColumnListWithTableName("create unique indexreferences", stringArray0);
      SQLUtil.renderColumnListWithTableName("?2&4(Vck5}&TF", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "?2&4(Vck5}&TF.t, ?2&4(Vck5}&TF.java.lang.Object@5e6c9fd5, ?2&4(Vck5}&TF.java.lang.Object@5e6c9fd5, ?2&4(Vck5}&TF._, ?2&4(Vck5}&TF.null, ?2&4(Vck5}&TF.null");
      SQLUtil.addOptionalCondition("alter materialized view", stringBuilder0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.parseColumnTypeAndSize("drop tablereferences");
      SQLUtil.isDDL("drop tablereferences");
      SQLUtil.addRequiredCondition("^Ih5'p", stringBuilder1);
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.isDML("rowDeleted");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      boolean boolean0 = true;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "CONSTRAINT  PRIMARY KEY ()");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CONSTRAINT  PRIMARY KEY ()
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.normalize("", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c!oVA{I!");
      SQLUtil.normalize("", true);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop indexs%\"cj*w0n=\"9rnr[", false, (String[]) null);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("c!oVA{I!.drop indexs%\"cj*w0n=\"9rnr[", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5=5>l>vQ5PPZNd0", defaultDBTable0, (-96), "5=5>l>vQ5PPZNd0");
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      File file0 = MockFile.createTempFile("5=5>l>vQ5PPZNd0", "'", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(58L, file0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.normalize("", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c!oVA{I!");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3Q";
      stringArray0[1] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "3Q", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5-u", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "updaterowdeleted", true, stringArray0);
      dBUniqueIndex0.equals(dBPrimaryKeyConstraint0);
      dBUniqueConstraint0.addColumnName("");
      DBDataType dBDataType0 = DBDataType.getInstance(8, "3Q");
      dBUniqueIndex0.toString();
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5-u", dBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBDataType0.isAlpha();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      defaultDBColumn0.setName("%:E#0QL3sQ 6)lyv");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.isQuery("2200M");
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder1 = stringBuilder0.append('2');
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("2CONSTRAINT 3Q ", stringBuilder1.toString());
      
      boolean boolean0 = SQLUtil.isDML("c!oVA{I!");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-5999), "\"'[X5");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0);
      SQLUtil.removeComments("\"'[X5");
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", ", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9559838465843622
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",", (DBSchema) null);
      defaultDBTable0.getIndexes();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.mutatesDataOrStructure("+H");
      String string0 = "i#";
      // Undeclared exception!
      try { 
        DBDataType.getInstance(",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6434177197931799
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.normalize("", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c!oVA{I!");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3Q";
      stringArray0[1] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "3Q", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5-u", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "updaterowdeleted", true, stringArray0);
      dBUniqueIndex0.equals(dBPrimaryKeyConstraint0);
      dBUniqueConstraint0.addColumnName("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "3Q");
      dBUniqueIndex0.toString();
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5-u", dBTable0, dBDataType0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (3Q, )", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.normalize("", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c!oVA{I!");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3Q";
      stringArray0[1] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "3Q", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5-u", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (3Q, )", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(20L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("call", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("delete");
      PrintWriter printWriter0 = mockPrintWriter0.append('R');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2686052856349663
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "_";
      SQLUtil.mutatesDataOrStructure("_");
      SQLUtil.isDML("_");
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String[] stringArray0 = new String[6];
      String string1 = "t";
      stringArray0[0] = "t";
      stringArray0[1] = "java.lang.Object@6763d56a";
      String string2 = "y$y'Nsod8l(";
      String string3 = " Okb(BJBwQ1}U'#t";
      SQLUtil.substituteMarkers("java.lang.Object@6763d56a", "_", "t");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("java.lang.Object@6763d56a", stringBuilder0);
      stringBuilder0.reverse();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("y$y'Nsod8l(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: y$y'Nsod8l(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getComponents();
      String string0 = SQLUtil.normalize("N;o/'Dm'[e`!r`_", true);
      assertEquals("N ; o / 'Dm' [ e ` ! r  ` _", string0);
      
      String[] stringArray0 = new String[1];
      String string1 = SQLUtil.renderColumnListWithTableName("OR b5[-?", stringArray0);
      assertEquals("OR b5[-?.null", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4195006318174315
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("_");
      SQLUtil.isDML("_");
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t";
      stringArray0[1] = "java.lang.Object@6803f3c4";
      stringArray0[2] = "java.lang.Object@6803f3c4";
      stringArray0[3] = "_";
      SQLUtil.renderColumnListWithTableName("y$y'Nsod8l(", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("t", stringBuilder0);
      stringBuilder0.reverse();
      SQLUtil.parseColumnTypeAndSize("alter materialized view");
      SQLUtil.isDDL("java.lang.Object@6803f3c4");
      SQLUtil.addRequiredCondition("y$y'Nsod8l(", stringBuilder0);
      SQLUtil.normalize("y$y'Nsod8l(.t, y$y'Nsod8l(.java.lang.Object@6803f3c4, y$y'Nsod8l(.java.lang.Object@6803f3c4, y$y'Nsod8l(._, y$y'Nsod8l(.null, y$y'Nsod8l(.null", false);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "(";
      SQLUtil.innerJoin("(", stringArray0, "(", "6#FkH>s", stringArray0);
      SQLUtil.mutatesDataOrStructure("6#FkH>s");
      SQLUtil.join("( as 6#FkH>s on (.( = 6#FkH>s.( and (.null = 6#FkH>s.null and (.null = 6#FkH>s.null and (.( = 6#FkH>s.(", "", stringArray0, "drop materialized viewjava.lang.object@1facae88", "( as 6#FkH>s on (.( = 6#FkH>s.( and (.null = 6#FkH>s.null and (.null = 6#FkH>s.null and (.( = 6#FkH>s.(", stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "MO[";
      stringArray1[1] = null;
      stringArray1[2] = "6#FkH>s";
      stringArray1[3] = "( as 6#FkH>s on (.( = 6#FkH>s.( and (.null = 6#FkH>s.null and (.null = 6#FkH>s.null and (.( = 6#FkH>s.(";
      stringArray1[4] = null;
      stringArray1[5] = "6#FkH>s";
      stringArray1[6] = "( as 6#FkH>s on (.( = 6#FkH>s.( and (.null = 6#FkH>s.null and (.null = 6#FkH>s.null and (.( = 6#FkH>s.(";
      stringArray1[7] = "call";
      String string0 = SQLUtil.innerJoin("MO[", stringArray1, "ILl8XDR=STcdd@", (String) null, stringArray1);
      SQLUtil.mutatesStructure("exec8wfof,b pj");
      String string1 = SQLUtil.removeComments("drop table8wfof,b pj");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("delete_");
      String string0 = "";
      String string1 = "wJq?B>-!IX";
      boolean boolean0 = false;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      File file0 = FileUtil.canonicalFile("wJq?B>-!IX");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5-u");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3Q";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "3Q", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5-u", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "updaterowdeleted", true, stringArray0);
      dBUniqueIndex0.equals(dBPrimaryKeyConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "3Q");
      dBUniqueIndex0.toString();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5-u", dBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBDataType0.isAlpha();
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      defaultDBColumn0.setName("%:E#0QL3sQ 6)lyv");
      SQLUtil.parseColumnTypeAndSize("updaterowdeleted");
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("P qA{:w( hg8", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition(" and ", stringBuilder0);
      assertEquals(" and ", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1631394399251493
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" NOT", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.mutatesDataOrStructure("select into");
      PipedReader pipedReader0 = new PipedReader(32767);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBDataType dBDataType0 = DBDataType.getInstance(32767, "- 0");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UzZJ*UQc", defaultDBTable0, dBDataType0, (Integer) (-4));
      defaultDBColumn0.getForeignKeyConstraint();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("- 0", "select into", (String) null);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.598565214887637
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("_");
      SQLUtil.isDML("_");
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t";
      stringArray0[1] = "java.lang.Object@5f200a26";
      SQLUtil.substituteMarkers("java.lang.Object@5f200a26", "_", "t");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("java.lang.Object@5f200a26", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "java.lang.Object@5f200a26";
      SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      File file0 = MockFile.createTempFile("y$y'Nsod8l(", (String) null, (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.typeAndName((DBObject) null);
      SQLUtil.isQuery("SELECT * FROM null WHERE java.lang.Object@5f200a26 = 't'");
      SQLUtil.mutatesStructure("t");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("left");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SQLUtil.mutatesDataOrStructure("y(5ke\u0001f3}kX.{ar/");
      SQLUtil.typeAndName(defaultDBTable0);
      InsertNode insertNode0 = new InsertNode();
      Properties properties0 = insertNode0.targetProperties;
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("y(5ke\u0001f3}kX.{ar/", (-1573), "y(5ke\u0001f3}kX.{ar/", ".", (Properties) null, "V#zJV[8o$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.postgresql.jdbc2.AbstractJdbc2Connection", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5=5>l>vQ5PPZNd0", defaultDBTable0, (-96), "5=5>l>vQ5PPZNd0");
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      File file0 = MockFile.createTempFile("5=5>l>vQ5PPZNd0", "'", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9328065726143313
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" NOT", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("select in_9to");
      PipedReader pipedReader0 = new PipedReader(32767);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBDataType dBDataType0 = DBDataType.getInstance(32767, "- 0");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UzZJ*UQc", defaultDBTable0, dBDataType0, (Integer) (-4));
      defaultDBColumn0.getForeignKeyConstraint();
      int int0 = (-993);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDataDescriptorGenerator();
      String string0 = "Q+iPhl}N+}#GG\"ozc\\";
      FromVTI fromVTI0 = new FromVTI();
      // Undeclared exception!
      try { 
        fromVTI0.getSchemaDescriptor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.FromTable", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.equals("");
      defaultDBTable0.getReferrers();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getComponents();
      SQLUtil.normalize("N;o/'Dm'[e`!r`_", false);
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      int int0 = (-784945009);
      DBDataType dBDataType0 = DBDataType.getInstance((-784945009), "N;o/'Dm'[e`!r`_");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-2));
      Integer.getInteger((String) null, integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";%h<S=i", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c!oVA{I!");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(9223372036825200000L);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("call");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "5-u";
      stringArray0[2] = "5-u";
      stringArray0[3] = "5-u";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9879707323409543
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("_");
      SQLUtil.isDML("_");
      Object object0 = new Object();
      SQLUtil.normalize("_", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t";
      stringArray0[1] = "_";
      stringArray0[2] = "_";
      stringArray0[3] = "t";
      SQLUtil.renderColumnListWithTableName("y$y'Nsod8l(", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("t", stringBuilder0);
      stringBuilder0.reverse();
      SQLUtil.parseColumnTypeAndSize("5%z6|nE#\"6-i");
      SQLUtil.isDDL("5%z6|nE#\"6-i");
      SQLUtil.addRequiredCondition("FQq[UimuQ&*3", stringBuilder0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLUtil.normalize("FQq[UimuQ&*3", false);
      System.setCurrentTimeMillis(0L);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID(1152L, 992L, 0);
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTableDescriptor((UUID) basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("X8-57=M;RT[o4m", true);
      String string0 = "into";
      DBCatalog dBCatalog0 = new DBCatalog("into");
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("into", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'into'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5=5>l>vQ5PPZNd0", defaultDBTable0, (-96), "5=5>l>vQ5PPZNd0");
      String string0 = "}FRI&H[X3'~^SZ=in";
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "}FRI&H[X3'~^SZ=in", true, "5=5>l>vQ5PPZNd0");
      dBNotNullConstraint0.toString();
      SQLUtil.typeAndName(defaultDBTable0);
      int int0 = (-412);
      int int1 = 38;
      Random.setNextRandom(38);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("<aLf#Z\"+z''");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '<aLf#Z\"+z''' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5857708352080968
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(20L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("call", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("delete");
      mockPrintWriter0.append('R');
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT call FOREIGN KEY () REFERENCES call()", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("CLOB");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CLOB";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "CLOB", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("delete", false, dBUniqueConstraint0);
      dBUniqueConstraint0.addColumnName("CLOB");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      File file0 = FileUtil.canonicalFile("CLOB");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertNotSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5798439652180236
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5=5>l>vQ5PPZNd0", defaultDBTable0, (-96), "5=5>l>vQ5PPZNd0");
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create table");
      System.setCurrentTimeMillis((-96));
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM null WHERE ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(57, "'");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SELECT * FROM null WHERE ", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn1.getForeignKeyConstraint();
      SQLUtil.renderValue((Object) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SESSIONS", true, stringArray0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      System.setCurrentTimeMillis((-441L));
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.20619205063323187
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("f#Yp#7koBk}2]6", " or ", (VersionNumber) null);
      defaultDatabase0.getCatalog("f#Yp#7koBk}2]6");
      DBSchema dBSchema0 = new DBSchema("HB6RcyCe", (DBCatalog) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" or ", dBSchema0);
      defaultDBTable1.getReferrers();
      String string0 = SQLUtil.normalize("P\"7K4]vm~=w", true);
      String string1 = SQLUtil.removeComments("[@5>/XjB");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      String string0 = "Z=Gjn%)TA";
      SQLUtil.mutatesDataOrStructure("drop table-#rf{%scnt@$kg4");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = "create table8\\ !`%?";
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("create table8 !`%?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create table8 !`%?'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char char0 = '0';
      Character character0 = new Character('0');
      SQLUtil.renderValue(character0);
      String string0 = "alter materialized view";
      String string1 = "\\}^/";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}^/");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("LG!MVcuA)c{{", false);
      assertEquals("LG ! MVcuA) c { {", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "5<$+501 pUUc";
      stringArray0[6] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5<$+501 pUUc", false, dBUniqueConstraint0);
      dBUniqueConstraint0.addColumnName("delete");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("5<$+501 pUUc");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[1], false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4623588993762027
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5=5>l>vQ5PPZNd0", defaultDBTable0, (-96), "5=5>l>vQ5PPZNd0");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5=5>l>vQ5PPZNd0";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5=5>l>vQ5PPZNd0", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 5=5>l>vQ5PPZNd0 FOREIGN KEY (5=5>l>vQ5PPZNd0) REFERENCES null(5=5>l>vQ5PPZNd0)", string0);
      
      String string1 = SQLUtil.normalize("--   next: ", false);
      assertEquals("-- next :", string1);
  }
}
