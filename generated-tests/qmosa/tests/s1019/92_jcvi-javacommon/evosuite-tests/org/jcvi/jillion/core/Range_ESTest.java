/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:50:52 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-665L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-665L), (-1L));
      range_Builder0.contractEnd((-665L));
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-665L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8309404302537744
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      long long0 = 2117L;
      Range range0 = Range.ofLength(2117L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-2168L);
      range_Builder0.shift((-2168L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-775L);
      long long1 = 0L;
      Range.of(range_CoordinateSystem0, (-775L), 0L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-957L));
      long long0 = (-13L);
      range_Builder0.copy();
      range_Builder0.shift(1L);
      range_Builder0.contractEnd((-13L));
      range_Builder0.expandEnd(3404L);
      range_Builder0.expandBegin(740L);
      String string0 = ")gev~g)U>=YEcrb";
      // Undeclared exception!
      try { 
        Range.parseRange(")gev~g)U>=YEcrb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )gev~g)U>=YEcrb into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7709738809556863
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.83412587655526
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.toString();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8215638078603638
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 1278L;
      Range range0 = Range.ofLength(1278L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5460698668031165
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1898L), (-107L));
      range0.complement(range1);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("45f!mZ(Y)lmU^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.45f!mZ(Y)lmU^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.split((-4639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.9512437185814298
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-66L), 3841L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(3841L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5460698668031165
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      range1.getLength();
      Range range2 = range0.asRange();
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-128L), 1L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8918202981106305
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      range0.getEnd();
      Range range1 = Range.of(212L);
      Range range2 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range3);
      Range range4 = Range.of((-1029L));
      range4.startsBefore(range0);
      Range range5 = range0.intersection(range4);
      range5.isSubRangeOf(range4);
      range2.spliterator();
      range4.complement(range3);
      Range range6 = Range.of(1L);
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range6.toString(range_CoordinateSystem1);
      range6.endsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getLength();
      Range.of(range_CoordinateSystem2, 212L, 330L);
      range4.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range5.toString();
      range3.complement(range4);
      range_Builder0.copy();
      range5.isSubRangeOf(range3);
      range1.endsBefore(range5);
      range2.toString();
      range0.startsBefore(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3276698862269427
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-3230L));
      range0.getBegin();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Object object0 = new Object();
      Range range1 = Range.of((-3230L), (-1L));
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Wy3ms-pC\fC", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Wy3ms-pC\fC into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.713284912733494
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(212L);
      Range range1 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range3 = Range.of((-1029L));
      range1.spliterator();
      range3.complement(range2);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(1L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range4.toString(range_CoordinateSystem1);
      assertEquals("[ 2 .. 2 ]/RB", string0);
      
      Range range5 = Range.of(1172L);
      range5.intersection(range2);
      assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range5.getEnd(range_CoordinateSystem2);
      assertEquals(1173L, long0);
      
      Range range6 = Range.parseRange("[ 2 .. 2 ]/RB", range_CoordinateSystem2);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.068761647817553
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      long long0 = range0.getEnd();
      assertEquals(211L, long0);
      
      Range range1 = Range.of(212L, 2202L);
      long long1 = range0.getBegin();
      assertEquals(0L, long1);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6044891053031933
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      long long0 = range0.getEnd();
      assertEquals(211L, long0);
      
      Range range1 = Range.of(212L);
      Range range2 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range3);
      Range range4 = Range.of((-1029L));
      boolean boolean0 = range4.startsBefore(range0);
      Range range5 = range0.intersection(range4);
      range5.isSubRangeOf(range4);
      range2.spliterator();
      List<Range> list0 = range4.complement(range3);
      assertTrue(list0.contains(range4));
      
      range2.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Object object0 = new Object();
      Long long1 = new Long(1L);
      boolean boolean1 = range5.equals(long1);
      assertFalse(boolean1 == boolean0);
      assertTrue(range5.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.433196737323844
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2202L, 2202L);
      Range.of(211L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-9223372036854775808L);
      Range range1 = Range.of(range_CoordinateSystem0, 211L, (-9223372036854775808L));
      range1.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 2202L, 211L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5591455657460194
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.split(1918L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Agd kjA", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Agd kjA into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.134162458586648
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of((-66L), 3841L);
      range0.spliterator();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-66L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -66 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.401720133779181
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      range0.getEnd();
      Range.of(212L);
      Range range1 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.of((-1029L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967295L, 212L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8285829969140677
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of((-66L), 3841L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(3841L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1364L), (-66L));
      range0.split(3841L);
      range1.toString(range_CoordinateSystem0);
      Range range2 = Range.of(3841L);
      range2.intersects(range1);
      range2.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.608439781412353
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range2 = Range.of((-1029L));
      range0.spliterator();
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      
      Range range3 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range3.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 1 ]/0B", string0);
      
      boolean boolean0 = range1.isSubRangeOf(range3);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range1.complement(range2);
      range_Builder0.copy();
      Range range4 = Range.ofLength(2046L);
      boolean boolean1 = range1.isSubRangeOf(range4);
      assertTrue(range1.isEmpty());
      assertFalse(range4.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8918202981106305
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 0L, 335L);
      range0.endsBefore(range1);
      long long0 = range1.getLength();
      assertEquals(336L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem3, 0L, 335L);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range0.toString();
      List<Range> list0 = range0.complement(range2);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
      
      range_Builder0.copy();
      range2.isSubRangeOf(range1);
      range0.endsBefore(range2);
      range0.toString();
      range2.startsBefore(range0);
      Range.Comparators.values();
      long long1 = range1.getBegin();
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8096782340777837
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = 2116L;
      Range range0 = Range.of(2116L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.453606935267039
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      long long0 = range0.getEnd();
      assertEquals(211L, long0);
      
      Range.of(212L);
      Range range1 = Range.of(211L, 211L);
      range1.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(211L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list1.size());
      assertTrue(list0.contains(range1));
      assertFalse(list1.contains(range0));
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5450107617583364
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      long long0 = range0.getEnd();
      assertEquals(211L, long0);
      
      Range.of(212L);
      Range range1 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1325L), (-547L));
      long long1 = range1.getBegin();
      assertEquals((-547L), long1);
      
      Range range3 = Range.ofLength(9223372036854775807L);
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3424640084870947
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.ofLength(208L);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      Range range1 = Range.of((-2030L), 1L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Wy3ms-pC\fC", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Wy3ms-pC\fC into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.7049134101428036
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      range0.getEnd();
      Range range1 = Range.of(212L);
      Range range2 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range3);
      Range range4 = Range.of((-1029L));
      boolean boolean0 = range4.startsBefore(range0);
      assertTrue(boolean0);
      
      Range range5 = range0.intersection(range4);
      range5.isSubRangeOf(range4);
      range2.spliterator();
      List<Range> list0 = range4.complement(range3);
      assertTrue(list0.contains(range4));
      
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range3.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      range5.endsBefore(range3);
      range0.getLength();
      Range range6 = Range.of(range_CoordinateSystem1, 212L, 330L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range5.toString();
      range3.complement(range4);
      range_Builder0.copy();
      boolean boolean1 = range5.isSubRangeOf(range3);
      boolean boolean2 = range1.endsBefore(range5);
      assertFalse(boolean2 == boolean1);
      
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range5.getEnd(range_CoordinateSystem2);
      assertTrue(range5.isEmpty());
      assertSame(range5, range3);
      
      range_CoordinateSystem0.toString();
      String string1 = range6.toString(range_CoordinateSystem0);
      assertEquals("[ 211 .. 330 ]/SB", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9482560524834778
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 2202L;
      Range.of(2202L, 2202L);
      long long1 = 211L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = (-9223372036854775801L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 211L, (-9223372036854775801L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 211, -9223372036854775801 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4264851779347163
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of((-66L), 3841L);
      range0.spliterator();
      range0.iterator();
      range0.split(3841L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3841L, 3841L);
      Object object0 = new Object();
      range1.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem2);
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 3841L, (-66L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1487931944695373
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854775807L;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.parseRange("Y#1{yYqQjs7<w\"@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Y#1{yYqQjs7<w\"@ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6525875347201477
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 2202L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.toString(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.723795252727279
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 0L, 335L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem3, 0L, 335L);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range0.toString();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      String string0 = range0.toString();
      assertEquals("[ -1 .. -1 ]/0B", string0);
      
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
      assertTrue(list0.contains(range2));
      
      range_Builder0.copy();
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      range1.endsBefore(range2);
      range1.toString();
      range0.getEnd(range_CoordinateSystem1);
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      String string1 = range1.toString(range_CoordinateSystem4);
      assertEquals("[ 0 .. 335 ]/RB", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5465711571026395
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Comparators.values();
      Range.of(2202L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2202L, (-9223372036854775808L));
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2202L, 2202L);
      Range range2 = Range.of(330L);
      range2.toString();
      range1.isSubRangeOf(range0);
      range2.toString();
      Range range3 = Range.of((-9223372036854775808L));
      range3.startsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.10470560102989
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      String string0 = "*.=$l_;X";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.parseRange("*.=$l_;X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse *.=$l_;X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5931832947537443
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-4998L), (-4998L));
      Object object0 = new Object();
      Range.of((-1L), 9223372036854771968L);
      Range range0 = Range.ofLength(127L);
      range0.spliterator();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0052974028533725
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854771968L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 9223372036854771968L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 335L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854771968L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-2331L);
      Range.of((-2331L), (-2331L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4831105681579975
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2202L, 2202L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 255L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 255L, 4294967295L);
      Range range3 = range0.intersection(range1);
      assertSame(range3, range0);
      assertFalse(range3.isEmpty());
      
      List<Range> list0 = range2.complement(range1);
      assertFalse(list0.contains(range2));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.419772664958775
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1L, 1372L);
      Range.of(range_CoordinateSystem0, 2330L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("t:UlGws@h>PG!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse t:UlGws@h>PG! into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1765504721157924
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.410784075374691
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of((-1L), (-1L));
      range0.equals(range_Builder0);
      Range.CoordinateSystem.values();
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.643128144210154
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 335L, 2147483647L);
      Range range2 = Range.of(1667L, 9223372036854775807L);
      range0.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 426L, 2147483647L);
      range2.equals(range_CoordinateSystem2);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      range2.toString();
      range_Builder0.copy();
      range1.isSubRangeOf(range0);
      range2.complement(range3);
      Range range4 = null;
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.7637209164923124
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-4230L), 2147483646L);
      boolean boolean0 = range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 1457L, 2147483646L);
      Range range3 = Range.of(1457L);
      Object object0 = new Object();
      range3.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      range0.toString();
      range_Builder0.copy();
      boolean boolean1 = range2.isSubRangeOf(range1);
      assertTrue(boolean1);
      
      List<Range> list0 = range1.complement(range3);
      assertEquals(2, list0.size());
      
      boolean boolean2 = range2.endsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem3, (-4230L), 2369L);
      range4.toString();
      boolean boolean3 = range2.startsBefore(range3);
      assertTrue(boolean3 == boolean0);
      
      Range.Comparators.values();
      range0.getBegin();
      range4.toString(range_CoordinateSystem3);
      boolean boolean4 = range3.equals(range_CoordinateSystem1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.389501463896055
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of(2202L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-5537L), 2147482190L);
      Long.getLong("org.jcvi.jillion.core.Ranges");
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-5537L), 2202L);
      Range.of(9223372036854775478L);
      Object object0 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }
}
