/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:27:49 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ComponentSampleModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferUShort;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.MultiPixelPackedSampleModel;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;
import java.time.Month;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.media.jai.PlanarImage;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.dto.VisualPageListItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      visualListModel0.moveUpIndex((-1770));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1770);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1770);
      intArray0[4] = 0;
      intArray0[5] = (-1770);
      intArray0[6] = (-1770);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.moveUpIndex((-685));
      visualListModel0.getElements();
      visualListModel0.moveDownIndex(0);
      visualListModel0.elementsChanged();
      visualListModel0.clearData();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      int[] intArray1 = new int[3];
      intArray1[0] = (-685);
      visualListModel0.getListDataListeners();
      Stack<Month> stack0 = new Stack<Month>();
      JComboBox<Month> jComboBox0 = new JComboBox<Month>(stack0);
      visualListModel0.removeListDataListener(jComboBox0);
      intArray1[1] = (-1770);
      intArray1[2] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.addAllElements(2124, (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getValidElements();
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.moveUpIndex(0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int int0 = 1072;
      String string0 = null;
      String string1 = "58Q\\@:x0+tR";
      float[] floatArray0 = new float[0];
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      int int1 = (-2116);
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 330;
      intArray0[2] = (-2116);
      int int2 = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 574;
      intArray0[5] = (-3405);
      intArray0[6] = 574;
      intArray0[7] = 0;
      ComponentSampleModel componentSampleModel0 = null;
      try {
        componentSampleModel0 = new ComponentSampleModel(574, (-3405), 0, (-2116), 0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-3405) and height (0) must be > 0
         //
         verifyException("java.awt.image.SampleModel", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 2880;
      intArray0[1] = 353;
      intArray0[2] = 0;
      intArray0[3] = (-4494);
      intArray0[4] = 746;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.getElements();
      int int0 = 0;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.removeElements(0, 0, true);
      visualListModel0.subList(0, 744, true);
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte byte0 = (byte)97;
      byteArray0[7] = (byte)97;
      byte byte1 = (byte)58;
      byteArray0[8] = (byte)58;
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-1272), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 553;
      intArray0[1] = 0;
      int int0 = 2429;
      intArray0[2] = 2429;
      intArray0[3] = (-3358);
      intArray0[4] = 0;
      visualListModel0.undeleteElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      int int1 = (-1872);
      int int2 = 255;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2429;
      floatArray0[1] = (float) (-3358);
      floatArray0[2] = (float) (-1872);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-1872), 255, floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = 93;
      intArray0[1] = (-4);
      intArray0[2] = (-502);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2342;
      intArray0[6] = (-453);
      visualListModel0.moveUpIndexes(intArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-2551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2551)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) stack0);
      visualListModel0.clearData();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      visualListModel0.reverseElements(intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1}, intArray0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel0.elementsChanged();
      visualListModel0.getListDataListeners();
      intArray0[0] = 0;
      visualListModel0.elementsChanged();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.data = null;
      intArray0[1] = (-3096);
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.appendAllElements(arrayDeque0);
      visualListModel0.removeElements((-573), 0, false);
      visualListModel0.getElementAt(7);
      visualListModel0.addElement((VisualPageListItem) null);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 107;
      visualListModel0.moveDownIndex((-883));
      intArray0[2] = 2106;
      visualListModel0.clearData();
      intArray0[3] = 1580;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.data = (Vector<VisualPageListItem>) stack0;
      intArray0[4] = 366;
      intArray0[5] = 1;
      int int0 = 0;
      // Undeclared exception!
      try { 
        stack0.removeElementAt(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      intArray0[1] = 0;
      intArray0[2] = 1920;
      visualListModel0.removeElements(intArray0, false);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-1089), 11);
      assertNull(collection0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      visualListModel0.subList((-1), 0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(650, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 650
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-731));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -731
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7782333057997077
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      int int0 = 0;
      visualListModel0.elementsChanged();
      boolean boolean0 = true;
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      visualListModel0.addAllElements(0, collection0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndex(0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 90;
      intArray0[2] = 270;
      intArray0[3] = 1079;
      intArray0[4] = 82;
      intArray0[5] = (-3366);
      visualListModel0.moveUpIndexes(intArray0);
      intArray0[6] = 0;
      intArray0[7] = 65535;
      visualListModel0.reverseElements(intArray0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(hashSet0);
      assertEquals(0, hashSet0.size());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-4490), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4490
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>(8);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayList0);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.moveUpIndex(0);
      visualListModel0.getElements();
      visualListModel0.moveDownIndex(202);
      visualListModel0.elementsChanged();
      visualListModel0.clearData();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getListDataListeners();
      Stack<Month> stack0 = new Stack<Month>();
      JComboBox<Month> jComboBox0 = new JComboBox<Month>(stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeListDataListener(jComboBox0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-685);
      intArray0[1] = 0;
      intArray0[2] = 202;
      intArray0[3] = (-1);
      intArray0[4] = 202;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      ArrayList<VisualPageListItem> arrayList1 = new ArrayList<VisualPageListItem>();
      visualListModel1.addAllElements((-2053), (Collection<VisualPageListItem>) arrayList1);
      assertEquals(0, arrayList1.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 1;
      intArray0[2] = (-1340);
      intArray0[3] = 624;
      visualListModel0.moveDownIndexes(intArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      visualListModel0.removeElements(1, (-2102), true);
      visualListModel0.addAllElements(10, (Collection<VisualPageListItem>) linkedList0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.220025327834538
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 6005;
      intArray0[1] = 815;
      intArray0[2] = (-874);
      intArray0[3] = 1960;
      intArray0[4] = (-2338);
      visualListModel0.moveDownIndexes(intArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      linkedList1.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList1);
      visualListModel0.removeElements((-2102), 815, true);
      visualListModel0.removeElements((-2840), 6005, true);
      visualListModel0.clearData();
      visualListModel0.addAllElements((-1639), (Collection<VisualPageListItem>) linkedList0);
      visualListModel0.getValidElements();
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.getListDataListeners();
      visualListModel0.elementsChanged();
      visualListModel0.elementChanged((VisualPageListItem) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(3861);
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getElements();
      visualListModel0.getElementAt(0);
      visualListModel1.getElementAt(0);
      visualListModel1.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.removeElements(0, 2964, true);
      visualListModel3.getElements();
      visualListModel3.removeElements(intArray0, true);
      visualListModel0.getValidElements();
      Object object0 = visualListModel3.getElementAt(32);
      assertNull(object0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 1;
      intArray0[2] = (-1340);
      intArray0[3] = 624;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.subList((-1789), 10);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      visualListModel0.getValidElements();
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 624);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.69240886298655
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      int int1 = 0;
      visualListModel0.elementsChanged();
      visualListModel0.getListDataListeners();
      visualListModel0.elementsChanged();
      visualListModel0.elementChanged((VisualPageListItem) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      int int2 = (-2102);
      visualListModel0.removeElements(0, 0, false);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedList0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 1;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.subList((-1340), (-1789));
      visualListModel0.getValidElements();
      visualListModel1.moveDownIndexes(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.addElementAt((VisualPageListItem) null, 237);
      Vector<VisualPageListItem> vector0 = visualListModel2.data;
      vector0.add((VisualPageListItem) null);
      visualListModel3.setData(vector0);
      VisualListModel visualListModel4 = new VisualListModel();
      int int0 = visualListModel4.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      visualListModel0.elementsChanged();
      visualListModel0.getListDataListeners();
      visualListModel0.elementsChanged();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.elementChanged((VisualPageListItem) null);
      int[] intArray0 = new int[0];
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9915093613566137
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.getListDataListeners();
      visualListModel0.elementsChanged();
      visualListModel0.elementChanged((VisualPageListItem) null);
      int[] intArray0 = new int[4];
      visualListModel0.getValidElements();
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 8);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(stack0);
      visualListModel1.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.undeleteElements(intArray0);
      assertNotSame(visualListModel0, visualListModel1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      visualListModel0.removeElements(624, 624, true);
      visualListModel0.addAllElements(3011, (Collection<VisualPageListItem>) linkedList0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      int int0 = visualListModel0.getSize();
      int[] intArray1 = new int[0];
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      visualListModel1.rotateClockwiseElements(intArray1);
      VisualListModel visualListModel2 = new VisualListModel();
      int int1 = visualListModel2.getSize();
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 45;
      visualListModel0.moveDownIndexes(intArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel0.addElementAt(visualPageListItemArray0[1], (-284));
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      vector0.add(visualPageListItemArray0[2]);
      visualListModel0.setData(vector0);
      int int0 = visualListModel1.getSize();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9369779029243386
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.getListDataListeners();
      visualListModel0.elementChanged((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.removeElements(0, 0, false);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedList0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1716;
      intArray0[3] = 0;
      intArray0[4] = (-707);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.addAllElements(744, (Collection<VisualPageListItem>) linkedList0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 744;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 1716;
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 744
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.getListDataListeners();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.elementsChanged();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.removeElements(intArray0, false);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.getListDataListeners();
      Stack<Month> stack0 = new Stack<Month>();
      JComboBox<Month> jComboBox0 = new JComboBox<Month>(stack0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.reverseElements(intArray0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel1.addAllElements((-995), (Collection<VisualPageListItem>) hashSet0);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.447151308277912
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(14);
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndex(14);
      visualListModel0.getElements();
      visualListModel0.moveDownIndex(14);
      visualListModel0.elementsChanged();
      visualListModel0.clearData();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(hashSet0);
      visualListModel0.getListDataListeners();
      Stack<Month> stack0 = new Stack<Month>();
      JComboBox<Month> jComboBox0 = new JComboBox<Month>(stack0);
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      linkedList1.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList1);
      int int0 = 49;
      visualListModel0.removeElements((-1852), (-1852), true);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements(49, (Collection<VisualPageListItem>) linkedList0);
      visualListModel1.getValidElements();
      visualListModel1.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1);
      visualListModel0.moveUpIndex((-1));
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.elementsChanged();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray1 = new int[0];
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9559838465843624
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.getListDataListeners();
      visualListModel0.elementChanged((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedList0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      linkedList0.sort(comparator0);
      linkedList0.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel1.addAllElements(7, (Collection<VisualPageListItem>) linkedList0);
      visualListModel0.reverseElements(intArray0);
      visualListModel1.undeleteElements(intArray1);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.addFirst((VisualPageListItem) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-3485);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-3485);
      intArray0[5] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.removeElements(0, 0, true);
      visualListModel0.addAllElements((-806), (Collection<VisualPageListItem>) linkedList0);
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(org.pdfsam.guiclient.dto.VisualPageListItem.class) , any(org.pdfsam.guiclient.dto.VisualPageListItem.class));
      linkedList0.sort(comparator0);
      linkedList0.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray1 = null;
      VisualListModel visualListModel2 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel2.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.addFirst((VisualPageListItem) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-3485);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-3485);
      intArray0[5] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.addFirst((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.moveDownIndex(0);
      visualListModel0.getListDataListeners();
      int int0 = visualListModel0.getSize();
      assertEquals(5, int0);
  }
}
