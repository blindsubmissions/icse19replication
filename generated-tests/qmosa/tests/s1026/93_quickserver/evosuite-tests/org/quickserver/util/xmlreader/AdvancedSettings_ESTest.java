/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:02:48 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML("");
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setBacklog(1936);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(1936);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setMaxThreadsForNioWrite(1936);
      advancedSettings0.setMaxThreadsForNioWrite(65536);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(1, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setSocketLinger((-95));
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTrafficClass();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals((-95), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-572));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1475));
      advancedSettings0.setPerformancePreferencesLatency((-1475));
      advancedSettings0.setByteBufferSize((-572));
      assertEquals((-1475), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(1577);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(1577);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize(1070);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.toXML("`wto}5P");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("GJx9KutPj");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>1070</byte-buffer-size>\n\t<backlog>1577</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>1577</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class>GJx9KutPj</client-socket-traffic-class>\n</advanced-settings>\n");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>1070</byte-buffer-size>\n\t<backlog>1577</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>1577</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class>GJx9KutPj</client-socket-traffic-class>\n</advanced-settings>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(2785);
      advancedSettings0.setPerformancePreferencesLatency(2564);
      advancedSettings0.setBacklog((-1358));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize(2785);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(1390);
      advancedSettings0.setClientSocketSendBufferSize(595);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setQSObjectPoolMaker(":GO");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass(":GO");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getBacklog();
      advancedSettings0.getCharset();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesBandwidth((-1358));
      assertEquals(2785, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3549875696248246
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setQSObjectPoolMaker("JM  ?s5**J#qu6");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTrafficClass("vF^I5Gr/Uk7[wjy");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setBacklog(3122);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setBacklog(2165);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1301));
      advancedSettings0.getCharset();
      assertEquals(2165, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0315905757832313
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1766));
      advancedSettings0.setClientSocketReceiveBufferSize((-3016));
      advancedSettings0.setBacklog(2233);
      advancedSettings0.setPerformancePreferencesConnectionTime((-3016));
      advancedSettings0.toXML("</client-socket-receive-buffer-size>\n");
      advancedSettings0.setByteBufferSize((-1766));
      advancedSettings0.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-3016), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesBandwidth(2902);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getBacklog();
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 1006;
      advancedSettings0.setSocketLinger(1006);
      int int1 = (-1);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = "XBC";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("XBC");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // XBC
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-2605));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesLatency((-2605));
      advancedSettings0.setByteBufferSize((-893));
      advancedSettings0.toXML("");
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize(1711);
      advancedSettings0.setBacklog(1);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(1711, advancedSettings0.getByteBufferSize());
      assertEquals((-1), int0);
  }
}
