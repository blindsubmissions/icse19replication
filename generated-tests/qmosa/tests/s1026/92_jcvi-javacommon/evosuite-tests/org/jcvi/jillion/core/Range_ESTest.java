/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 17:01:23 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483647L;
      long long1 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 2198L;
      Range.of(2198L);
      // Undeclared exception!
      try { 
        Range.parseRange("Null Range used in intersection operation.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Null Range used in intersection operation. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-951L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.of(1L, (-951L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 1609L;
      Range.Builder range_Builder0 = new Range.Builder(1609L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1609L);
      Range range0 = range_Builder0.build();
      range_Builder1.contractBegin(1609L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.355958887690431
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 127L);
      Range range0 = Range.of(0L, 0L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 1 .. 1 ]/RB", range_CoordinateSystem1);
      range0.intersection(range1);
      Range.of(0L, 127L);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.of(1L, (-4435L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.071999264078227
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2098L, 2098L);
      Range range1 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9829650292177705
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 1425L;
      Range.Builder range_Builder0 = new Range.Builder(1425L);
      Range range0 = range_Builder0.build();
      range0.spliterator();
      range_Builder0.contractBegin(1425L);
      range_Builder0.expandEnd((-2439L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin((-1341L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.314412919919689
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(750L, 750L);
      range_Builder0.copy();
      range_Builder0.shift(843L);
      range_Builder0.expandBegin(750L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(750L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandBegin(0L);
      range_Builder0.copy();
      range_Builder0.expandBegin(750L);
      range_Builder0.expandEnd(52L);
      range_Builder0.build();
      range_Builder0.expandBegin(750L);
      range_Builder0.shift(750L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1128L);
      range0.getBegin();
      Range range1 = Range.of(1L);
      range1.intersection(range0);
      range0.startsBefore(range1);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("K2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.K2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.166639343886469
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("F0Tu3?IRKP%/k5m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse F0Tu3?IRKP%/k5m into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3491210246311667
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1059L), (-1059L));
      range0.toString();
      Range range1 = Range.of((-1059L), (-1059L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6340479634556333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      long long1 = range1.getBegin();
      assertEquals(2147483647L, long1);
      
      Long.getLong("P.l~o >", (Long) null);
      boolean boolean1 = range1.endsBefore(range0);
      Long long2 = new Long(0L);
      Long.getLong("", long2);
      boolean boolean2 = range1.intersects(range0);
      assertTrue(boolean2 == boolean1);
      
      Long.toUnsignedString(0L);
      Long.sum(2147483647L, 500L);
      range1.equals((Object) null);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 2147484147L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      long long3 = range1.getLength();
      assertEquals(1L, long3);
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.222966718664876
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1227L, 1227L);
      Range range0 = Range.of(1227L, 1227L);
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.parseRange("S{N,&S/^$5\"o[I9*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse S{N,&S/^$5\"o[I9* into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5740561723872744
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      range2.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range1.getLength();
      range2.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0787612469244605
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(134L, 134L);
      assertNotSame(range1, range0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.ofLength(0L);
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5521993597360684
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 0L);
      range_Builder1.contractBegin(2165L);
      Range range1 = Range.ofLength(3667L);
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3351756320925126
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1059L), (-1059L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.044804882954829
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(134L, 134L);
      Range range2 = Range.of(0L, 134L);
      Range range3 = range2.asRange();
      String string0 = range1.toString();
      assertNotSame(range1, range3);
      assertEquals("[ 134 .. 134 ]/0B", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.645788963316013
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      long long0 = range2.getEnd(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-2L), long1);
      
      long long2 = range1.getLength();
      assertEquals(1L, long2);
      
      boolean boolean0 = range2.startsBefore(range1);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-2L));
      boolean boolean2 = range1.endsBefore(range1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7886260379670387
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.114238616673047
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2098L, 2098L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.610944147844131
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd((-33906L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 0L);
      range_Builder1.contractBegin(2165L);
      Range range1 = Range.ofLength(3667L);
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range1.split((-1090L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5328258705305595
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(1737L);
      Range range1 = Range.of(1737L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range range2 = Range.of(1737L, 1737L);
      range2.iterator();
      boolean boolean0 = range0.startsBefore(range2);
      Range range3 = Range.of(1737L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range3.getBegin(range_CoordinateSystem0);
      assertEquals(1738L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range4 = Range.ofLength(1738L);
      boolean boolean1 = range4.intersects(range1);
      assertFalse(boolean1 == boolean0);
      
      Range range5 = Range.ofLength(1737L);
      range_Builder0.build();
      range_Builder1.shift(1738L);
      Range.Comparators.values();
      range_Builder1.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range5.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 1736 ]/0B", string0);
      
      long long1 = range4.getBegin();
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.648974331801726
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(1737L);
      Range range1 = Range.of(1737L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range range2 = Range.of(1737L, 1737L);
      range2.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 1737L, 3282L);
      Range range4 = Range.ofLength(1737L);
      range0.equals(range4);
      assertSame(range0, range2);
      
      Range range5 = Range.ofLength(2147483647L);
      assertFalse(range5.isEmpty());
      
      boolean boolean0 = range4.isSubRangeOf(range3);
      assertFalse(range4.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3043496308016627
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-509L));
      Range.of(2098L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1L), 520L);
      range0.equals(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4738033482643194
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      Long long0 = new Long((-793L));
      String string0 = "";
      Long.getLong("", long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-793L), 2445L);
      Range range1 = Range.ofLength(0L);
      range0.intersects(range1);
      Long.toUnsignedString(500L);
      Long.sum(1166L, 65535L);
      range1.equals((Object) null);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, (-2564L), (-1L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(1595L, (-671L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2988168778204963
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1421L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1421L), (-1421L));
      Range range1 = Range.of(409L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Long long1 = new Long((-1421L));
      range0.equals(long1);
      // Undeclared exception!
      try { 
        Range.of(1243L, (-1421L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7102737048284684
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(0L);
      Range.Builder range_Builder3 = range_Builder2.contractEnd((-1090L));
      range_Builder2.copy();
      range_Builder3.expandEnd((-1090L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1058L, 1627L);
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.complement(range1);
      range_Builder0.contractBegin((-61L));
      Range range2 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-2210L), 1627L);
      Range range4 = range3.intersection(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range2);
      List<Range> list1 = range4.complementFrom(linkedList0);
      assertTrue(list1.contains(range2));
      
      Range.Comparators.values();
      List<Range> list2 = range0.split(65535L);
      assertTrue(list2.equals((Object)list0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5498153644671935
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of((-1447L));
      range0.iterator();
      long long0 = 639L;
      Range range1 = Range.of(639L);
      range1.startsBefore(range0);
      long long1 = (-1L);
      Range range2 = Range.of((-1L));
      range2.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1446L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.169684735338311
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(1L, 1L);
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 1L);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.412859153652403
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1076L));
      Range range0 = Range.of((-1076L));
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1869L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2527L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1064969046460247
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 0L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5553480614894135
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L), 2147483647L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9977665653806165
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.7652977299302024
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), 520L);
      range1.equals(range_CoordinateSystem1);
      Long.toUnsignedString(133L);
      Long.sum((-1L), 133L);
      range0.equals("133");
      assertTrue(range0.isEmpty());
      
      range1.iterator();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 133L, 133L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      long long0 = range1.getLength();
      assertEquals(521L, long0);
      
      Range range2 = Range.of(132L, 9223372036854775807L);
      List<Range> list0 = range1.complement(range2);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.018553436736682
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1697L, 9223372036854775288L);
      range0.equals(range_CoordinateSystem0);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6828961229385997
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      range_Builder1.contractBegin((-1276L));
      range_Builder1.expandEnd(1L);
      Range.Builder range_Builder2 = range_Builder0.contractEnd(0L);
      range_Builder2.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2098L, 65535L);
      Range range1 = Range.ofLength(2098L);
      range1.intersects(range0);
      Range range2 = Range.of((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range2.complement(range1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 2097, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3161409424114803
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      range0.intersects(range1);
      Long.toUnsignedString(3410L);
      Long.sum((-1584L), 2147483647L);
      range0.equals((Object) null);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 500L, (-2778L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.353917904417848
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      long long1 = range1.getBegin();
      assertEquals(2147483647L, long1);
      
      Long.getLong("P.l~o >", (Long) null);
      range1.endsBefore(range0);
      range0.intersects(range1);
      Long.compare(2147483647L, (-2062L));
      Long long2 = new Long(0L);
      Long.getLong("", long2);
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1);
      
      Long.toUnsignedString(0L);
      Long.sum(2147483647L, 500L);
      range1.equals((Object) null);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 2147484147L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      long long3 = range1.getLength();
      assertEquals(1L, long3);
      
      boolean boolean2 = range1.isSubRangeOf(range0);
      assertTrue(boolean2 == boolean0);
      assertFalse(range0.isEmpty());
      
      range1.equals("$VALUES");
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.327406115971455
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      long long0 = 0L;
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      Range.Builder range_Builder3 = range_Builder1.expandEnd(0L);
      range_Builder3.contractEnd((-1162L));
      range_Builder2.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 9223372036854773199L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.174387269895635
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 65535L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(2609L);
      range2.intersects(range0);
      range0.complement(range2);
      range2.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("6w>.g];Q)7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.6w>.g];Q)7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5010746814182574
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 134L, 134L);
      Range range2 = Range.ofLength(134L);
      boolean boolean0 = range2.intersects(range1);
      assertTrue(boolean0);
      
      Long.toUnsignedString((-2292L));
      Range range3 = range0.intersection(range1);
      range2.equals(range0);
      List<Range> list0 = range0.complement(range3);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
      
      Range.of((-2292L), 663L);
      range0.startsBefore(range2);
      boolean boolean1 = range0.intersects(range3);
      assertSame(range3, range1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.7043424813153703
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 65535L);
      Range range1 = Range.ofLength(2609L);
      range1.split(1563L);
      range1.intersects(range0);
      range0.complement(range1);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("6w>.g];Q)7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.6w>.g];Q)7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.120291565301284
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 520L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      range0.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.386699641783605
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 0L);
      Range range1 = Range.of(255L);
      range0.equals(range1);
      Range.of((-2403L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.23126159211299
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3986823936389565
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(824L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-65535L), 0L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8215638078603638
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long long0 = 6158L;
      Range range0 = Range.ofLength(6158L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
