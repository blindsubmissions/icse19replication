/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:34:47 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.meta.Bagging;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      jRip0.getOptions();
      jRip0.setUsePruning(false);
      jRip0.listOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.listOptions();
      jRip_RipperRule0.size();
      BayesNet bayesNet0 = new BayesNet();
      int[] intArray0 = new int[9];
      intArray0[0] = 48;
      intArray0[1] = 2938;
      intArray0[2] = 80;
      intArray0[3] = (-3853);
      intArray0[4] = 0;
      intArray0[5] = 4847;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 1798.401792;
      jRip0.optimizationsTipText();
      jRip0.getRevision();
      jRip0.setOptimizations(0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-826));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      RuleStats ruleStats0 = new RuleStats();
      attribute0.equalsMsg(ruleStats0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccu();
      jRip0.getRevision();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "V&$&SI0m";
      stringArray0[3] = "\nGrowing and pruning Replace ...";
      stringArray0[4] = "6r9C~B<GEoR/%</";
      stringArray0[5] = "on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.getOptions();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      jRip0.debugTipText();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_X|qaoX~!y_9C(";
      stringArray0[3] = "P. E. Gill and W. Murray";
      stringArray0[4] = "";
      stringArray0[5] = ".hVj*tb1SzUx^)o";
      stringArray0[6] = "B@{jP";
      stringArray0[7] = "%srPaj ";
      stringArray0[8] = "i~bCB!+g";
      jRip0.setOptions(stringArray0);
      jRip0.getTechnicalInformation();
      jRip0.usePruningTipText();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      String[] stringArray1 = new String[0];
      jRip1.setCheckErrorRate(true);
      try { 
        AbstractClassifier.forName("", stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-2879L));
      jRip0.setCheckErrorRate(false);
      jRip0.seedTipText();
      int int0 = (-3677);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("Merit: ", "The seed used for randomizing the data.", (-3677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'T'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      properties0.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      arrayList0.removeIf(predicate3);
      Instances instances0 = new Instances(":_no", arrayList0, 1);
      jRip_NominalAntd0.splitData(instances0, (-2367.0), (-2.147483648E9));
      // Undeclared exception!
      try { 
        properties0.forEach((BiConsumer<? super Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ": ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "{";
      stringArray0[4] = "";
      stringArray0[5] = "weka.classifiers.rules.JRip$NominalAntd";
      JRip.main(stringArray0);
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      String string1 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string1);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      String string0 = "GE4v";
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-2221));
      jRip0.enumerateMeasures();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2221));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      AbstractClassifier.makeCopies(jRip0, 92);
      jRip0.setMinNo(363.116);
      String string0 = jRip0.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hX/";
      stringArray0[1] = string0;
      stringArray0[2] = "K";
      stringArray0[3] = "Du{GwfL'MWg9_tDg";
      stringArray0[4] = "$";
      stringArray0[5] = "-P";
      jRip0.setOptions(stringArray0);
      jRip0.optimizationsTipText();
      jRip0.minNoTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("a?p8#]'~", "Sk");
      attribute0.setWeight((-3367.0));
      jRip0.getCapabilities();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.addRelation((Instances) null);
      jRip_NominalAntd0.accu = (double) 0;
      jRip_NominalAntd0.cover = (double) 1;
      jRip_NominalAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.hasAntds();
      jRip0.setCheckErrorRate(false);
      jRip0.seedTipText();
      jRip0.getCheckErrorRate();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-0.4375);
      jRip0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jRip0.setDebug(true);
      jRip0.debugTipText();
      assertTrue(jRip0.getDebug());
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getMinNo();
      jRip0.getSeed();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AX{Qoi7>u";
      stringArray0[1] = "AX{Qoi7>u";
      stringArray0[2] = "AX{Qoi7>u";
      stringArray0[3] = "AX{Qoi7>u";
      stringArray0[4] = "AX{Qoi7>u";
      stringArray0[5] = "AX{Qoi7>u";
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "V&$&SI0m";
      stringArray0[3] = "\nGrowing and pruning Replace ...";
      stringArray0[4] = "6r9C~B<GEoR/%</";
      stringArray0[5] = "on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(" positive data out of ", arrayList0, (-15));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getSplitPoint();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("a?p8#]'~", "Sk");
      jRip0.getCapabilities();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.addRelation((Instances) null);
      jRip_NominalAntd0.accu = (double) 0;
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      
      jRip_NominalAntd0.cover = (double) 1;
      jRip_NominalAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.hasAntds();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-10.0);
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-10.0), doubleArray0);
      jRip_RipperRule0.covers(binarySparseInstance0);
      jRip_RipperRule0.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "integer";
      stringArray0[1] = "@end";
      jRip0.setOptions(stringArray0);
      jRip_RipperRule0.copy();
      jRip_NominalAntd0.toString();
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "V&$&SI0m";
      stringArray0[3] = "\nGrowing and pruning Replace ...";
      stringArray0[4] = "6r9C~B<GEoR/%</";
      stringArray0[5] = "on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-671.7));
      assertEquals((-671.7), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.getFolds();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("8dZUS F", "8dZUS F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'U'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("a?p8#]'~", "Sk");
      jRip0.getCapabilities();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      attribute0.addRelation((Instances) null);
      jRip_NominalAntd0.accu = (double) 0;
      jRip_NominalAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.toString(attribute0);
      jRip_RipperRule0.hasAntds();
      jRip0.setCheckErrorRate(false);
      jRip0.seedTipText();
      jRip0.getCheckErrorRate();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1;
      jRip0.globalInfo();
      jRip0.optimizationsTipText();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "";
      stringArray0[1] = "";
      Bagging bagging0 = new Bagging();
      AbstractClassifier.runClassifier(bagging0, (String[]) null);
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-671.7));
      assertEquals((-671.7), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.getFolds();
      jRip0.toString();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(2098);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getCover();
      JRip jRip1 = new JRip();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 6;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(211.520295526, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      String[] stringArray0 = jRip0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getDebug());
      assertEquals(11, stringArray0.length);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setFolds(80);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.getRevision();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = new Locale("D", "ShT3*l{|CZQf([", "8118");
      locale0.getUnicodeLocaleKeys();
      try { 
        jRip0.rulesetForOneClass(1276.5532222704967, (Instances) null, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".;>uo9h(Oug!");
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.getTechnicalInformation();
      jRip0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("am*", "am*", protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("weka.classifiers.rules.JRip$Antd", (-1536));
      Attribute attribute1 = attribute0.copy("99ub#dLM");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.828841156174199
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      properties0.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip_NumericAntd0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.negate();
      Instances instances0 = new Instances(":_no", arrayList0, 1);
      jRip_NominalAntd0.splitData(instances0, (-2367.0), (-2.147483648E9));
      StringReader stringReader0 = new StringReader("7h2!0GDG_Mh)");
      stringReader0.skip(2);
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      Instances instances1 = null;
      try {
        instances1 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[2!0GDG_Mh)], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(512.0, doubleArray0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.covers(binarySparseInstance0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(512.0, intArray0, 79);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Set the beta value used for weight trimming in LogitBoost. Only instances carrying (1 - beta)% of the weight from previous iteration are used in the next iteration. Set to 0 for no weight trimming. The default value is 0.", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance1);
      MockRandom mockRandom0 = new MockRandom();
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\tjust binarize numeric attributes instead \n\tof properly discretizing them.");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) attribute0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.negate();
      predicate1.negate();
      Attribute attribute1 = new Attribute("integer", (-99));
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      JRip.NumericAntd jRip_NumericAntd1 = jRip1.new NumericAntd(attribute1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("No pruning: one rule found:\n", arrayList0, 2778);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      Attribute attribute0 = new Attribute("The number of optimization runs.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 0.9, (-1555.4153568359927));
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Utils.log2 = 0.01;
      jRip0.setDebug(true);
      jRip0.setDebug(true);
      jRip0.setUsePruning(true);
      jRip0.getOptions();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("V/N3*P_\"%'/6x2@", arrayList0, 2778);
      Attribute attribute0 = new Attribute("V/N3*P_\"%'/6x2@", instances0, 2778);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute("real", (List<String>) null, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      Attribute.typeToString(attribute0);
      jRip_NominalAntd0.splitData(instances0, 0, 2);
      try { 
        jRip0.rulesetForOneClass(4, instances0, 723.567911272323, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("O=tf!:9t3^2]M{8SM/", arrayList0, 6);
      Attribute attribute0 = new Attribute("", instances0, 6);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute("Should never happen: dl in building stage NaN or infinite!", (List<String>) null, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      BiFunction<Object, Object, RuleStats> biFunction0 = (BiFunction<Object, Object, RuleStats>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties0.replaceAll(biFunction0);
      Attribute.typeToString(attribute1);
      jRip_NominalAntd0.splitData(instances0, 4, 0);
      Attribute attribute2 = new Attribute("string", instances0, (-3041));
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 3;
      jRip_NumericAntd0.toString();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("O=tf!:9t3^2]M{8SM/", arrayList0, 6);
      Attribute attribute0 = new Attribute("", instances0, 6);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 6;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => =", string0);
      
      boolean boolean1 = jRip_RipperRule1.hasAntds();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertTrue(boolean1 == boolean0);
      
      String string1 = jRip_NominalAntd0.toString();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(" = ", string1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getSeed();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("XY", arrayList0, 0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      jRip0.setOptimizations(0);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      instances0.remove((Object) "XY");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 5.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      Attribute attribute0 = new Attribute(".arff", instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("The seed used for randomizing the data.", protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.splitData(instances0, 0, 6);
      assertEquals(0, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
  }
}
