/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:50:45 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.ValueLob;
import org.h2.value.ValueLobDb;
import org.hsqldb.CachedRow;
import org.hsqldb.Table;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowInputTextQuoted;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z[Qx|56\"Sn=");
      String[] stringArray0 = new String[4];
      defaultDBTable0.getComponents();
      stringArray0[0] = "Z[Qx|56\"Sn=";
      stringArray0[1] = "Z[Qx|56\"Sn=";
      stringArray0[2] = "Z[Qx|56\"Sn=";
      stringArray0[3] = "Z[Qx|56\"Sn=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=)", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("UNIQUE (Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=, Z[Qx|56\"Sn=)");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string1);
      
      String string2 = SQLUtil.substituteMarkers("", "", "Z[Qx|56\"Sn=");
      assertEquals("'Z[Qx|56\"Sn='", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.isProcedureCall("");
      String string0 = "";
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("WINDOW", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 2377, "GMT");
      SQLUtil.substituteMarkers("", "", defaultDBColumn0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("", "WINDOW", (String[]) null, (String) null, "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      String string0 = "";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "UNIQUE ()";
      // Undeclared exception!
      try { 
        defaultDBTable1.queryRowsByCellValues(stringArray0, objectArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string1 = "";
      SQLUtil.leftJoin((String) null, stringArray0, "", stringArray0[1], stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dBCatalog0.getTable((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.removeComments("3bL'#d?f`C Y7D");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "3bL'#d?f`C Y7D";
      stringArray0[2] = "3bL'#d?f`C Y7D";
      stringArray0[3] = "3bL'#d?f`C Y7D";
      stringArray0[4] = "3bL'#d?f`C Y7D";
      stringArray0[5] = "3bL'#d?f`C Y7D";
      stringArray0[6] = "VHkYOY7p";
      stringArray0[7] = "3bL'#d?f`C Y7D";
      SQLUtil.join("3bL'#d?f`C Y7D", "3bL'#d?f`C Y7D", stringArray0, (String) null, "VHkYOY7p", stringArray0);
      SQLUtil.isDDL("3bL'#d?f`C Y7D");
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getTable("createFrom");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, ")*#B", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.normalize("kSoAQh<IfDTP", true);
      SQLUtil.normalize("GQ' =", true);
      SQLUtil.isProcedureCall("2JAsF~!(E");
      TableContainer tableContainer0 = new TableContainer("|8, _Wn'Bc");
      tableContainer0.getTable("GQ' =");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kSoAQh < IfDTP ";
      stringArray0[1] = "GQ' =";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "FE)<", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.normalize("3e7+$ca+&QBJ=apAZ", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-740), "rD(@[)\"61B(=j~t$Po");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (String) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0);
      SQLUtil.addRequiredCondition("", stringBuilder4);
      assertEquals("null0.0# and ", stringBuilder4.toString());
      assertEquals("null0.0# and ", stringBuilder0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IWST2CMr";
      stringArray0[1] = "IWST2CMr";
      stringArray0[2] = "IWST2CMr";
      SQLUtil.innerJoin("IWST2CMr", stringArray0, "h;`9Z9^(vID%=zF7", "IWST2CMr", stringArray0);
      String string0 = "c6x7(&d;eQw`\\X^mXUe";
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop index";
      SQLUtil.join("", "5t%;'@c.B Q0Qf!2", stringArray0, "drop index", "", stringArray0);
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema((String) null);
      DBCatalog dBCatalog0 = new DBCatalog("DATE");
      dBSchema0.getTables();
      dBSchema0.setCatalog(dBCatalog0);
      defaultDBTable0.setSchema(dBSchema0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.isProcedureCall("");
      String string0 = "";
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 2377, "GMT");
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" got: ", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "select into+g8<?jfyp";
      SQLUtil.isQuery("select into+g8<?jfyp");
      String string1 = "select into";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into", defaultDBTable0, (DBDataType) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 39;
      stringBuilder0.appendCodePoint(39);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "buffer.length ";
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = "rD(@[)\"61B(=j~t$Po";
      DBDataType dBDataType0 = DBDataType.getInstance((-980), "buffer.length ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "m)jyE['f:V&", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Z4@", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rowCount expected ", dBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.normalize("3e7+$ca+&QBJ=apAZ", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3e7 + $ ca + & QBJ = apAZ";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = "Sh@&u!o!y5";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("QqoL|X;", defaultDBTable0, (DBDataType) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1440098822), "");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SELECT * FROM null WHERE 3e7 + $ ca + & QBJ = apAZ = '3e7 + $ ca + & QBJ = apAZ'", defaultDBTable1, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn1);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[27];
      stringArray0[0] = "nC";
      stringArray0[1] = "nC";
      stringArray0[2] = "nC";
      stringArray0[3] = " NULL";
      stringArray0[4] = "nC";
      stringArray0[5] = "nC";
      SQLUtil.renderColumnListWithTableName("drop i", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = " NULL";
      SQLUtil.join("drop i", "!P_Hj", stringArray1, (String) null, " NULL", stringArray1);
      VersionNumber versionNumber0 = VersionNumber.valueOf("!P_Hj");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, " NULL", versionNumber0);
      defaultDatabase0.getTable("~I</FV'", false);
      String[] stringArray2 = new String[5];
      stringArray2[0] = "drop i.nC, drop i.nC, drop i.nC, drop i. NULL, drop i.nC, drop i.nC, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null, drop i.null";
      stringArray2[1] = null;
      stringArray2[2] = " NULL";
      stringArray2[3] = "nC";
      stringArray2[4] = "drop i";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, (DBTable) null, stringArray1, (DBTable) null, stringArray2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.mutatesStructure("|g@zvkDgG^T");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+c<yt(");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(">PxeG$", defaultDBTable0, (-938), "Jy@)I}6nrN w?>m-(e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Jy@)I}6nrN w?>m-(e
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3933121229745242
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("3e7+$ca+&QBJ=apAZ", true);
      assertEquals("3e7 + $ ca + & QBJ = apAZ", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3e7 + $ ca + & QBJ = apAZ";
      stringArray0[1] = "3e7 + $ ca + & QBJ = apAZ";
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (3e7 + $ ca + & QBJ = apAZ, 3e7 + $ ca + & QBJ = apAZ, )", string1);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("drop index|g@zvkdgg^t");
      assertTrue(boolean0);
      
      String string2 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string2);
      
      String string3 = SQLUtil.substituteMarkers("drop table", ",", (Object) null);
      assertEquals("drop table", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.152687918271191
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.isQuery("select into+g8<?jfyp");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select into";
      SQLUtil.addOptionalCondition("select into", stringBuilder0);
      stringArray0[1] = "%5a";
      stringArray0[2] = "%5a";
      stringArray0[3] = "%5a";
      stringArray0[4] = "select into";
      stringArray0[5] = "%5a";
      stringArray0[6] = "select into+g8<?jfyp";
      DBCatalog dBCatalog0 = new DBCatalog("select into+g8<?jfyp");
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      dBSchema0.getTables();
      dBSchema0.setCatalog(dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("EK<s");
      defaultDBTable1.setSchema(dBSchema0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("select into+g8<?jfyp");
      PipedReader pipedReader0 = new PipedReader();
      ValueLob valueLob0 = ValueLob.createSmallLob(728, (byte[]) null);
      // Undeclared exception!
      try { 
        valueLob0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.630253356389264
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.normalize("3e7+$ca+&QBJ=apAZ", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3e7 + $ ca + & QBJ = apAZ";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FROM null WHERE 3e7 + $ ca + & QBJ = apAZ = '3e7 + $ ca + & QBJ = apAZ'", true, stringArray0);
      defaultDBTable0.isIdentical(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      SQLUtil.mutatesStructure("3e7+$ca+&QBJ=apAZ");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.substituteMarkers("drop table", "4[5oK", "SELECT * FROM null WHERE 3e7 + $ ca + & QBJ = apAZ = '3e7 + $ ca + & QBJ = apAZ'");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop index";
      SQLUtil.join("", "5t%;'@c.B Q0Qf!2", stringArray0, "drop index", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog("DATE");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(201, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      JdbcConnectionPool.create("org.firebirdsql.jdbc.InternalTransactionCoordinator$AbstractTransactionCoordinator", "rH0$V", "rH0$V");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "rH0$V";
      stringArray0[2] = "org.firebirdsql.jdbc.InternalTransactionCoordinator$AbstractTransactionCoordinator";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "rH0$V";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, rH0$V, org.firebirdsql.jdbc.InternalTransactionCoordinator$AbstractTransactionCoordinator, , , rH0$V, , , )", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'", stringArray0);
      assertEquals("'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'., 'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'.rH0$V, 'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'.org.firebirdsql.jdbc.InternalTransactionCoordinator$AbstractTransactionCoordinator, 'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'., 'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'., 'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'.rH0$V, 'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'., 'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'., 'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'.", string1);
      
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.isQuery("select intog8<?jfyp");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[8];
      VersionNumber.valueOf("drop index|g@zvkdgg^t");
      defaultDBTable0.getComponents();
      SQLUtil.mutatesStructure("call");
      Object object0 = new Object();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "buffer.length ";
      stringArray0[0] = null;
      stringArray0[2] = null;
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Sh@&u!o!y5", defaultDBTable0, (DBDataType) null);
      SQLUtil.typeAndName(defaultDBColumn0);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.isQuery("column Sh@&u!o!y5");
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      JdbcConnectionPool.create("", "buffer.length ", "");
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("(, , )", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("drop table3bl'#d?f`c y7d");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop table3bl'#d?f`c y7d");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0679759122939765
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select into+g8<?jfyp");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "select into";
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select into+g8<?jfyp", (String) null, versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("select into", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("select into", dBCatalog0);
      dBCatalog0.getSequences();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("select into+g8<?jfyp", dBSchema0);
      defaultDBTable1.getComponents();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%5a", false, stringArray0);
      Boolean boolean1 = SQLUtil.mutatesStructure("select into");
      assertFalse(boolean1.equals((Object)boolean0));
      
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT %5a ", string0);
      
      Object object0 = new Object();
      String string1 = SQLUtil.substituteMarkers("DATE", "ODAs", "ODAs");
      assertEquals("DATE", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.removeComments("H2 Close Delay ");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("H2 Close Delay ", (DBTable) null, 5, "H2 Close Delay ");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("H2 Close Delay ", (DBTable) null, (-316), "AIt");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBDataType dBDataType0 = DBDataType.getInstance(46, "H2 Close Delay ");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("H2 Close Delay ", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("H2 Close Delay ", (DBTable) null, 46, "AIt");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("H2 Close Delay ", (DBTable) null, dBDataType0, (Integer) null);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("H2 Close Delay ", (DBTable) null, 95, "H2 Close Delay ");
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      Integer integer1 = new Integer(95);
      DefaultDBColumn defaultDBColumn6 = new DefaultDBColumn("rp+gXTM9pH", (DBTable) null, dBDataType0, integer1, integer1);
      dBColumnArray0[6] = (DBColumn) defaultDBColumn6;
      DefaultDBColumn defaultDBColumn7 = new DefaultDBColumn("v+h2q", (DBTable) null, (-316), ".M");
      dBColumnArray0[7] = (DBColumn) defaultDBColumn7;
      DefaultDBColumn defaultDBColumn8 = new DefaultDBColumn("lq", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[8] = (DBColumn) defaultDBColumn8;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("H2 Close Delay , H2 Close Delay , H2 Close Delay , H2 Close Delay , H2 Close Delay , H2 Close Delay , rp+gXTM9pH, v+h2q, lq", string0);
      
      boolean boolean0 = SQLUtil.isQuery("alter index|g@zvkdgg^t");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(201, "3U7\u0000T3`");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("H2 Close Delay ", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("3U7\u0000T3`", true, defaultDBTable0, (String[]) null, defaultDBTable1, (String[]) null);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT 3U7\u0000T3` FOREIGN KEY () REFERENCES null()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "^-F/9H/JyOAQQ*Bntx";
      SQLUtil.normalize("^-F/9H/JyOAQQ*Bntx", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("^-F/9H/JyOAQQ*Bntx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-3);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-459), byteArray0, (-333L));
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.ordinaryChars((-474389168), (byte) (-3));
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String string1 = SQLUtil.normalize("j`v9XBU8A.T&},(NFMD", true);
      assertEquals("j ` v9XBU8A.T & }, (NFMD", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("H2 Close Delay ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("H2 Close Delay ", "H2 Close Delay ", versionNumber0);
      defaultDatabase0.getCatalog("H2 Close Delay ");
      DBCatalog dBCatalog0 = new DBCatalog("H2 Close Delay ");
      DBSchema dBSchema0 = new DBSchema("H2 Close Delay ", dBCatalog0);
      dBSchema0.getTable("h2.lobFilesPerDirectory");
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.println((Object) versionNumber0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("h2.lobFilesPerDirectory", dBSchema0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      Integer.getInteger("h2.lobFilesPerDirectory");
      Integer.compare(2, 178);
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (DBDataType) null, integer0, integer2);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2944812579037437
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.normalize("3e7+$ca+&QBJ=apAZ", true);
      DBDataType dBDataType0 = DBDataType.getInstance(201, "3U7\u0000T3`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sele", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sele";
      stringArray0[1] = "'org.firebirdsql.jdbc.internaltransactioncoordinator$abstracttransactioncoordinator'";
      stringArray0[2] = "3e7 + $ ca + & QBJ = apAZ";
      stringArray0[3] = "3e7 + $ ca + & QBJ = apAZ";
      stringArray0[4] = "3e7 + $ ca + & QBJ = apAZ";
      stringArray0[5] = "3e7+$ca+&QBJ=apAZ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("3e7+$ca+&QBJ=apAZ", false, defaultDBTable1, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderValue("alter table");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("!}g", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append('T');
      StringBuilder stringBuilder3 = stringBuilder2.append(57);
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0);
      StringBuilder stringBuilder5 = stringBuilder4.append(2211.801232539608);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder5);
      assertEquals("!}gT57TTTTT2211.8012325396083U7\u0000T3`", stringBuilder5.toString());
      assertEquals("!}gT57TTTTT2211.8012325396083U7\u0000T3`", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "HQ3-|ktUD'*k*.";
      SQLUtil.mutatesDataOrStructure("HQ3-|ktUD'*k*.");
      String string1 = "S\"E";
      String string2 = "\\u000B";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "HQ3-|ktUD'*k*.");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("\u000B", stringBuilder0);
      int int0 = 1688;
      long long0 = (-1457L);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1688, (-1457L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1688
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5961179041901987
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.isQuery("O1A)a^@`;qCU");
      SQLUtil.renderValue((Object) null);
      System.setCurrentTimeMillis(1073741823L);
      SQLUtil.mutatesDataOrStructure("O1A)a^@`;qCU");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create materialized view";
      stringArray0[1] = "O1A)a^@`;qCU";
      stringArray0[2] = "O1A)a^@`;qCU";
      stringArray0[3] = "null";
      stringArray0[4] = "O1A)a^@`;qCU";
      stringArray0[5] = "null";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "null", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("null", defaultDBTable0, 5892, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBDataType.getInstance(201, "");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "s";
      RowOutputText rowOutputText0 = new RowOutputText("s", "Jg9jb[u)0%{A#T7];w", "s", false, "Jg9jb[u)0%{A#T7];w");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(201, "3U7\u0000T3`");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("r%y>", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertNotNull(string1);
      
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string2 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("r%y>", string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "column r%y>";
      stringArray0[1] = "delete";
      stringArray0[2] = "Sh@&u!o!y5";
      stringArray0[3] = "r%y>";
      stringArray0[4] = "Sh@&u!o!y5";
      stringArray0[5] = "r%y>";
      stringArray0[6] = "r%y>";
      stringArray0[7] = "Sh@&u!o!y5";
      stringArray0[8] = "3U7\u0000T3`";
      String string3 = SQLUtil.renderColumnListWithTableName("- ", stringArray0);
      assertEquals("- .column r%y>, - .delete, - .Sh@&u!o!y5, - .r%y>, - .Sh@&u!o!y5, - .r%y>, - .r%y>, - .Sh@&u!o!y5, - .3U7\u0000T3`", string3);
      
      String string4 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("3U7\u0000T3`", string4);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "delete";
      stringArray0[1] = "IjmdcPyPsI";
      stringArray0[2] = "3U7\u0000T3`";
      stringArray0[3] = "3U7\u0000T3`";
      stringArray0[4] = "3U7\u0000T3`";
      stringArray0[5] = "3U7\u0000T3`";
      stringArray0[5] = "delete";
      stringArray0[7] = "3U7\u0000T3`";
      String string0 = SQLUtil.renderColumnListWithTableName("3U7\u0000T3`", stringArray0);
      assertEquals("3U7\u0000T3`.delete, 3U7\u0000T3`.IjmdcPyPsI, 3U7\u0000T3`.3U7\u0000T3`, 3U7\u0000T3`.3U7\u0000T3`, 3U7\u0000T3`.3U7\u0000T3`, 3U7\u0000T3`.delete, 3U7\u0000T3`.null, 3U7\u0000T3`.3U7\u0000T3`", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(1962, "43X27.U");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(]%M::#Mf80$U5t", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("43X27.U(1)", string1);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("delete", false, "Um|BM", "execute");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK execute", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("--Fp9H/Jy=AQQ*Bntx", false);
      int int0 = 47;
      StringBuilder stringBuilder0 = new StringBuilder(47);
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = 'O';
      charArray0[2] = 'B';
      charArray0[3] = 'Z';
      charArray0[7] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'W';
      charArray0[7] = '<';
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 34, 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.20619205063323187
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      defaultDBTable0.getForeignKeyConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JE\"", defaultDBTable0, 2919, "org.databene.jdbacl.SQLUtil");
      String string0 = SQLUtil.normalize("JE\"", true);
      assertEquals("JE \"\"", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?&t^.81l", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Random.setNextRandom((-221612752));
      Character character0 = new Character('V');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'V'", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "?&t\\^.81l";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer((-1618280579));
      DBDataType dBDataType0 = DBDataType.getInstance(74, "insertsetasciistream(string,inputstream,int)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?&t^.81l", defaultDBTable0, dBDataType0, integer0);
      String string1 = "c52jPa3$/sdQe2+4h(";
      defaultDBColumn0.setDefaultValue("c52jPa3$/sdQe2+4h(");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("/*Z=]T#Z;O", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn2 = null;
      try {
        defaultDBColumn2 = new DefaultDBColumn("c52jPa3$/sdQe2+4h(", defaultDBTable0, (-1618280579), "alter materialized viewsetasciistream(string,inputstream,int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"string\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(201, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn3.setDefaultValue("");
      defaultDBColumn3.isUnique();
      String string0 = SQLUtil.renderColumn(defaultDBColumn2);
      assertEquals(" (0,0) NULL", string0);
      
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      assertEquals("", string1);
      
      JdbcConnectionPool.create("", "#!m14DX", "from");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.derby.impl.sql.execute.TriggerInfo";
      stringArray0[1] = "#!m14DX";
      stringArray0[2] = "B}hNO1a3*m5u7";
      stringArray0[3] = "";
      stringArray0[4] = "?&t\r.81l";
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(org.apache.derby.impl.sql.execute.TriggerInfo, #!m14DX, B}hNO1a3*m5u7, , ?&t\r.81l)", string2);
      
      String string3 = SQLUtil.renderColumnListWithTableName("7'w=-]AXe", stringArray0);
      assertEquals("7'w=-]AXe.org.apache.derby.impl.sql.execute.TriggerInfo, 7'w=-]AXe.#!m14DX, 7'w=-]AXe.B}hNO1a3*m5u7, 7'w=-]AXe., 7'w=-]AXe.?&t\r.81l", string3);
      
      SQLUtil.removeComments("");
      String string4 = SQLUtil.renderColumn(defaultDBColumn3);
      assertEquals(" (0) DEFAULT  NULL", string4);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1324163280102886
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(201, "");
      defaultDBTable0.getColumns();
      defaultDBTable0.equals("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">n6O)5)}@2,bEyx}gP");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      Random.setNextRandom(201);
      String string0 = SQLUtil.normalize("random()", false);
      assertEquals("random ()", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(201, "3U7\u0000T3`");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("r%y>", defaultDBTable0, dBDataType0);
      DBDataType dBDataType1 = DBDataType.getInstance(201, "r%y>");
      defaultDBTable0.getColumns();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType1);
      defaultDBColumn1.getForeignKeyConstraint();
      Integer integer0 = new Integer(39);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = 'u';
      charArray0[2] = 'e';
      charArray0[3] = '6';
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3U7\u0000T3`";
      stringArray0[1] = null;
      stringArray0[2] = "table null";
      stringArray0[3] = "r%y>";
      stringArray0[4] = "table null";
      stringArray0[5] = "3U7\u0000T3`";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop table";
      stringArray0[1] = null;
      stringArray0[2] = "drop table";
      stringArray0[3] = "drop table";
      stringArray0[4] = "drop table";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "drop table";
      stringArray1[1] = "drop table";
      stringArray1[2] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], true, stringArray1);
      dBPrimaryKeyConstraint1.setOwner(defaultDBTable0);
      dBPrimaryKeyConstraint1.isIdentical(dBPrimaryKeyConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, (StringBuilder) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, (StringBuilder) null);
      assertNull(dBPrimaryKeyConstraint1.getName());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9559838465843622
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
  }
}
