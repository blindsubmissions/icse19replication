/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:54:35 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32767);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "h", "h", "", "h");
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 32767, "", "", "", (Object) null);
      fieldWriter0.visitAnnotation("Zu&CUBNie\"yyR'3D5.", true);
      fieldWriter0.visitAnnotation("Zu&CUBNie\"yyR'3D5.", true);
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter2.getSize();
      fieldWriter1.visitEnd();
      assertSame(fieldWriter1, fieldWriter2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32767);
      Item item0 = new Item();
      classWriter0.newFloat((-1));
      classWriter0.newDouble((-1096.1370740557));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "8Kbz&X|6w~:WL;MJgFX", "", (String) null, "wheel.asm.ClassReader");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.024328078359707
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1049));
      String string0 = "Deprecated";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1049), "Signature", "Signature", "74", "Deprecated");
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      byte[] byteArray0 = new byte[8];
      Attribute attribute0 = new Attribute("q_#(U$X,mmw.");
      fieldWriter0.visitAttribute(attribute0);
      byteArray0[0] = (byte)0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9007243623687382
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1049));
      ClassWriter classWriter1 = new ClassWriter((-2784));
      classWriter1.newUTF8("(");
      String string0 = "3PS\\ug$";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-342), string0, string0, (String) null, "(");
      classWriter0.index = 2262;
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putLong((-1049));
      ByteVector byteVector1 = byteVector0.put12(2, 1);
      fieldWriter0.put(byteVector1);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter1, (-2143), "EY\fkuzZOL", "Zw~@9u", "", "(");
      ByteVector byteVector2 = byteVector0.put12(2407, 2316);
      fieldWriter0.put(byteVector2);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
      
      int int1 = fieldWriter1.getSize();
      assertEquals(36, int1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0727396460638965
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1049), "", "%", "%", "Seo{n");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putUTF8("sX|>");
      fieldWriter0.put(byteVector0);
      byte[] byteArray0 = new byte[2];
      Attribute attribute0 = new Attribute("j");
      fieldWriter0.visitAttribute(attribute0);
      byteArray0[1] = (byte) (-13);
      byteArray0[1] = (byte)60;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 169, "Mo?n9X 5/&.*G%", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1049));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1049), "SinYtur2", "SinYtur2", "SinYtur2", "Deprecated");
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("Deprecated", false);
      ByteVector byteVector0 = new ByteVector();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.next = fieldWriter1;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      fieldWriter0.put(byteVector0);
      ClassWriter classWriter1 = new ClassWriter(49);
      fieldWriter0.put(byteVector0);
      fieldWriter1.put(byteVector0);
      fieldWriter1.put(byteVector0);
      fieldWriter0.next.put(byteVector0);
      assertSame(fieldWriter1, fieldWriter0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0870753771611175
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1049));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1049), "S{ignatur", "S{ignatur", "74", "Deprecated");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      byte[] byteArray0 = new byte[8];
      classWriter0.toByteArray();
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      byteVector0.length = (int) (byte)0;
      ByteVector byteVector1 = byteVector0.putUTF8("");
      fieldWriter0.put(byteVector1);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 3945, "|$@&~^&e@6Q9rO", "74", "RuntimeVisibleAnnotations", (Object) null);
      fieldWriter1.visitAnnotation("bQz~rdTVFe{O{P", true);
      fieldWriter1.visitAnnotation("S{ignatur", false);
      fieldWriter1.getSize();
      fieldWriter1.getSize();
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
      fieldWriter1.put(byteVector1);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2379));
      classWriter0.version = 989;
      classWriter0.newUTF8("(");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2379), "(", "(", "(", "(");
      fieldWriter0.visitAnnotation("", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }
}
