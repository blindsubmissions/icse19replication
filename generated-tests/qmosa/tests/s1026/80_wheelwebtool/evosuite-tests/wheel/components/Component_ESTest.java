/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 18:12:53 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Calendar;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "expected element name ");
      FormElement formElement0 = checkbox0.setBinding("expected element name ");
      // Undeclared exception!
      try { 
        formElement0.h6((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Component component0 = null;
      String string0 = "$ZPch";
      Hidden hidden0 = new Hidden((Component) null, "$ZPch", "$ZPch");
      // Undeclared exception!
      try { 
        hidden0.strong((Object) "$ZPch");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      String string1 = "T7M";
      String string2 = "Z*ObMK<,DhI*";
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "T7M", "Z*ObMK<,DhI*");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateInput("span", "zU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1682824501765625
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "]]>", "]]>");
      ActionExpression actionExpression0 = new ActionExpression("kMC/M'NNM%It-RNv%n@");
      ActionExpression actionExpression1 = actionExpression0.event("-uu#6iYd=#8w?");
      ActionExpression actionExpression2 = actionExpression1.submissible(false);
      ActionExpression actionExpression3 = actionExpression2.parameter("kMC/M'NNM%It-RNv%n@");
      ActionExpression actionExpression4 = actionExpression3.javascript("");
      Form form0 = null;
      try {
        form0 = new Form(textArea0, ")IGc3hnZZx'0G", actionExpression4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KmoIKd", "vtD-E%\"KmoIKd");
      String string0 = null;
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KmoIKd", (String) null);
      String string1 = "kkXD|2i055";
      FormElement formElement0 = checkbox0.addValidationError("kkXD|2i055");
      String string2 = "ul";
      TextArea textArea0 = new TextArea(formElement0, "ul", "vtD-E%\"KmoIKd");
      // Undeclared exception!
      try { 
        checkbox0.placeholder("+Ao_bK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "big";
      Form form0 = new Form("big");
      // Undeclared exception!
      try { 
        form0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Form form0 = new Form((String) null);
      TableBlock tableBlock0 = null;
      try {
        tableBlock0 = new TableBlock(form0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      Any any0 = new Any(errorPage0, actionExpression0);
      String string0 = "1@8U|qiB'VS9#%";
      String string1 = "6G~k";
      ElExpression elExpression0 = new ElExpression("");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "noscript";
      Form form0 = new Form("noscript");
      String string1 = "Z-nhQkY-fDCNCW4L}K";
      // Undeclared exception!
      try { 
        form0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.a((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      Table table0 = new Table(errorPage0, "");
      Table table1 = table0.renderHint("");
      table1.tbody();
      // Undeclared exception!
      try { 
        errorPage0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "n";
      Form form0 = new Form("n");
      MXSerializer mXSerializer0 = new MXSerializer();
      // Undeclared exception!
      try { 
        form0.ins((Object) mXSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      Checkbox checkbox0 = new Checkbox((Component) null, "", "expected element name ");
      FormElement formElement0 = checkbox0.setBinding("expected element name ");
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("");
      // Undeclared exception!
      try { 
        formElement0.dfn((Object) initialFieldValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "expected element name ";
      Checkbox checkbox0 = new Checkbox((Component) null, "", "expected element name ");
      // Undeclared exception!
      try { 
        checkbox0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tt((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.511299847064725
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      tableBlock0.entity("/CocB{L2Wi4dhnK");
      Table table0 = new Table(formElement0, "\"D}$v");
      TableBlock tableBlock1 = table0.tbody();
      DateInput dateInput0 = new DateInput(tableBlock1, "/:vJkCY", "del", "del");
      // Undeclared exception!
      try { 
        dateInput0.h3();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      
      FormElement formElement0 = textArea0.value("~:WL;MJgFX2K76Y");
      assertNotNull(formElement0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(formElement0, "\"D}$v");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      DateInput dateInput0 = new DateInput(errorPage0, "|o<L8_.Vrh", "|o<L8_.Vrh", "org.xmlpull.v1.wrapper.XmlPullWrapperFactory");
      assertNotNull(dateInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("|o<L8_.Vrh", dateInput0.getFormElementName());
      assertEquals("|o<L8_.Vrh", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      
      Label label0 = (Label)tableBlock0.kbd((Object) dateInput0);
      assertNotNull(label0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("|o<L8_.Vrh", dateInput0.getFormElementName());
      assertEquals("|o<L8_.Vrh", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      
      Block block0 = new Block(errorPage0, "");
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      String string0 = "1t/Gf\\Opri)9";
      Checkbox checkbox0 = new Checkbox(block0, "1t/GfOpri)9", "");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("1t/GfOpri)9", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      
      FormElement formElement0 = checkbox0.fieldBinding("j'");
      assertNotNull(formElement0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("1t/GfOpri)9", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("1t/GfOpri)9", formElement0.getFormElementName());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      Table table0 = new Table(block0, "j'");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("j'", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      Table table1 = table0.renderHint("1t/GfOpri)9");
      assertNotNull(table1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("j'", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("j'", table1.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Table table2 = new Table(table0, "wheel.Messages");
      assertNotNull(table2);
      assertFalse(table2.equals((Object)table1));
      assertFalse(table2.equals((Object)table0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("j'", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("wheel.Messages", table2.getComponentId());
      
      // Undeclared exception!
      try { 
        table2.id("1t/GfOpri)9");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "expected element name ";
      Checkbox checkbox0 = new Checkbox((Component) null, "", "expected element name ");
      assertNotNull(checkbox0);
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("expected element name ", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      
      // Undeclared exception!
      try { 
        checkbox0.frame("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6076193905936753
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(formElement0, "\"D}$v");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      ActionExpression actionExpression0 = textArea0.action("org.xmlpull.v1.wrapper.XmlPullWrapperFactory");
      assertNotNull(actionExpression0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", actionExpression0.getExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(44, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", actionExpression0.getActionExpression());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertSame(textArea0, formElement0);
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      DateInput dateInput0 = new DateInput(tableBlock1, "/:vJkCY", "del", "del");
      assertNotNull(dateInput0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("/:vJkCY", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("del", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        errorPage0.textarea("java.lang.String@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("");
      assertNotNull(initialFieldValue0);
      assertEquals("", initialFieldValue0.getStringReplacement());
      
      String string2 = "\"9myi2zWhx.u+Jm5)#";
      String string3 = "PUi[MS`#\"bz`";
      Form form0 = new Form("PUi[MS`#\"bz`");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("PUi[MS`#\"bz`", form0.getComponentId());
      assertFalse(form0._isBuilt());
      
      String string4 = null;
      // Undeclared exception!
      try { 
        form0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      
      Table table0 = new Table(errorPage0, "");
      assertNotNull(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      
      Table table1 = table0.renderHint("");
      assertNotNull(table1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.tbody();
      assertNotNull(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Form form0 = new Form("");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      
      Block block0 = tableBlock0.renderHint("");
      assertNotNull(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Calendar calendar0 = table1.date();
      assertNotNull(calendar0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      String string0 = "";
      Checkbox checkbox0 = new Checkbox(block0, "", "");
      assertNotNull(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      
      String string1 = checkbox0.defaultDomEvent();
      assertNotNull(string1);
      assertEquals("onclick", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      
      Block block1 = (Block)errorPage0.h6();
      assertNotNull(block1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      Block block2 = (Block)block0.label();
      assertNotNull(block2);
      assertFalse(block2.equals((Object)block1));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block2.defaultTagName());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_2", block2.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      assertNotSame(block2, block1);
      
      Select select0 = new Select(table1, (String) null, "onclick", stringSelectModel0, (CharSequence) null);
      assertNotNull(select0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isValid());
      assertTrue(select0.isEmpty());
      assertEquals("onclick", select0.getComponentId());
      assertEquals("select", select0.defaultTagName());
      assertNull(select0.getFormElementName());
      assertFalse(select0._isBuilt());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Charset.forName("onclick");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // onclick
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.511299847064725
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      String string0 = "/:vJkCY";
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      formElement0.genericFieldErrorMessage = null;
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      
      Table table0 = new Table(formElement0, "\"D}$v");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      Image image0 = (Image)tableBlock1.img("/CocB{L2Wi4dhnK", "");
      assertNotNull(image0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      // Undeclared exception!
      try { 
        table0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      String string0 = "/:vJkCY";
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      String string1 = "kb}";
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("/:vJkCY");
      assertNotNull(initialFieldValue0);
      assertEquals("/:vJkCY", initialFieldValue0.getStringReplacement());
      
      // Undeclared exception!
      try { 
        textArea0.address((Object) "kb}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("1t/GfOpri)9");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("1t/GfOpri)9", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(formElement0, "\"D}$v");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      DateInput dateInput0 = new DateInput(tableBlock1, "/:vJkCY", "del", "del");
      assertNotNull(dateInput0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("del", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("/:vJkCY", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      
      TableBlock tableBlock2 = (TableBlock)tableBlock1.wrapSelf();
      assertNotNull(tableBlock2);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("div", tableBlock2.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock2.getComponentId());
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertSame(tableBlock1, tableBlock2);
      assertNotSame(tableBlock1, tableBlock0);
      assertNotSame(tableBlock2, tableBlock0);
      assertSame(tableBlock2, tableBlock1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6078050343427055
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      
      String string0 = "/:vJkCY";
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(formElement0, "\"D}$v");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      
      List<RenderableComponent> list0 = table0._getRenderableChildren();
      assertNotNull(list0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      String string1 = "del";
      // Undeclared exception!
      try { 
        textArea0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      String string0 = formElement0._wrapComponentId("/CocB{L2Wi4dhnK");
      assertNotNull(string0);
      assertEquals("/CocB{L2Wi4dhnK", string0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Calendar calendar0 = tableBlock0.date();
      assertNotNull(calendar0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      Table table0 = new Table(formElement0, "/CocB{L2Wi4dhnK");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("/CocB{L2Wi4dhnK", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("/CocB{L2Wi4dhnK", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      DateInput dateInput0 = new DateInput(tableBlock0, "BRM%", "del", "del");
      assertNotNull(dateInput0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("BRM%", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("del", dateInput0.getComponentId());
      
      // Undeclared exception!
      try { 
        errorPage0.textInput("sX|>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      String string0 = "~:WL;MJgFX2K76Y";
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      TextArea textArea0 = new TextArea(errorPage0, "/:vtJkCY", "~:WL;MJgFX2K76Y");
      assertNotNull(textArea0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("/:vtJkCY", textArea0.getFormElementName());
      assertEquals("~:WL;MJgFX2K76Y", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("/:vtJkCY", textArea0.getFormElementName());
      assertEquals("~:WL;MJgFX2K76Y", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("/:vtJkCY", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", formElement0.getComponentId());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("~:WL;MJgFX2K76Y");
      assertNotNull(initialFieldValue0);
      assertEquals("~:WL;MJgFX2K76Y", initialFieldValue0.getStringReplacement());
      
      String string1 = "";
      Checkbox checkbox0 = new Checkbox(errorPage0, "/CocB{L2Wi4dhnK", "");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("/CocB{L2Wi4dhnK", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      
      DynamicSelectModel dynamicSelectModel0 = tableBlock0.selectModel();
      assertNotNull(dynamicSelectModel0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      String string2 = "lvzV%6?s|gxh";
      ElExpression elExpression0 = new ElExpression("lvzV%6?s|gxh");
      assertNotNull(elExpression0);
      assertEquals(12, elExpression0.length());
      assertEquals("lvzV%6?s|gxh", elExpression0.getExpression());
      assertEquals("lvzV%6?s|gxh", elExpression0.toString());
      
      RadioGroup radioGroup0 = null;
      try {
        radioGroup0 = new RadioGroup(checkbox0, "", "uY71djivUM4`Z)s", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.passwordInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6779500033638755
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(formElement0, "\"D}$v");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      String string0 = "del";
      DateInput dateInput0 = new DateInput(tableBlock1, "/:vJkCY", "del", "del");
      assertNotNull(dateInput0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("del", dateInput0.getComponentId());
      assertEquals("/:vJkCY", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isValid());
      
      TableBlock tableBlock2 = tableBlock1.id("\"D}$v");
      assertNotNull(tableBlock2);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("\"D}$v", tableBlock1.getComponentId());
      assertFalse(tableBlock2._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertEquals("\"D}$v", tableBlock2.getComponentId());
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableBlock0, tableBlock2);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      assertSame(tableBlock1, tableBlock2);
      assertNotSame(tableBlock2, tableBlock0);
      assertSame(tableBlock2, tableBlock1);
      
      String string1 = "9*(i";
      ActionExpression actionExpression0 = new ActionExpression("del");
      assertNotNull(actionExpression0);
      assertEquals("del", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertEquals(3, actionExpression0.length());
      assertEquals("del", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("del", actionExpression0.toString());
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      ElExpression elExpression0 = new ElExpression("\"D}$v");
      assertNotNull(elExpression0);
      assertEquals("\"D}$v", elExpression0.toString());
      assertEquals("\"D}$v", elExpression0.getExpression());
      assertEquals(5, elExpression0.length());
      
      RadioGroup radioGroup0 = null;
      try {
        radioGroup0 = new RadioGroup(textArea0, "/:vJkCY", "/:vJkCY", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.583578723322647
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      String string0 = "/:vJkCY";
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(formElement0, "\"D}$v");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      // Undeclared exception!
      try { 
        table0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "~:WL;MJgFX2K76Y", "~:WL;MJgFX2K76Y");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", checkbox0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      
      FormElement formElement1 = checkbox0.validationRule("java.lang.String@0000000004", "/CocB{L2Wi4dhnK");
      assertNotNull(formElement1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", checkbox0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("~:WL;MJgFX2K76Y", formElement1.getFormElementName());
      assertEquals("~:WL;MJgFX2K76Y", formElement1.getComponentId());
      assertFalse(formElement1._isGeneratedId());
      assertTrue(formElement1.isEmpty());
      assertTrue(formElement1.isValid());
      assertEquals("input", formElement1.defaultTagName());
      assertSame(checkbox0, formElement1);
      assertSame(formElement1, checkbox0);
      
      Label label0 = (Label)tableBlock0.h2((Object) formElement0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(formElement1, "java.lang.String@0000000004");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", checkbox0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("~:WL;MJgFX2K76Y", formElement1.getFormElementName());
      assertEquals("~:WL;MJgFX2K76Y", formElement1.getComponentId());
      assertFalse(formElement1._isGeneratedId());
      assertTrue(formElement1.isEmpty());
      assertTrue(formElement1.isValid());
      assertEquals("input", formElement1.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      ActionExpression actionExpression0 = formElement0.action("legend");
      assertNotNull(actionExpression0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("legend", actionExpression0.toString());
      assertEquals("legend", actionExpression0.getExpression());
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      DateInput dateInput0 = new DateInput(checkbox0, "iStHR}7z6?vyF", ".", "org.xmlpull.v1.wrapper.XmlPullWrapperFactory");
      assertNotNull(dateInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", checkbox0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals(".", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("iStHR}7z6?vyF", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      
      // Undeclared exception!
      try { 
        errorPage0.textarea("legend");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.56024591781767
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      
      TextArea textArea0 = new TextArea(tableBlock0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      
      FormElement formElement0 = textArea0.value("/CocB{L2Wi4dhnK");
      assertNotNull(formElement0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(formElement0, "\"D}$v");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotSame(tableBlock1, tableBlock0);
      
      DateInput dateInput0 = new DateInput(tableBlock1, "/:vJkCY", "del", "del");
      assertNotNull(dateInput0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("/:vJkCY", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("\"D}$v", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("/:vJkCY", dateInput0.getFormElementName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("del", dateInput0.getComponentId());
      
      // Undeclared exception!
      try { 
        textArea0.checkbox("DSL;7 8 r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.471461728058122
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      String string0 = "/:vJkCY";
      TextArea textArea0 = new TextArea(tableBlock0, "1|NE,jO$][!UnW", "}69");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("1|NE,jO$][!UnW", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("}69", textArea0.getComponentId());
      
      String string1 = "QkAg~";
      FormElement formElement0 = textArea0.value("QkAg~");
      assertNotNull(formElement0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("1|NE,jO$][!UnW", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("}69", textArea0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("}69", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("1|NE,jO$][!UnW", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(textArea0, "java.lang.String@0000000004");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("1|NE,jO$][!UnW", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("}69", textArea0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("1|NE,jO$][!UnW", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("}69", textArea0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(textArea0, formElement0);
      assertNotSame(tableBlock1, tableBlock0);
      
      DateInput dateInput0 = new DateInput(formElement0, "", ".!ZJ{", "");
      assertNotNull(dateInput0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("1|NE,jO$][!UnW", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("}69", textArea0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("}69", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("1|NE,jO$][!UnW", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals(".!ZJ{", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      
      TableBlock tableBlock2 = tableBlock0.id("name for element can not be null");
      assertNotNull(tableBlock2);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("name for element can not be null", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock2._isGeneratedId());
      assertEquals("name for element can not be null", tableBlock2.getComponentId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertSame(tableBlock0, tableBlock2);
      assertNotSame(tableBlock0, tableBlock1);
      assertSame(tableBlock2, tableBlock0);
      assertNotSame(tableBlock2, tableBlock1);
      
      ActionExpression actionExpression0 = new ActionExpression("java.lang.String@0000000004");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertEquals(27, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      ElExpression elExpression0 = new ElExpression("\"D}$v");
      assertNotNull(elExpression0);
      assertEquals("\"D}$v", elExpression0.toString());
      assertEquals("\"D}$v", elExpression0.getExpression());
      assertEquals(5, elExpression0.length());
      
      String string2 = "/";
      RadioGroup radioGroup0 = null;
      try {
        radioGroup0 = new RadioGroup(tableBlock0, "", "/", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.511299847064725
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      
      String string0 = "xh0+c3?$O'6vXc9KDYg";
      TableBlock tableBlock0 = new TableBlock(errorPage0, "xh0+c3?$O'6vXc9KDYg");
      assertNotNull(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("xh0+c3?$O'6vXc9KDYg", tableBlock0.getComponentId());
      
      TextArea textArea0 = new TextArea(tableBlock0, "xh0+c3?$O'6vXc9KDYg", "java.lang.String@0000000004");
      assertNotNull(textArea0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("xh0+c3?$O'6vXc9KDYg", tableBlock0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("xh0+c3?$O'6vXc9KDYg", textArea0.getFormElementName());
      
      FormElement formElement0 = textArea0.value("java.lang.String@0000000004");
      assertNotNull(formElement0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("xh0+c3?$O'6vXc9KDYg", tableBlock0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("xh0+c3?$O'6vXc9KDYg", textArea0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("xh0+c3?$O'6vXc9KDYg", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      Table table0 = new Table(tableBlock0, "java.lang.String@0000000004");
      assertNotNull(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("xh0+c3?$O'6vXc9KDYg", tableBlock0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      List<RenderableComponent> list0 = table0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("xh0+c3?$O'6vXc9KDYg", tableBlock0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      Text text0 = (Text)table0.text(byte0);
      assertNotNull(text0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("xh0+c3?$O'6vXc9KDYg", tableBlock0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertNull(text0.defaultTagName());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      assertTrue(text0._isGeneratedId());
      assertFalse(text0.isCdata());
      
      TableBlock tableBlock1 = table0.tbody();
      assertNotNull(tableBlock1);
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("xh0+c3?$O'6vXc9KDYg", tableBlock0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(tableBlock1, tableBlock0);
      
      // Undeclared exception!
      try { 
        textArea0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      String string0 = "~:WL;MJgFX2K76Y";
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("~:WL;MJgFX2K76Y", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      String string1 = "org.xmlpull.v1.wrapper.XmlPullWrapperFactory";
      TextArea textArea0 = new TextArea(errorPage0, "org.xmlpull.v1.wrapper.XmlPullWrapperFactory", "/:vJkCY");
      assertNotNull(textArea0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("org.xmlpull.v1.wrapper.XmlPullWrapperFactory", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("/:vJkCY", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      
      String string2 = "Ajr]HK^Y[O'j1j";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.xmlpull.v1.wrapper.XmlPullWrapperFactory";
      stringArray0[1] = "Ajr]HK^Y[O'j1j";
      stringArray0[2] = "/:vJkCY";
      stringArray0[3] = "~:WL;MJgFX2K76Y";
      stringArray0[4] = "/:vJkCY";
      stringArray0[5] = "~:WL;MJgFX2K76Y";
      stringArray0[6] = "org.xmlpull.v1.wrapper.XmlPullWrapperFactory";
      // Undeclared exception!
      try { 
        errorPage0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
