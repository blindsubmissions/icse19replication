/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 18:24:58 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Float float0 = new Float(454.2689198794978);
      Float.max(0.0F, 0.0F);
      Float.min(0.0F, 1.0F);
      JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=]ckM~Cw'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =]ckM~Cw'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add((JSONObject) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = (byte) (-115);
      Byte byte1 = new Byte((byte) (-115));
      JSONObject.valueToString(byte1);
      byte byte2 = (byte)61;
      byte byte3 = (byte)1;
      Byte.compare((byte)61, (byte)1);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Byte@0000000001");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Byte@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String string0 = null;
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject.numberToString(float0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      Boolean.logicalXor(true, true);
      hashMap0.put(object0, boolean0);
      Boolean boolean1 = new Boolean(true);
      hashMap0.put(object0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(0, (-1135));
      try { 
        jSONObject0.get("java.lang.Float@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(">e$2^@~Brm");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "null";
      stringArray1[2] = "";
      stringArray1[3] = "";
      String string1 = null;
      try { 
        jSONObject0.append((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5341414639483673
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "#|\"OcwIq");
      try { 
        jSONObject0.getInt("#|\"OcwIq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#|\\\"OcwIq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(boolean0);
      Boolean.logicalAnd(false, false);
      Boolean.compare(true, false);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      jSONObject0.keys();
      jSONObject0.remove("");
      JSONObject.valueToString((Object) null);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(2500);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = "/)e";
      stringArray0[4] = ">CNiP";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(61);
      jSONObject1.names();
      jSONObject0.length();
      jSONObject0.length();
      JSONObject jSONObject2 = jSONObject1.append("", "");
      try { 
        jSONObject2.getString(">CNiP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">CNiP\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not =a Boolean.";
      jSONObject0.optBoolean("] is not =a Boolean.", false);
      long long0 = (-837L);
      jSONObject0.put("] is not =a Boolean.", (-837L));
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", 67);
      jSONObject1.toString();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject0.toString(67, 67);
      jSONObject0.keys();
      try { 
        jSONObject0.getBoolean("l|X4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"l|X4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WfI}#X";
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean1 = jSONObject0.has("gettoHexString");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      JSONObject.getNames(jSONObject0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      boolean boolean1 = true;
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(boolean0);
      Boolean.logicalAnd(false, false);
      Boolean.compare(true, false);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      jSONObject0.keys();
      jSONObject0.remove("java.lang.Boolean@0000000001");
      Boolean boolean2 = Boolean.FALSE;
      JSONObject.valueToString(boolean2);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString((-1553));
      jSONObject0.isNull("java.lang.Boolean@0000000001");
      jSONObject0.optBoolean("");
      JSONObject jSONObject1 = jSONObject0.put("", (long) 1);
      try { 
        jSONObject1.getJSONObject("{\n\"java.lang.String@0000000003\": [\njava.lang.Byte@0000000005,\njava.lang.Byte@0000000006,\njava.lang.Byte@0000000007,\njava.lang.Byte@0000000008,\njava.lang.Byte@0000000009,\njava.lang.Byte@0000000010,\njava.lang.Byte@0000000011,\njava.lang.Byte@0000000012,\njava.lang.Byte@0000000013,\njava.lang.Byte@0000000014,\njava.lang.Byte@0000000015,\njava.lang.Byte@0000000016,\njava.lang.Byte@0000000017,\njava.lang.Byte@0000000018,\njava.lang.Byte@0000000019,\njava.lang.Byte@0000000020,\njava.lang.Byte@0000000021,\njava.lang.Byte@0000000022,\njava.lang.Byte@0000000023,\njava.lang.Byte@0000000024,\njava.lang.Byte@0000000025,\njava.lang.Byte@0000000026,\njava.lang.Byte@0000000027,\njava.lang.Byte@0000000028,\njava.lang.Byte@0000000029,\njava.lang.Byte@0000000030,\njava.lang.Byte@0000000031,\njava.lang.Byte@0000000032\n],\n\"java.lang.String@0000000033\": \"java.lang.Class@0000000034\",\n\"java.lang.String@0000000035\": java.lang.Boolean@0000000036\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000003\\\": [\\njava.lang.Byte@0000000005,\\njava.lang.Byte@0000000006,\\njava.lang.Byte@0000000007,\\njava.lang.Byte@0000000008,\\njava.lang.Byte@0000000009,\\njava.lang.Byte@0000000010,\\njava.lang.Byte@0000000011,\\njava.lang.Byte@0000000012,\\njava.lang.Byte@0000000013,\\njava.lang.Byte@0000000014,\\njava.lang.Byte@0000000015,\\njava.lang.Byte@0000000016,\\njava.lang.Byte@0000000017,\\njava.lang.Byte@0000000018,\\njava.lang.Byte@0000000019,\\njava.lang.Byte@0000000020,\\njava.lang.Byte@0000000021,\\njava.lang.Byte@0000000022,\\njava.lang.Byte@0000000023,\\njava.lang.Byte@0000000024,\\njava.lang.Byte@0000000025,\\njava.lang.Byte@0000000026,\\njava.lang.Byte@0000000027,\\njava.lang.Byte@0000000028,\\njava.lang.Byte@0000000029,\\njava.lang.Byte@0000000030,\\njava.lang.Byte@0000000031,\\njava.lang.Byte@0000000032\\n],\\n\\\"java.lang.String@0000000033\\\": \\\"java.lang.Class@0000000034\\\",\\n\\\"java.lang.String@0000000035\\\": java.lang.Boolean@0000000036\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long1);
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = "utPj<K05itY5^no";
      String string1 = "";
      String string2 = "";
      JSONObject.quote("");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString("\"\"", (-1528), (-1528));
      JSONObject jSONObject1 = jSONObject0.put("utPj<K05itY5^no", (Object) jSONArray0);
      JSONObject jSONObject2 = jSONObject1.putOpt("] not found.", jSONArray0);
      jSONObject2.put("", 0L);
      jSONObject1.optBoolean("");
      JSONObject.quote("");
      try { 
        jSONObject0.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5161389505492557
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long1);
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = "utPj<K05itY5^no";
      String string1 = "";
      String string2 = "";
      JSONObject.valueToString("utPj<K05itY5^no");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.198069284576928
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WfI}#X";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "|\".Du*.Cigq";
      JSONObject jSONObject2 = jSONObject0.append("WfI}#X", "WfI}#X");
      jSONObject2.toString();
      String string1 = "b";
      jSONObject0.names();
      try { 
        jSONObject0.getJSONObject("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "co";
      JSONObject jSONObject1 = jSONObject0.put("co", (-3063.91584103241));
      try { 
        jSONObject1.getJSONArray("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"co\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.146115993999145
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long1);
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = "utPj<K05itY5^no";
      String string1 = "";
      String string2 = "";
      JSONObject.quote("");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString("\"\"", (-1528), (-1528));
      JSONObject jSONObject1 = jSONObject0.put("utPj<K05itY5^no", (Object) jSONArray0);
      JSONObject jSONObject2 = jSONObject1.putOpt("] not found.", jSONArray0);
      jSONObject2.put("", 0L);
      jSONObject1.optBoolean("");
      JSONObject.quote("");
      try { 
        jSONObject0.getInt("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1.0);
      Float.min(282.2444F, 3050.6F);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) float0);
      jSONObject0.optInt((String) null);
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6075751554588924
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1.0);
      JSONObject jSONObject1 = jSONObject0.put("<HB)", (Object) "<HB)");
      int int0 = jSONObject1.optInt("/uiBj6tb#h");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      Boolean.logicalOr(true, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(boolean0);
      Boolean.logicalAnd(false, false);
      Boolean.compare(true, false);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      jSONObject0.keys();
      jSONObject0.remove("java.lang.Boolean@0000000001");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(0);
      JSONObject jSONObject1 = jSONObject0.put("'", (Collection) linkedList0);
      jSONObject1.optBoolean("<|%.");
      linkedList0.add((JSONObject) null);
      Long long0 = new Long(0L);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optDouble(")B#k,$+8(S+", 2700.312);
      jSONObject0.optDouble("Null key.");
      jSONObject0.put(")B#k,$+8(S+", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8408270730678988
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min((-1162.389938673945), (-1162.389938673945));
      Double.sum((-1162.389938673945), 0.0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      jSONObject0.append("WfI}#X", "WfI}#X");
      long long0 = jSONObject0.optLong("|\".Du*.Cigq");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("))K`Tn;ydf2");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0, (-2249), (-2249));
      JSONObject.valueToString((Object) null);
      jSONObject0.optString("isintern");
      jSONObject0.toString((-2062), (-2062));
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-2432));
      linkedList0.add(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      Writer writer1 = jSONObject1.write(writer0);
      jSONObject0.write(writer1);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Boolean@0000000002", true);
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.195530462379718
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      Byte.toUnsignedLong((byte)4);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("CSB|JroVlX", 0.0);
      StringWriter stringWriter0 = new StringWriter(4196);
      Byte.toUnsignedLong((byte)101);
      jSONObject0.write(stringWriter0);
      JSONObject.valueToString(byte0);
      JSONObject.valueToString(jSONObject0, 65, 0);
      String string0 = "wheel.json.JSONObject$1";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(83);
      Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyInt());
      hashMap0.computeIfAbsent(integer0, function0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getDouble("{\n                                                                 \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n                                                                 \"java.lang.String@0000000004\": java.lang.Double@0000000005\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                 \\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\",\\n                                                                 \\\"java.lang.String@0000000004\\\": java.lang.Double@0000000005\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
