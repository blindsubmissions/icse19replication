/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 18:12:19 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URL;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.NonLazyElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)83;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)85;
      sAXReader0.setValidation(true);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.getDispatchHandler();
      String string0 = "";
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      // Undeclared exception!
      try { 
        dispatchHandler0.onEnd(elementStack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setEncoding("org.dom4j.tree.AbstractDocumentType");
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLReader();
      StringReader stringReader0 = new StringReader("SN}}:h-zXDO!zl4'0");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(false);
      NonLazyElement nonLazyElement0 = new NonLazyElement((QName) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace(nonLazyElement0, "i_nanRChvC1", "|E");
      QName qName0 = new QName("|E", dOMNamespace0);
      dOMNamespace0.equals(sAXReader0);
      nonLazyElement0.selectObject("i_nanRChvC1");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dOMNamespace0.getLastChild();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      
      boolean boolean1 = sAXReader0.isMergeAdjacentText();
      sAXReader0.getXMLFilter();
      boolean boolean2 = sAXReader0.isStringInternEnabled();
      assertFalse(boolean2 == boolean1);
      
      sAXReader0.setIgnoreComments(false);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.skippedEntity("Sn=G:A$YcgS<i1wG_");
      defaultHandler0.skippedEntity("Sn=G:A$YcgS<i1wG_");
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "m.+");
      inputSource0.getByteStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/m.+ (No such file or directory) Nested exception: /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/m.+ (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = new QName("", namespace0, "");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      boolean boolean0 = true;
      sAXReader0.setStringInternEnabled(true);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '0';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "OS)~L";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("OS)~L");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class OS)~L not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      locator2Impl1.setLineNumber((-1));
      SAXParseException sAXParseException0 = new SAXParseException(" data: ", locator2Impl1);
      xMLFilterImpl1.fatalError(sAXParseException0);
      String string0 = "G%%,";
      // Undeclared exception!
      try { 
        sAXReader0.read("G%%,");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getContentHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "yisNu^Nn>";
      defaultHandler2_0.startDTD("helC~BXKo.", "helC~BXKo.", "yisNu^Nn>");
      sAXReader0.setIgnoreComments(true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("yisNu^Nn>", "yisNu^Nn>");
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, "yisNu^Nn>", (String) null);
      QName.get("yisNu^Nn>", (Namespace) dOMNamespace0, "yisNu^Nn>");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory(documentFactory0);
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@5d12dbe9 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      String string0 = "X(PXUf'K?T=Lqz";
      sAXReader0.removeHandler("X(PXUf'K?T=Lqz");
      sAXReader0.isValidating();
      try { 
        sAXReader0.setFeature("G3]6y073E$Zx7?a06P(", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'G3]6y073E$Zx7?a06P(' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)117;
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setEntityResolver(defaultHandler2_0);
      byteArray0[0] = (byte)117;
      byte byte1 = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2736), (byte)117);
      StringReader stringReader0 = new StringReader("N9jb0=Q4");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9319232930107053
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.getXMLFilter();
      try { 
        sAXReader0.read("6r9C~B<GEoR/%</");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 6r9C~B<GEoR/%</ Nested exception: no protocol: 6r9C~B<GEoR/%</
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      boolean boolean0 = true;
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, true);
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      String string0 = "=n%$:WgDY<!R!Dk64g";
      dispatchHandler0.removeHandler("=n%$:WgDY<!R!Dk64g");
      dispatchHandler0.addHandler("=n%$:WgDY<!R!Dk64g", (ElementHandler) null);
      try { 
        sAXReader1.setProperty("=n%$:WgDY<!R!Dk64g", "=n%$:WgDY<!R!Dk64g");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '=n%$:WgDY<!R!Dk64g' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.898745539586339
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "p~8lEE#]_yR'L";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("p~8lEE#]_yR'L");
      sAXReader_SAXEntityResolver0.resolveEntity("p~8lEE#]_yR'L", "p~8lEE#]_yR'L");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      HandlerBase handlerBase0 = new HandlerBase();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      handlerBase0.setDocumentLocator(locatorImpl1);
      sAXReader0.setErrorHandler(handlerBase0);
      File file0 = MockFile.createTempFile("attributes", "Po@K");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "/z-=5x";
      sAXReader0.setStripWhitespaceText(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)0;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "http://xml.org/sax/properties/lexical-handler";
      stringArray0[1] = "t.z'3'$F|y,#XA";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "http://xml.org/sax/features/validation";
      stringArray0[5] = "COMMENT_NODE";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("t.z'3'$F|y,#XA");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 1335);
      pruningElementStack0.getPath();
      pruningElementStack0.lastElementIndex = 347;
      DispatchHandler dispatchHandler0 = pruningElementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      assertTrue(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.endPrefixMapping("'WeF.euf");
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'd';
      charArray0[2] = '8';
      charArray0[3] = '4';
      charArray0[4] = '-';
      charArray0[5] = 'P';
      charArray0[6] = '+';
      charArray0[7] = '!';
      parserAdapter0.characters(charArray0, 0, 0);
      sAXReader0.isIgnoreComments();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@253c1b23 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@253c1b23 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      sAXReader0.getXMLReader();
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.isMergeAdjacentText();
      String string0 = "";
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("u!o!y5<++[", locatorImpl1);
      xMLFilterImpl0.error(sAXParseException0);
      xMLFilterImpl0.endElement("u!o!y5<++[", "", "");
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locatorImpl1.getSystemId();
      locatorImpl0.setSystemId("");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      SAXParseException sAXParseException0 = new SAXParseException("", locatorImpl1);
      SAXParseException sAXParseException1 = new SAXParseException("", locator2Impl0, sAXParseException0);
      xMLFilterImpl0.fatalError(sAXParseException1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "#5so*[KF;2q3 ";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String string1 = "6Cf(m{Wq";
      defaultHandler2_0.startPrefixMapping("Ky].KY!zw", "6Cf(m{Wq");
      sAXReader0.addHandler("#5so*[KF;2q3 ", pruningDispatchHandler0);
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.addHandler("#5so*[KF;2q3 ", pruningDispatchHandler0);
      try { 
        sAXReader0.setXMLReaderClassName("#5so*[KF;2q3 ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class #5so*[KF;2q3  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.848899705841817
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLReader();
      String string0 = "upper-case() requires at least one argument.";
      StringReader stringReader0 = new StringReader("upper-case() requires at least one argument.");
      String string1 = null;
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader_SAXEntityResolver0.resolveEntity("dqQ\"7c&3bL'#", "7");
      sAXReader0.addHandler((String) null, dispatchHandler0);
      sAXReader_SAXEntityResolver0.resolveEntity("7", (String) null);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8143075196071257
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/lexical-handler");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader_SAXEntityResolver0.resolveEntity("7", "http://xml.org/sax/properties/lexical-handler");
      sAXReader0.addHandler("http://xml.org/sax/properties/lexical-handler", dispatchHandler0);
      sAXReader_SAXEntityResolver0.resolveEntity("+*&p2Jg\"N<", (String) null);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("Invalid path of length: ", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Invalid path of length:  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9319232930107053
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      String string0 = "'WeF.euf";
      xMLReaderAdapter0.endPrefixMapping("'WeF.euf");
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'd';
      charArray0[2] = '8';
      charArray0[3] = '4';
      charArray0[4] = '-';
      charArray0[5] = 'P';
      charArray0[6] = '8';
      charArray0[7] = '!';
      parserAdapter0.characters(charArray0, 0, 0);
      sAXReader0.isIgnoreComments();
      StringReader stringReader0 = new StringReader("");
      DOMDocument dOMDocument0 = new DOMDocument("'WeF.euf");
      boolean boolean0 = false;
      try { 
        sAXReader0.read((InputStream) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3b5a143c Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3b5a143c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getEncoding();
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      sAXReader1.setDispatchHandler(dispatchHandler0);
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("<Cu]CE-Hus\"9");
      sAXReader_SAXEntityResolver0.resolveEntity("7", "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader_SAXEntityResolver0.resolveEntity("true", "7");
      try { 
        sAXReader0.setXMLReaderClassName("gNC");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class gNC not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilter0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      locator2Impl0.setLineNumber((-179));
      SAXParseException sAXParseException0 = new SAXParseException(" data: ", locator2Impl1);
      xMLFilterImpl1.fatalError(sAXParseException0);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
