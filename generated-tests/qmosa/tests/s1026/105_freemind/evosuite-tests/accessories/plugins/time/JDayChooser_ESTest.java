/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 15:35:16 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.NodeMouseMotionListener;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.font.FontRenderContext;
import java.awt.image.renderable.RenderableImage;
import java.net.URL;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.temporal.Temporal;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.help.BackAction;
import javax.help.HelpSet;
import javax.help.JHelpIndexNavigator;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.InputVerifier;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.Segment;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.SVGFeDisplacementMapElementBridge;
import org.apache.batik.ext.awt.image.renderable.ColorMatrixRable;
import org.apache.batik.ext.awt.image.renderable.ColorMatrixRable8Bit;
import org.apache.batik.ext.awt.image.renderable.Filter;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.GraphicsNode;
import org.apache.batik.gvt.ProxyGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xalan.templates.ElemForEach;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.CountersTable;
import org.apache.xalan.transformer.TransformerImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 3;
      int int1 = 228;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 3, "day", 228);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("day", "");
      jDayChooser0.locale = locale0;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDayPanel();
      jDayChooser0.getMinSelectableDate();
      // Undeclared exception!
      try { 
        Timestamp.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "VmVLj5,NgL";
      stringArray0[2] = "freemind.controller.actions.generated.instance.JiBX_bindingNewNodeAction_access";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.drawDays();
      jDayChooser0.setDecorationBackgroundVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4969), (-4969), (-4969), (-4969), 'I');
      keyEvent0.setSource((Object) null);
      keyEvent0.setKeyChar('b');
      jDayChooser0.keyTyped(keyEvent0);
      Locale locale0 = Locale.ITALY;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale locale1 = Locale.forLanguageTag("Windows");
      locale0.getDisplayScript(locale1);
      canvasGraphicsNode0.getRoot();
      // Undeclared exception!
      try { 
        Locale.lookup((List<Locale.LanguageRange>) null, (Collection<Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekdayForeground((Color) null);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setSubject("");
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxDayCharacters(2508);
      jDayChooser0.setForeground((Color) null);
      Hashtable<AttributedCharacterIterator.Attribute, Temporal> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Temporal>();
      Font font0 = new Font(hashtable0);
      jDayChooser0.setFont(font0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.637304661672375
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getActionMap();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.isWeekOfYearVisible();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.drawDays();
      String string0 = "";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "day";
      // Undeclared exception!
      try { 
        unmarshallingContext0.checkAllowedAttributes(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setWeekdayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.getMouseListeners();
      jDayChooser0.getAncestorListeners();
      jDayChooser0.repaint((-14), (-938), 0, (-938));
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(2198);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.getLabelFor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2198, true, (Component) null);
      focusEvent0.paramString();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.807245941199719
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getDecorationBackgroundColor();
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setWeekdayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.getSelectedDay();
      ElemForEach elemForEach0 = new ElemForEach();
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("accessories.plugins.time.JDayChooser$DecoratorButton", "Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(835);
      Container container0 = new Container();
      jDayChooser0.remove((Component) container0);
      container0.requestFocusInWindow();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getMinSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("day", fileSystemView0);
      mockJFileChooser0.removeKeyListener(jDayChooser0);
      mockJFileChooser0.getCurrentDirectory();
      MockFile mockFile0 = new MockFile("day");
      Icon icon0 = mockJFileChooser0.getIcon(mockFile0);
      jDayChooser_DecoratorButton0.setRolloverSelectedIcon(icon0);
      jDayChooser_DecoratorButton0.setFocusTraversalKeysEnabled(false);
      jDayChooser_DecoratorButton0.getCursor();
      JLabel jLabel0 = new JLabel("day");
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocus();
      jDayChooser0.getSundayForeground();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setMonth(835);
      jDayChooser0.drawWeeks();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.852922686243172
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      Color color1 = Color.CYAN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-1);
      jDayChooser0.setMonth((byte)26);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 835;
      jDayChooser0.setYear(835);
      Container container0 = new Container();
      jDayChooser0.remove((Component) container0);
      container0.requestFocusInWindow();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getMinSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("day", fileSystemView0);
      mockJFileChooser0.removeKeyListener(jDayChooser0);
      mockJFileChooser0.getCurrentDirectory();
      MockFile mockFile0 = new MockFile("day");
      Icon icon0 = mockJFileChooser0.getIcon(mockFile0);
      jDayChooser_DecoratorButton0.setRolloverSelectedIcon(icon0);
      jDayChooser_DecoratorButton0.setFocusTraversalKeysEnabled(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "day");
      Color color0 = jDayChooser0.decorationBackgroundColor;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser_DecoratorButton0.getCursor();
      // Undeclared exception!
      try { 
        jDayChooser_DecoratorButton0.add((Component) container0, 835);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      Color color0 = Color.CYAN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)68;
      jDayChooser0.setDay((byte) (-1));
      jDayChooser0.setWeekOfYearVisible(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setFocus();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      Color color0 = jDayChooser0.weekdayForeground;
      float[] floatArray0 = new float[2];
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1);
      jDayChooser0.focusGained(focusEvent0);
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      // Undeclared exception!
      try { 
        color0.getComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8421151244608924
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(835);
      Container container0 = new Container();
      jDayChooser0.remove((Component) container0);
      container0.requestFocusInWindow();
      jDayChooser0.setWeekOfYearVisible(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("day", fileSystemView0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertSame(date1, date0);
      
      jDayChooser0.setMonth(835);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.887222502802972
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      Color color0 = Color.CYAN;
      byte[] byteArray0 = new byte[9];
      jDayChooser0.getComponents();
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-1);
      jDayChooser0.setMonth((byte)26);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      Color color1 = jDayChooser0.weekdayForeground;
      jDayChooser0.setDecorationBackgroundColor(color1);
      assertEquals(164, color1.getBlue());
      
      jDayChooser0.setFocus();
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.673761264516174
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters((-1910));
      Time time0 = new Time(50L);
      String[] stringArray0 = new String[3];
      jDayChooser0.getVetoableChangeListeners();
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(1210, stringArray0, stringArray0, stringArray0, (String[]) null, (IBindingFactory) null);
      // Undeclared exception!
      try { 
        unmarshallingContext0.attributeDate("BQkMTSo;p*~z;<", "Windows");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.669593820177145
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.getWidth();
      jDayChooser0.setEnabled(false);
      boolean boolean0 = true;
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "Zb9*G@p\r@mhB>]", 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9398579649625676
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setSubject("");
      pDFInfo0.getCreationDate();
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxDayCharacters(2508);
      jDayChooser0.setMonth(7);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      Color color0 = jDayChooser0.weekdayForeground;
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.setFocus();
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8786457425062006
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekdayForeground((Color) null);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setSubject("");
      pDFInfo0.getCreationDate();
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxDayCharacters(2508);
      jDayChooser0.setForeground((Color) null);
      Hashtable<AttributedCharacterIterator.Attribute, Temporal> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Temporal>();
      pDFInfo0.setSubject("");
      pDFInfo0.getCreationDate();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMonth(414);
      jDayChooser0.setDayBordersVisible(true);
      Date date2 = jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotSame(date2, date1);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8356341507864187
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      Color color0 = Color.CYAN;
      jDayChooser0.setDay((byte)63);
      jDayChooser0.setWeekOfYearVisible(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setFocus();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qgnH4h");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getUIClassID();
      FlowLayout flowLayout0 = new FlowLayout();
      jDayChooser0.setLayout(flowLayout0);
      jDayChooser0.setMonth(964);
      jDayChooser0.setMaxDayCharacters(964);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JInternalFrame jInternalFrame0 = new JInternalFrame("file://", false);
      jInternalFrame0.getJMenuBar();
      menuElementArray0[0] = (MenuElement) null;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 964, 555L, 964, 45, 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setMonth((byte)68);
      jDayChooser1.getMaxDayCharacters();
      Color color0 = jDayChooser1.weekdayForeground;
      jDayChooser1.setDecorationBackgroundColor(color0);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser1.setMinSelectableDate(date0);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.927791028272151
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setSubject("");
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxDayCharacters(2525);
      jDayChooser0.setMonth(7);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      Color color0 = jDayChooser0.weekdayForeground;
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.setFocus();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9081517814908064
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      Color color0 = Color.CYAN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      jDayChooser0.setWeekOfYearVisible(true);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)68;
      jDayChooser0.setDay((byte) (-1));
      jDayChooser0.setWeekOfYearVisible(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setFocus();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(1, jDayChooser0.getDay());
  }
}
