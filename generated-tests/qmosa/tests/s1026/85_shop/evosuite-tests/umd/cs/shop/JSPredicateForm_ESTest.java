/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:50:36 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = ' ';
      charArray0[2] = 'Y';
      charArray0[3] = '7';
      charArray0[4] = 'D';
      charArray0[5] = 'G';
      charArray0[6] = 'p';
      charArray0[7] = 'm';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'u';
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      jSTerm1.clonePF();
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2206072645530173
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      stringReader0.read();
      jSPredicateForm0.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution2);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      assertEquals(10, jSPredicateForm1.capacity());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(A(AXFZK/\"m='A2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "E";
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      stringReader0.read();
      jSPredicateForm0.clear();
      jSTerm0.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      StringBuffer stringBuffer1 = jSTerm0.toStr();
      assertNotSame(stringBuffer1, stringBuffer0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSSubstitution0.removeElementAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) stringReader0);
      jSTerm0.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.toStr();
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4677339293271525
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.clonePF();
      streamTokenizer0.ttype = (-419);
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.clonePF();
      jSTerm0.add((Object) stringReader0);
      JSJshopVars.apostrophe = (-419);
      JSSubstitution jSSubstitution0 = null;
      jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.351783994289646
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.clonePF();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      jSTerm0.standarizerPredicateForm();
      jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) stringBuffer0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      streamTokenizer0.ttype = (-419);
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSTerm0.add((Object) stringReader0);
      JSJshopVars.apostrophe = (-419);
      jSTerm0.equals((JSPredicateForm) null);
      System.setCurrentTimeMillis((-419));
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm1.applySubstitutionPF((JSSubstitution) null);
      JSJshopVars.slash = 91;
      System.setCurrentTimeMillis((-419));
      // Undeclared exception!
      try { 
        jSPredicateForm2.matches(jSPredicateForm0, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5571130980576455
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      streamTokenizer0.ttype = (-419);
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.standarizerPredicateForm();
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "E");
      JSSubstitution jSSubstitution0 = null;
      jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm1.equals(jSPredicateForm2);
      System.setCurrentTimeMillis(0L);
      jSPredicateForm1.standarizerPredicateForm();
      jSTerm1.applySubstitutionPF((JSSubstitution) null);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm3.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(2036L);
      StringReader stringReader0 = new StringReader("(mnIXv'$u ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3+z$><h$$o5_'2,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) jSPredicateForm1);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isEmpty();
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "3+z$><h$$o5_'2,";
      System.setCurrentTimeMillis(1L);
      String string1 = "(m[znIXi'$u ";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("( ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5607104090414068
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3z$><h$$o5_'2,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.add((Object) null);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.clear();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(9, stringBuffer0.length());
      
      jSTerm1.add((Object) "^qq@J&]+=H");
      JSPredicateForm jSPredicateForm1 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.print();
      jSTerm0.equals(jSPredicateForm1);
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
      
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      assertEquals("[3.0, [^qq@J&]+=H], [^qq@J&]+=H]]", jSPredicateForm2.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.567297481132845
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3z$><h$$o5_'2,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      jSTerm0.equals(jSPredicateForm0);
      jSTerm1.clear();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSPredicateForm0.toStr();
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) "3z$><h$$o5_'2,");
      Predicate<JSTerm> predicate1 = predicate0.and(predicate0);
      Predicate<JSTerm> predicate2 = predicate0.or(predicate1);
      Predicate<JSTerm> predicate3 = predicate2.negate();
      jSTerm1.removeIf(predicate3);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6745895669999098
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6`E");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "6`E");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSJshopVars.slash = 46;
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(6`E)", stringBuffer0.toString());
      
      System.setCurrentTimeMillis(1L);
      jSTerm0.ensureCapacity((-419));
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[0];
      System.setCurrentTimeMillis(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      boolean boolean0 = jSTerm0.equals(jSPredicateForm1);
      assertTrue(boolean0);
      
      jSPredicateForm1.isEmpty();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
  }
}
