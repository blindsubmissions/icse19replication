/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:10:43 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8118";
      stringArray0[1] = "8118";
      stringArray0[2] = "8118";
      stringArray0[3] = "8118";
      stringArray0[4] = "8118";
      stringArray0[5] = "8118";
      JRip.main(stringArray0);
      String string1 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string1);
      
      String string2 = jRip0.usePruningTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether pruning is performed.", string2);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.copy();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      int int0 = 2176;
      try { 
        coverTree0.kNearestNeighbours((Instance) null, 2176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.optimizationsTipText();
      double[] doubleArray0 = new double[8];
      Utils.log2 = (-2178.0);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2178.0);
      doubleArray0[2] = (-2178.0);
      doubleArray0[3] = (-2178.0);
      doubleArray0[4] = (-2178.0);
      doubleArray0[5] = (-2178.0);
      doubleArray0[6] = (-1.7976931348623157E308);
      Utils.log2 = (-2178.0);
      doubleArray0[7] = (-2178.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2178.0), doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(1L);
      jRip0.optimizationsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 1L;
      DenseInstance denseInstance0 = new DenseInstance(1L, doubleArray0);
      int int0 = (-3820);
      try { 
        coverTree0.kNearestNeighbours(denseInstance0, (-3820));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      jRip0.getSeed();
      jRip0.getRevision();
      jRip0.setCheckErrorRate(false);
      jRip0.setUsePruning(false);
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(80);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("8118", list1, 0);
      // Undeclared exception!
      try { 
        sparseInstance0.setValue(attribute0, 15.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      double double0 = (-556.3588806779244);
      jRip0.setMinNo((-556.3588806779244));
      String string0 = "";
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9459347757561138
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      jRip0.setSeed((-622L));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.size();
      jRip_RipperRule0.copy();
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals((-622L), jRip0.getSeed());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      String string0 = "\\n";
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 82;
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      int int0 = 0;
      Attribute attribute0 = new Attribute("", "", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccuRate();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-932));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The Random Subspace Method for Constructing Decision Forests";
      stringArray0[1] = "%tdNAb";
      stringArray0[2] = "";
      JRip.main(stringArray0);
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[3];
      intArray0[0] = 3564;
      intArray0[1] = 68;
      intArray0[2] = 1626;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(168.5832670741384, intArray0, 0);
      binarySparseInstance0.dataset();
      try { 
        jRip0.rulesetForOneClass(168.5832670741384, (Instances) null, 1626, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed((-1L));
      jRip0.seedTipText();
      jRip0.globalInfo();
      assertEquals((-1L), jRip0.getSeed());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[2];
      jRip0.enumerateMeasures();
      stringArray0[0] = "";
      stringArray0[1] = "#u3Xiw}Ce2amdt_u&{";
      jRip0.setOptions(stringArray0);
      jRip0.getOptimizations();
      jRip0.getOptimizations();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("vUCPV0q[%K)(", 2);
      jRip0.getCapabilities();
      attribute0.enumerateValues();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      jRip_NominalAntd0.getAccuRate();
      jRip0.getOptimizations();
      jRip0.setDebug(true);
      JRip.main(stringArray0);
      jRip_RipperRule0.setConsequent((-3790.974965));
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertTrue(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      jRip0.setSeed(0L);
      int int0 = 0;
      jRip0.setFolds(0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.convertInstance((Instance) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setUsePruning(true);
      jRip0.setFolds(0);
      jRip0.getDebug();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.size();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.enumerateMeasures();
      Utils.SMALL = 0.0;
      jRip0.getFolds();
      Attribute attribute0 = new Attribute("yP&Vglh2vdV", 1643);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "date";
      stringArray0[1] = "numeric";
      stringArray0[2] = "string";
      stringArray0[3] = "@end";
      stringArray0[4] = "integer";
      stringArray0[5] = "date";
      stringArray0[6] = "string";
      stringArray0[7] = "numeric";
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("The maximum subsequence length (theta in the paper)", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccu();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BallNode ballNode0 = new BallNode((-425));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, (-3072), mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("", list0, (-1335));
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 2, 628.7935968665239);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.enumerateMeasures();
      Utils.SMALL = 0.0;
      jRip0.getFolds();
      Attribute attribute0 = new Attribute("yP&Vglh2vdV", 1643);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1327.1374810031566));
      jRip_RipperRule0.setConsequent(0.0);
      jRip_RipperRule0.getConsequent();
      jRip0.minNoTipText();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.checkErrorRateTipText();
      jRip0.usePruningTipText();
      jRip0.getTechnicalInformation();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("HZDi:.n4S`hlxqJ{;To", (List<String>) null, protectedProperties0);
      Attribute attribute1 = attribute0.copy("Morgan Kaufmann");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1.0), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setDebug(false);
      jRip0.setMinNo(1732.172251976474);
      jRip0.setOptimizations((-36));
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "", (ProtectedProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";6z'tzu.P99jh+iUm");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      jRip0.listOptions();
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      jRip_RipperRule0.covers(denseInstance0);
      jRip0.toString();
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-1L));
      jRip0.getOptions();
      Attribute attribute0 = new Attribute("", (-2746));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.main((String[]) null);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      JRip jRip1 = new JRip();
      jRip1.setOptions(stringArray0);
      jRip1.getOptions();
      jRip0.getMinNo();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(jRip1.getDebug());
      assertEquals(3, jRip1.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertFalse(boolean0);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOLanguages();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule1.getRevision();
      assertEquals("8118", string0);
      
      jRip_RipperRule1.size();
      JRip.RipperRule jRip_RipperRule2 = (JRip.RipperRule)jRip_RipperRule1.copy();
      assertNotSame(jRip_RipperRule2, jRip_RipperRule1);
      assertEquals((-1.0), jRip_RipperRule2.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      BayesNet bayesNet0 = new BayesNet();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1916.14469;
      doubleArray0[1] = (-1727.573313691929);
      doubleArray0[2] = (-1727.573313691929);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1916.14469;
      doubleArray0[5] = (-1727.573313691929);
      SparseInstance sparseInstance0 = new SparseInstance((-1727.573313691929), doubleArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A dummy stemmer that performs no stemming at all.");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(41);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("8118", list0, 6);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean1 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.395908119293929
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOLanguages();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      
      jRip_RipperRule0.size();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      
      BayesNet bayesNet0 = new BayesNet();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1916.14469;
      doubleArray0[1] = 1916.14469;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",zAJyLQy)_-;O#Ik");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(430);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("  protected final static double[] MEANS = new double[]{", list0, (-1027));
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      boolean boolean1 = jRip_NominalAntd0.covers(sparseInstance0);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(3, jRip1.getFolds());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Copy with first attribute set to 0: ");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8711604142318066
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Should never happen: dl in building stage NaN or infinite!", 11);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "integer";
      stringArray0[1] = "unpruned ";
      stringArray0[2] = "date";
      stringArray0[3] = "integer";
      stringArray0[4] = "5LvCYUK&P*L'+FueW*";
      stringArray0[5] = "0162-8828";
      stringArray0[6] = "";
      jRip0.setOptions(stringArray0);
      jRip_NominalAntd0.att = attribute0;
      IBk iBk0 = new IBk((-1));
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.setConsequent((-1617.0));
      jRip_RipperRule0.copy();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setDisplayRules(false);
      Instances instances1 = decisionTable0.m_theInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      Attribute attribute0 = new Attribute("   * @return        the revision\n", 78);
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      IBk iBk0 = new IBk(4);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" =>    * @return        the revision\n=", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip_RipperRule0.size();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AbstractClassifier.makeCopies(bayesNet0, 1683);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("#<D>$3h*{", arrayList0, 1683);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList1, 22);
      jRip_NumericAntd0.splitData(instances0, (-1617.0), 3.0);
      attribute0.copy("@relation");
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", (List<String>) null, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (-1617.0);
      doubleArray0[2] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance((-1617.0), doubleArray0);
      jRip_NominalAntd0.covers(sparseInstance0);
      properties0.elements();
      jRip_NominalAntd0.cover = (double) 2;
      jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      String string0 = jRip1.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.size();
      assertEquals((-1.0), jRip_RipperRule2.getConsequent(), 0.01);
      
      boolean boolean0 = jRip1.getCheckErrorRate();
      assertFalse(jRip1.getDebug());
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("   * @return        the revision\n", 78);
      attribute0.setWeight(0.0);
      String[] stringArray0 = new String[0];
      IBk iBk0 = new IBk(4);
      Attribute attribute1 = new Attribute("", 1812);
      jRip0.setOptions(stringArray0);
      IBk iBk1 = new IBk(510);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule0.size();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip2.getDebug());
      assertTrue(jRip2.getUsePruning());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 1683);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1683);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = new Locale("\nrepDL: ", "\nrepDL: ");
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("\nrepDL: ", list0, 6);
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd1.covers(binarySparseInstance0);
      JRip jRip3 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = jRip_NominalAntd1.covers(binarySparseInstance0);
      boolean boolean1 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean1 == boolean0);
      
      double double0 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("   * @return       the revision\n", 78);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(0);
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 4);
      jRip_RipperRule1.prune(instances0, false);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("g?MHQWE;9kp!7NZa:", 1);
      IBk iBk0 = new IBk(78);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("integer", arrayList0, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute1);
      arrayList0.add("Seed for random number generator.");
      Instances instances0 = new Instances("@end", arrayList2, 1);
      jRip_NumericAntd0.splitData(instances0, 3, 0);
      Attribute attribute2 = attribute0.copy(".arff");
      jRip_NumericAntd0.splitData(instances0, 1, 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      DenseInstance denseInstance0 = new DenseInstance(3);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " instances";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Fast Effective Rule Induction";
      stringArray0[4] = "";
      stringArray0[5] = "5Tb%+Z";
      stringArray0[6] = "A NaN value was generated while standardizing attribute ";
      stringArray0[7] = "Twcy";
      stringArray0[8] = "-P";
      jRip0.setOptions(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      Object object0 = new Object();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8891591637540215
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("   * @return        the revision\n", 78);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.trimToSize();
      arrayList0.iterator();
      arrayList0.add("\",");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("date", arrayList1, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0, 3);
      jRip_NumericAntd0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 5.70001, 5.70001);
      System.setCurrentTimeMillis(0);
  }
}
