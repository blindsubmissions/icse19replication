/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:58:52 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = (-1965);
      discretize0.setBins((-1965));
      int int1 = 77;
      discretize0.m_ClassIndex = 77;
      discretize0.getCapabilities();
      discretize0.setInvertSelection(false);
      discretize0.setOptions((String[]) null);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[1] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[2] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[3] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[4] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[5] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[6] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[7] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[8] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      Discretize.main(stringArray0);
      discretize0.m_UseEqualFrequency = true;
      int int0 = (-3142);
      discretize0.getCutPoints((-3142));
      discretize0.setUseEqualFrequency(true);
      discretize0.useBinNumbersTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getMakeBinary();
      discretize0.getUseBinNumbers();
      int int1 = 439;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(439);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(0);
      discretize0.setFindNumBins(true);
      discretize0.setFindNumBins(true);
      discretize0.setBins(1721);
      discretize0.getAttributeIndices();
      discretize0.toString();
      discretize0.findNumBinsTipText();
      discretize0.useBinNumbersTipText();
      discretize0.binsTipText();
      discretize0.setUseEqualFrequency(true);
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1721;
      doubleArray0[3] = (double) 1721;
      doubleArray0[4] = (double) 1721;
      doubleArray0[5] = 18.604162375;
      doubleArray0[6] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1721, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBins();
      discretize0.m_MakeBinary = true;
      discretize0.setAttributeIndices("");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("L]4^k'itqP");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 100.0;
      discretize0.setIgnoreClass(false);
      discretize0.setUseEqualFrequency(false);
      discretize0.getRevision();
      discretize0.getBins();
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("(-inf-");
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(boolean0);
      
      discretize0.getAttributeIndices();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("      else if (inst.attribute(i).isNumeric())\n");
      discretize0.getCapabilities();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.m_NumBins = 114;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka/core/Capabilities.props";
      Discretize.main(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = false;
      String[] stringArray0 = discretize0.getOptions();
      discretize0.getBinRangesString(0);
      discretize0.m_DefaultCols = "BEJ2>'X;";
      discretize0.getRevision();
      discretize0.getCapabilities();
      discretize0.m_DesiredWeightOfInstancesPerInterval = Double.NaN;
      int int0 = 0;
      discretize0.getRevision();
      discretize0.setMakeBinary(false);
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4260151319598084
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.setAttributeIndices("R");
      discretize0.m_DiscretizeCols = range0;
      discretize0.setUseEqualFrequency(true);
      discretize0.setAttributeIndices("|");
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("L]4^k'itqP");
      discretize0.getBinRangesString((-246));
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.setAttributeIndices("R");
      discretize0.m_DiscretizeCols = range0;
      boolean boolean0 = true;
      discretize0.m_IgnoreClass = true;
      int int0 = 1549;
      discretize0.getCutPoints(1549);
      discretize0.getBins();
      discretize0.attributeIndicesTipText();
      discretize0.useBinNumbersTipText();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1549);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3982.73);
      doubleArray0[1] = (-3982.73);
      doubleArray0[2] = (-3982.73);
      doubleArray0[3] = (-3982.73);
      doubleArray0[4] = (-3982.73);
      doubleArray0[5] = (-3982.73);
      doubleArray0[6] = (-3982.73);
      doubleArray0[7] = (-3982.73);
      SparseInstance sparseInstance0 = new SparseInstance((-3982.73), doubleArray0);
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      Discretize discretize1 = new Discretize("BUc,^u");
      String string1 = discretize1.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string1);
      
      discretize1.getCapabilities();
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("%GWIn/");
      discretize0.m_NumBins = 89;
      discretize0.useEqualFrequencyTipText();
      StringReader stringReader0 = new StringReader("If set to true, equal-frequency binning will be used instead of equal-width binning.");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[If], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("9ZSxv4`*4GEgR");
      discretize0.getAttributeIndices();
      discretize0.getBinRangesString(95);
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.setAttributeIndices("R");
      discretize0.m_DiscretizeCols = range0;
      boolean boolean0 = true;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1902);
      intArray0[1] = 2027;
      intArray0[2] = 1145;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1029.2914505593328, intArray0, 4);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      sparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "c2Y(6|^~lW^ss6y!]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S`I@");
      Discretize discretize0 = new Discretize("c2Y(6|^~lW^ss6y!]");
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("^/p~{NSvgp>ef9,}q6&");
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-4.57826535);
      doubleArray1[1] = (-1115.855067253);
      doubleArray1[2] = (-962.0);
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("^/p~{NSvgp>ef9,}q6&");
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-4.57826535);
      doubleArray1[1] = (-1115.855067253);
      doubleArray1[2] = (-962.0);
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(1081);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1081
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("^/p~{NSvgp>ef9,}q6&");
      double[][] doubleArray0 = new double[1][5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2013265917);
      intArray0[1] = 184;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-1071));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1071
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[20];
      discretize0.setMakeBinary(true);
      doubleArray0[1] = (double) (-187L);
      doubleArray0[1] = (double) (-187L);
      doubleArray0[2] = (double) (-187L);
      doubleArray0[3] = (double) (-187L);
      doubleArray0[4] = (double) (-187L);
      doubleArray0[5] = (double) (-187L);
      doubleArray0[8] = (double) (-187L);
      doubleArray0[8] = (double) (-187L);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-187L), doubleArray0);
      binarySparseInstance0.dataset();
      binarySparseInstance0.setDataset((Instances) null);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9083183573932794
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("f=X");
      discretize0.getCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "http://weka.sourceforge.net/packageMetaData";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "http://weka.sourceforge.net/packageMetaData";
      stringArray0[3] = "f=X";
      stringArray0[4] = "f=X";
      stringArray0[5] = "f=X";
      stringArray0[6] = "f=X";
      stringArray0[7] = "http://weka.sourceforge.net/packageMetaData";
      Discretize.main(stringArray0);
      discretize0.m_DefaultCols = "http://weka.sourceforge.net/packageMetaData";
      discretize0.setInvertSelection(true);
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray1.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }
}
