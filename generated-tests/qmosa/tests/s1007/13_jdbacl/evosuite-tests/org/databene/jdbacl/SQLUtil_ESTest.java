/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:45:12 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.Writer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.AlterTableNode;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.jdbc4.Jdbc4SQLXML;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&";
      stringArray0[1] = "&";
      stringArray0[2] = "&";
      stringArray0[3] = "PKCOLUMN_NAME";
      stringArray0[4] = "&";
      stringArray0[5] = "&";
      SQLUtil.renderColumnListWithTableName("&", stringArray0);
      SQLUtil.isQuery("&");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "&.&, &.&, &.&, &.PKCOLUMN_NAME, &.&, &.&";
      stringArray1[1] = "&.&, &.&, &.&, &.PKCOLUMN_NAME, &.&, &.&";
      stringArray1[2] = "&";
      stringArray1[3] = "&.&, &.&, &.&, &.PKCOLUMN_NAME, &.&, &.&";
      stringArray1[4] = "&";
      stringArray1[5] = "PKCOLUMN_NAME";
      stringArray1[6] = "&.&, &.&, &.&, &.PKCOLUMN_NAME, &.&, &.&";
      SQLUtil.renderWhereClause(stringArray1, stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9999-12-20");
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '9999-12-20' has no foreign key with the columns (&, &, &, PKCOLUMN_NAME, &, &)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.normalize("org.h2.command.ddl.CreateView", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.CreateView";
      stringArray0[1] = "org.h2.command.ddl.CreateView";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("]k^L5>e\"yiwtRHoqXf");
      SQLUtil.isQuery("org.h2.command.ddl.CreateView");
      SQLUtil.mutatesDataOrStructure("(org.h2.command.ddl.CreateView, org.h2.command.ddl.CreateView)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.isDDL("G9/y9.{42-i{-qY");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/*";
      stringArray0[1] = "G9/y9.{42-i{-qY";
      stringArray0[2] = "G9/y9.{42-i{-qY";
      stringArray0[3] = "";
      SQLUtil.innerJoin("G9/y9.{42-i{-qY", stringArray0, "/*", "3XrP(z8&r_", stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("2G%{h{M<PE0EUPfUa@%");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("", defaultDatabase0);
      dBCatalog0.getSchema("//");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rp=", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'rp=' has no foreign key with the columns (/*, G9/y9.{42-i{-qY, G9/y9.{42-i{-qY, )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "8)>/= 0SWDO=";
      SQLUtil.removeComments("8)>/= 0SWDO=");
      String string1 = "hU},;Zu|";
      SQLUtil.isDML("hU},;Zu|");
      String string2 = "2Y`uV";
      String string3 = "$qb!.7]4r6egX`H~~:p";
      boolean boolean0 = true;
      DBUniqueConstraint dBUniqueConstraint0 = null;
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex("$qb!.7]4r6egX`H~~:p", true, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("alter materialized view", "alter materialized view", "alter materialized view");
      SQLUtil.typeAndName(dBSequence0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = ";57C6";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "tdNAb Gdu";
      stringArray0[4] = "sequence alter materialized view";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", stringArray0, "tdNAb Gdu", "V*", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "B%J}S/A|d";
      SQLUtil.removeComments("B%J}S/A|d");
      String string1 = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "B%J}S/A|d", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "@qeAV:}WTv";
      SQLUtil.mutatesDataOrStructure("@qeAV:}WTv");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("@qeAV:}WTv");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(90044, "@qeAV:}WTv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@qeAV:}WTv", defaultDBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[1];
      defaultDBColumn0.toString();
      charArray0[0] = 'g';
      String string1 = ";";
      // Undeclared exception!
      try { 
        DBDataType.jdbcTypeFor(";");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1275347898191255
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("^0~:#u(eTzA", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "vU`JD/-1bh/]";
      String string1 = "org.apache.derby.impl.store.raw.data.LoggableActions";
      DBSchema dBSchema0 = new DBSchema("tk0Z,?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.store.raw.data.LoggableActions", defaultDBTable0, 41, "vU`JD/-1bh/]");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "vU`JD/-1bh/]", defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2436185137418785
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.normalize("org.h2.command.dl8CreateViw", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.dl8CreateViw";
      stringArray0[1] = "org.h2.command.dl8CreateViw";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("]k^L5>e\"yiwtRHoqXf");
      SQLUtil.mutatesDataOrStructure("(org.h2.command.dl8CreateViw, org.h2.command.dl8CreateViw)");
      SQLUtil.substituteMarkers("org.h2.command.dl8CreateViw", "T/tti", "org.h2.command.dl8CreateViw");
      String string0 = "g_PF%0'[c]m; ZKr";
      DBSchema dBSchema0 = new DBSchema("CON(KM%+P1|?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.command.dl8CreateViw", dBSchema0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "B%J}S/A|d";
      SQLUtil.removeComments("B%J}S/A|d");
      String string1 = null;
      Object object0 = new Object();
      SQLUtil.renderValue((Object) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "B%J}S/A|d");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("GENERATED ALWAYS AS ( ", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("B%J}S/A|d", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(46);
      int int0 = (-1865);
      // Undeclared exception!
      try { 
        stringBuilder3.append((CharSequence) "GENERATED ALWAYS AS ( ", (-2581), (-1865));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -2581, end -1865, s.length() 22
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O#q6J{?'|tiAn", defaultDBTable0, 68, "");
      defaultDBColumn0.getNotNullConstraint();
      dBPrimaryKeyConstraint0.equals((Object) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O#q6J{?'|tiAn");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "UNIQUE ()");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      boolean boolean0 = SQLUtil.isProcedureCall("ubkG4#I");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.normalize("Zx.]U|t<?[2F", false);
      String string0 = "call";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      defaultDBTable0.getIndex("- ");
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3445982481028228
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.normalize("^0~:#u(eTzA", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("tk0Z,?");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "alter materialized view";
      DBSequence dBSequence0 = new DBSequence("alter materialized view", "alter materialized view", "alter materialized view");
      SQLUtil.typeAndName(dBSequence0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized view";
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      dBForeignKeyConstraint0.toString();
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1200, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1200
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("TABLES");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog TABLES", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.join("NoperZ", ".7MZ~0", stringArray0, "", ">7.+WA#*)]'v[{sG", stringArray0);
      assertEquals("NoperZ join  as >7.+WA#*)]'v[{sG on ", string1);
      
      String string2 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("TABLES", string2);
      
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9112880638492062
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update(org.h2.command.ddl.createview, org.h2.command.ddl.createview)");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("{Kx??RlyIQZj");
      assertFalse(boolean1);
      
      String string0 = SQLUtil.normalize("update(org.h2.command.ddl.createview, org.h2.command.ddl.createview)", true);
      assertEquals("update (org.h2.command.ddl.createview, org.h2.command.ddl.createview)", string0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("X0;W%j4|", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("X0;W%j4|");
      defaultDBTable0.getIndex("call");
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.join(", ", "execute", stringArray0, "P\"D41)na:0z", "", stringArray0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray1 = new String[0];
      SQLUtil.renderColumnNames(stringArray1);
      DBDataType dBDataType0 = DBDataType.getInstance(463, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("P\"D41)na:0z", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderColumnNames((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBDataType dBDataType0 = DBDataType.getInstance(13, "zL$e");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("TABLES");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog TABLES", string0);
      
      Boolean boolean0 = new Boolean(">7.+WA#*)]'v[{sG");
      boolean boolean1 = SQLUtil.isDML("TABLES");
      Boolean boolean2 = SQLUtil.mutatesStructure("create unique index");
      assertFalse(boolean2.equals((Object)boolean1));
      
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create unique index";
      stringArray0[1] = "catalog TABLES";
      stringArray0[2] = ">7.+WA#*)]'v[{sG";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}wnT5y");
      stringArray0[3] = "TABLES";
      stringArray0[4] = "TABLES";
      stringArray0[5] = "catalog TABLES";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(create unique index, catalog TABLES, >7.+WA#*)]'v[{sG, TABLES, TABLES, catalog TABLES)", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.h2.command.ddl.CreateView", true);
      assertEquals("org.h2.command.ddl.CreateView", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.CreateView";
      stringArray0[1] = "org.h2.command.ddl.CreateView";
      boolean boolean0 = SQLUtil.isProcedureCall("]k^L5>e\"yiwtRHoqXf");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "execsx0u>_:lw4.l/oq$s4";
      stringArray1[1] = "update";
      stringArray1[2] = "org.h2.command.ddl.CreateView";
      String string1 = SQLUtil.join("alter table", (String) null, stringArray0, "org.h2.command.ddl.CreateView", "LOB search", stringArray1);
      assertEquals("alter table join org.h2.command.ddl.CreateView as LOB search on null.org.h2.command.ddl.CreateView = LOB search.execsx0u>_:lw4.l/oq$s4 and null.org.h2.command.ddl.CreateView = LOB search.update", string1);
      
      DBCatalog dBCatalog0 = new DBCatalog("alter table", (Database) null);
      DBSchema dBSchema0 = new DBSchema("update", dBCatalog0);
      String string2 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("alter table.update", string2);
      
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(org.h2.command.ddl.CreateView, org.h2.command.ddl.CreateView)", string3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.933809998920632
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O#q6J{?'|tiAn");
      boolean boolean0 = SQLUtil.isProcedureCall("ubkG4#I");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "java.lang.Object@a7479e4", false, (String[]) null);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 68, " split");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("O#q6J{?'|tiAn", defaultDBTable0, 68, " split");
      defaultDBColumn1.getNotNullConstraint();
      dBPrimaryKeyConstraint0.equals("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter index");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.join("UNIQUE ()", "exec", (String[]) null, "UNIQUE ()", "UNIQUE ()", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "call^0~:#u(etza";
      SQLUtil.mutatesDataOrStructure("call^0~:#u(etza");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "call^0~:#u(etza";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      int int0 = 3266;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(3266);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3266, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.normalize("org.h2.command.ddl.CreateView", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.CreateView";
      stringArray0[1] = "org.h2.command.ddl.CreateView";
      SQLUtil.isProcedureCall("org.h2.command.ddl.CreateView");
      Boolean boolean0 = new Boolean(false);
      SQLUtil.mutatesDataOrStructure("org.h2.command.ddl.CreateView");
      SQLUtil.normalize("org.h2.command.ddl.CreateView", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.h2.command.ddl.CreateView", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.h2.command.ddl.CreateView", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(66, "call");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" or ", dBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      int int0 = 1175;
      StringBuilder stringBuilder0 = new StringBuilder(1175);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("drop materialized view", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "drop materialized view", 1175, (-2411));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1175, end -2411, s.length() 22
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.removeComments("B%J}S/A|d");
      Object object0 = new Object();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "GENERATED ALWAYS AS ( ");
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("call", stringBuilder1);
      SQLUtil.addRequiredCondition("B%J}S/A|d", stringBuilder2);
      TableContainer tableContainer0 = new TableContainer("KK=DK[@8zmz<{");
      DBSchema dBSchema0 = new DBSchema("B%J}S/A|d");
      dBSchema0.getTables();
      dBSchema0.getTriggers();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9568016124420418
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte) (-110);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O#q6J{?'|tiAn", defaultDBTable0, 68, "");
      defaultDBColumn0.getNotNullConstraint();
      dBPrimaryKeyConstraint0.equals((Object) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O#q6J{?'|tiAn");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, (-571), "UNIQUE ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6862804394923148
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O#q6J{?'|tiAn");
      SQLUtil.isProcedureCall("ubkG4#I");
      SQLUtil.renderValue((Object) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ubkG4#I";
      String string0 = "'";
      SQLUtil.mutatesDataOrStructure("'");
      SQLUtil.isDML("O#q6J{?'|tiAn");
      SQLUtil.normalize("O#q6J{?'|tiAn", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = 471L;
      System.setCurrentTimeMillis(471L);
      String string1 = null;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("ubkG4#I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.2337916587064593
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      SQLUtil.renderColumnNames((String[]) null);
      SQLUtil.normalize("WJ*~k?'{gZz`j_", true);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      SQLUtil.renderColumnNames((String[]) null);
      DBDataType dBDataType0 = DBDataType.getInstance(248, "()");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      assertSame(dBPrimaryKeyConstraint1, dBPrimaryKeyConstraint0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isProcedureCall("");
      StringBuilder stringBuilder0 = new StringBuilder();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "O#q6J{?'|tiAn", false, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT O#q6J{?'|tiAn ", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[t(!=gaAvLN4g2", true, (String[]) null);
      SQLUtil.renderColumnNames((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT [t(!=gaAvLN4g2 ", defaultDBTable0, 3549, "[t(!=gaAvLN4g2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: [t(!=gaAvLN4g2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8200759753606213
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      String string0 = SQLUtil.normalize("EALJ-#8(,CX", false);
      assertEquals("EALJ - # 8 (, CX", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("");
      Boolean boolean1 = new Boolean(true);
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("rename()");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      
      boolean boolean3 = SQLUtil.isQuery("XC82>K4]~");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.799046890765003
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("^0~:#u(eTzA", "Ju0ZQNhq%#X", versionNumber0);
      String string0 = SQLUtil.normalize("call", true);
      assertEquals("call", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("call");
      Boolean boolean1 = new Boolean(true);
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean2);
      
      boolean boolean3 = SQLUtil.isQuery("select into");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      TableContainer tableContainer0 = new TableContainer("32");
      tableContainer0.getTable("32");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("32", (DBTable) null, (-2246), "32");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("32", string0);
      
      String string1 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("32 : 32", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("32 : 32");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize(" REFERENCES ", false);
      TableContainer tableContainer0 = new TableContainer("REFERENCES");
      tableContainer0.getTable("Method is not supported");
      String string0 = "update";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", (DBTable) null, (-2246), "call");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" REFERENCES ", (DBTable) null, (-2246), "REFERENCES");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      DBDataType dBDataType0 = DBDataType.getInstance(8, "_W(Snl]WQ0Oz]");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Method is not supported", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn2;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "truncateorg.h2.comm", false, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K9?lR?d3uSFFR7B?");
      System.setCurrentTimeMillis(1392L);
      SQLUtil.parseColumnTypeAndSize(".");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = null;
      stringArray0[3] = "org.h2.command.ddl.GrantRevoke";
      stringArray0[4] = "K9?lR?d3uSFFR7B?";
      String string0 = SQLUtil.join("org.h2.command.ddl.GrantRevoke", ".", stringArray0, (String) null, ".", stringArray0);
      assertEquals("org.h2.command.ddl.GrantRevoke join null as . on ... = ... and ... = ... and ..null = ..null and ..org.h2.command.ddl.GrantRevoke = ..org.h2.command.ddl.GrantRevoke and ..K9?lR?d3uSFFR7B? = ..K9?lR?d3uSFFR7B?", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "_!H}BtVR\"=b,X%";
      SQLUtil.normalize("_!H}BtVR\"=b,X%", false);
      String string1 = "`5I#KD6cqM";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`5I#KD6cqM");
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("catalog null", true, "catalog null", "Y");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = defaultDBTable0.getPrimaryKeyConstraint();
      assertNull(dBPrimaryKeyConstraint0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.46341355882643
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      SQLUtil.normalize("xDTKR)/#P", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "EW=SOM";
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("EW=SOM", compositeDBObject0);
      tableContainer0.getTable("[t(!=gaAvLN4g2");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("xDTKR) / # P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID(0L, 0L, 252);
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "9Eoqycc[", (String) null, basicUUID0, false);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "9Eoqycc[", schemaDescriptor0, 1534, '7');
      ColumnDescriptorList columnDescriptorList0 = tableDescriptor0.getGeneratedColumns();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("9Eoqycc[", "9Eoqycc[", versionNumber0);
      defaultDatabase0.getTable("SYSSTAT", false);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("SYSCAT", (DBTable) null, 0, "drop tableupdate(org.h2.command.ddl.createview, org.h2.command.ddl.createview)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.h2.command.ddl.createview\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Trying to establish a protocol version 3 connection to ", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("oTan", (DBSchema) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "oTan";
      stringArray0[1] = null;
      stringArray0[2] = "oTan";
      stringArray0[3] = "oTan";
      stringArray0[4] = "Trying to establish a protocol version 3 connection to ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (oTan, , oTan, oTan, Trying to establish a protocol version 3 connection to )", string0);
      
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      assertEquals("", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.059306028129147
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil.mutatesDataOrStructure("select");
      SQLUtil.isQuery("\"m=cko:4G");
      SQLUtil.mutatesDataOrStructure("NCLOB");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.128710355777319
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("xDTKR)/#P", true);
      assertEquals("xDTKR) / # P", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("vVs,GgNpm|3QG");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      SQLUtil.mutatesDataOrStructure("vVs,GgNpm|3QG");
      SQLUtil.isQuery("xDTKR)/#P");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("drop materialized viewupdate(org.h2.command.ddl.createview, org.h2.command.ddl.createview)");
      assertNotNull(boolean2);
      
      Boolean boolean3 = SQLUtil.mutatesDataOrStructure("vVs,GgNpm|3QG");
      assertNull(boolean3);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("a9t>Si@_?jhD|7fz", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT a9t>Si@_?jhD|7fz FOREIGN KEY () REFERENCES null()", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.239745866608458
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d5/ngyCdoxTKB/");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) defaultDBTable0;
      objectArray0[3] = (Object) "9xq{<BkMTw";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) nameSpec0;
      objectArray0[7] = (Object) defaultDBTable0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "9xq{<BkMTw", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.isQuery("-HNdhdFuxKm");
      String string0 = SQLUtil.renderValue(objectArray0[0]);
      assertEquals("zh", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter ");
      assertNull(boolean0);
      
      String string1 = SQLUtil.normalize(", ", false);
      assertEquals(",", string1);
      
      DBDataType dBDataType0 = DBDataType.getInstance(782, ",");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("rename ,(3) NULL", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.removeComments("rename");
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("rename");
      assertTrue(boolean1);
      
      SQLUtil.isQuery("rename");
      Character character0 = new Character('3');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'3'", string0);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure(" NOT");
      assertNull(boolean2);
      
      String string1 = SQLUtil.normalize("\u0001\u017A", false);
      assertEquals("\u0001 \u017A", string1);
  }
}
