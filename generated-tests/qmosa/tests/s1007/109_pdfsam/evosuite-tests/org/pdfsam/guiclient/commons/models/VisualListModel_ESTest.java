/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:09:46 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.event.ListDataListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      visualListModel0.moveUpIndexes(intArray0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-1207));
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      visualListModel0.getElementAt(0);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_LCDContrastKey0, (Object) null);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)32;
      byte byte1 = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-2120), (-1207), byteArray0, (-1207), true, (byte)50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1163);
      intArray0[1] = (-1082);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.subList((-1082), (-1163));
      int[] intArray1 = new int[5];
      intArray1[0] = (-1163);
      intArray1[1] = (-1163);
      intArray1[2] = (-1163);
      intArray1[3] = (-1163);
      intArray1[4] = (-1082);
      visualListModel0.reverseElements(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1975);
      visualListModel0.moveUpIndex((-1975));
      int int1 = 0;
      visualListModel0.subList((-1975), 0);
      visualListModel0.subList(0, 0);
      visualListModel0.clearData();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2469);
      visualListModel0.removeElements(intArray0, true);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(3262, 3262, true);
      visualListModel0.moveDownIndex((-3051));
      visualListModel0.elementsChanged();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = null;
      int int0 = (-1087);
      visualListModel0.moveDownIndex((-1087));
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-1087), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1087
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int int0 = 0;
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      int int1 = 2731;
      short[] shortArray0 = new short[0];
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable(2731, shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of components must  be at least 1
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = null;
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.setData(vector0);
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1585));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1585
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(352, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 352
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[0];
      visualListModel0.reverseElements(intArray1);
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1387);
      visualListModel0.getValidElements();
      intArray0[3] = 1932;
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      intArray0[4] = (-303);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getSize();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getValidElements();
      visualListModel0.clearData();
      visualListModel0.removeElements(intArray1, true);
      assertEquals(0, intArray1.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.subList(399, 1648, true);
      visualListModel0.removeElements(90, 90, false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2687);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = (-1485);
      intArray0[5] = 1;
      intArray0[6] = 557;
      visualListModel0.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(1146, (Collection<VisualPageListItem>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, true);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.prependAllElements(vector0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1167);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      visualListModel0.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements((-1120), (Collection<VisualPageListItem>) treeSet0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(26);
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.subList(30000, 26, true);
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((-635), (VisualPageListItem) null);
      int[] intArray0 = new int[4];
      visualListModel0.moveUpIndex((-73));
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.moveUpIndex((-73));
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6235217562718094
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[0];
      visualListModel0.reverseElements(intArray1);
      intArray0[0] = 0;
      visualListModel0.undeleteElements(intArray0);
      intArray0[1] = 0;
      intArray0[2] = (-1387);
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      intArray0[4] = (-303);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getSize();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      visualListModel0.addAllElements((-303), (Collection<VisualPageListItem>) null);
      visualListModel0.moveDownIndex(1);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.removeElements(2128, (-3599), true);
      int int0 = (-2266);
      visualListModel0.subList((-165), 360);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.clearData();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements(179, (Collection<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndex(179);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.subList((-1495), 5, true);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1167);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      visualListModel0.moveDownIndex(1535);
      int[] intArray0 = new int[0];
      visualListModel0.removeListDataListener((ListDataListener) null);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 1090;
      intArray1[1] = 2589;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      intArray1[2] = 0;
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.undeleteElements(intArray1);
      visualListModel0.moveUpIndexes(intArray1);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1167);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(527, 1370, false);
      int[] intArray0 = new int[5];
      intArray0[0] = 527;
      intArray0[1] = 527;
      intArray0[2] = 1370;
      intArray0[3] = 527;
      visualListModel0.removeElements((-1), (-1), false);
      intArray0[4] = 527;
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.subList((-2214), (-2214), true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertArrayEquals(new int[] {527, 527, 1370, 527, 527}, intArray0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex(1498);
      int[] intArray0 = new int[0];
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.undeleteElements(intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 1000;
      intArray1[1] = 0;
      intArray1[2] = 1498;
      intArray1[3] = 1498;
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      visualListModel0.updateElementAt((-635), (VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.updateElementAt((-635), (VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (-635));
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0854684353173742
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.subList(Integer.MIN_VALUE, Integer.MIN_VALUE);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getSize();
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8937882323911377
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4583113296830845
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, Integer.MIN_VALUE);
      visualListModel0.subList(Integer.MIN_VALUE, (-2270));
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getSize();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.341994252232425
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      visualListModel0.subList(Integer.MIN_VALUE, Integer.MIN_VALUE);
      visualListModel0.reverseElements(intArray0);
      int int0 = visualListModel0.getSize();
      visualListModel0.subList((-1976), 1830, true);
      int int1 = visualListModel0.getSize();
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3667103628435937
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, Integer.MIN_VALUE);
      visualListModel0.subList(Integer.MIN_VALUE, (-2270));
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getSize();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.prependAllElements(vector0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.884871333578161
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel1.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.252728336819822
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.updateElementAt(1830, visualPageListItemArray0[1]);
      int[] intArray1 = new int[7];
      intArray1[0] = 1830;
      intArray1[1] = 1830;
      intArray1[2] = 1830;
      intArray1[3] = 1830;
      intArray1[4] = 1830;
      intArray1[5] = 1830;
      intArray1[6] = 1830;
      visualListModel1.rotateClockwiseElements(intArray1);
      visualListModel1.rotateClockwiseElements(intArray1);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.reverseElements(intArray1);
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      visualListModel1.rotateClockwiseElements(intArray1);
      visualListModel0.undeleteElements(intArray1);
      visualListModel1.removeElements(intArray0, true);
      assertEquals(4, visualListModel1.getSize());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.removeElements(0, 0, true);
      assertEquals(0, visualListModel0.getSize());
  }
}
