/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:33:42 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("QUIT\r\n", 734);
      services_SIMPLE_Result0.works = false;
      services_SIMPLE_Result0.works = true;
      Services.testPOP3("**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7a2d8acb) **", 734);
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      services_HTTP_Result0.code = (-1);
      Services services0 = new Services();
      Services.testHTTPS("**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7a2d8acb) **", 1);
      Services.testHTTPS("QUIT\r\n", (-1));
      services_HTTP_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("", (-1));
      assertEquals(0L, services_SIMPLE_Result1.time);
      assertFalse(services_SIMPLE_Result1.works);
      
      Services.testHTTPS("**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: QUIT\r\n) **", 2982);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS((String) null, 1);
      assertEquals(0L, services_HTTP_Result1.time);
      assertFalse(services_HTTP_Result1.works);
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertEquals(0, services_HTTP_Result1.code);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", (-2927));
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.Error = "";
      services_HTTP_Result0.page_weight = (-2927);
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.Error = null;
      services_SIMPLE_Result0.works = false;
      services_SIMPLE_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("", 0);
      services_HTTP_Result0.page_weight = 0;
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-2927) **.\n****", string0);
      
      services_SIMPLE_Result1.toString();
      services_SIMPLE_Result0.reset();
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("", 0);
      Services.SIMPLE_Result services_SIMPLE_Result3 = Services.testPOP3("**URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-2927) **", 3000);
      services_SIMPLE_Result3.time = (long) 3000;
      Services.SIMPLE_Result services_SIMPLE_Result4 = Services.testPOP3("", 862);
      services_SIMPLE_Result2.reset();
      services_HTTP_Result0.reset();
      services_SIMPLE_Result2.reset();
      services_SIMPLE_Result3.Error = "";
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP((String) null, (-1));
      assertEquals(0, services_HTTP_Result1.page_weight);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur : java.lang.NullPointerException**");
      Services.SIMPLE_Result services_SIMPLE_Result5 = new Services.SIMPLE_Result();
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("", 0);
      assertEquals(44, services_HTTP_Result2.page_weight);
      assertTrue(services_HTTP_Result2.works);
      
      Services services0 = new Services();
      services_SIMPLE_Result1.toString();
      services_SIMPLE_Result4.toString();
      assertEquals(0L, services_SIMPLE_Result4.time);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:3000");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ",Hr");
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", 3000);
      services_SIMPLE_Result0.works = true;
      services_HTTP_Result0.reset();
      Services services0 = new Services();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("", 3000);
      assertEquals(4, services_HTTP_Result1.page_weight);
      
      services_HTTP_Result1.reset();
      boolean boolean0 = services_SIMPLE_Result0.works;
      services_HTTP_Result0.reset();
      Services.testPOP3("(}'QrB{oq|0T(d", 3000);
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("", 0);
      assertFalse(services_SIMPLE_Result1.works);
  }
}
