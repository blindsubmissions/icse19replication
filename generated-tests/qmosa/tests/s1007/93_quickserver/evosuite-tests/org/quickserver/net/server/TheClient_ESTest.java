/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:24:21 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(1361);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.getClientEventHandler();
      theClient0.setTimeout(528);
      theClient0.setTimeout(1);
      theClient0.getClientAuthenticationHandler();
      QuickServer quickServer0 = new QuickServer((String) null);
      theClient0.setServer(quickServer0);
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress((String) null, 528);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTryMsg(".igUe5");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setCommunicationLogging(true);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getAuthenticator();
      theClient0.getSocketChannel();
      theClient0.setTimeout(125);
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setCommunicationLogging(true);
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.toString();
      assertEquals(125, theClient0.getTimeout());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1));
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setServer((QuickServer) null);
      theClient0.getAuthenticator();
      theClient0.getServer();
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertEquals((-1), theClient0.getMaxAuthTry());
      
      theClient1.getSocket();
      theClient1.setCommunicationLogging(true);
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(3262);
      blockingClientHandler0.getSocket();
      assertEquals("<ClientHandler-Pool#3262-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setSocket((Socket) null);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTry(0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient0.setTrusted(true);
      theClient1.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.setMaxAuthTry(304);
      theClient1.toString();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient1.setMaxAuthTry(0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      try { 
        blockingClientHandler0.isConected();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTrusted();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setMaxAuthTry((-2282));
      theClient0.getSocket();
      theClient0.setTrusted(false);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.toString();
      theClient0.toString();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getTimeoutMsg();
      assertEquals((-2282), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTimeout();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        authenticator0.handleAuthentication((ClientHandler) nonBlockingClientHandler0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String/Byte mode not implemented!
         //
         verifyException("org.quickserver.net.server.QuickAuthenticationHandler", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setTrusted(false);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTry();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      assertEquals("<ClientHandler-Pool#0-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.toString();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }
}
