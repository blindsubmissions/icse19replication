/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:34:32 GMT 2018
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)12;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec.values();
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec.values();
      int int0 = (-2611);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(4L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 3 ]/0B is out of range of sequence which is only [ 0 .. 2 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2931186014868126
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(546, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      byte byte1 = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byte byte2 = (byte)5;
      byteArray0[2] = (byte)5;
      byte byte3 = (byte)36;
      byteArray0[3] = (byte)36;
      byte byte4 = (byte) (-4);
      Range range0 = Range.of((-803L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -803 .. -803 ]/0B is out of range of sequence which is only [ 0 .. 530318627 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      byte byte1 = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)31;
      byte byte2 = (byte) (-40);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 6);
      byteArray0[3] = (byte) (-40);
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte4 = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-76);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8946891171539901
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-79);
      byte byte0 = (byte)5;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)26;
      byteArray1[5] = (byte) (-79);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte) (-58);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4410152780267023
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)76;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-31);
      byteArray1[4] = (byte)85;
      Iterator<Nucleotide> iterator1 = defaultNucleotideCodec0.iterator(byteArray1);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 255);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-98);
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-7);
      byte byte1 = (byte)4;
      byteArray0[2] = (byte)4;
      byte byte2 = (byte)113;
      byteArray0[3] = (byte)113;
      byte byte3 = (byte)7;
      byteArray0[4] = (byte)7;
      byte byte4 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 629);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)91;
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte)14);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      byte[] byteArray1 = new byte[2];
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray1[1] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray1, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 2
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-79);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)26;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGapOffsets(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9913464134109882
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-69);
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 100);
      // Undeclared exception!
      defaultNucleotideCodec1.toString(byteArray0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5070264355574183
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 100);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray2);
      defaultNucleotideCodec0.toString(byteArray0);
      int int0 = 11;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec.values();
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte) (-98));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -98
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-50);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-40));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.874640740535752
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)42;
      byte byte1 = (byte)0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-40);
      int int0 = (-729);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-729));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9650156932565066
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.encode(nucleotide0);
      DefaultNucleotideCodec.values();
      Range range0 = Range.ofLength(0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec4.iterator(byteArray0, range0);
      defaultNucleotideCodec1.encode(0, iterator0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(718809600, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-37);
      int int0 = new Byte((byte) (-50));
      DefaultNucleotideCodec.values();
      byteArray0[3] = (byte) (-50);
      byte byte0 = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7810370800861843
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec.values();
      byte[] byteArray0 = new byte[6];
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec.values();
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec.values();
      Range range0 = Range.ofLength(0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.iterator(byteArray2, range0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec4.iterator(byteArray2, range0);
      defaultNucleotideCodec4.encode(0, iterator0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec5.encode((-2125791892), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.931923293010705
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec.values();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Guanine;
      defaultNucleotideCodec4.encode(nucleotide1);
      DefaultNucleotideCodec.values();
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec3.iterator(byteArray0, range0);
      defaultNucleotideCodec3.encode(0, iterator0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(718809600, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.664619195193492
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec1.toString(byteArray0);
      assertEquals("-", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = defaultNucleotideCodec2.decode(byteArray0, (byte)0);
      assertEquals(Nucleotide.Gap, nucleotide1);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray0, (byte)0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec4.isGap(byteArray0, (byte)0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5393673998815776
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Purine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-93);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte) (-124);
      defaultNucleotideCodec1.decode(byteArray1, 1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (byte)4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.665394159983386
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      assertEquals(Nucleotide.Gap, nucleotide1);
      
      defaultNucleotideCodec0.iterator(byteArray0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 0);
      assertTrue(boolean0);
      
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3262));
      assertEquals(0, int0);
      
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      assertEquals(1, int1);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.829102659208868
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray1, 0);
      defaultNucleotideCodec2.toString(byteArray0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (-730));
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }
}
