/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:34:59 GMT 2018
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", "", false, inetAddress0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setRememberMe(false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
      
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = null;
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      usernamePasswordToken0.setPassword((char[]) null);
      String string1 = "org.jsecurity.authc.UsernamePasswordToken";
      usernamePasswordToken0.setUsername("org.jsecurity.authc.UsernamePasswordToken");
      usernamePasswordToken0.toString();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)1;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-55, 1]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("4YxEg9WX*}_)\"SpI", "{zjo#NFCMU", false);
      usernamePasswordToken0.clear();
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'R';
      charArray0[2] = 'y';
      charArray0[3] = '+';
      charArray0[4] = 'B';
      charArray0[5] = '#';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0, inetAddress0);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setRememberMe(true);
      char[] charArray1 = new char[1];
      charArray1[0] = 'K';
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.setPassword(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "Dou'*", inetAddress0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setRememberMe(true);
      char[] charArray0 = new char[8];
      usernamePasswordToken0.setUsername("%0");
      charArray0[0] = '=';
      charArray0[1] = 'X';
      charArray0[2] = 'g';
      charArray0[3] = '!';
      charArray0[4] = 'c';
      charArray0[5] = 'U';
      charArray0[6] = 'r';
      charArray0[7] = '\'';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "");
      usernamePasswordToken0.setInetAddress((InetAddress) null);
      try { 
        MockInetAddress.getByAddress((byte[]) null);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.488327743368588
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      usernamePasswordToken0.clear();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.setUsername("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (/127.0.0.1)");
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.isRememberMe();
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '1';
      charArray0[2] = ']';
      charArray0[3] = '}';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.setUsername("");
      assertTrue(usernamePasswordToken0.isRememberMe());
  }
}
