/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:41:09 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.IEngine;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "w}";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("w}");
      String string1 = "";
      Submit submit0 = null;
      try {
        submit0 = new Submit(xmlEntityRef0, "w}", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Form form0 = new Form("o3U)I+KSN");
      // Undeclared exception!
      try { 
        form0.id("o3U)I+KSN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.strong();
      String string0 = "G]]T(A5:v7)HnRtC>(6";
      StringBuilder stringBuilder0 = new StringBuilder("G]]T(A5:v7)HnRtC>(6");
      StringBuilder stringBuilder1 = stringBuilder0.insert(4, 4);
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(4);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(8231, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8231
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "When using table with only tr-elements, you can't create a thead-element.", "a");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(620, 620, (-1813), (-531), (-531), (-1813));
      // Undeclared exception!
      try { 
        checkbox0.span((Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.id((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      form0.renderHint("");
      // Undeclared exception!
      try { 
        form0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "href";
      Form form0 = new Form("href");
      Any any0 = null;
      try {
        any0 = new Any(form0, "href");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "Finder expression didn't evaluate to a boolean value.";
      Checkbox checkbox0 = new Checkbox((Component) null, "", "Finder expression didn't evaluate to a boolean value.");
      String string1 = "jquery.js";
      checkbox0.fieldBinding("jquery.js");
      String string2 = "";
      ElExpression elExpression0 = new ElExpression("Finder expression didn't evaluate to a boolean value.");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "K";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("K");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "K", "K");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(fileInput0, "v+", "K", "v+", stringSelectModel0, false);
      String string1 = "";
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox(select0, "5|?wwf(^eik_AQo\"y", "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      String string0 = "";
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("", "");
      errorPage0.dfn((Object) initialFieldValue0);
      TextArea textArea0 = new TextArea(link0, "span", "");
      Table table0 = new Table(textArea0, "");
      // Undeclared exception!
      try { 
        table0.imageSubmit("", "span");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "`";
      DateInput dateInput0 = new DateInput(errorPage0, "`", "`", "`");
      String string1 = "";
      Table table0 = new Table(dateInput0, "");
      String string2 = "caused by: ";
      Object object0 = null;
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        dateInput0.ul();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.legend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Form form0 = new Form("U7T");
      assertNotNull(form0);
      assertEquals("U7T", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      
      String string0 = null;
      Form form1 = form0.addFormValidationRule((String) null, (String) null);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertEquals("U7T", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("U7T", form1.getComponentId());
      
      // Undeclared exception!
      try { 
        form1.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      String string0 = errorPage0.toString();
      assertEquals("<div id=\"wheel_ErrorPage\"/>", string0);
      assertNotNull(string0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      TextInput textInput0 = new TextInput(errorPage0, "GGT=^w)&z\"IB:,84P0m", "sub");
      assertNotNull(textInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      
      StandaloneComponent standaloneComponent0 = textInput0._getTopLevelComponent(true);
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertNotNull(standaloneComponent0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      
      Hidden hidden0 = new Hidden(standaloneComponent0, "sub", "sub");
      assertNotNull(hidden0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("sub", hidden0.getComponentId());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("sub", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      
      ElExpression elExpression0 = new ElExpression("abbr");
      assertNotNull(elExpression0);
      assertEquals("abbr", elExpression0.toString());
      assertEquals("abbr", elExpression0.getExpression());
      assertEquals(4, elExpression0.length());
      
      ElExpression elExpression1 = elExpression0.errorMessage("sub");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNotNull(elExpression1);
      assertEquals("abbr", elExpression0.toString());
      assertEquals("abbr", elExpression0.getExpression());
      assertEquals(4, elExpression0.length());
      assertEquals("abbr", elExpression1.getExpression());
      assertEquals(4, elExpression1.length());
      assertEquals("abbr", elExpression1.toString());
      
      Block block0 = (Block)standaloneComponent0.address();
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      // Undeclared exception!
      try { 
        hidden0.kbd((Object) elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression abbr in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      String string0 = "GGT=^w)&z\"IB:,84P0m";
      String string1 = "sub";
      String string2 = "kR<T0Vag";
      Checkbox checkbox0 = new Checkbox(errorPage0, "kR<T0Vag", "kR<T0Vag");
      assertNotNull(checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("kR<T0Vag", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("kR<T0Vag", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Form form0 = new Form("A\u0000>4Dn]Z9`d?");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("A\u0000>4Dn]Z9`d?", form0.getComponentId());
      
      // Undeclared exception!
      try { 
        form0.big((Object) "A\u0000>4Dn]Z9`d?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      
      DateInput dateInput0 = new DateInput(errorPage0, "T", "T", "T");
      assertNotNull(dateInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("T", dateInput0.getComponentId());
      assertEquals("T", dateInput0.getFormElementName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.clasS("T");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertNotNull(errorPage1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      
      String string0 = "";
      Table table0 = new Table(dateInput0, "");
      assertNotNull(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("T", dateInput0.getComponentId());
      assertEquals("T", dateInput0.getFormElementName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      
      // Undeclared exception!
      try { 
        dateInput0.dateFormat("caused by: ", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'caused by: '.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "`";
      Any any0 = new Any(errorPage0, "`");
      assertNotNull(any0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      
      String string1 = "C5W5kD-sj@@^@ =H";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("C5W5kD-sj@@^@ =H");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("C5W5kD-sj@@^@ =H", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      XmlEntityRef xmlEntityRef1 = new XmlEntityRef("`");
      assertFalse(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertNotNull(xmlEntityRef1);
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertEquals("`", xmlEntityRef1.getComponentId());
      
      XmlEntityRef xmlEntityRef2 = (XmlEntityRef)xmlEntityRef1.actionBinding("`");
      assertFalse(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertFalse(xmlEntityRef2.equals((Object)xmlEntityRef0));
      assertNotSame(xmlEntityRef1, xmlEntityRef0);
      assertSame(xmlEntityRef1, xmlEntityRef2);
      assertSame(xmlEntityRef2, xmlEntityRef1);
      assertNotSame(xmlEntityRef2, xmlEntityRef0);
      assertNotNull(xmlEntityRef2);
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertEquals("`", xmlEntityRef1.getComponentId());
      assertFalse(xmlEntityRef2._isGeneratedId());
      assertEquals("`", xmlEntityRef2.getComponentId());
      assertNull(xmlEntityRef2.defaultTagName());
      
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      
      XmlEntityRef xmlEntityRef1 = new XmlEntityRef("");
      assertTrue(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertNotNull(xmlEntityRef1);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef1.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      
      String[] stringArray0 = new String[0];
      XmlEntityRef xmlEntityRef2 = (XmlEntityRef)xmlEntityRef1.attributes(stringArray0);
      assertTrue(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertTrue(xmlEntityRef2.equals((Object)xmlEntityRef0));
      assertEquals(0, stringArray0.length);
      assertSame(xmlEntityRef1, xmlEntityRef2);
      assertNotSame(xmlEntityRef1, xmlEntityRef0);
      assertSame(xmlEntityRef2, xmlEntityRef1);
      assertNotSame(xmlEntityRef2, xmlEntityRef0);
      assertNotNull(xmlEntityRef2);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef1.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef2.getComponentId());
      assertFalse(xmlEntityRef2._isGeneratedId());
      assertNull(xmlEntityRef2.defaultTagName());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.big((Object) xmlEntityRef1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      
      ActionExpression actionExpression1 = actionExpression0.submitForm(true);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      
      ActionExpression actionExpression2 = actionExpression1.javascript("");
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertNotNull(actionExpression2);
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.toString());
      assertEquals(0, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertFalse(actionExpression2.isExternalUrl());
      assertEquals("", actionExpression2.getJavascript());
      assertEquals("", actionExpression2.getActionExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals(0, actionExpression2.length());
      assertEquals("", actionExpression2.toString());
      assertNull(actionExpression2.getEvent());
      
      String[] stringArray0 = new String[4];
      stringArray0[2] = "caused by: ";
      stringArray0[3] = "7T/TFvUCPV0q[%K";
      Block block0 = (Block)errorPage0.wBlock("caused by: ");
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Form form0 = new Form("jWP+9HMPw\"eA>M?qo&P");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("jWP+9HMPw\"eA>M?qo&P", form0.getComponentId());
      
      String string0 = "Df;676>* F_x,.pv";
      Hidden hidden0 = new Hidden(form0, "Df;676>* F_x,.pv", "5CB'AkryF&:uS=iv%");
      assertNotNull(hidden0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("jWP+9HMPw\"eA>M?qo&P", form0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("Df;676>* F_x,.pv", hidden0.getFormElementName());
      assertEquals("5CB'AkryF&:uS=iv%", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      
      // Undeclared exception!
      try { 
        form0.address((Object) hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      
      XmlEntityRef xmlEntityRef1 = new XmlEntityRef("");
      assertTrue(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertNotNull(xmlEntityRef1);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef1.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      
      IEngine iEngine0 = xmlEntityRef1.getEngine();
      assertTrue(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertNotSame(xmlEntityRef1, xmlEntityRef0);
      assertNull(iEngine0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef1.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      
      String[] stringArray0 = new String[0];
      XmlEntityRef xmlEntityRef2 = (XmlEntityRef)xmlEntityRef1.attributes(stringArray0);
      assertTrue(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertTrue(xmlEntityRef2.equals((Object)xmlEntityRef0));
      assertEquals(0, stringArray0.length);
      assertSame(xmlEntityRef1, xmlEntityRef2);
      assertNotSame(xmlEntityRef1, xmlEntityRef0);
      assertNotSame(xmlEntityRef2, xmlEntityRef0);
      assertSame(xmlEntityRef2, xmlEntityRef1);
      assertNotNull(xmlEntityRef2);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef1.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertNull(xmlEntityRef2.defaultTagName());
      assertFalse(xmlEntityRef2._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef2.getComponentId());
      
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      ElExpression elExpression0 = new ElExpression("olCm'rF-qQz[<_)*9");
      assertNotNull(elExpression0);
      assertEquals(17, elExpression0.length());
      assertEquals("olCm'rF-qQz[<_)*9", elExpression0.getExpression());
      assertEquals("olCm'rF-qQz[<_)*9", elExpression0.toString());
      
      // Undeclared exception!
      try { 
        xmlEntityRef2.checkboxGroup("", stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      TextInput textInput0 = new TextInput(errorPage0, "GGT=^w)&z\"IB:,84P0m", "sub");
      assertNotNull(textInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      
      StandaloneComponent standaloneComponent0 = textInput0._getTopLevelComponent(true);
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertNotNull(standaloneComponent0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("s");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(1, actionExpression0.length());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      
      ActionExpression actionExpression1 = actionExpression0.setOwner(errorPage0);
      assertSame(errorPage0, standaloneComponent0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(1, actionExpression1.length());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertEquals("s", actionExpression1.getActionExpression());
      assertEquals("s", actionExpression1.toString());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("s", actionExpression1.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      
      Form form0 = new Form(standaloneComponent0, "org.apache.commons.io.filefilter.OrFileFilter", actionExpression1);
      assertNotNull(form0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(1, actionExpression1.length());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertEquals("s", actionExpression1.getActionExpression());
      assertEquals("s", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("s", actionExpression1.getExpression());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("org.apache.commons.io.filefilter.OrFileFilter", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      Label label0 = (Label)form0.dt((Object) "s");
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(1, actionExpression1.length());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertEquals("s", actionExpression1.getActionExpression());
      assertEquals("s", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("s", actionExpression1.getExpression());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("org.apache.commons.io.filefilter.OrFileFilter", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      
      Submit submit0 = (Submit)form0.reset("s");
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(submit0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(1, actionExpression1.length());
      assertEquals("wheel_ErrorPage", actionExpression1.getSourceId());
      assertEquals("s", actionExpression1.getActionExpression());
      assertEquals("s", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("s", actionExpression1.getExpression());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("org.apache.commons.io.filefilter.OrFileFilter", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("s", submit0.getComponentId());
      assertEquals("s", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "}0%>~d9 xy$u{2d");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("}0%>~d9 xy$u{2d", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      
      Table table1 = table0.renderHint(actionExpression0);
      assertSame(errorPage0, standaloneComponent0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("table", table0.defaultTagName());
      assertEquals("}0%>~d9 xy$u{2d", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("}0%>~d9 xy$u{2d", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      
      Table table2 = table1.id("Z+!$!i4X1");
      assertSame(errorPage0, standaloneComponent0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(table2);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Z+!$!i4X1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Z+!$!i4X1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Z+!$!i4X1", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      
      TableBlock tableBlock0 = table2.thead();
      assertSame(errorPage0, standaloneComponent0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Z+!$!i4X1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Z+!$!i4X1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Z+!$!i4X1", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      Any any0 = tableBlock0.col();
      assertSame(errorPage0, standaloneComponent0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(any0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Z+!$!i4X1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Z+!$!i4X1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Z+!$!i4X1", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      
      String string0 = any0.defaultTagName();
      assertSame(errorPage0, standaloneComponent0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(table0, table1);
      assertSame(table0, table2);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNull(string0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("s", actionExpression0.getExpression());
      assertEquals("s", actionExpression0.toString());
      assertEquals(1, actionExpression0.length());
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
      assertEquals("s", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("Z+!$!i4X1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("Z+!$!i4X1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Z+!$!i4X1", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      
      // Undeclared exception!
      try { 
        table2.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // When using table with thead, tfoot and tbody, you can't create rows directly under a table-component.
         //
         verifyException("wheel.components.Table", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "br";
      String string1 = "name";
      ActionExpression actionExpression0 = new ActionExpression("name");
      assertNotNull(actionExpression0);
      assertEquals("name", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(4, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("name", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("name", actionExpression0.toString());
      
      Form form0 = new Form(errorPage0, "br", actionExpression0);
      assertNotNull(form0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("name", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(4, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("name", actionExpression0.getExpression());
      assertEquals("action", actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertEquals("name", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("br", form0.getComponentId());
      
      String string2 = "";
      // Undeclared exception!
      try { 
        form0.id("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      String string0 = errorPage0.toString();
      assertEquals("<div id=\"wheel_ErrorPage\"/>", string0);
      assertNotNull(string0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<div id=\"wheel_ErrorPage\"/>");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<div id=\"wheel_ErrorPage\"/>", xmlEntityRef0.getComponentId());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "GGT=^w)&z\"IB:,84P0m";
      stringArray0[1] = "<div id=\"wheel_ErrorPage\"/>";
      stringArray0[2] = "sub";
      stringArray0[3] = "<div id=\"wheel_ErrorPage\"/>";
      stringArray0[4] = "GGT=^w)&z\"IB:,84P0m";
      stringArray0[5] = "<div id=\"wheel_ErrorPage\"/>";
      XmlEntityRef xmlEntityRef1 = (XmlEntityRef)xmlEntityRef0.attributes(stringArray0);
      assertEquals(6, stringArray0.length);
      assertSame(xmlEntityRef0, xmlEntityRef1);
      assertSame(xmlEntityRef1, xmlEntityRef0);
      assertNotNull(xmlEntityRef1);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<div id=\"wheel_ErrorPage\"/>", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertEquals("<div id=\"wheel_ErrorPage\"/>", xmlEntityRef1.getComponentId());
      assertNull(xmlEntityRef1.defaultTagName());
      
      // Undeclared exception!
      try { 
        xmlEntityRef1.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      TextInput textInput0 = new TextInput(errorPage0, "GGT=^w)&z\"IB:,84P0m", "sub");
      assertNotNull(textInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      
      StandaloneComponent standaloneComponent0 = textInput0._getTopLevelComponent(true);
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertNotNull(standaloneComponent0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      
      Hidden hidden0 = new Hidden(standaloneComponent0, "sub", "sub");
      assertNotNull(hidden0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("sub", hidden0.getComponentId());
      assertEquals("sub", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      
      TableBlock tableBlock0 = new TableBlock(hidden0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("sub", hidden0.getComponentId());
      assertEquals("sub", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertNotNull(tableRow0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("sub", hidden0.getComponentId());
      assertEquals("sub", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      
      Block block0 = tableRow0.renderHint("sub");
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertSame(tableRow0, block0);
      assertSame(block0, tableRow0);
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("sub", hidden0.getComponentId());
      assertEquals("sub", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("TableRow_1", block0.getComponentId());
      assertEquals("tr", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      
      Block block1 = (Block)tableRow0.th();
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertSame(tableRow0, block0);
      assertNotNull(block1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("sub", hidden0.getComponentId());
      assertEquals("sub", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("Block_1", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "sub";
      objectArray0[1] = (Object) textInput0;
      Any any0 = tableBlock0.col();
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertNotNull(any0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("sub", hidden0.getComponentId());
      assertEquals("sub", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      
      // Undeclared exception!
      try { 
        any0.dd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "`";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("C5W5kD-sj@@^@ =H");
      assertNotNull(xmlEntityRef0);
      assertEquals("C5W5kD-sj@@^@ =H", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      XmlEntityRef xmlEntityRef1 = new XmlEntityRef("`");
      assertFalse(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertNotNull(xmlEntityRef1);
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertEquals("`", xmlEntityRef1.getComponentId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef1.map("`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      
      DateInput dateInput0 = new DateInput(errorPage0, "", "", "");
      assertNotNull(dateInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      
      Table table0 = new Table(dateInput0, "");
      assertNotNull(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      
      TextInput textInput0 = new TextInput(table0, "", "");
      assertNotNull(textInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertEquals("", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Block block0 = (Block)table0.u();
      assertNotNull(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        textInput0.area(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0791512728828505
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      DateInput dateInput0 = new DateInput(errorPage0, "", "", "");
      assertNotNull(dateInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      
      Table table0 = new Table(dateInput0, "");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      TextInput textInput0 = new TextInput(table0, "", "");
      assertNotNull(textInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("", textInput0.getFormElementName());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Form form0 = new Form(")");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals(")", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.addFormValidationRule("", "");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertEquals("form", form0.defaultTagName());
      assertEquals(")", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals(")", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      
      ActionExpression actionExpression0 = form1.getAction();
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNull(actionExpression0);
      assertEquals("form", form0.defaultTagName());
      assertEquals(")", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals(")", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      
      String string0 = "&#";
      // Undeclared exception!
      try { 
        textInput0.end("&#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression '&#'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Block block0 = (Block)errorPage0.code();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Block block1 = (Block)block0.s();
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertNotNull(block1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      
      String string0 = "";
      Label label0 = (Label)block0.cite((Object) "");
      assertFalse(block0.equals((Object)block1));
      assertNotSame(block0, block1);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        block1.checkbox("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.293118601486813
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      
      DateInput dateInput0 = new DateInput(errorPage0, "`", "`", "`");
      assertNotNull(dateInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(dateInput0.isEmpty());
      assertEquals("`", dateInput0.getFormElementName());
      assertEquals("`", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      
      String string0 = "_Z% FCK!e.?";
      TextInput textInput0 = new TextInput(dateInput0, "_Z% FCK!e.?", "");
      assertNotNull(textInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(dateInput0.isEmpty());
      assertEquals("`", dateInput0.getFormElementName());
      assertEquals("`", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("_Z% FCK!e.?", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        textInput0.area((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "`";
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals("\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("C5W5kD-sj@@^@ =H");
      assertNotNull(xmlEntityRef0);
      assertEquals("C5W5kD-sj@@^@ =H", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      
      XmlEntityRef xmlEntityRef1 = new XmlEntityRef("`");
      assertFalse(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertNotNull(xmlEntityRef1);
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertEquals("`", xmlEntityRef1.getComponentId());
      
      XmlEntityRef xmlEntityRef2 = (XmlEntityRef)xmlEntityRef1.actionBinding("`");
      assertFalse(xmlEntityRef1.equals((Object)xmlEntityRef0));
      assertFalse(xmlEntityRef2.equals((Object)xmlEntityRef0));
      assertNotSame(xmlEntityRef1, xmlEntityRef0);
      assertSame(xmlEntityRef1, xmlEntityRef2);
      assertNotSame(xmlEntityRef2, xmlEntityRef0);
      assertSame(xmlEntityRef2, xmlEntityRef1);
      assertNotNull(xmlEntityRef2);
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertEquals("`", xmlEntityRef1.getComponentId());
      assertNull(xmlEntityRef2.defaultTagName());
      assertEquals("`", xmlEntityRef2.getComponentId());
      assertFalse(xmlEntityRef2._isGeneratedId());
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("c[~EJC7O&y}g{#cM+:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "GGT=^w)&z\"IB:,84P0m";
      String string1 = "sub";
      TextInput textInput0 = new TextInput(errorPage0, "GGT=^w)&z\"IB:,84P0m", "sub");
      assertNotNull(textInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      
      StandaloneComponent standaloneComponent0 = textInput0._getTopLevelComponent(true);
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertNotNull(standaloneComponent0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(standaloneComponent0.isPage());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertFalse(standaloneComponent0._isBuilt());
      
      Hidden hidden0 = new Hidden(standaloneComponent0, "sub", "sub");
      assertNotNull(hidden0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("GGT=^w)&z\"IB:,84P0m", textInput0.getFormElementName());
      assertEquals("sub", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(standaloneComponent0.isPage());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertFalse(standaloneComponent0._isBuilt());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("sub", hidden0.getFormElementName());
      assertEquals("sub", hidden0.getComponentId());
      
      // Undeclared exception!
      try { 
        errorPage0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
