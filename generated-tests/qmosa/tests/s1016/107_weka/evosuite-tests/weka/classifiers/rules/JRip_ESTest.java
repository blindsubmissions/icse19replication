/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:53:48 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Properties;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      jRip0.getTechnicalInformation();
      stringArray0[0] = "-N";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "#a[mQcRh'+sa+i:`%";
      stringArray0[4] = "";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(1450.72308);
      jRip_RipperRule0.setConsequent(1422.228308249822);
      jRip0.getCapabilities();
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", "", (-1));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setFolds(70);
      jRip0.globalInfo();
      jRip0.setOptions((String[]) null);
      jRip0.foldsTipText();
      jRip0.getOptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      DenseInstance denseInstance0 = new DenseInstance(25);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      assertTrue(jRip0.getDebug());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "meter";
      stringArray0[1] = "&V#}SMC";
      stringArray0[2] = "";
      stringArray0[3] = "\nGrowing a rule ...";
      stringArray0[4] = "dF_fF'-&P8'b!a8TPo";
      stringArray0[5] = "";
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      jRip0.getTechnicalInformation();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, (Instances) null, (-488));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      String string0 = " <= ";
      StringReader stringReader0 = new StringReader("\"h");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[h], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      Attribute attribute0 = new Attribute("", "", 434);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getRevision();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip_RipperRule0.size();
      jRip0.getRevision();
      jRip0.getSeed();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip.main((String[]) null);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-1574));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = (-3112.4851);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("is", arrayList0, 0);
      try { 
        jRip0.rulesetForOneClass((-3112.4851), instances0, 0, (-3112.4851));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("Iz", "");
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => Iz=", string1);
      
      Utils.SMALL = (-364.47574);
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      String string2 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string2);
      
      String string3 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string3);
      
      String string4 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string4);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("oFKY5Jl", linkedList0, 11);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, 0);
      Attribute attribute1 = attribute0.copy((String) null);
      jRip0.setCheckErrorRate(true);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      String string0 = jRip0.globalInfo();
      jRip0.setOptimizations((-3188));
      jRip0.setDebug(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      attribute0.equals(string0);
      jRip_RipperRule0.toString(attribute0);
      jRip_RipperRule0.setConsequent(0.0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      jRip0.setMinNo((-3731.16));
      jRip_NumericAntd0.copy();
      jRip0.getSeed();
      IBk iBk0 = new IBk(1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 0, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = (-31.75);
      jRip0.getCheckErrorRate();
      JRip jRip1 = new JRip();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute(".MU-ID)i#p,&2O)J$T", "The default DL = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'T'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0, (-1364));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.makeCopies(additiveRegression0, 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      jRip_NominalAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      JRip.RipperRule jRip_RipperRule2 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule2.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule2, jRip_RipperRule1);
      
      long long0 = jRip0.getSeed();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, long0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.listOptions();
      jRip0.usePruningTipText();
      jRip0.setMinNo((-2092.491065707859));
      jRip0.toString();
      jRip0.toString();
      int[] intArray0 = new int[6];
      intArray0[0] = 500;
      intArray0[1] = (-767);
      intArray0[2] = 83;
      intArray0[3] = 0;
      intArray0[4] = 98;
      intArray0[5] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(558.4, intArray0, (-2313));
      jRip0.getUsePruning();
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      jRip0.setCheckErrorRate(false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Attribute attribute0 = new Attribute(" Consequent not set yet.", list0, 2243);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0L);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[7];
      stringArray1[0] = "3] pBOC^30f2]#Yu`k";
      stringArray1[1] = "3] pBOC^30f2]#Yu`k";
      stringArray1[2] = "3] pBOC^30f2]#Yu`k";
      stringArray1[3] = "3] pBOC^30f2]#Yu`k";
      stringArray1[4] = "..aa0?J}Q\"/J.";
      stringArray1[5] = "3] pBOC^30f2]#Yu`k";
      stringArray1[6] = "3] pBOC^30f2]#Yu`k";
      jRip0.setOptions(stringArray1);
      stringArray0[0] = "3] pBOC^30f2]#Yu`k";
      jRip0.setUsePruning(false);
      assertFalse(jRip0.getUsePruning());
      
      stringArray0[1] = ",V@0Dff-%HxN";
      stringArray0[2] = "P_mp \"Bxe{";
      jRip0.setOptions(stringArray0);
      jRip0.setCheckErrorRate(true);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      jRip0.getSeed();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute("");
      jRip0.setMinNo(1);
      jRip0.checkErrorRateTipText();
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("c_j?!y,20y/h,rNRuX\"");
      attribute0.value(2);
      jRip_RipperRule0.toString(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      jRip_RipperRule0.toString(attribute0);
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 0.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[5] = 2184.337215820135;
      doubleArray0[6] = (double) 0;
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals("c_j?!y,20y/h,rNRuX\" <= NaN", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => c_j?!y,20y/h,rNRuX\"=", string1);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tr";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 93;
      Instances instances0 = new Instances("j#cydG}F", arrayList0, 93);
      try { 
        jRip0.rulesetForOneClass(0.0, instances0, 0.5, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("");
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      AbstractClassifier.runClassifier(jRip0, (String[]) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "real";
      stringArray0[2] = "@attribute";
      stringArray0[3] = "relational";
      stringArray0[4] = "@end";
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", "?:");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => JRIP: No model built yet.=", string0);
      
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      attribute0.value((-1491));
      String string1 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string1);
      
      String string2 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string2);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      
      String string3 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string3);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
      
      jRip0.setUsePruning(true);
      jRip0.toString();
      String string4 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string4);
      
      String string5 = jRip_NominalAntd0.toString();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("JRIP: No model built yet. = ", string5);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.toString();
      Attribute attribute0 = new Attribute("Iz", "");
      jRip_RipperRule0.toString(attribute0);
      Utils.SMALL = (-364.47574);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("date", arrayList0, 10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(68);
      jRip_RipperRule0.covers((Instance) null);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      jRip_NumericAntd0.getRevision();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", linkedList0, 11);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute("numeric", protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      JRip jRip2 = new JRip();
      JRip jRip3 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip3.new NumericAntd(attribute1);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("numeric <= NaN", string0);
      
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = "CoCXL*";
      // Undeclared exception!
      try { 
        jRip0.getMeasure("CoCXL*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CoCXL* not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      jRip0.getSeed();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("c_j?!y,20y/h,rNRuX\"");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 83);
      jRip0.setMinNo(1);
      jRip0.checkErrorRateTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_RipperRule0.toString(attribute0);
      jRip_NumericAntd0.getAccu();
      jRip_NumericAntd0.splitData(instances0, 0, Double.NaN);
      assertEquals(1.0, jRip0.getMinNo(), 0.01);
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", jRip0.checkErrorRateTipText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("  public String globalInfo() {\n");
      double[] doubleArray0 = new double[12];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("$Revisinn: 8118 $", (-837));
      attribute0.value((-837));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => $Revisinn: 8118 $=", string0);
      
      JRip jRip1 = new JRip();
      jRip_RipperRule0.size();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("  public String globalInfo() {\n");
      attribute0.equalsMsg(jRip0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c_j?!y,20y/h,rNRuX\"", arrayList0, 1);
      jRip0.setMinNo(4);
      jRip0.checkErrorRateTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals(4.0, jRip0.getMinNo(), 0.01);
      
      Attribute attribute1 = new Attribute("*c", 1);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Instances instances1 = bayesNet2.m_Instances;
      jRip_NominalAntd0.splitData(instances0, 5.55555, (-2568.65363));
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("c_j?!y,20y/h,rNRuX\"");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 69);
      jRip0.checkErrorRateTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.toString(attribute0);
      jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      instances0.setClassIndex((-68));
      jRip_NumericAntd0.splitData(instances0, 1.0E-10, 0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getRevision();
      jRip_RipperRule1.prune(instances0, true);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("  public String globalInfo() {\n");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c_y?!y,20y/h,rNRuX\"", arrayList0, 1);
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute(".arff", (List<String>) null, 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute2 = new Attribute("5S]&dN/EQoTo!", (-1975));
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute1);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      Instances instances1 = bayesNet3.m_Instances;
      jRip_NominalAntd0.splitData(instances0, (-2568.65363), 3);
      jRip_RipperRule0.toString(attribute0);
      Instances instances2 = bayesNet1.m_Instances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("  public String globalInfo() {\n");
      attribute0.equalsMsg(jRip0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("c_j?!y,20y/h,rNRuX\"", list1, 0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(430);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      boolean boolean0 = jRip_RipperRule1.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("  public String globalInfo() {\n");
      attribute0.equalsMsg(jRip0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("  public String globalInfo() {\n", arrayList0, 1);
      jRip0.setMinNo(4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, (-55));
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("  public String globalInfo() {\n");
      attribute0.equalsMsg(jRip0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("  public String globalInfo() {\n", arrayList0, 1);
      jRip0.setMinNo(4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, (-55));
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1, 64.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("c_j?!y,20y/h,rNRuX\"");
      attribute0.value(2);
      jRip_RipperRule0.toString(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      double[] doubleArray0 = new double[9];
      jRip_RipperRule0.toString(attribute0);
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 0.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[5] = 2184.337215820135;
      doubleArray0[6] = (double) 0;
      attribute0.indexOfValue("Sets where to get the cost matrix. The two options areto use the supplied explicit cost matrix (the setting of the costMatrix property), or to load a cost matrix from a file when required (this file will be loaded from the directory set by the onDemandDirectory property and will be named relation_name");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = 2389.0;
      jRip_NumericAntd0.toString();
      assertEquals(2389.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.getDebug();
      jRip_RipperRule0.toString(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("c_j?!y,20y/h,rNRuX\" = ", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("  public String globalInfo() {\n");
      attribute0.equalsMsg(jRip0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("  public String globalInfo() {\n", arrayList0, 1);
      jRip0.setMinNo(4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, (-55));
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("measureNumRules");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Utils.SMALL = (-1543.0851194332);
      jRip0.setDebug(true);
      jRip0.getOptions();
      Random.setNextRandom((-54));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("  public String globalInfo() {\n");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("  public String globalInfo() {\n", arrayList0, 1);
      Attribute attribute1 = new Attribute(".arff", (List<String>) null, 1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute2 = new Attribute("5S]&dN/EQoTo!", 1);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      BayesNet bayesNet0 = new BayesNet();
      jRip_NominalAntd0.maxInfoGain = (-128.9598462485);
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      jRip_NominalAntd0.splitData(instances0, 4, 3);
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      Attribute attribute3 = null;
      try {
        attribute3 = new Attribute((String) null, "relational");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip jRip1 = new JRip();
      LinkedList<ClassOrder> linkedList1 = new LinkedList<ClassOrder>();
      linkedList0.removeAll(linkedList1);
      linkedList0.clone();
      Attribute attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", linkedList0, 11);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      BayesNet bayesNet0 = new BayesNet();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[7];
      jRip_NumericAntd0.value = 403.6;
      attribute0.equalsMsg(jRip_NumericAntd0);
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11, doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NumericAntd0.covers(binarySparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
