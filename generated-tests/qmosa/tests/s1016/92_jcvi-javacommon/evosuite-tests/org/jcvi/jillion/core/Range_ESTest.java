/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:06:29 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-1307L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      range_Builder0.expandBegin(1535L);
      range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder1.contractEnd((-3438L));
      range_Builder1.expandEnd((-1307L));
      Range range0 = Range.of(1535L, 1535L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(3417L, 1207L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.of(1729L, 1729L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift(2147483647L);
      range_Builder1.shift(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2958L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9470047701612976
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.of(9223372036854775807L);
      String string0 = "CTj@[";
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(764L);
      range_Builder0.copy();
      range_Builder0.expandEnd((-329L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.expandBegin(764L);
      long long0 = (-45L);
      range_Builder1.contractBegin((-45L));
      range_Builder1.contractEnd(764L);
      // Undeclared exception!
      try { 
        Range.parseRange("VpJ$@D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse VpJ$@D into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1006L), (-1006L));
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1006L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = (-128L);
      Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("yEx|+:XKd-", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse yEx|+:XKd- into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7184734013300127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-128L);
      range_Builder0.shift((-128L));
      Range range0 = range_Builder0.build();
      String string0 = "";
      long long1 = 0L;
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0287955861046463
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 4294967295L;
      Range range1 = Range.of(4294967295L);
      range0.endsBefore(range1);
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.192742100258079
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(4108L, 4108L);
      Range range1 = Range.of((-1767L), (-1767L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.713572066704311
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long0 = (-2337L);
      long long1 = 0L;
      Range range0 = Range.of((-2337L), 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      range0.getLength();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.253646282882875
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of((-1497L), 0L);
      range0.iterator();
      Range.of((-784L), 0L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-1497L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6525875347201473
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-1404L));
      range_Builder0.expandBegin((-55L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4902070078932166
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-9223372036854775808L));
      range_Builder0.expandBegin((-9223372036854775808L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.expandEnd(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder3.build();
      range_Builder2.contractEnd(2147483647L);
      range_Builder3.expandEnd((-3438L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.of(2334L, 9223372036854775807L);
      Range range2 = Range.of((-2723L), 604L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6871284153538735
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      range0.endsBefore(range1);
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      boolean boolean0 = range0.endsBefore(range0);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.contains(range0));
      
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range2.getEnd();
      Range range3 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      List<Range> list1 = range3.split(4294967295L);
      assertTrue(list1.contains(range3));
      assertEquals(1, list1.size());
      assertFalse(list1.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, 0L, (-1L));
      boolean boolean1 = range1.endsBefore(range1);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.isSubRangeOf(range4);
      assertFalse(boolean2 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range2.getBegin(range_CoordinateSystem3);
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2913361527953433
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      range0.getLength();
      range0.intersects(range0);
      range0.getBegin();
      Range range1 = Range.of((-128L), 1287L);
      range0.intersects(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.620904990952032
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range0.startsBefore(range1);
      Range range3 = Range.of(0L, 2037L);
      Iterator<Long> iterator0 = range3.iterator();
      boolean boolean1 = range3.equals((Object) null);
      assertFalse(boolean1);
      
      boolean boolean2 = range2.equals(iterator0);
      assertTrue(range2.isEmpty());
      assertTrue(range1.isEmpty());
      assertSame(range2, range1);
      assertFalse(boolean2 == boolean0);
      assertFalse(range3.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0407272942644323
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.007333185232473
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-107L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.endsBefore(range1);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 106 ]/0B", string0);
      
      range0.spliterator();
      range0.endsBefore(range0);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd();
      Range range3 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      List<Range> list1 = range3.split(4294967295L);
      assertFalse(range3.isEmpty());
      assertTrue(list1.contains(range3));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, 0L, 106L);
      boolean boolean1 = range1.endsBefore(range1);
      assertFalse(boolean1);
      
      range0.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem3);
      assertSame(range2, range0);
      
      Long long0 = new Long(4294967295L);
      boolean boolean2 = range4.equals(long0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.613833133959871
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L, 127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(127L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 127 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ 1 .. 127 ]/RB", range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 1 .. 127 ]/RB");
      range1.iterator();
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7029873455635256
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-129L), 2022L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2022L);
      range_Builder1.shift(202L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 202L);
      range0.complement(range1);
      Range range2 = range_Builder2.build();
      range2.complement(range0);
      range_Builder0.contractEnd((-32347L));
      range_Builder0.expandEnd(2022L);
      // Undeclared exception!
      try { 
        Range.of(2022L, (-3438L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.566224692279161
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1252L, 1252L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(1535L);
      range_Builder1.build();
      range_Builder1.expandEnd(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Range.Builder range_Builder4 = range_Builder2.contractEnd(1535L);
      range_Builder4.expandEnd(722L);
      Range.of(1129L, 1252L);
      Range.of((-2147483648L), 1535L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.465169399663455
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-9223372036854775808L));
      range_Builder0.expandBegin((-9223372036854775808L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.expandEnd(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder3.build();
      range_Builder2.contractEnd(2147483647L);
      range_Builder3.expandEnd((-3438L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-3438L), 1671L);
      boolean boolean0 = range1.endsBefore(range2);
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6335813834118165
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      range0.endsBefore(range1);
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      range0.endsBefore(range0);
      range0.complement(range0);
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd();
      Range range3 = Range.of(0L, 4294967295L);
      range3.split(4294967295L);
      range1.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of((-1L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.635198116897816
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      range0.getLength();
      Range range1 = Range.of(1L);
      range1.endsBefore(range0);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      range2.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 65535L);
      range2.split(2147483647L);
      Range range3 = Range.of(1L, 610L);
      range1.endsBefore(range3);
      range0.isEmpty();
      range_Builder0.contractEnd(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 3133L;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, 610L, 1314L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147482340L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2994270309115605
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L));
      long long1 = 0L;
      Range range1 = Range.of(0L);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 2223L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.290303769386903
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      long long1 = range0.getBegin();
      assertEquals((-128L), long1);
      
      Range.of((-128L), 1287L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Long.getLong("yEx|+:XKd-");
      range1.equals("3>");
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4847112204840065
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(6125L);
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      range2.iterator();
      range2.startsBefore(range1);
      Range.of(255L, 888L);
      range1.iterator();
      Long long0 = new Long(2037L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.parseRange("RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.5898574870609203
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      range0.endsBefore(range1);
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      boolean boolean0 = range0.endsBefore(range0);
      range0.complement(range0);
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd();
      Range range3 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      List<Range> list0 = range3.split(4294967295L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range3));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, 0L, (-1L));
      boolean boolean1 = range1.endsBefore(range1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = range4.isSubRangeOf(range2);
      assertFalse(boolean2);
      assertTrue(range2.isEmpty());
      assertTrue(range4.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem3);
      assertEquals(4294967296L, long0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.6144250530769546
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range0.startsBefore(range1);
      Range range3 = Range.of(0L, 2037L);
      boolean boolean1 = range3.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      range0.complement(range2);
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range3);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9471516802159146
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of((-4185L), (-4185L));
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.of(868L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 868, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6744840467187663
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-107L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 106 ]/0B", string0);
      
      Spliterator<Long> spliterator0 = range0.spliterator();
      range0.endsBefore(range0);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd();
      Range range3 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      range2.iterator();
      boolean boolean1 = range2.equals(spliterator0);
      assertFalse(boolean1);
      
      Range.parseRange("[ 0 .. 106 ]/0B");
      range3.equals("");
      long long0 = range3.getEnd();
      assertEquals(4294967294L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6888794541139402
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1252L, 1252L);
      range_Builder1.expandBegin(1535L);
      Range range0 = Range.of((-2021L), (-1L));
      Range range1 = Range.of(1535L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.of((-3511L), 1942L);
      boolean boolean0 = range0.startsBefore(range3);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      boolean boolean1 = range3.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7061985738601506
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-129L), 2022L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2022L);
      Range.Builder range_Builder2 = range_Builder0.shift(106L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-129L), 2147483647L);
      range1.complement(range0);
      Range range2 = range_Builder2.build();
      Range range3 = Range.of((-129L), 2022L);
      range3.complement(range2);
      range_Builder3.contractEnd((-3438L));
      range_Builder1.expandEnd(2022L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-3438L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.7308574725713513
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-107L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.endsBefore(range1);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 106 ]/0B", string0);
      
      range0.spliterator();
      range0.endsBefore(range0);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd();
      Range range3 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      List<Range> list1 = range3.split(4294967295L);
      assertTrue(list1.contains(range3));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, 0L, 106L);
      boolean boolean1 = range1.endsBefore(range1);
      assertFalse(boolean1);
      
      range0.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range4.getBegin(range_CoordinateSystem3);
      assertEquals((-1L), long0);
      
      Long long1 = new Long(4294967295L);
      boolean boolean2 = range1.equals((Object) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5603311965316067
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of(6125L);
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      range2.iterator();
      boolean boolean0 = range2.startsBefore(range1);
      assertFalse(boolean0);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.of(255L, 888L);
      Iterator<Long> iterator0 = range1.iterator();
      Long long0 = new Long(2037L);
      range0.equals(long0);
      range1.equals(iterator0);
      range1.equals(range3);
      range3.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range3.toString(range_CoordinateSystem0);
      assertEquals("[ 255 .. 889 ]/SB", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.649435177810262
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of(0L);
      range0.intersection(range1);
      range0.startsBefore(range1);
      Range range2 = Range.of(0L, 2037L);
      range2.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 3117L, 2037L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.6033245835393872
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range1);
      Range range3 = Range.of(0L, 0L);
      range3.iterator();
      boolean boolean1 = range3.equals(range1);
      assertFalse(range3.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.532042742505945
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range2 = range0.intersection(range1);
      range0.startsBefore(range1);
      Range range3 = Range.of(0L, 2037L);
      Iterator<Long> iterator0 = range3.iterator();
      boolean boolean0 = range3.equals((Object) null);
      assertFalse(boolean0);
      
      range2.equals(iterator0);
      assertSame(range2, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6381263902190306
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range1);
      Range range3 = Range.of(0L, 2037L);
      range3.iterator();
      range3.equals((Object) null);
      boolean boolean1 = range1.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertNotSame(range1, range3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2369453481761377
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1252L, 1252L);
      range_Builder1.expandBegin(1535L);
      Range range0 = Range.of(1252L, 9223372036854775807L);
      range0.iterator();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      range0.isEmpty();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(9223372036854775807L, long0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.301664655176154
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1252L, 1252L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(1535L);
      Range range0 = Range.of(1252L, 9223372036854775807L);
      range0.iterator();
      Range range1 = Range.of(range_CoordinateSystem0, 2560L, 2147483647L);
      Long.getLong("`o}-K#");
      Long long0 = new Long(2560L);
      range1.equals(range_Builder2);
      assertFalse(range1.isEmpty());
  }
}
