/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:06:26 GMT 2018
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, (-1723L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1723
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 591);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-21);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[3] = (byte)58;
      byte byte0 = (byte)0;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(264, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1006789212792607
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byte byte1 = (byte)112;
      byteArray0[1] = (byte)112;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1073741824);
      byteArray0[2] = (byte) (-79);
      byte byte2 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byte byte3 = (byte)7;
      byteArray0[6] = (byte)7;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1073741824);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte) (-4);
      byteArray1[4] = (byte) (-13);
      byteArray1[5] = (byte)65;
      byteArray1[6] = (byte)105;
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)96}, byteArray0);
      
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.toString(byteArray0);
      byte byte0 = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byte byte1 = (byte)9;
      byteArray0[2] = (byte)9;
      byte byte2 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-23), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)5;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byteArray0[3] = (byte) (-80);
      Range range0 = Range.of(1764L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 1764 .. 1764 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1006789212792607
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)82;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.20082764903455
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      Nucleotide nucleotide0 = Nucleotide.Strong;
      defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.encode(nucleotide0);
      byte byte0 = (byte)6;
      byteArray0[1] = (byte)6;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      Range range0 = Range.of((long) (byte) (-80));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte) (-80);
      byteArray1[7] = (byte) (-80);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -80 .. -80 ]/0B is out of range of sequence which is only [ 0 .. 95421707 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)5;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte) (-80);
      byteArray1[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray1, 2147483647L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2147483647 corresponds to encodedIndex 1073741827  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8647385121905677
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Strong;
      byte[] byteArray1 = defaultNucleotideCodec2.encode(nucleotide1);
      int int0 = (-525);
      defaultNucleotideCodec1.isGap(byteArray0, (-525));
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-525));
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.encode((int) (byte)6, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      defaultNucleotideCodec1.decode(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.540036303820981
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-2);
      Range range0 = Range.ofLength((byte)11);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0, range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1840700269, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.736339051105066
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-97);
      defaultNucleotideCodec0.decode(byteArray0, (byte)3);
      byteArray0[8] = (byte)31;
      defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = new byte[4];
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, 1659);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      defaultNucleotideCodec1.encode(nucleotide0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)49;
      byteArray2[2] = (byte)73;
      byteArray2[3] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.toString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.154783153373369
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)6;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-26));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9829650292177696
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 2);
      assertEquals(0, int0);
      
      defaultNucleotideCodec3.isGap(byteArray0, 2);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(0);
      defaultNucleotideCodec4.iterator(byteArray0, range0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec5.encode(0, (Iterator<Nucleotide>) null);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec6.toString(byteArray0);
      assertEquals("S", string0);
      
      Byte byte0 = new Byte((byte)107);
      defaultNucleotideCodec6.toString(byteArray1);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.279416101510397
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)6;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.valueOf("INSTANCE");
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray0, (byte)6);
      assertFalse(boolean0);
      
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)6);
      assertEquals(0, int0);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("------", string0);
      
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1136));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean1 = defaultNucleotideCodec2.isGap(byteArray0, 0);
      assertTrue(boolean1);
      
      int int1 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 0);
      assertEquals(1, int1);
  }
}
