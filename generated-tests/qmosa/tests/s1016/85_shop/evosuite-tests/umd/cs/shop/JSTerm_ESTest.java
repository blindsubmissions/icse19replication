/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:06:46 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("'gnie7?c`$qAt.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".eNaZd8e6qhs7|-&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      int int0 = (-519);
      StringReader stringReader0 = new StringReader("U");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader(") ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[nil]", jSTerm1.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8392967479776605
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("%k/M@-/P'&;`. 9h F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.isEval();
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("%kM@-/P'&;`. 9h F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      assertEquals((-3), streamTokenizer0.ttype);
      
      jSTerm0.isEval();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm4.standardizerTerm();
      assertFalse(jSTerm4.isConstant());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8065071652616695
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = false;
      jSTerm0.makeEval(false);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("P!o>f5}:~/4YNO\"E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.insertElementAt(jSTerm3, (-1932));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("blCVN@K['',");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(1, jSTerm0.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals(4, stringBuffer0.length());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.488327743368588
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.astherisk = (-1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeVariable();
      JSJshopVars.greaterT = (-2055);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.spliterator();
      streamTokenizer0.whitespaceChars((-2055), (-1864));
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches((JSPredicateForm) jSTerm2);
      jSTerm0.equals(jSTerm3);
      jSTerm2.print();
      JSTerm jSTerm4 = jSTerm2.call();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("%kM@-/U'&;`. 9h Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("%kM@-/U'&;`. 9h Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.print();
      StringReader stringReader1 = new StringReader("%kM@-/U'&;`. 9h Z");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.removeElement((Object) null);
      jSTerm0.makeEval(false);
      JSJshopVars.slash = (-251);
      jSTerm0.isFunction();
      jSTerm0.containsAll(jSTerm0);
      JSJshopVars.slash = (-251);
      jSTerm0.makeEval(true);
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.512436962935828
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.call();
      jSTerm0.matches(jSTerm1);
      jSTerm2.trimToSize();
      jSTerm2.print();
      jSTerm0.isGround();
      System.setCurrentTimeMillis(1495L);
      StringReader stringReader0 = new StringReader("(s,{Fi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.212815429662707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.eolIsSignificant(true);
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      jSTerm3.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2686052856349663
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm5.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      StringReader stringReader1 = new StringReader("`MIO>m#=t>ij3");
      JSTerm jSTerm6 = jSTerm2.cloneT();
      assertTrue(jSTerm6.isFunction());
      
      StringBuffer stringBuffer0 = jSTerm4.toStr();
      assertNotSame(jSTerm2, jSTerm6);
      assertEquals(26, stringBuffer0.length());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.281580379961963
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isVariable());
      
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar(126);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.eolIsSignificant(false);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      
      System.setCurrentTimeMillis((-1));
      stringReader0.markSupported();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertEquals(1, jSTerm2.size());
      
      JSTerm jSTerm4 = jSTerm3.cloneT();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2609368563805945
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      stringReader1.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.eolIsSignificant(false);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm0.isGround();
      System.setCurrentTimeMillis(32);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) streamTokenizer0);
      jSSubstitution0.add((Object) jSSubstitution2);
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.541122513844007
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      jSTerm2.trimToSize();
      jSTerm2.print();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("3I&$^Nq&CqzI~=w lIS");
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm1.isGround();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.add(0, (Object) jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm3.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5683003780144253
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      assertEquals(10, jSTerm2.capacity());
      
      jSTerm2.trimToSize();
      jSTerm2.print();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("3I&$^Nq&CqzI~=w lIS");
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm1.isGround();
      stringReader0.markSupported();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm1.cloneT();
      System.setCurrentTimeMillis(1536L);
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.remove((Object) stringReader0);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      String string0 = "word";
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("c>d}tKm3");
      jSTerm0.removeElement("c>d}tKm3");
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5432606923036194
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shp.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.insertElementAt("umd.cs.shp.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.call();
      assertEquals(10, jSTerm3.capacity());
      
      jSTerm3.trimToSize();
      jSTerm3.print();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("3I&$^Nq&CqzI~=w lIS");
      jSTerm2.isGround();
      jSTerm0.isGround();
      stringReader1.markSupported();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm5 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jSTerm0.equals(jSTerm4);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.639340587232432
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm0.matches(jSTerm1);
      jSTerm2.trimToSize();
      jSTerm2.print();
      jSTerm1.isGround();
      System.setCurrentTimeMillis(1495L);
      Object object0 = new Object();
      jSTerm2.add(0, object0);
      jSTerm3.isGround();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4094610766859366
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shp.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.insertElementAt("umd.cs.shp.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm3.trimToSize();
      jSTerm1.isGround();
      StringReader stringReader1 = new StringReader("s");
      jSTerm2.matches(jSTerm3, jSSubstitution1);
      jSTerm2.isGround();
      stringReader1.markSupported();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5219883367341445
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.isEmpty();
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      assertEquals(10, jSTerm2.capacity());
      
      jSTerm2.trimToSize();
      assertEquals(1, jSTerm2.capacity());
      
      jSTerm2.print();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("3I&$^Nq&CqzI~=w lIS");
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm1.isGround();
      stringReader0.markSupported();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm4.clear();
      System.setCurrentTimeMillis(1536L);
      jSTerm2.equals(jSTerm1);
      jSTerm0.print();
      jSTerm1.print();
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm3, jSSubstitution1);
      jSTerm2.equals(jSTerm4);
      jSTerm4.matches(jSTerm3, jSSubstitution3);
      assertFalse(jSSubstitution3.fail());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8019511397932635
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shp.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
