/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:06:25 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.compile.CompilerContextImpl;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.access.btree.index.B2I_v10_2;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "2uiV6G*t";
      SQLUtil.mutatesStructure("2uiV6G*t");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2uiV6G*t";
      SQLUtil.innerJoin("2uiV6G*t", stringArray0, "create unique index", "2uiV6G*t", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create unique index");
      int int0 = (-1717);
      StringBuilder stringBuilder1 = stringBuilder0.append((-1717));
      StringBuilder stringBuilder2 = stringBuilder1.append((-1.0));
      // Undeclared exception!
      try { 
        stringBuilder2.replace((-883), (-883), "2uiV6G*t");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -883
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "F;kRPrLxj-cjqA";
      stringArray0[1] = "XPcWs(WoK6dh";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      stringArray0[4] = "D.{l1rfS";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String string1 = "5;D2uNM?=U3Sp\"[3vrU";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F;kRPrLxj-cjqA", false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      stringArray0[2] = ",";
      stringArray0[3] = ",";
      stringArray0[4] = ",";
      stringArray0[5] = ",";
      String string0 = "";
      SQLUtil.innerJoin(",", stringArray0, "", ",", stringArray0);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(",", compositeDBObject0);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8043716191528454
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "R^L9{%I/";
      SQLUtil.mutatesDataOrStructure("R^L9{%I/");
      String string1 = "";
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("R^L9{%I/", (String) null, versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL(" ADD ");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("Uz }8^GQvzHx+w-", "select into", "Uz }8^GQvzHx+w-");
      assertEquals("Uz }8^GQvzHx+w-", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.h2.engine.Comment", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.h2.engine.Comment", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3075), "drop index");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1", dBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ".,2FTnULhk/";
      stringArray0[0] = ".,2FTnULhk/";
      stringArray0[1] = "PRIMARY_KEY_";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments(" REFERENCES ");
      SQLUtil.leftJoin("PRIMARY_KEY_", stringArray0, "PRIMARY_KEY_", " REFERENCES ", stringArray0);
      TableContainer tableContainer0 = new TableContainer(" REFERENCES ");
      tableContainer0.getTable(" REFERENCES ");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "pI(taT&\"o#-fu", true, "left join PRIMARY_KEY_ as  REFERENCES  on PRIMARY_KEY_..,2FTnULhk/ =  REFERENCES ..,2FTnULhk/ and PRIMARY_KEY_.PRIMARY_KEY_ =  REFERENCES .PRIMARY_KEY_");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ")";
      DBSchema dBSchema0 = new DBSchema(")");
      boolean boolean0 = false;
      dBSchema0.getTables(false);
      dBSchema0.getTriggers();
      SQLUtil.ownerDotComponent(dBSchema0);
      String string1 = "`kQ>P,V@0";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("`kQ>P,V@0", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" and ");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.substituteMarkers(" and ", "", (Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--", (DBSchema) null);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("M?F3/=eCJ[0D");
      SQLUtil.isProcedureCall("M?F3/=eCJ[0D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "M?F3/=eCJ[0D";
      stringArray0[2] = " DEFAULT ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " DEFAULT ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("select into", false, dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("M?F3/=eCJ[0D", false, dBUniqueConstraint1);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3075), "drop index");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$X?9", dBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("MK!UpL0+*q", false);
      TableContainer tableContainer0 = new TableContainer("8%k6sm,>", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8%K6Sm,>d3sfI*o_s1", (DBSchema) null);
      boolean boolean1 = false;
      TableContainer tableContainer1 = new TableContainer("rw*(s.", tableContainer0);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.676987774322417
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("`^.jAI^bKLf2%", stringArray0, "`^.jAI^bKLf2%", "`^.jAI^bKLf2%", stringArray0);
      assertEquals("left join `^.jAI^bKLf2% as `^.jAI^bKLf2% on ", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.renderColumnListWithTableName("BU/g,$mG", stringArray0);
      boolean boolean0 = SQLUtil.isDDL("create table");
      boolean boolean1 = SQLUtil.isDML("drop index");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "j7R^0YpM7hz";
      SQLUtil.isDDL("j7R^0YpM7hz");
      SQLUtil.normalize("j7R^0YpM7hz", false);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("j7R^0YpM7hz", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("j7R ^ 0YpM7hz", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("rename");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Lih*X2WJQ~/";
      stringArray0[1] = "rename";
      stringArray0[2] = "Lih*X2WJQ~/";
      stringArray0[3] = "8%K6Sm,>d3sfI*o_3-s1";
      stringArray0[4] = "Lih*X2WJQ~/";
      stringArray0[5] = "Lih*X2WJQ~/";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("Lih*X2WJQ~/ = 'Lih*X2WJQ~/' AND rename = 'rename' AND Lih*X2WJQ~/ = 'Lih*X2WJQ~/' AND 8%K6Sm,>d3sfI*o_3-s1 = '8%K6Sm,>d3sfI*o_3-s1' AND Lih*X2WJQ~/ = 'Lih*X2WJQ~/' AND Lih*X2WJQ~/ = 'Lih*X2WJQ~/'", string0);
      
      TableContainer tableContainer0 = new TableContainer("rename");
      String string1 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container rename", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.normalize("MK!UpL0+*q", true);
      TableContainer tableContainer0 = new TableContainer("8%k6sm,>", (CompositeDBObject<? extends DBObject>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8%K6Sm,>d3sfI*o_s1", (DBSchema) null);
      tableContainer0.equals("8%K6Sm,>d3sfI*o_s1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, (-1083), "MK ! UpL0 + * q");
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertNull(defaultDBColumn0.getSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3306), "&Z");
      Integer integer0 = new Integer(16777216);
      Integer integer1 = new Integer((-3306));
      Integer.compareUnsigned(16777216, 16777216);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&Z", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderValue(defaultDBColumn0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = SQLUtil.removeComments("/6SyiLYW}gS");
      assertEquals("/6SyiLYW}gS", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("U-ID)i#p,&2O)J$Tv", false);
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil.mutatesStructure("U-ID)i#p,&2O)J$Tv");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("8%K6Sm,>d3sfI*o_s1");
      tableContainer0.getTable("8%K6Sm,>d3sfI*o_s1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8%K6Sm,>d3sfI*o_s1", (DBTable) null, 0, "");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "8%K6Sm,>d3sfI*o_s1";
      stringArray0[3] = " ADD ";
      stringArray0[4] = "8%K6Sm,>d3sfI*o_s1, 8%K6Sm,>d3sfI*o_s1, 8%K6Sm,>d3sfI*o_s1, 8%K6Sm,>d3sfI*o_s1, 8%K6Sm,>d3sfI*o_s1, 8%K6Sm,>d3sfI*o_s1, 8%K6Sm,>d3sfI*o_s1";
      stringArray0[5] = "8%K6Sm,>d3sfI*o_s1";
      stringArray0[6] = " ADD ";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, " ADD ", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = "&Z";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-3268), "&Z");
      int int0 = 16777216;
      Integer integer0 = new Integer(16777216);
      Integer integer1 = new Integer((-3268));
      Integer.compareUnsigned(16777216, 16777216);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&Z", defaultDBTable0, 16777216, "create unique index");
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = "}JcGhg xr";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}JcGhg xr", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.normalize("MK!UpL0+*q", true);
      Integer integer0 = new Integer(16777216);
      Integer integer1 = new Integer(16777216);
      Integer.compareUnsigned(16777216, (-946));
      TableContainer tableContainer0 = new TableContainer("c", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable(" as ");
      DBDataType dBDataType0 = DBDataType.getInstance((-946), "c");
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8%k6sm,>", (DBTable) null, dBDataType0, integer2, integer3);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.799902779427117
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("/v%", false);
      String string1 = SQLUtil.normalize("/ v %", true);
      assertTrue(string1.equals((Object)string0));
      assertEquals("/ v %", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
      
      boolean boolean0 = SQLUtil.isQuery("/ v %");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9830877585747855
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("8%K6Sm,>d3sfI*o_s1");
      tableContainer0.getTable("8%K6Sm,>d3sfI*o_s1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8%K6Sm,>d3sfI*o_s1", (DBTable) null, 0, "");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("8%K6Sm,>d3sfI*o_s1  NULL", string0);
      
      String string1 = SQLUtil.normalize("8%K6Sm,>d3sfI*o_s1", true);
      assertEquals("8 % K6Sm, > d3sfI * o_s1", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.removeComments("^$oK.UWqq^3FBJ(");
      SQLUtil.mutatesDataOrStructure("exec");
      DBCatalog dBCatalog0 = new DBCatalog("_@z`\"}(y'5e");
      DBSchema dBSchema0 = new DBSchema("^$oK.UWqq^3FBJ(", dBCatalog0);
      dBSchema0.getTable("FUNCTION_ALIASES");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BU/g,$mG";
      stringArray0[1] = "{[ix+M1q2&V6}qME";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("BU/g,$mG", true, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(")");
      dBSchema0.getTables(false);
      dBSchema0.getTriggers();
      SQLUtil.ownerDotComponent(dBSchema0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0P", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e[]m-g");
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.normalize("MK!UpL0+*q", true);
      Integer integer0 = new Integer(90085);
      Integer integer1 = new Integer(57);
      Integer.compareUnsigned(46, 90106);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("loglevel");
      DBDataType dBDataType0 = DBDataType.getInstance(1275, "drop table");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, dBDataType0, integer2, integer0);
      SQLUtil.renderValue((Object) null);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VlOc+");
      SQLUtil.parseColumnTypeAndSize("VlOc+");
      String[] stringArray0 = new String[0];
      SQLUtil.join((String) null, (String) null, stringArray0, "<WRG]%j=k2\"gb3", (String) null, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(4611686018427387903L);
      SQLUtil.isDML("DELTA");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DELTA");
      String string0 = "remove() is not supported by ";
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7-!vA0/1f0ic");
      TableContainer tableContainer0 = new TableContainer("remove() is not supported by ", compositeDBObject0);
      tableContainer0.getTable("remove() is not supported by ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", (DBTable) null, (-2233), "exec");
      StringBuilder stringBuilder0 = new StringBuilder("DELTA");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("DELTA", stringBuilder0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(313, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 313
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "create unique indexm?f3/=ecj[0d";
      SQLUtil.isQuery("create unique indexm?f3/=ecj[0d");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("create unique indexm?f3/=ecj[0d");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 718;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(718);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 718, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8073365769337297
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(4611686018427387903L);
      SQLUtil.isDML("DELTA");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DELTA");
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7-!vA0/1f0ic");
      TableContainer tableContainer0 = new TableContainer("remove() is not supported by ", compositeDBObject0);
      tableContainer0.getTable("remove() is not supported by ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", (DBTable) null, (-2233), "exec");
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      SQLUtil.normalize("7-!vA0/1f0ic", false);
      SQLUtil.mutatesDataOrStructure("7 - ! vA0 / 1f0ic");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "gcfl|*&,8wHFo8";
      stringArray0[1] = " DEFAULT ";
      stringArray0[2] = "gcfl|*&,8wHFo8";
      stringArray0[3] = "gcfl|*&,8wHFo8";
      stringArray0[4] = "gcfl|*&,8wHFo8";
      stringArray0[5] = "gcfl|*&,8wHFo8";
      stringArray0[6] = " DEFAULT ";
      stringArray0[7] = " DEFAULT ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gcfl|*&,8wHFo8", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" DEFAULT ", true, dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("gcfl|*&,8wHFo8", true, dBUniqueConstraint1);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3075), " DEFAULT ");
      Object object0 = new Object();
      SQLUtil.isQuery("alter index");
      SQLUtil.parseColumnTypeAndSize("select");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("gcfl|*&,8wHFo8", dBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder(65);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT gcfl|*&,8wHFo8 ", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-3306), "&Z");
      Integer integer0 = new Integer(16777216);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&Z");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.mutatesDataOrStructure("&Z");
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      SQLUtil.addOptionalCondition("&Z", stringBuilder1);
      assertEquals("null or &Z", stringBuilder1.toString());
      assertEquals("null or &Z", stringBuilder0.toString());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3075), "&Z");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&Z", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = SQLUtil.renderValue(dBDataType0);
      assertEquals("&Z", string0);
      
      jdbcClob jdbcClob0 = new jdbcClob("%dkaZ)BZ! ");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
      
      boolean boolean0 = SQLUtil.isQuery("&Z");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.699607042606886
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = SQLUtil.normalize(" ~,.M_5bF~LfnOPF", false);
      assertEquals("~,.M_5bF ~ LfnOPF", string0);
      
      TableContainer tableContainer0 = new TableContainer("drop materialized view", (CompositeDBObject<? extends DBObject>) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, (String) null, versionNumber0);
      List<DBSequence> list0 = defaultDatabase0.getSequences();
      tableContainer0.getSequences(false, list0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tableContainer0.getSchema();
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" ~,.M_5bF~LfnOPF");
      assertNull(boolean0);
      
      String string1 = SQLUtil.normalize("+$)[", true);
      assertEquals("+ $) [", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5665989181145106
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("M?F3/=eCJ[0D");
      SQLUtil.isProcedureCall("M?F3/=eCJ[0D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "M?F3/=eCJ[0D";
      stringArray0[2] = " DEFAULT ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " DEFAULT ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("select into", false, dBUniqueConstraint0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBTable0.getColumnNames();
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.setDoc("M?F3/=eCJ[0D");
      tableContainer0.getSchema();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.normalize("{|?(nd<)o*=s8K9=(", true);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("UNIQUE ( DEFAULT , M?F3/=eCJ[0D,  DEFAULT )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"DEFAULT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.176185661560307
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("M?F3/=eCJ[0D");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " BC");
      SQLUtil.isProcedureCall("M?F3/=eCJ[0D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "M?F3/=eCJ[0D";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "M?F3/=eCJ[0D", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("wsh,5S-I*PNT$;l`Q", false, dBUniqueConstraint0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("M?F3/=eCJ[0D");
      tableContainer0.setDoc("select into");
      tableContainer0.getSchema();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT M?F3/=eCJ[0D ", stringBuilder0.toString());
      
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT M?F3/=eCJ[0D ", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      System.setCurrentTimeMillis(4611686018427387903L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DELTA");
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7-!vA0/1f0ic");
      TableContainer tableContainer0 = new TableContainer("remove() is not supported by ", compositeDBObject0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("' GW9DPplrJy", (DBTable) null, 0, "-+u\"P>wz(@[rES~ _RL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: -+u\"P>wz(@[rES~ _RL
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("gcfl|*&,8wHFo8");
      tableContainer0.getTable("gcfl|*&,8wHFo8");
      tableContainer0.getTable("EXPLAIN");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, 39, " join ");
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addRequiredCondition("", stringBuilder0);
      DBDataType dBDataType0 = DBDataType.getInstance((-38), "gcfl|*&,8wHFo8");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("\n/* distinct */", (DBTable) null, dBDataType0);
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5536815580297962
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("M?F3/=eCJ[0D");
      SQLUtil.isProcedureCall("M?F3/=eCJ[0D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "M?F3/=eCJ[0D";
      stringArray0[2] = " DEFAULT ";
      TableContainer tableContainer0 = new TableContainer("`f!n]PRs");
      tableContainer0.getSchema();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(">{>MJn6Yv?3,%*xTz", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, " DEFAULT ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("M?F3/=eCJ[0D", true, dBUniqueConstraint0);
      dBUniqueIndex0.setTable(defaultDBTable1);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3075), "`f!n]PRs");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Mu0j.3?hrUc$yw'P9Q", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.normalize("CONSTRAINT \" DEFAULT \" UNIQUE ( DEFAULT , M?F3/=eCJ[0D,  DEFAULT )", true);
      System.setCurrentTimeMillis((-3075));
      NameSpec nameSpec1 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M?F3/=eCJ[0D");
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec1, mockPrintWriter0);
      assertFalse(nameSpec1.equals((Object)nameSpec0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis(1368L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-3306), "&Z");
      Integer integer0 = RawTransaction.ABORT;
      Integer.min((-742), (-3306));
      Integer integer1 = new Integer(16777216);
      Integer.compareUnsigned((-3306), 16777216);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.removeComments("&Z");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&Z";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&Z", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(16777216);
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("*/", stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2, nameSpec0);
      assertEquals("true or */CONSTRAINT &Z ", stringBuilder2.toString());
      assertEquals("true or */CONSTRAINT &Z ", stringBuilder0.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0931000900242016
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis(1368L);
      DBDataType.getInstance((-888), "dFV=");
      Integer integer0 = new Integer(2950);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("':");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBSchema dBSchema0 = new DBSchema(" NOT NULL");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dFV=", dBSchema0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.mutatesDataOrStructure("/o}uXXLGhz9F");
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("':", dBSchema0);
      defaultDBTable1.getUniqueConstraint((String[]) null);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(" and ", stringBuilder0);
      B2I_v10_2 b2I_v10_2_0 = new B2I_v10_2();
      Integer integer1 = new Integer(2950);
      stringBuilder0.append((Object) integer1);
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      assertEquals(" and 2950 or null", stringBuilder1.toString());
      
      String string0 = SQLUtil.normalize("':", true);
      assertEquals("':'", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9559838465843622
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("M?F3/=eCJ[0D");
      SQLUtil.isProcedureCall("M?F3/=eCJ[0D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M?F3/=eCJ[0D");
      String[] stringArray0 = new String[3];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "M?F3/=eCJ[0D";
      stringArray0[2] = " DEFAULT ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " DEFAULT ", false, stringArray0);
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.clear();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      assertEquals(14, jdbcDataSource0.getTraceId());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.808045719583997
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-3075), "&Z");
      String[] stringArray0 = new String[9];
      stringArray0[7] = "~heHwM!%";
      stringArray0[2] = "&Z";
      stringArray0[3] = "&Z";
      stringArray0[4] = "~heHwM!%";
      stringArray0[5] = "o{\u000FSIY;#u";
      SQLUtil.mutatesDataOrStructure("deletem?f3/=ecj[0d");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("&Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("create unique indexm?f3/=ecj[0d");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = new Integer(97);
      Integer.compareUnsigned(97, 1873);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexm?f3/=ecj[0d");
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+76<7$lp^6FYQH^1TVp", defaultDBTable0, (DBDataType) null, integer1, integer2);
      Character character0 = new Character('1');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'1'", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = defaultDBTable0.toString();
      DBDataType.getInstance((-3306), "&Z");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&Z";
      stringArray0[1] = "&Z";
      stringArray0[2] = "&Z";
      stringArray0[3] = "WbY:uaFlEOZ(J";
      stringArray0[4] = "&Z";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "&Z";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBUniqueConstraint0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("select into");
      tableContainer0.setDoc("//");
      tableContainer0.getSchema();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((Object) string0);
      dBUniqueConstraint0.isIdentical((DBObject) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
      
      SQLUtil.constraintName(dBUniqueConstraint0);
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis((-3272L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3282), "&Z");
      Integer integer0 = new Integer(16777216);
      Integer integer1 = new Integer((-3282));
      dBDataType0.isNumber();
      Integer.remainderUnsigned(16777216, 443);
      Integer.compareUnsigned(16777216, 16777216);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&Z", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.removeComments("JIATn1tZGR-WG.:c-,`");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('%');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) dBDataType0;
      objectArray0[2] = (Object) nameSpec0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) nameSpec0;
      objectArray0[5] = (Object) defaultDBTable0;
      objectArray0[6] = (Object) "``LNC&";
      objectArray0[7] = (Object) dBDataType0;
      PrintWriter printWriter0 = mockPrintWriter0.format("``LNC&", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(57, charArrayWriter1.size());
      assertEquals("%``LNC&create table null (\n\t&Z &Z(16777216,-3282) NULL\n)", charArrayWriter0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis((-3272L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer(16777216);
      Integer integer1 = new Integer((-3282));
      int int0 = new Integer((-3282));
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&Z", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.465495719864364
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("M?F3/=eCJ[0D");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("M?F3/=eCJ[0D");
      String string0 = SQLUtil.normalize("M?F3/=eCJ[0D", false);
      assertEquals("M ? F3 / =  eCJ [ 0D", string0);
      
      jdbcClob jdbcClob0 = new jdbcClob("|Vz'(\"68Zg(3");
      DBSchema dBSchema0 = new DBSchema("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wVV|v/B7E+8HR", dBSchema0);
      Integer.getInteger("6o(!cvti}vw'0", (-2539));
      boolean boolean2 = SQLUtil.isQuery("select into");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis((-3272L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3282), "&Z");
      Integer integer0 = new Integer(16777216);
      Integer integer1 = new Integer((-3282));
      dBDataType0.isNumber();
      Integer.remainderUnsigned(16777216, 443);
      Integer.compareUnsigned(16777216, 16777216);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&Z", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.removeComments("JIATn1tZGR-WG.:c-,`");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("SESSIONS");
      defaultDBTable1.getColumnNames();
      TableContainer tableContainer0 = new TableContainer("l");
      tableContainer0.getSchema();
      NameSpec nameSpec1 = NameSpec.NEVER;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("l", true, "5V", "l");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.parseColumnTypeAndSize("JIATn1tZGR-WG.:c-,`");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
