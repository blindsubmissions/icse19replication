/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:44:15 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!n\"<H@{OX}8,se'Vpan");
      String string0 = "\"Be_q.N?Z2{";
      NumberInput numberInput0 = new NumberInput(xmlEntityRef0, "\"Be_q.N?Z2{", "\"Be_q.N?Z2{");
      Submit submit0 = new Submit(numberInput0, "'", "\"Be_q.N?Z2{");
      FormElement formElement0 = submit0.value("");
      Link link0 = null;
      try {
        link0 = new Link(formElement0, submit0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Form form0 = new Form("t66()e)N|)>%x-,o\"3a");
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox(form0, "CDATA section started on line ", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "p";
      Form form0 = new Form("p");
      String string1 = "').load('";
      // Undeclared exception!
      try { 
        form0.param("').load('", "').load('");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "";
      // Undeclared exception!
      try { 
        errorPage0.imageSubmit("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "<?xml encoding name expected to start with [A-Za-z] not ";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<?xml encoding name expected to start with [A-Za-z] not ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "r\"R+c";
      Form form0 = new Form("r\"R+c");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(form0, "r\"R+c", "r\"R+c", "r\"R+c", stringSelectModel0, true);
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea(select0, "No top level component found.", (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5857708352080966
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "v,kF!vN)C)x9>Yg";
      TextInput textInput0 = new TextInput((Component) null, "v,kF!vN)C)x9>Yg", "v,kF!vN)C)x9>Yg");
      String string1 = "jaqR\\GoGy";
      Table table0 = null;
      try {
        table0 = new Table(textInput0, "jaqRGoGy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "O|oQk1{80", "O|oQk1{80");
      FormElement formElement0 = checkbox0.fieldBinding("O|oQk1{80");
      Submit submit0 = new Submit(formElement0, "O|oQk1{80", "-vbu");
      FormElement formElement1 = submit0.value("O|oQk1{80");
      // Undeclared exception!
      try { 
        formElement1.a();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "No corresponding component found for end expression '";
      Form form0 = new Form("No corresponding component found for end expression '");
      Checkbox checkbox0 = new Checkbox(form0, "No corresponding component found for end expression '", "8Ff8AEO&/z>x#j(V::");
      FormElement formElement0 = checkbox0.setFormElementName("trace");
      DynamicSelectModel dynamicSelectModel0 = formElement0.selectModel();
      checkbox0.eval(form0);
      ElExpression elExpression0 = new ElExpression("trace");
      elExpression0.expression = "trace";
      CheckboxGroup checkboxGroup0 = null;
      try {
        checkboxGroup0 = new CheckboxGroup(formElement0, "8Ff8AEO&/z>x#j(V::", "trace", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      String string0 = "The array of prefixes must not be null";
      NumberInput numberInput0 = null;
      try {
        numberInput0 = new NumberInput(xmlEntityRef0, "The array of prefixes must not be null", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      String string1 = ")zd3@$BR+7}";
      Radio radio0 = new Radio(errorPage0, (String) null, ")zd3@$BR+7}");
      String string2 = "frame";
      FormElement formElement0 = radio0.value("frame");
      TextInput textInput0 = new TextInput(formElement0, (String) null, ")zd3@$BR+7}");
      String string3 = "Q^7r/>(,#";
      TableBlock tableBlock0 = new TableBlock(errorPage0, "Q^7r/>(,#");
      String string4 = "";
      textInput0.getComponents();
      // Undeclared exception!
      try { 
        tableBlock0.dateInput("Q^7r/>(,#", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.entity((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      ActionExpression actionExpression0 = new ActionExpression("legend");
      TableBlock tableBlock1 = tableBlock0.renderHint(actionExpression0);
      Table table0 = new Table(tableBlock1, "j+Q4g'pdZh@");
      Table table1 = table0.renderHint("legend");
      // Undeclared exception!
      try { 
        table1.id("legend");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7480673485460894
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      // Undeclared exception!
      try { 
        errorPage0.id("I;&");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "`an#oM";
      Checkbox checkbox0 = new Checkbox((Component) null, "`an#oM", "`an#oM");
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("`an#oM", checkbox0.getComponentId());
      assertEquals("`an#oM", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.form("ZL}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = "~s{1'Lj)&kBLit";
      Table table0 = new Table(errorPage0, "~s{1'Lj)&kBLit");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("~s{1'Lj)&kBLit", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      Double double0 = new Double(2408.8368576);
      assertEquals(2408.8368576, (double)double0, 0.01);
      assertNotNull(double0);
      
      Label label0 = (Label)table0.cite((Object) double0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("~s{1'Lj)&kBLit", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Block block0 = (Block)errorPage0.code();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      TableBlock tableBlock0 = table0.colgroup();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("~s{1'Lj)&kBLit", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      Table table1 = new Table(tableBlock0, "~s{1'Lj)&kBLit");
      assertTrue(table1.equals((Object)table0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("~s{1'Lj)&kBLit", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("~s{1'Lj)&kBLit", table1.getComponentId());
      assertNotNull(table1);
      
      Table table2 = (Table)errorPage0.table();
      assertNotSame(table2, table0);
      assertNotSame(table2, table1);
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("table", table2.defaultTagName());
      assertTrue(table2._isGeneratedId());
      assertEquals("Table_1", table2.getComponentId());
      assertNotNull(table2);
      
      // Undeclared exception!
      try { 
        table0.submit("~s{1'Lj)&kBLit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.requestFocus();
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertTrue(errorPage1.isPage());
      assertNotNull(errorPage1);
      
      Block block0 = (Block)errorPage0.h1();
      assertSame(errorPage0, errorPage1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Label label0 = (Label)errorPage0.kbd((Object) errorPage1);
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertTrue(errorPage1.isPage());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "O|oQk1{80", "O|oQk1{80");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("O|oQk1{80", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("O|oQk1{80", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      Link link0 = (Link)errorPage0.a((Object) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertNotNull(link0);
      
      // Undeclared exception!
      try { 
        checkbox0.br();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Form form0 = new Form("p");
      assertFalse(form0._isBuilt());
      assertEquals("p", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.map("p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Radio radio0 = new Radio(errorPage0, "I;&", "O ,ebq2oeXfrt7");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("I;&", radio0.getFormElementName());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("O ,ebq2oeXfrt7", radio0.getComponentId());
      assertNotNull(radio0);
      
      // Undeclared exception!
      try { 
        radio0.wrapSelf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "O|oQk1{80", "O|oQk1{80");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("O|oQk1{80", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("O|oQk1{80", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      Label label0 = new Label(errorPage0, "O|oQk1{80");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertNotNull(label0);
      
      Link link0 = (Link)label0.a();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertNotNull(link0);
      
      String string0 = "";
      String string1 = null;
      Table table0 = new Table(link0, (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      Block block0 = (Block)table0.h6();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      Block block1 = (Block)link0.del();
      assertNotSame(block1, block0);
      assertFalse(block1.equals((Object)block0));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      
      String string2 = "HQ9N)\\d ][,+3'Dtd";
      MXSerializer mXSerializer0 = new MXSerializer();
      assertNull(mXSerializer0.getNamespace());
      assertEquals(0, mXSerializer0.getDepth());
      assertNull(mXSerializer0.getName());
      assertNotNull(mXSerializer0);
      
      // Undeclared exception!
      try { 
        mXSerializer0.attribute((String) null, "strike", "strike");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // startTag() must be called before attribute()
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      String string0 = ")zd3@$BR+7}";
      Radio radio0 = new Radio(errorPage0, (String) null, ")zd3@$BR+7}");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertNull(radio0.getFormElementName());
      assertEquals(")zd3@$BR+7}", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotNull(radio0);
      
      FormElement formElement0 = radio0.value("frame");
      assertSame(radio0, formElement0);
      assertSame(formElement0, radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertNull(radio0.getFormElementName());
      assertEquals(")zd3@$BR+7}", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals(")zd3@$BR+7}", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertNull(formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("input", formElement0.defaultTagName());
      assertNotNull(formElement0);
      
      TextInput textInput0 = new TextInput(formElement0, (String) null, ")zd3@$BR+7}");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertNull(radio0.getFormElementName());
      assertEquals(")zd3@$BR+7}", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals(")zd3@$BR+7}", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertNull(formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      assertNull(textInput0.getFormElementName());
      assertEquals(")zd3@$BR+7}", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertNotNull(textInput0);
      
      String string1 = "Q^7r/>(,#";
      TableBlock tableBlock0 = new TableBlock(errorPage0, "Q^7r/>(,#");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Q^7r/>(,#", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        radio0.frame("Q^7r/>(,#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Submit submit0 = new Submit(errorPage0, "big", "big");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("big", submit0.getFormElementName());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("big", submit0.getComponentId());
      assertNotNull(submit0);
      
      FormElement formElement0 = submit0.value("a)M,S");
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("big", submit0.getFormElementName());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("big", submit0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("big", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("big", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertNotNull(formElement0);
      
      FileInput fileInput0 = new FileInput(formElement0, "", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("big", submit0.getFormElementName());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("big", submit0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("big", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("big", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      assertNotNull(fileInput0);
      
      String string0 = fileInput0.defaultTagName();
      assertEquals("input", string0);
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("big", submit0.getFormElementName());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("big", submit0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("big", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("big", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      assertNotNull(string0);
      
      ElExpression elExpression0 = new ElExpression("");
      assertEquals("", elExpression0.toString());
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("a)M,S");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("", elExpression0.toString());
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression1.toString());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.getExpression());
      assertNotNull(elExpression1);
      
      fileInput0.setMetadataBind(elExpression1);
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("big", submit0.getFormElementName());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("big", submit0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("big", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("big", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      assertEquals("", elExpression0.toString());
      assertEquals("", elExpression0.getExpression());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression1.toString());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.getExpression());
      
      // Undeclared exception!
      try { 
        fileInput0.button();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("I;&");
      assertEquals("I;&", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      
      Link link0 = (Link)errorPage0.a((Object) xmlEntityRef0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("I;&", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertNotNull(link0);
      
      FileInput fileInput0 = new FileInput(link0, "", "I;&");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("I;&", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("I;&", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertNotNull(fileInput0);
      
      int int0 = fileInput0.getMaxMemoryFileSize();
      assertEquals(1000, int0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("I;&", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("I;&", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      
      // Undeclared exception!
      try { 
        link0.message("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Link link0 = (Link)errorPage0.a((Object) errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertNotNull(link0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Link link1 = (Link)errorPage0.a((Object) mockGregorianCalendar0);
      assertNotSame(link1, link0);
      assertFalse(link1.equals((Object)link0));
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Link_2", link1.getComponentId());
      assertEquals("a", link1.defaultTagName());
      assertTrue(link1._isGeneratedId());
      assertNotNull(link1);
      
      Any any0 = (Any)errorPage0.br();
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Label label0 = (Label)link1.h2((Object) errorPage0);
      assertNotSame(link1, link0);
      assertFalse(link1.equals((Object)link0));
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Link_2", link1.getComponentId());
      assertEquals("a", link1.defaultTagName());
      assertTrue(link1._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        any0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      String string0 = xmlEntityRef0.getTagName();
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("a", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.abbr((Object) "a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      // Undeclared exception!
      try { 
        errorPage0.radio("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Form form0 = new Form("IHv1d");
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("IHv1d", form0.getComponentId());
      assertNotNull(form0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        form0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      String string0 = "k)XL$u2^";
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Link link0 = (Link)errorPage0.a((Object) double0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      assertNotNull(link0);
      
      Any any0 = (Any)errorPage0.br();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      
      String string1 = null;
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getExpression());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.javascript("Attributes must be given in name, value pairs.");
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNull(actionExpression0.getActionExpression());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getActionExpression());
      assertNull(actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertNull(actionExpression1.toString());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression1.getJavascript());
      assertNotNull(actionExpression1);
      
      ActionExpression actionExpression2 = actionExpression1.event((String) null);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression1);
      assertNull(actionExpression0.getActionExpression());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getActionExpression());
      assertNull(actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertNull(actionExpression1.toString());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression1.getJavascript());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression2.getEvent());
      assertNull(actionExpression2.toString());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression2.getJavascript());
      assertNull(actionExpression2.getActionExpression());
      assertNull(actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertNotNull(actionExpression2);
      
      ActionExpression actionExpression3 = actionExpression2.updateComponent("50A,$s8*en1#dL*d\"n4");
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression0, actionExpression3);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression3);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression0);
      assertSame(actionExpression2, actionExpression3);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression3, actionExpression1);
      assertSame(actionExpression3, actionExpression2);
      assertSame(actionExpression3, actionExpression0);
      assertNull(actionExpression0.getActionExpression());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.toString());
      assertNull(actionExpression0.getExpression());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getActionExpression());
      assertNull(actionExpression1.getExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertNull(actionExpression1.getEvent());
      assertNull(actionExpression1.toString());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression1.getJavascript());
      assertTrue(actionExpression2.isSubmitForm());
      assertNull(actionExpression2.getEvent());
      assertNull(actionExpression2.toString());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression2.getJavascript());
      assertNull(actionExpression2.getActionExpression());
      assertNull(actionExpression2.getExpression());
      assertFalse(actionExpression2.isSubmissible());
      assertFalse(actionExpression3.isSubmissible());
      assertNull(actionExpression3.getEvent());
      assertNull(actionExpression3.toString());
      assertEquals("Attributes must be given in name, value pairs.", actionExpression3.getJavascript());
      assertTrue(actionExpression3.isSubmitForm());
      assertNull(actionExpression3.getActionExpression());
      assertNull(actionExpression3.getExpression());
      assertNotNull(actionExpression3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) actionExpression2;
      objectArray0[1] = (Object) actionExpression3;
      // Undeclared exception!
      try { 
        any0.textarea("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      String string0 = ")zd3@$BR+7}";
      Radio radio0 = new Radio(errorPage0, (String) null, ")zd3@$BR+7}");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(")zd3@$BR+7}", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNull(radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertNotNull(radio0);
      
      FormElement formElement0 = radio0.value("frame");
      assertSame(radio0, formElement0);
      assertSame(formElement0, radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(")zd3@$BR+7}", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNull(radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertNull(formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals(")zd3@$BR+7}", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertNotNull(formElement0);
      
      TextInput textInput0 = new TextInput(formElement0, (String) null, ")zd3@$BR+7}");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(")zd3@$BR+7}", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNull(radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertNull(formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals(")zd3@$BR+7}", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals(")zd3@$BR+7}", textInput0.getComponentId());
      assertEquals("input", textInput0.defaultTagName());
      assertNull(textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertNotNull(textInput0);
      
      String string1 = "Q^7r/>(,#";
      // Undeclared exception!
      try { 
        radio0.link();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      String string0 = "O|oQk1{80";
      // Undeclared exception!
      try { 
        errorPage0.hidden((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.62393917389173
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<|xml encoding ,ame expected to start with iA-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "<|xml encoding ,ame expected to start with iA-Za-z] not ", "<|xml encoding ,ame expected to start with iA-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertNotNull(checkbox0);
      
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Link link0 = (Link)errorPage0.a((Object) xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertNotNull(link0);
      
      TextArea textArea0 = new TextArea(link0, "<|xml encoding ,ame expected to start with iA-Za-z] not ", "<|xml encoding ,ame expected to start with iA-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", textArea0.getComponentId());
      assertNotNull(textArea0);
      
      Label label0 = (Label)link0.b((Object) textArea0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", textArea0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Any any0 = (Any)errorPage0.br();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      
      Label label1 = (Label)link0.h2((Object) null);
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertNotNull(label1);
      
      Link link1 = new Link(label1, label1);
      assertFalse(label1.equals((Object)label0));
      assertFalse(link1.equals((Object)link0));
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("a", link1.defaultTagName());
      assertTrue(link1._isGeneratedId());
      assertEquals("Link_2", link1.getComponentId());
      assertNotNull(link1);
      
      MXSerializer mXSerializer0 = new MXSerializer();
      assertNull(mXSerializer0.getNamespace());
      assertNull(mXSerializer0.getName());
      assertEquals(0, mXSerializer0.getDepth());
      assertNotNull(mXSerializer0);
      
      link1._renderActions(mXSerializer0);
      assertNotSame(link0, link1);
      assertNotSame(label1, label0);
      assertNotSame(link1, link0);
      assertFalse(link0.equals((Object)link1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(link1.equals((Object)link0));
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("a", link1.defaultTagName());
      assertTrue(link1._isGeneratedId());
      assertEquals("Link_2", link1.getComponentId());
      assertNull(mXSerializer0.getNamespace());
      assertNull(mXSerializer0.getName());
      assertEquals(0, mXSerializer0.getDepth());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.clasS("tfoot");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(errorPage1.isPage());
      assertNotNull(errorPage1);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "&[vFQ!F", "tfoot");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("&[vFQ!F", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("tfoot", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      ErrorPage errorPage2 = new ErrorPage();
      assertTrue(errorPage2.equals((Object)errorPage1));
      assertTrue(errorPage2.equals((Object)errorPage0));
      assertFalse(errorPage2._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage2.getComponentId());
      assertTrue(errorPage2.isPage());
      assertEquals("div", errorPage2.defaultTagName());
      assertFalse(errorPage2._isGeneratedId());
      assertNotNull(errorPage2);
      
      Any any0 = (Any)errorPage2.br();
      assertNotSame(errorPage2, errorPage1);
      assertNotSame(errorPage2, errorPage0);
      assertTrue(errorPage2.equals((Object)errorPage1));
      assertTrue(errorPage2.equals((Object)errorPage0));
      assertFalse(errorPage2._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage2.getComponentId());
      assertTrue(errorPage2.isPage());
      assertEquals("div", errorPage2.defaultTagName());
      assertFalse(errorPage2._isGeneratedId());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Label label0 = (Label)errorPage0.h2((Object) "&[vFQ!F");
      assertNotSame(errorPage0, errorPage2);
      assertSame(errorPage0, errorPage1);
      assertTrue(errorPage0.equals((Object)errorPage2));
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "O|oQk1{80", "O|oQk1{80");
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("O|oQk1{80", checkbox0.getFormElementName());
      assertEquals("O|oQk1{80", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      FileInput fileInput0 = new FileInput(checkbox0, "", "asset/wheel/components/jquery.js?expires=88");
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("O|oQk1{80", checkbox0.getFormElementName());
      assertEquals("O|oQk1{80", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("asset/wheel/components/jquery.js?expires=88", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      assertNotNull(fileInput0);
      
      int int0 = fileInput0.getMaxMemoryFileSize();
      assertEquals(1000, int0);
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("O|oQk1{80", checkbox0.getFormElementName());
      assertEquals("O|oQk1{80", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("asset/wheel/components/jquery.js?expires=88", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      
      // Undeclared exception!
      try { 
        fileInput0.var();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.p();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      String string0 = "O|oQk1{80";
      Table table0 = new Table(errorPage0, "blockquote");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("blockquote", table0.getComponentId());
      assertNotNull(table0);
      
      Class<Double> class0 = Double.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance("O|oQk1{80", class0);
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertNotNull(xmlPullWrapperFactory0);
      
      XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0.getFactory();
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullParserFactory0.isValidating());
      assertNotNull(xmlPullParserFactory0);
      
      XmlPullWrapperFactory xmlPullWrapperFactory1 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      assertNotSame(xmlPullWrapperFactory0, xmlPullWrapperFactory1);
      assertNotSame(xmlPullWrapperFactory1, xmlPullWrapperFactory0);
      assertFalse(xmlPullWrapperFactory1.equals((Object)xmlPullWrapperFactory0));
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullParserFactory0.isNamespaceAware());
      assertFalse(xmlPullParserFactory0.isValidating());
      assertFalse(xmlPullWrapperFactory1.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory1.isValidating());
      assertNotNull(xmlPullWrapperFactory1);
      
      try { 
        xmlPullWrapperFactory1.newSerializerWrapper();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No valid serializer classes found in parameter classNames to newInstance() that contained 'O|oQk1{80'
         //
         verifyException("org.xmlpull.v1.XmlPullParserFactory", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "&[vFQ!F", "tfoot");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("tfoot", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("&[vFQ!F", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertNotNull(errorPage1);
      
      Any any0 = (Any)errorPage1.br();
      assertNotSame(errorPage1, errorPage0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      
      Label label0 = (Label)errorPage0.h2((Object) "&[vFQ!F");
      assertNotSame(errorPage0, errorPage1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        any0.span((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<?xml encoding name expected to start with [A-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<?xml encoding name expected to start with [A-Za-z] not ", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "<?xml encoding name expected to start with [A-Za-z] not ", "tfoot");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<?xml encoding name expected to start with [A-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("tfoot", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("<?xml encoding name expected to start with [A-Za-z] not ", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Any any0 = (Any)errorPage0.br();
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      
      Label label0 = (Label)errorPage0.h2((Object) xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<?xml encoding name expected to start with [A-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertNotNull(label0);
      
      Label label1 = (Label)label0.sub((Object) checkbox0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<?xml encoding name expected to start with [A-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("tfoot", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("<?xml encoding name expected to start with [A-Za-z] not ", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertNotNull(label1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "<?xml encoding name expected to start with [A-Za-z] not ";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<?xml encoding name expected to start with [A-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("<?xml encoding name expected to start with [A-Za-z] not ", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = "big";
      Submit submit0 = new Submit(errorPage0, "big", "big");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(submit0.isValid());
      assertEquals("big", submit0.getComponentId());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("big", submit0.getFormElementName());
      assertNotNull(submit0);
      
      // Undeclared exception!
      try { 
        submit0.small((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Submit submit0 = new Submit(errorPage0, "big", "big");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("big", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("big", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertNotNull(submit0);
      
      ElExpression elExpression0 = new ElExpression("");
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertNotNull(elExpression0);
      
      // Undeclared exception!
      try { 
        errorPage0.fileInput("*0U4S_'kF8+rs", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      String string0 = null;
      String string1 = "Could not encode string '";
      Radio radio0 = new Radio(errorPage0, (String) null, "Could not encode string '");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Could not encode string '", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertNull(radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotNull(radio0);
      
      // Undeclared exception!
      try { 
        radio0.placeholder("Could not encode string '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Form form0 = new Form("");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      String string0 = null;
      Form form1 = form0.addFormValidationRule("", (String) null);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertNotNull(form1);
      
      Form form2 = form1.addFormValidationError((String) null);
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("wheel_components_Form", form2.getComponentId());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertNotNull(form2);
      
      String string1 = "dd";
      ElExpression elExpression0 = new ElExpression("dd");
      assertEquals("dd", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      assertEquals("dd", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage((String) null);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("dd", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      assertEquals("dd", elExpression0.getExpression());
      assertEquals(2, elExpression1.length());
      assertEquals("dd", elExpression1.getExpression());
      assertEquals("dd", elExpression1.toString());
      assertNotNull(elExpression1);
      
      // Undeclared exception!
      try { 
        form2.legend((Object) elExpression1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!n\"<H@{OX}8,se'Vpan");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!n\"<H@{OX}8,se'Vpan", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      
      NumberInput numberInput0 = new NumberInput(xmlEntityRef0, "\"Be_q.N?Z2{", "\"Be_q.N?Z2{");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!n\"<H@{OX}8,se'Vpan", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("\"Be_q.N?Z2{", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertEquals("\"Be_q.N?Z2{", numberInput0.getComponentId());
      assertNotNull(numberInput0);
      
      Submit submit0 = new Submit(numberInput0, "'", "\"Be_q.N?Z2{");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!n\"<H@{OX}8,se'Vpan", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("\"Be_q.N?Z2{", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertEquals("\"Be_q.N?Z2{", numberInput0.getComponentId());
      assertEquals("\"Be_q.N?Z2{", submit0.getComponentId());
      assertEquals("'", submit0.getFormElementName());
      assertTrue(submit0.isEmpty());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertNotNull(submit0);
      
      FormElement formElement0 = submit0.value("");
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!n\"<H@{OX}8,se'Vpan", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("\"Be_q.N?Z2{", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertEquals("\"Be_q.N?Z2{", numberInput0.getComponentId());
      assertEquals("\"Be_q.N?Z2{", submit0.getComponentId());
      assertEquals("'", submit0.getFormElementName());
      assertTrue(submit0.isEmpty());
      assertTrue(submit0.isValid());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("\"Be_q.N?Z2{", formElement0.getComponentId());
      assertEquals("'", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertNotNull(formElement0);
      
      List<ActionExpression> list0 = numberInput0._getActions();
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("!n\"<H@{OX}8,se'Vpan", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("\"Be_q.N?Z2{", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertEquals("\"Be_q.N?Z2{", numberInput0.getComponentId());
      assertNull(list0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7498508621447715
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<|xml encoding ,ame expected to start with iA-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "<|xml encoding ,ame expected to start with iA-Za-z] not ", "<|xml encoding ,ame expected to start with iA-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Link link0 = (Link)errorPage0.a((Object) xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertNotNull(link0);
      
      TextArea textArea0 = new TextArea(link0, "<|xml encoding ,ame expected to start with iA-Za-z] not ", "<|xml encoding ,ame expected to start with iA-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", textArea0.getComponentId());
      assertNotNull(textArea0);
      
      // Undeclared exception!
      try { 
        textArea0.fileInput("<|xml encoding ,ame expected to start with iA-Za-z] not ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6076174629905524
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.code(object0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "&[vFQ!F", "tfoot");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("&[vFQ!F", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("tfoot", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
      
      Any any0 = (Any)errorPage1.br();
      assertNotSame(errorPage1, errorPage0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      
      Label label1 = (Label)errorPage0.h2((Object) "&[vFQ!F");
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(label1, label0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertNotNull(label1);
      
      DateInput dateInput0 = new DateInput(label0, "&[vFQ!F", "tfoot", "&[vFQ!F");
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(label0.equals((Object)label1));
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("tfoot", dateInput0.getComponentId());
      assertEquals("&[vFQ!F", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertNotNull(dateInput0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&[vFQ!F";
      stringArray0[1] = "tfoot";
      stringArray0[2] = "tfoot";
      stringArray0[3] = "tfoot";
      stringArray0[4] = "tfoot";
      stringArray0[5] = "&[vFQ!F";
      // Undeclared exception!
      try { 
        dateInput0._setSubmitValue(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern '&[vFQ!F'.
         //
         verifyException("wheel.components.DateInput", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2734784499906193
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = (Label)errorPage0.li(object0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertNotNull(label0);
      
      Link link0 = (Link)errorPage0.a((Object) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertNotNull(link0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.434378030023503
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<|xml encoding ,ame expected to start with iA-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertNotNull(xmlEntityRef0);
      
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Link link0 = (Link)errorPage0.a((Object) xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertNotNull(link0);
      
      TextArea textArea0 = new TextArea(link0, "<|xml encoding ,ame expected to start with iA-Za-z] not ", "<|xml encoding ,ame expected to start with iA-Za-z] not ");
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", xmlEntityRef0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", textArea0.getComponentId());
      assertTrue(textArea0.isEmpty());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("<|xml encoding ,ame expected to start with iA-Za-z] not ", textArea0.getFormElementName());
      assertNotNull(textArea0);
      
      String string0 = "q";
      ErrorPage errorPage1 = (ErrorPage)errorPage0.id("q");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("q", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("q", errorPage1.getComponentId());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertNotNull(errorPage1);
      
      TableBlock tableBlock0 = null;
      try {
        tableBlock0 = new TableBlock(xmlEntityRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a");
      assertEquals("a", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      String string0 = xmlEntityRef0.getTagName();
      assertEquals("a", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "a";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      XmlEntityRef xmlEntityRef1 = (XmlEntityRef)xmlEntityRef0.attributes(stringArray0);
      assertSame(xmlEntityRef0, xmlEntityRef1);
      assertSame(xmlEntityRef1, xmlEntityRef0);
      assertEquals(6, stringArray0.length);
      assertEquals("a", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertEquals("a", xmlEntityRef1.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNotNull(xmlEntityRef1);
      
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "", "v|0boZ]lkb}n");
      assertEquals("a", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals("v|0boZ]lkb}n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertNotNull(fileInput0);
      
      int int0 = fileInput0.getMaxMemoryFileSize();
      assertEquals(1000, int0);
      assertSame(xmlEntityRef0, xmlEntityRef1);
      assertEquals("a", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals("v|0boZ]lkb}n", fileInput0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      
      // Undeclared exception!
      try { 
        fileInput0.var();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
