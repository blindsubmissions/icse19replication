/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:39:35 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      SQLUtil.mutatesDataOrStructure("()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "Ol";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("Ol");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("0Ku.I{F]a{{uz%", stringArray0, "0Ku.I{F]a{{uz%", "0Ku.I{F]a{{uz%", stringArray0);
      String string0 = "T|ft!v}h";
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("T|ft!v}h", "", versionNumber0);
      String string1 = "alter session";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("alter session", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'alter session'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "VOqrELJcR|6$#PyI}";
      stringArray0[1] = "VOqrELJcR|6$#PyI}";
      stringArray0[2] = "VOqrELJcR|6$#PyI}";
      stringArray0[3] = "VOqrELJcR|6$#PyI}";
      stringArray0[4] = "VOqrELJcR|6$#PyI}";
      stringArray0[5] = "VOqrELJcR|6$#PyI}";
      stringArray0[6] = "";
      stringArray0[7] = "VOqrELJcR|6$#PyI}";
      String string0 = "5S<MA5 T\"RNpfF";
      SQLUtil.innerJoin("VOqrELJcR|6$#PyI}", stringArray0, "5S<MA5 T\"RNpfF", "org.apache.derby.impl.sql.execute.AggregateSortObserver", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBTrigger dBTrigger0 = new DBTrigger("Ea,Mk|1<*", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      dBCatalog0.removeSchema(dBSchema0);
      dBCatalog0.getSchema("VOqrELJcR|6$#PyI}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.isProcedureCall("X");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" at join position ", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " at join position ";
      stringArray0[1] = " at join position ";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ",";
      stringArray0[2] = "#,Yl3}~`y";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=*`SLm]GI");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("org.apache.derby.impl.sql.execute.DropSequenceConstantAction");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = SQLUtil.substituteMarkers("", "", integer0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "#&|b%Wl9&S\\W";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("#&|b%Wl9&SW", compositeDBObject0);
      tableContainer0.getTable("=X')QW");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("pIdidz/3s0");
      SQLUtil.isDDL("pIdidz/3s0");
      SQLUtil.normalize("E \"LD]>A`", false);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String string0 = null;
      String string1 = null;
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.mutatesStructure("COLUMN_TYPE SMALLINT");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "COLUMN_TYPE SMALLINT");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      DBSchema dBSchema0 = new DBSchema("S(b*-+~O.N/~.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.postgresql.jdbc4.AbstractJdbc4ResultSetMetaData";
      stringArray0[1] = "";
      stringArray0[2] = "org.postgresql.jdbc4.AbstractJdbc4ResultSetMetaData";
      stringArray0[3] = "";
      stringArray0[4] = "S(b*-+~O.N/~.";
      stringArray0[5] = "org.postgresql.jdbc4.AbstractJdbc4ResultSetMetaData";
      stringArray0[6] = "org.postgresql.jdbc4.AbstractJdbc4ResultSetMetaData";
      stringArray0[7] = "S(b*-+~O.N/~.";
      stringArray0[8] = "tur# ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.postgresql.jdbc4.AbstractJdbc4ResultSetMetaData", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5442837329694394
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "VOqrELJcR|6$#PyI}";
      stringArray0[1] = "VOqrELJcR|6$#PyI}";
      SQLUtil.isDDL("XYx \"Sq+U3k VKdPLx ");
      SQLUtil.normalize("VOqrELJcR|6$#PyI}", false);
      TableContainer tableContainer0 = new TableContainer("VOqrELJcR|6$#PyI}");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("pIdidz/3s0");
      SQLUtil.isDDL("pIdidz/3s0");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      DBDataType.getInstance(0, "H? ?@GV;KQ-K");
      Integer integer0 = new Integer(7);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("(C]7C+&(>KI=U");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getBaseType", (DBSchema) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "H? ?@GV;KQ-K";
      stringArray0[1] = "pIdidz/3s0";
      stringArray0[2] = "E \"LD]>A`";
      stringArray0[3] = "H? ?@GV;KQ-K";
      stringArray0[4] = "E \"LD]>A`";
      stringArray0[5] = null;
      stringArray0[6] = "H? ?@GV;KQ-K";
      stringArray0[7] = "H? ?@GV;KQ-K";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("COLUMN_TYPE SMALLINT");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "COLUMN_TYPE SMALLINT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.normalize("E \"LD]>A`", false);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null);
      char char0 = '$';
      char char1 = '*';
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("a*^ov", stringBuilder0);
      int int0 = (-2738);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2738), "E \"LD]>A`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2738
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "create unique index";
      stringArray0[4] = null;
      stringArray0[5] = "n";
      stringArray0[6] = null;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      SQLUtil.mutatesDataOrStructure("create unique index");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<String> vector0 = new Vector<String>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '*';
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 95, (-42519022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "TF/P0UEo";
      boolean boolean0 = false;
      SQLUtil.normalize("TF/P0UEo", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TF / P0UEo");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("TF / P0UEo");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "TF / P0UEo");
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      int int0 = 493;
      long long0 = (-2758L);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(493, (-2758L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 493
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize("unaligned setLength ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("unaligned setLength");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "unaligned setLength");
      StringBuilder stringBuilder1 = stringBuilder0.append("unaligned setLength");
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "unaligned setLength";
      stringArray0[2] = "unaligned setLength";
      stringArray0[3] = "unaligned setLength";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("HD^-p9\"", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.addRequiredCondition("|QvLs", stringBuilder1);
      assertEquals("unaligned setLengthunaligned setLengthCONSTRAINT HD^-p9\"  and |QvLs", stringBuilder1.toString());
      
      String string1 = SQLUtil.removeComments("unaligned setLength");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.mutatesStructure("0436gCkfzy}Nz+9~m");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- 0");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("unknown");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.isProcedureCall("X");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" at join position ", (DBSchema) null);
      String string0 = "Invalid character data was found.  This is most likely caused by stored data containing characters that are invalid for the character set the database was created in.  The most common example of this is storing 8bit data in a SQL_ASCII database.";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Invalid character data was found.  This is most likely caused by stored data containing characters that are invalid for the character set the database was created in.  The most common example of this is storing 8bit data in a SQL_ASCII database.";
      stringArray0[1] = "X";
      stringArray0[2] = "Invalid character data was found.  This is most likely caused by stored data containing characters that are invalid for the character set the database was created in.  The most common example of this is storing 8bit data in a SQL_ASCII database.";
      stringArray0[3] = "X";
      stringArray0[4] = "X";
      stringArray0[5] = "Invalid character data was found.  This is most likely caused by stored data containing characters that are invalid for the character set the database was created in.  The most common example of this is storing 8bit data in a SQL_ASCII database.";
      stringArray0[6] = "X";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " at join position ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(610, (CharSequence) " at join position ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 610
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Boolean boolean0 = SQLUtil.mutatesStructure("execx");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.parseColumnTypeAndSize("execx");
      Boolean boolean1 = SQLUtil.mutatesStructure("");
      assertFalse(boolean1);
      
      boolean boolean2 = SQLUtil.isQuery("feaiZP0v");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.559834325921902
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "XYx \"Sq+U3k VKdPLx ";
      SQLUtil.isDDL("XYx \"Sq+U3k VKdPLx ");
      SQLUtil.normalize("52FVy[3IViKo':[F", false);
      TableContainer tableContainer0 = new TableContainer("52FVy [ 3I  ViKo ':[F'");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("0436gCkfzy}Nz+9~m", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0436gCkfzy}Nz+9~m", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(2444, "0436gCkfzy}Nz+9~m");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0436gCkfzy}Nz+9~m";
      stringArray0[1] = "0436gCkfzy}Nz+9~m";
      stringArray0[2] = "0436gCkfzy}Nz+9~m";
      stringArray0[3] = "org.antlr.runtime.RuleReturnScope";
      stringArray0[4] = "0436gCkfzy}Nz+9~m";
      stringArray0[5] = "0436gCkfzy}Nz+9~m";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "0436gCkfzy}Nz+9~m", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0436gCkfzy}Nz+9~m", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0436gCkfzy}Nz+9~m");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("0436gCkfzy}Nz+9~m");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("V8A");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter sessionpididz/3s0", false, defaultDBTable0, "V8A");
      dBCheckConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string0 = "yeV8[=^t'";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("BFwqa@~t&6+J8JXpF:", stringBuilder0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec1);
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) "CONSTRAINT \"alter sessionpididz/3s0\" CHECK V8A");
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'm';
      charArray0[2] = '5';
      charArray0[3] = '1';
      charArray0[4] = 'A';
      charArray0[5] = 'U';
      charArray0[6] = 'M';
      // Undeclared exception!
      try { 
        stringBuilder3.append(charArray0, (-526), (-526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.176185661560307
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("pIdidz/3s0");
      assertNull(boolean0);
      
      SQLUtil.isDDL("pIdidz/3s0");
      Integer integer0 = new Integer(1221);
      String string0 = SQLUtil.normalize(">e$c5{XZVK^A;[Q", false);
      assertEquals("> e  $ c5 { XZ  VK ^ A ; [ Q", string0);
      
      DBSchema dBSchema0 = new DBSchema("> e  $ c5 { XZ  VK ^ A ; [ Q");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pIdidz/3s0", dBSchema0);
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "43Y50.U";
      stringArray0[1] = "43Y50.U";
      stringArray0[2] = "43Y50.U";
      stringArray0[3] = "> e  $ c5 { XZ  VK ^ A ; [ Q";
      stringArray0[4] = "> e  $ c5 { XZ  VK ^ A ; [ Q";
      stringArray0[5] = ">e$c5{XZVK^A;[Q";
      stringArray0[6] = "43Y50.U";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "43Y50.U", true, stringArray0);
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT 43Y50.U ", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Random.setNextRandom((-2234));
      SQLUtil.normalize("3PXH5),{FS!:k#%qt", true);
      String string0 = "42Z9F";
      VersionNumber versionNumber0 = VersionNumber.valueOf("<;JGi{+UlD.N");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("[aH,jkC^U", "42Z9F", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("<;JGi{+UlD.N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '<;JGi{+UlD.N'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "TF/P0UEo";
      SQLUtil.normalize("TF/P0UEo", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TF / P0UEo");
      SQLUtil.normalize("%l.)cfx~", false);
      VersionNumber versionNumber0 = VersionNumber.valueOf("TF / P0UEo");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("TF/P0UEo", "Unknown constraint type: ", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("[mwi50gf$dke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '[mwi50gf$dke'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("0Ku.I{F]a{{uz%");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewupdatedrop index[mwi50gf$dke");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0Ku.I{F]a{{uz%", defaultDBTable0, (-117), "");
      DBDataType dBDataType0 = DBDataType.getInstance(2741, "orderedNulls");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      Integer.compareUnsigned((-117), 1024);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("b", defaultDBTable0, 10, " NULL");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("0Ku.I{F]a{{uz%", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("alter indexupdatedrop index[mwi50gf$dke", defaultDBTable0, dBDataType0, integer1);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn3;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("b, 0Ku.I{F]a{{uz%", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.normalize("unaligned setLength ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("unaligned setLength");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "unaligned setLength");
      stringBuilder0.append("unaligned setLength");
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "unaligned setLength";
      stringArray0[2] = "unaligned setLength";
      stringArray0[3] = "unaligned setLength";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("HD^-p9\"", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("unaligned setLengthunaligned setLengthCONSTRAINT HD^-p9\" ", stringBuilder0.toString());
      
      SQLUtil.parseColumnTypeAndSize("unaligned setLength");
      Character character0 = Character.valueOf('I');
      SQLUtil.renderValue(character0);
      boolean boolean0 = SQLUtil.isQuery("'I'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("call");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      SQLUtil.join("call", "call", stringArray0, "call", "call", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "m(v", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";Lm8k", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "renamepididz/3s0");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("PAGE", true, dBTable0, "call");
      SQLUtil.constraintName(dBCheckConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      Random.setNextRandom(2849);
      SQLUtil.join((String) null, "^+:pp)e<e\"e0~&", stringArray0, (String) null, "yfYAZgnRe/#2H", stringArray0);
      Random.setNextRandom((-1266));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0319562238569695
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("call");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      SQLUtil.join("call", "call", stringArray0, "call", "call", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "m(v", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";Lm8k", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "renamepididz/3s0");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("PAGE", true, dBTable0, "call");
      SQLUtil.constraintName(dBCheckConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      Random.setNextRandom(2849);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e");
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec1, mockPrintWriter0);
      Object[] objectArray1 = SQLUtil.parseColumnTypeAndSize("PAGE");
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("call");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("call", "call", stringArray0, "call", "call", stringArray0);
      assertEquals("call join call as call on call.null = call.null and call.null = call.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "m(v", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";Lm8k", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "renamepididz/3s0");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("PAGE", true, dBTable0, "call");
      String string1 = SQLUtil.normalize("PAGE", false);
      assertEquals("PAGE", string1);
      
      DBDataType dBDataType0 = DBDataType.getInstance(659, "&#x");
      Integer integer0 = new Integer(2646);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, dBDataType0, integer1);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("call &#X(3) NULL", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1542859713361615
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("V8A", (DBSchema) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter sessionpididz/3s0", false, defaultDBTable0, "V8A");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" = ?");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "V8A", objectArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.parseColumnTypeAndSize("+RB|&*q");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updatedrop index[mwi50gf$dke");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      System.setCurrentTimeMillis((byte)12);
      String string0 = SQLUtil.normalize("=x7o-W#fLa5C&,b1", true);
      assertEquals("= x7o - W # fLa5C &, b1", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1192809219098505
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("X");
      assertFalse(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("X");
      assertNull(boolean1);
      
      SQLUtil.isDML("X");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.removeComments("f4}");
      DBDataType dBDataType0 = DBDataType.getInstance(207, "UNIQUE ");
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Kq+N$p", (DBTable) null, dBDataType0, integer1, integer2);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Kq+N$p UNIQUE (1,2) NULL", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("0436gCkfzy}Nz+9~m", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0436gCkfzy}Nz+9~m", dBSchema0);
      DBDataType.getInstance(2444, "0436gCkfzy}Nz+9~m");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0436gCkfzy}Nz+9~m";
      stringArray0[1] = "0436gCkfzy}Nz+9~m";
      stringArray0[3] = "org.antlr.runtime.RuleReturnScope";
      stringArray0[4] = "0436gCkfzy}Nz+9~m";
      stringArray0[5] = "0436gCkfzy}Nz+9~m";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "0436gCkfzy}Nz+9~m", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0436gCkfzy}Nz+9~m");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.parseColumnTypeAndSize("0436gCkfzy}Nz+9~m");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table 0436gCkfzy}Nz+9~m", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8937882323911377
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("0436gCkfzy}Nz+9~m", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execpsqp%r(r:qsbdatm^", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-493376575), "9oy5,");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "0436gCkfzy}Nz+9~m", false, stringArray0);
      dBUniqueConstraint0.setOwner(dBCatalog0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      Integer integer0 = new Integer(2444);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JZdhk", defaultDBTable0, dBDataType0, (Integer) null, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(">Is6l+.:pCXp", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      SQLUtil.renderColumn(defaultDBColumn1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("QBQ1y#19]Y");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("TND8 7y1P");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("0436gCkfzy}Nz+9~m", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0436gCkfzy}Nz+9~m", dBSchema0);
      DBDataType.getInstance(2444, "0436gCkfzy}Nz+9~m");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0436gCkfzy}Nz+9~m";
      stringArray0[1] = "0436gCkfzy}Nz+9~m";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.antlr.runtime.RuleReturnScope", true, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema0);
      defaultDBTable1.removeUniqueConstraint(dBUniqueConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.antlr.runtime.RuleReturnScope");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      SQLUtil.parseColumnTypeAndSize("37HmAQSo~?O/bqH$Dp");
      defaultDBTable1.getUniqueConstraint(stringArray0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("0436gCkfzy}Nz+9~m", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0436gCkfzy}Nz+9~m", dBSchema0);
      DBDataType.getInstance(2444, "0436gCkfzy}Nz+9~m");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0436gCkfzy}Nz+9~m";
      stringArray0[1] = "0436gCkfzy}Nz+9~m";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "0436gCkfzy}Nz+9~m", true, stringArray0);
      defaultDBTable1.removeUniqueConstraint(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0436gCkfzy}Nz+9~m");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.parseColumnTypeAndSize(".a9cdpanv");
      String string0 = SQLUtil.typeAndName(defaultDBTable1);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Random.setNextRandom(488);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog(".I11");
      dBCatalog0.setName(".I11");
      DBDataType.getInstance((-327), "alter session");
      SQLUtil.parseColumnTypeAndSize(".I11");
      DBSchema dBSchema0 = new DBSchema("Q!'vc@o;g,ry,HYKh");
      DBTrigger dBTrigger0 = new DBTrigger((String) null, dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBTrigger0);
      assertEquals("Q!'vc@o;g,ry,HYKh.null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.395908119293929
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.normalize("unaligned setLength ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("unaligned setLength ");
      StringBuilder stringBuilder1 = stringBuilder0.append("null");
      String[] stringArray0 = new String[23];
      stringArray0[0] = null;
      stringArray0[1] = "unaligned setLength";
      stringArray0[2] = "unaligned setLength";
      stringArray0[3] = "null";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("HD^-p9\"", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.addOptionalCondition("unaligned setLength", stringBuilder1);
      assertEquals("unaligned setLength nullCONSTRAINT HD^-p9\"  or unaligned setLength", stringBuilder1.toString());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[0], false, stringArray0);
      DBDataType.getInstance((-968), "C]D>");
      Integer integer0 = RawTransaction.COMMIT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execupdatedrop index[mwi50gf$dke");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.parseColumnTypeAndSize("unaligned setLength");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9328065726143309
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select into)fbwp[e\"p");
      Locale locale0 = Locale.KOREA;
      SQLUtil.parseColumnTypeAndSize("/*");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into)fbwp[e\"p");
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(0L);
      String string0 = SQLUtil.normalize("%SYx2j61ZZ} c1zw", false);
      assertEquals("%  SYx2j61ZZ } c1zw", string0);
      
      boolean boolean1 = SQLUtil.isQuery("UNIQUE ");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.normalize("org.databene.jdbacl.model.DBUniqueConstraint", true);
      assertEquals("org.databene.jdbacl.model.DBUniqueConstraint", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0578975319224093
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.normalize("0436gCk zy}NK+9~m", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("0436gCk zy } NK + 9 ~ m");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, (String) null, false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("BqK;b>", false, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      dBUniqueIndex1.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("H:de,AH^]~amz.", false, defaultDBTable1, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint0.setName("b+(?Jy(}$-+ETM");
      SQLUtil.constraintName(dBUniqueConstraint0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("C-H");
      assertNull(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.846798043491432
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.normalize("unaligned setLength ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "null");
      StringBuilder stringBuilder1 = stringBuilder0.append("null");
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "unaligned setLength";
      stringArray0[2] = "unaligned setLength";
      stringArray0[3] = "null";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("HD^-p9\"", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.addOptionalCondition("unaligned setLength", stringBuilder1);
      assertEquals("nullnullCONSTRAINT HD^-p9\"  or unaligned setLength", stringBuilder1.toString());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[0], false, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-968), "C]D>");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",wXGO+W.gFx9=", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setVersionColumn(false);
      defaultDBColumn0.getNotNullConstraint();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("tr.rtr_id: ", defaultDBTable0, dBDataType0, integer0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "unaligned setLength ");
      SQLUtil.renderColumn(defaultDBColumn1);
      Integer.compareUnsigned(41, 41);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, unaligned setLength, unaligned setLength, null) REFERENCES null(, unaligned setLength, unaligned setLength, null)", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.051653366412702
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectupdtdrop index[mwi50gf$dke");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1719644434), "selectupdtdrop index[mwi50gf$dke");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectupdtdrop index[mwi50gf$dke", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("selectupdtdrop index[mwi50gf$dke SELECTUPDTDROP INDEX[MWI50GF$DKE(3,3) NULL", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("_CJgG)");
      assertNull(boolean1);
      
      String string1 = SQLUtil.normalize("selectupdtdrop index[mwi50gf$dke SELECTUPDTDROP INDEX[MWI50GF$DKE(3,3) NULL", true);
      assertEquals("selectupdtdrop index [ mwi50gf $ dke SELECTUPDTDROP INDEX [ MWI50GF $ DKE (3, 3) NULL", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("unaligned setLength ", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("unaligned setLength");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "unaligned setLength", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      Random.setNextRandom(162);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("UNIQUE ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.2337916587064593
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.normalize("w*qX", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
