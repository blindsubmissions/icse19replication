/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:22:53 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(3, "P4OhX:]#w", 0);
      Player player1 = new Player(3);
      player1.getSubparty();
      player0.setJoinOK(player1, false);
      player0.reset(false);
      player0.setY(3);
      boolean boolean0 = player0.isDead();
      assertEquals(3.0F, player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(10, "\"<", "\"<", (-1796));
      player0.setY((-630.0F));
      player0.type();
      Player player1 = new Player(3);
      player0.head = (Party) player1;
      player0.getZ();
      player0.getTimeOfDeath();
      player0.setDead((long) 5);
      assertEquals((-630.0F), player0.getY(), 0.01F);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(0, "", (-1471));
      player0.setDead((long) 0, false);
      player0.reset(false);
      player0.reset(true);
      player0.getSubparty();
      player0.reset(true);
      player0.getTimeOfDeath();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0);
      player0.reset(false);
      player0.getName();
      assertEquals((-1471), player0.getPictureId());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-925), ":pr~ cTLD", ":pr~ cTLD", (-1011), (-1938));
      player0.setX((-925));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-67);
      player0.unpack(byteArray0);
      assertEquals((-925.0F), player0.getX(), 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      long long0 = (-763L);
      Player player1 = new Player((short)4919, "()e)N|)>%x", "()e)N|)>%x", (short)4919);
      player0.prev = (Party) player1;
      player0.setConnected(true);
      player0.setDead(1311L);
      player0.setDead((-763L));
      player0.setZ((-763L));
      player0.setDead(2021L, false);
      player0.toString();
      player0.setY(0.0F);
      player0.setY(0.0F);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-1384), "", "", 0, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-11);
      player0.unpack(byteArray0);
      player0.getSubparty();
      player0.reset(false);
      player0.setMoney(2635.18F);
      float float0 = player0.getY();
      assertEquals(2635.18F, player0.getMoney(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-990);
      Player player0 = new Player((-990), (String) null, (String) null, 0, 4919);
      Player player1 = new Player(4919, "", 0);
      Party party0 = player1.boss;
      player1.getSubparty();
      player0.boss = null;
      boolean boolean0 = true;
      player0.reset(true);
      player0.getPictureId();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((-2029), (String) null, (-2029));
      Player player1 = new Player();
      player0.setDead((-1272L));
      player0.reset(true);
      player0.reset(true);
      byte[] byteArray0 = new byte[0];
      player1.unpack(byteArray0);
      player1.id = (int) (short)4919;
      player0.setJoinOK(player1, false);
      player1.setDead();
      player1.gangStrength();
      player0.getIP();
      player1.setDead(0L, false);
      player1.type();
      float float0 = player0.getMoney();
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(0L, true);
      int int0 = player0.getStrength();
      Player player1 = new Player();
      player0.boss = (Party) player1;
      player0.setJoinOK(player1, true);
      float float0 = player0.getMoney();
      float float1 = player0.getY();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      player1.reset(true);
      player0.reset(true);
      Player player2 = new Player(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)80);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)80);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player2.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      player1.gangStrength();
      player0.setJoinOK(player2, false);
      int int1 = player0.gangStrength();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      String string0 = player0.getIP();
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", string0);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(831);
      Player player1 = new Player(0, "", "", 2867, 0);
      player0.head = (Party) player1;
      assertEquals(0, player1.getStrength());
      assertEquals(2867, player1.getPictureId());
      
      Player player2 = new Player((short)4919, "", (short)4919);
      player0.add(player2);
      player0.setConnected(true);
      String string0 = player0.toString();
      assertEquals("Player831", string0);
      
      boolean boolean0 = player2.isJoinOK(player0, true);
      assertFalse(boolean0);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(1, player2.getStrength());
      assertFalse(player2.isDead());
      assertEquals("0.0.0.0", player2.getIP());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-1769), "3b-a", "MW1eT`;TiW`R&8r{y_", 485, (-702));
      byte[] byteArray0 = new byte[5];
      player0.setDead(0L, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      player0.unpack(dataInputStream0);
      byteArray0[0] = (byte)1;
      player0.setConnected(true);
      player0.gangStrength();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)0;
      player0.unpack(byteArray0);
      player0.reset(true);
      player0.pack();
      player0.setDead((long) (byte)0, true);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0);
      boolean boolean0 = false;
      player0.setDead((long) 0, false);
      player0.isConnected();
      int int1 = (-565);
      String string0 = ":aVg~Eb0d(/gJOR}My?";
      player0.reset(false);
      Player player1 = new Player((-565), ":aVg~Eb0d(/gJOR}My?", ":aVg~Eb0d(/gJOR}My?", (short)4919);
      // Undeclared exception!
      try { 
        player1.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-3167), "^U}W0@Bg8", "sf=@$ca6/$rMd1Vij^", (-3167), (-3167));
      player0.pack();
      Party party0 = player0.next;
      player0.head = null;
      Party party1 = new Party((short)4919);
      player0.next = party1;
      player0.id = 84;
      player0.getSubparty();
      player0.getTimeOfDeath();
      player0.getZ();
      player0.getIP();
      player0.setDead();
      float float0 = player0.getX();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(831);
      Player player1 = new Player(0, "", "", 2867, 0);
      player0.head = (Party) player1;
      Player player2 = new Player((short)4919, "", (short)4919);
      player0.add(player2);
      player0.setConnected(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)121;
      player2.unpack(byteArray0);
      player2.reset(false);
      player0.pack();
      player2.setDead((long) (byte)121, false);
      player1.isJoinOK(player0, false);
      boolean boolean0 = player2.isDead();
      assertEquals(121L, player2.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(2558, " ", " ", 2558, (-1));
      player0.id = (-1);
      player0.setDead((long) 2558);
      Player player1 = new Player(4);
      player1.setY((-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      player0.setJoinOK(player1, true);
      byteArray0[1] = (byte)27;
      player0.unpack(byteArray0);
      player1.setZ((byte)10);
      player0.setConnected(true);
      Player player2 = new Player(4);
      player0.isJoinOK(player2, true);
      System.setCurrentTimeMillis(1094L);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.242973226438147
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.next;
      player0.setY((-312.0F));
      Player player1 = new Player((-1257), " ", 5);
      player0.setJoinOK(player1, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)10;
      player0.unpack(byteArray0);
      player0.setZ(227.80685F);
      player1.setConnected(true);
      Player player2 = new Player(3);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis((byte)10);
      System.setCurrentTimeMillis(525L);
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals(227.80685F, player0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.next;
      player0.setY(10.0F);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      player0.boss = null;
      byteArray0[1] = (byte) (-111);
      Player player1 = new Player((byte)16);
      player1.unpack(byteArray0);
      player1.setZ((byte) (-111));
      player0.setJoinOK(player1, false);
      player1.unpack(byteArray0);
      player1.setZ((byte) (-111));
      player1.setConnected(false);
      player1.setConnected(false);
      Player player2 = new Player(4919);
      player1.isJoinOK(player0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2579, 27);
      System.setCurrentTimeMillis(1392409296320L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(10.0F, player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      Player player0 = new Player((byte)20);
      player0.unpack(byteArray0);
      Player player1 = new Player((short)4919);
      player1.getSubparty();
      byte[] byteArray1 = player1.pack();
      player1.isJoinOK(player0, false);
      long long0 = 1088L;
      player0.setX((byte)20);
      System.setCurrentTimeMillis(1088L);
      System.setCurrentTimeMillis((byte)20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      System.setCurrentTimeMillis((byte) (-46));
      System.setCurrentTimeMillis((-2469L));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }
}
