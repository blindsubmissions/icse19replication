/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:18:56 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("h\"Gg@0h]?lexy,4?D|5");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setCharset("");
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 246;
      advancedSettings0.setClientSocketSendBufferSize(246);
      advancedSettings0.setSocketLinger((-1881));
      int int1 = (-1867);
      advancedSettings0.setBacklog((-1881));
      String string0 = ".";
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(2907);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(".");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "J*Vdg3%?";
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setByteBufferSize((-1694));
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-1694));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("J*Vdg3%?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // J*Vdg3%?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("e,U=");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setByteBufferSize(351);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketReceiveBufferSize(217);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTrafficClass(">U](X 3FT");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setSocketLinger(217);
      advancedSettings0.setPerformancePreferencesBandwidth((-491));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("R@");
      advancedSettings0.setClientSocketSendBufferSize(217);
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesConnectionTime((-491));
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setDebugNonBlockingMode(false);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(1764);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setBacklog((-1));
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4410152780267027
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = false;
      advancedSettings0.setBacklog(0);
      int int0 = (-1239);
      advancedSettings0.setMaxThreadsForNioWrite((-1239));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      int int1 = 0;
      String string0 = "Cc8C'f+.R'h";
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTrafficClass("guZ\u0003kMQ^+Y");
      advancedSettings0.setClientIdentifier("Cc8C'f+.R'h");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("guZ\u0003kMQ^+Y");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // guZ\u0003kMQ^+Y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 1;
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setDebugNonBlockingMode(true);
      int int1 = 1021;
      advancedSettings0.setPerformancePreferencesConnectionTime(1021);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize(1021);
      advancedSettings0.setDebugNonBlockingMode(true);
      String string0 = "qdRZ";
      int int2 = 1552;
      advancedSettings0.setMaxThreadsForNioWrite(1552);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("qdRZ");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // qdRZ
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.165672166849039
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientIdentifier("\t<performance-preferences-connection-time>");
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.toXML("");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setByteBufferSize(393);
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getQSObjectPoolMaker();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals("\t<performance-preferences-connection-time>", advancedSettings0.getClientIdentifier());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.183672971483787
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog((-194));
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(10, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("1#WXrrh");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings1.getSocketLinger();
      advancedSettings0.setCharset((String) null);
      advancedSettings1.setMaxThreadsForNioWrite(65536);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings1.setClientSocketSendBufferSize(0);
      assertEquals(65536, advancedSettings1.getMaxThreadsForNioWrite());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      int int0 = advancedSettings2.getSocketLinger();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("ISO-8859-1");
      advancedSettings0.setCharset("ISO-8859-1");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getUseDirectByteBuffer();
      advancedSettings1.setBacklog((-194));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</performance-preferences-latency>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </performance-preferences-latency>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
