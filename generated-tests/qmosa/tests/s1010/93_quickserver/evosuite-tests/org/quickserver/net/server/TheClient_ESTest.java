/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:18:57 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Socket;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-2488));
      theClient0.setMaxAuthTryMsg("-wn");
      theClient0.getTimeout();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getClientData();
      assertEquals((-2488), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout((-532));
      theClient0.setClientEvent(clientEvent0);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getMaxAuthTry();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      assertEquals((-532), theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.setMaxAuthTry(1215);
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      theClient0.getClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      QuickServer quickServer0 = new QuickServer("");
      quickServer0.resumeService();
      theClient0.setServer(quickServer0);
      int int0 = theClient0.getTimeout();
      assertEquals(1215, theClient0.getMaxAuthTry());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      data0.setPassword(byteArray0);
      byteArray0[1] = (byte) (-120);
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      byteArray0[2] = (byte) (-72);
      data0.setLastAsked("");
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-89);
      data0.setPassword(byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      theClient0.setClientData(data0);
      theClient0.setMaxAuthTryMsg(",:bt");
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setTimeoutMsg("3x:>9s2jjb~>A?");
      theClient0.getAuthenticator();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTry((-129));
      theClient0.setCommunicationLogging(false);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTrusted();
      theClient0.getClientCommandHandler();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientEventHandler();
      theClient0.getClientData();
      theClient0.getClientEvent();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxConnectionMsg("$T$J");
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      assertEquals((-129), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setTimeoutMsg("org.quickserver.net.server.TheClient");
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setSocket(mockSocket0);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxAuthTry(0);
      theClient0.getTrusted();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTimeoutMsg("!5CgsX9");
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setSocket((Socket) null);
      theClient0.setTimeout(0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertEquals(0, theClient0.getTimeout());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxConnectionMsg("no socket");
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxAuthTry((-531));
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        mockSocket0.setSendBufferSize((-531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative send size
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getAuthenticator();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTry((-431));
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxAuthTry((-1314));
      theClient0.getClientEvent();
      theClient0.getClientWriteHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTrusted(true);
      theClient0.getClientEventHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientWriteHandler();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((String) null, (-1314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1314
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      QuickServer quickServer0 = new QuickServer("", 1);
      theClient0.setServer(quickServer0);
      theClient0.setMaxAuthTry(1);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(3);
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getServer();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getTimeoutMsg();
      assertEquals(1, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getSendBufferSize();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setSocket(mockSocket0);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
