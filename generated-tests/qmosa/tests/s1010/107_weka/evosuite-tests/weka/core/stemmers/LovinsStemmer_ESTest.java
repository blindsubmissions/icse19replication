/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:56:00 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.155160204564242
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("MRNUMBER");
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("title");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem(".U~X)");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("~ cTLD>zz&");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("title");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("Yxs13#}aj-m0be]O\"");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("encible");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0139382511424546
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Yvy)UU8");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("R@");
      lovinsStemmer0.stem("r@");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Yvy)UU8";
      stringArray0[2] = "nGyru";
      stringArray0[3] = "yvy)uu8";
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9687800658478425
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("\"1g^yh*rvc");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ant");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"1g^yH*RVC";
      stringArray0[1] = "weka.core.TechnicalInformation$Type";
      stringArray0[2] = "ant";
      stringArray0[3] = "address";
      stringArray0[4] = "\"1g^yh*rvc";
      stringArray0[5] = "weka.core.TechnicalInformation$Type";
      stringArray0[6] = "";
      stringArray0[7] = "\"1g^yh*rvc";
      LovinsStemmer.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0257282884183545
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ated");
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("organization");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("organization");
      lovinsStemmer0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.135047776102027
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "\"<JZ";
      stringArray0[1] = "ator";
      stringArray0[2] = "l";
      stringArray0[3] = "F[TK45~K!z?_as(17a";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("z<*2Ex@y!FQ$o");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("cSi'1");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("ement");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8804901314870051
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "";
      stringArray0[2] = "D";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("atic");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("Morgan Kaufmann Publishers");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "morgan kaufmann publishes";
      stringArray1[1] = "at";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "8034";
      stringArray1[5] = "at";
      stringArray1[6] = "";
      stringArray1[7] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[8] = "";
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8993098830849456
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("SKga\fl=:Lgr-agXNN.");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("erid");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "erid";
      stringArray1[1] = "";
      stringArray1[2] = "erid";
      stringArray1[3] = "eris";
      stringArray1[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[5] = "skga\fl=:lgr-agxnn.";
      stringArray1[6] = "";
      LovinsStemmer.main(stringArray1);
      assertEquals(7, stringArray1.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2933807505171657
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem(":)l,vtD~1");
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.stemString(":)l,vtD~1");
      assertEquals(":)l,vtd~1", string0);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem(":)l,vtD~1");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("ul(}-G@3,yJL'T");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.getRevision();
      assertTrue(string3.equals((Object)string2));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3750242529845458
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("k! *X");
      String string0 = lovinsStemmer0.stem("k! *X");
      assertEquals("k! *x", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("t<8je~Ka=Q`f+t");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("k! *x");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Bled, Slovenia");
      String string1 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("O'n_Dps3UeXdZkKV");
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("EFmS:tk& HTtT");
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stemString("j=3:|'E:::,#8g,\"C");
      assertEquals("j=3:|'e:::,#8g,\"c", string4);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8287005193558294
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.stem("GD;J&):Uk");
      lovinsStemmer0.stem("The language the document is in.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("CONTENTS");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("ional");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("Gd!Q)0 !LWZ}x%5");
      assertEquals("gd!q)0 !lwz}x%5", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.7492371052659756
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wek.cor.technicalinform$typ";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("jaqrgogyt");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("l");
      lovinsStemmer1.stemString("1");
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("cSi'1");
      lovinsStemmer1.getRevision();
      lovinsStemmer0.stemString("yz");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer3.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.027539370637948
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "\"<JZ";
      stringArray0[1] = "ator";
      stringArray0[2] = "l";
      stringArray0[3] = "F[TK45~K!z?_as(17a";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("paglid");
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string1);
      
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("}");
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9524303320983685
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer0.stem("vad");
      assertEquals("vas", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "organization";
      stringArray0[3] = "";
      stringArray0[3] = "";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("organization");
      assertEquals("organ", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.stem("");
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("x]t){BK[2HtBS9}7];$");
      assertEquals("x]t){bk[2htbs9}7];$", string3);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2700316752557592
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("MRNUMBER");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ttl");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem(".U~X)");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("mrnumber");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("4z4");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("?#\"jGbkQL/Dz*f}jj");
      lovinsStemmer0.stemString("?#\"jgbkql/dz*f}jj");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.stemString("8034bex");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("arized");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.7382199882754351
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("\"1g^yh*rvc");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stem("arizyz");
      assertEquals("arizys", string1);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer2.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0579652698996616
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("\"");
      lovinsStemmer0.stemString("R@CSxd2/'2AiGT#*>9");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ix");
      lovinsStemmer2.stem("ix");
      lovinsStemmer2.stemString("meterax");
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1851956848497927
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("MRNUMBER");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("title");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem(".U~X)");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      assertEquals("titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.", string1);
      
      lovinsStemmer0.stem("mrnumber");
      lovinsStemmer0.stemString("q?X\"F<");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString(".u~x)");
      assertEquals(".u~x)", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2403441730695675
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("meter");
      lovinsStemmer0.stem("o7xyqG");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("J- X#M[h[H4}0P");
      lovinsStemmer0.stemString("meter");
      lovinsStemmer0.stemString("Min index (ints): ");
      lovinsStemmer0.stemString("meter");
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stem("weka.core.TechnicalInformation$Field");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j- x#m[h[h4}0p";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "meter";
      stringArray0[3] = "meter";
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9926359148665145
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ex");
      assertEquals("ex", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("organin>tRon");
      assertEquals("organin>tron", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.stem("organin>tRon");
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("organin>tron");
      assertEquals("organin>tron", string3);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.067807763157761
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pages");
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("aic");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("uad");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1923957433509245
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("meter");
      lovinsStemmer0.stem("o7xyqG");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("o7xyqG");
      lovinsStemmer0.stemString("o7xyqg");
      String string0 = lovinsStemmer1.stemString("weka.core.TechnicalInformation$Field");
      assertEquals("wek.cor.technicalinform$field", string0);
      
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stemString("olv");
      lovinsStemmer2.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("yz");
      assertEquals("yz", string3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("meter");
      lovinsStemmer0.stem("o7xyqG");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("o7xyqG");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer2.stem("A chapter (or section or whatever) number.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer0.stemString("a chapter (or section or whatever) number.");
      assertEquals("a chapter (or sect or whatever) number.", string0);
      
      String string1 = lovinsStemmer1.stemString("ix");
      assertEquals("ix", string1);
      
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("b[b");
      lovinsStemmer2.stemString("rud");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.stemString("o7xyqg");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string2 = lovinsStemmer6.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer6.stemString("^]Vz\"yV/7}m-.^DqbB");
      assertEquals("^]vz\"yv/7}m-.^dqb", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9729150497179929
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "\"<JZ";
      stringArray0[1] = "ator";
      stringArray0[2] = "l";
      stringArray0[3] = "F[TK45~K!z?_as(17a";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("{IQ?DTD~ybdw*n=Qj#W");
      lovinsStemmer0.stemString("l");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("l");
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("uQuv(");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("4z4");
      lovinsStemmer1.stemString("ator");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("lkaz0pand");
      String string0 = lovinsStemmer1.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8361755455411349
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ex");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("organization");
      assertEquals("organ", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("ex");
      assertEquals("ex", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("bl, slovcid");
      assertEquals("bl, slovcis", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer3.stemString("rud");
      assertEquals("rus", string4);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9448854592719005
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("meter");
      lovinsStemmer0.stem("o7xyqG");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("o7xyqG");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer2.stem("A chapter (or section or whatever) number.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("a chapter (or section or whatever) number.");
      lovinsStemmer0.getRevision();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stemString("A document having an author and title, but not formally published.");
      lovinsStemmer1.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9091204938461721
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("^U{Ye_.qB^");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("lud");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stem("rud");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("^u{ye_.qb^");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("%");
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.8376855393739576
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "\"<JZ";
      stringArray0[1] = "ator";
      stringArray0[2] = "l";
      stringArray0[3] = "F[TK45~K!z?_as(17a";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("z<*2Ex@y!FQ$o");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("F[TK45~K!z?_as(17a");
      lovinsStemmer0.stemString("ying");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ond");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8804901314870051
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("MRNUMBER");
      assertEquals("mrnumber", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("mrnumber");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("2aigtmit");
      assertEquals("2aigtmis", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("ttl");
      String string2 = lovinsStemmer0.stem("ax");
      assertEquals("ax", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("e_vH!U.");
      assertEquals("e_vh!u.", string3);
      
      lovinsStemmer0.toString();
      String string4 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("MRNUMBER");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ttl");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem(".U~X)");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("?gge?ccid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"10N");
      lovinsStemmer0.stemString("The price of the document.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stem("vad");
      lovinsStemmer0.stemString("\"10\n");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9791116011441242
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ex");
      assertEquals("ex", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("orXganizaton");
      assertEquals("orxganizat", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("81-106");
      lovinsStemmer0.stem("orxganizat");
      lovinsStemmer1.stemString("{vfm)^-Rru");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("=52sfyV");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("=52sfyv");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer1.stemString("81-106");
      assertEquals("81-106", string3);
      
      lovinsStemmer0.stemString("=52sfyv");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string4 = lovinsStemmer3.stem("C~%L");
      assertEquals("c~%l", string4);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9716860458980691
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "\"<JZ";
      stringArray0[1] = "ator";
      stringArray0[2] = "l";
      lovinsStemmer0.stem("\"<JZ");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("\"<JZ");
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"<JZ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("Max index (doubles): ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("lkaz0lux");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.7275487828883785
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("k! *X");
      lovinsStemmer0.stem("k! *X");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("t<8je~Ka=Q`f+t");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("k! *x");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Bled, Slivenia");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("t<8je~Ka=Q`f+t");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("t<8je~ka=q`f+t");
      lovinsStemmer0.stem("bl, sliven");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.stemString("-o%Zh%(^;");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034et");
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString(".mtJh/1u;0B");
      assertEquals(".mtjh/1u;0b", string2);
  }
}
