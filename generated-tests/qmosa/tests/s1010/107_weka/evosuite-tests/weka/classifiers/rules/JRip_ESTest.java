/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:56:09 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("#w#-6'qw,", list1, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      jRip0.getTechnicalInformation();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.hasAntds();
      jRip0.setUsePruning(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 115;
      Instances instances0 = new Instances("8118", arrayList0, 115);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      instances0.removeIf(predicate3);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass((-367.974172), (Instances) null, 0.0, (-706.241502293));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.setSeed(289L);
      jRip0.setOptimizations(2369);
      jRip0.setCheckErrorRate(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      KDTree kDTree0 = new KDTree();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2369);
      try { 
        inputMappedClassifier0.constructMappedInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      SparseInstance sparseInstance0 = new SparseInstance(2584);
      sparseInstance0.deleteAttributeAt(2584);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.getTechnicalInformation();
      jRip0.listOptions();
      jRip0.debugTipText();
      jRip0.setFolds(40);
      jRip0.setUsePruning(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Whether debug information is output to the console.";
      stringArray0[1] = "\tSet maximum number of boosting iterations";
      stringArray0[2] = "Whether debug information is output to the console.";
      stringArray0[3] = "Whether debug information is output to the console.";
      stringArray0[4] = "Whether debug information is output to the console.";
      String string0 = "[V9q&Vg[Hu^3eg4?T";
      try { 
        AbstractClassifier.forName("[V9q&Vg[Hu^3eg4?T", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: [V9q&Vg[Hu^3eg4?T
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(1319.833809433633);
      jRip0.setFolds(0);
      jRip0.checkErrorRateTipText();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.copy();
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 6;
      intArray0[2] = (-539);
      Utils.log2 = 372.67035639;
      intArray0[3] = 70;
      intArray0[4] = (-1974);
      intArray0[5] = 0;
      intArray0[6] = 79;
      intArray0[7] = 83;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(978.0, intArray0, 79);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.attributeSparse(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList1.addAll((Collection<? extends String>) list0);
      Attribute attribute0 = new Attribute(" does not have the same ", list0, (-173));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = (-885.805278956005);
      Classifier classifier0 = AbstractClassifier.makeCopy(jRip0);
      jRip0.setUsePruning(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.listOptions();
      jRip0.checkErrorRateTipText();
      jRip0.enumerateMeasures();
      jRip_RipperRule0.size();
      jRip0.toString();
      AbstractClassifier.makeCopy(classifier0);
      jRip0.setUsePruning(false);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      StringReader stringReader0 = new StringReader("Whether check for error rate >= 1/2 is included in stopping criterion.");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 3);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Whether], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      jRip0.getOptimizations();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.listOptions();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent((-800.0));
      jRip_RipperRule0.getConsequent();
      jRip0.setMinNo(2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Quit rule", arrayList0, protectedProperties0);
      attribute0.enumerateValues();
      attribute0.copy("Quit rule");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      jRip_NumericAntd0.getAccu();
      jRip0.getOptimizations();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -800
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.toString();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.getUsePruning();
      jRip0.getMinNo();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", arrayList0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      String string0 = "]>An(V\"}";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "]>An(V\"}");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.debugTipText();
      jRip0.setFolds(2);
      long long0 = 0L;
      jRip0.setSeed(0L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Whether debug information is output to the console.";
      stringArray0[1] = "Whether debug information is output to the console.";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setOptions(stringArray0);
      jRip0.setSeed(0L);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Whether debug information is output to the console.";
      jRip0.setOptions(stringArray1);
      String string0 = "VC`~3xUDE4&6cQhIA\\P";
      StringReader stringReader0 = new StringReader("Whether debug information is output to the console.");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Whether], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.foldsTipText();
      JRip jRip1 = new JRip();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("w0DtZ#UA$t}!", "w0DtZ#UA$t}!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      jRip0.debugTipText();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("The number of optimization runs.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of optimization runs. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("z(", "z(");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "!|BY7C^w*,-";
      stringArray0[1] = "@attribute";
      stringArray0[2] = "z(";
      JRip.main(stringArray0);
      jRip_NominalAntd0.getRevision();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute1 = new Attribute("8118", "8118");
      arrayList0.add(attribute1);
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try { 
        arrayList0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      Attribute attribute0 = new Attribute("{", 2287);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = 559.9;
      doubleArray0[3] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(559.9, doubleArray0);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip_NominalAntd0.getAttrValue();
      Attribute attribute1 = jRip_NominalAntd0.getAttr();
      attribute1.setWeight(0.0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-945.575));
      jRip0.listOptions();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.getRevision();
      Attribute attribute0 = null;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = Double.NaN;
      jRip0.enumerateMeasures();
      jRip_NumericAntd0.att = null;
      jRip_NumericAntd0.accuRate = 0.0;
      jRip_NumericAntd0.getAccu();
      jRip0.setDebug(false);
      jRip0.usePruningTipText();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch((Instances) null);
      DenseInstance denseInstance0 = new DenseInstance(1);
      try { 
        linearNNSearch0.nearestNeighbour(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("i\"Sb~s{1'Lj)&kBLit");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // i\"Sb~s{1'Lj)&kBLit not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      Attribute attribute0 = new Attribute("{", 2287);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = 559.9;
      doubleArray0[3] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(559.9, doubleArray0);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip_NominalAntd0.getAttrValue();
      Attribute attribute1 = jRip_NominalAntd0.getAttr();
      attribute1.setWeight(0.0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-945.575));
      jRip0.listOptions();
      jRip0.listOptions();
      jRip_RipperRule0.size();
      jRip0.getFolds();
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours(sparseInstance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      Attribute attribute0 = new Attribute("\"4F/Mq5/c|)", 116);
      Attribute attribute1 = new Attribute("@attribute", "d88");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      JRip jRip1 = new JRip();
      String string0 = jRip1.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      String string1 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string1);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertTrue(boolean0);
      
      String[] stringArray0 = jRip1.getOptions();
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertFalse(jRip1.getDebug());
      assertEquals(11, stringArray0.length);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?{Cuzcj-_4b";
      stringArray0[1] = "%tO(J z";
      stringArray0[2] = "4+)l;M_n<UPN";
      stringArray0[3] = "\nGrowing and pruning Replace ...";
      stringArray0[4] = "--=8h";
      stringArray0[5] = "IR\"3C2";
      stringArray0[6] = "IR\"3C2";
      stringArray0[7] = "mqVdpB";
      stringArray0[8] = "k>g6=J]K$";
      jRip0.setOptions(stringArray0);
      DenseInstance denseInstance0 = new DenseInstance((-651.008404112985), (double[]) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Attribute attribute0 = new Attribute("k>g6=J]K$", list0, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      // Undeclared exception!
      try { 
        denseInstance0.toString((-901), (-901));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?{Cuzcj-_4b";
      stringArray0[1] = "%tO(J z";
      stringArray0[2] = "4+)l;M_n<UPN";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 559.9;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 559.9;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("?{Cuzcj-_4b", list0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip_NominalAntd0.getAttrValue();
      Attribute attribute1 = jRip_NominalAntd0.getAttr();
      attribute0.setWeight(64.0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(Double.NaN);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.hasAntds();
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      Attribute attribute0 = new Attribute("{", 2296);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = 559.9;
      doubleArray0[3] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(559.9, doubleArray0);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip_NominalAntd0.getAttrValue();
      Attribute attribute1 = jRip_NominalAntd0.getAttr();
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute1.setWeight(0.0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-945.575));
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.covers(sparseInstance0);
      assertEquals((-945.575), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_NominalAntd0.getCover();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.copy();
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?{Cuzcj-_4b";
      stringArray0[1] = "%tO(J z";
      stringArray0[2] = "4+)l;M_n<UPN";
      stringArray0[3] = "\nGrowing and pruning Replace ...";
      stringArray0[4] = "--=8h";
      stringArray0[5] = "IR\"3C2";
      stringArray0[6] = "IR\"3C2";
      stringArray0[7] = "mqVdpB";
      stringArray0[8] = "k>g6=J]K$";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      jRip_RipperRule1.setConsequent((-651.008404112985));
      assertEquals((-651.008404112985), jRip_RipperRule1.getConsequent(), 0.01);
      
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule2 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip1.new RipperRule();
      jRip_RipperRule3.hasAntds();
      Attribute attribute0 = new Attribute("Using inverse-distance weighting kernels\n");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(11, stringArray0.length);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(5.55555);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0.0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("+]S^<Ux5jl");
      Attribute attribute1 = attribute0.copy("Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache");
      attribute1.setWeight(0.0);
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "date");
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(Double.NaN, double0, 0.01);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[4] = 4;
      intArray0[5] = 1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 2);
      boolean boolean0 = jRip_NumericAntd2.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(0L);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      long long0 = jRip0.getSeed();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, long0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0844297682153505
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", list0, protectedProperties0);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip1.getCapabilities();
      jRip_RipperRule0.setConsequent(4);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$Revision: 8181 $");
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList2, 3);
      jRip_NominalAntd0.splitData(instances0, 0.0, 346.801769518576);
      jRip1.getOptions();
      jRip_RipperRule1.hasAntds();
      jRip_RipperRule0.grow(instances0);
      assertEquals(4.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("@relation");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd((Attribute) null);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", list0, protectedProperties0);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip1.getCapabilities();
      jRip_RipperRule0.setConsequent(4);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$Revision: 8181 $");
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      assertEquals(4.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList2, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 3, (-917.2587814));
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      jRip0.setOptions((String[]) null);
      Attribute attribute0 = new Attribute("X7G", "X7G");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 1;
      jRip_NumericAntd0.toString();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("X7G >= NaN", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("+]S^<Ux5jl");
      Attribute attribute1 = attribute0.copy("Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache");
      attribute1.setWeight(0.0);
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(Double.NaN, double0, 0.01);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd2.getMaxInfoGain(), 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 4);
      jRip_RipperRule0.prune(instances0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.hasAntds();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7666900269684684
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute(";=Jj#> Z", (List<String>) null);
      Attribute attribute1 = attribute0.copy(";=Jj#> Z");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("oAe,et@`,V=Kgza8", arrayList0, 4);
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute1);
      jRip_NominalAntd1.splitData(instances0, (-1262.47979994695), 1);
      jRip0.getOptions();
      jRip_RipperRule0.hasAntds();
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }
}
