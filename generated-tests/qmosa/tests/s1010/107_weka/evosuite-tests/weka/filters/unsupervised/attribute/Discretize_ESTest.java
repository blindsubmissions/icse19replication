/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:55:58 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      discretize0.setOutputFormat();
      discretize0.m_MakeBinary = false;
      discretize0.setBins(1246);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getCapabilities();
      discretize0.getBins();
      discretize0.getMakeBinary();
      assertEquals(1246, discretize0.getBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.setAttributeIndices("-h");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "se'VpanE}Mh_3#\"B";
      stringArray0[1] = "-h";
      stringArray0[2] = "-h";
      Discretize.main(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.40364041061495
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AX#my";
      stringArray0[1] = "";
      stringArray0[2] = "~ cTLD>zz&";
      stringArray0[3] = "      else if (format.attribute(i).isNumeric())\n";
      stringArray0[4] = "";
      stringArray0[5] = "Y";
      stringArray0[6] = "-R";
      stringArray0[7] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[8] = "";
      Discretize.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("-B");
      discretize0.binsTipText();
      discretize0.getCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-B";
      stringArray0[1] = "-B";
      stringArray0[2] = "AttributeTest";
      stringArray0[3] = "-B";
      stringArray0[4] = "-B";
      stringArray0[5] = "";
      stringArray0[6] = "Number of bins.";
      discretize0.toString();
      stringArray0[7] = "-B";
      stringArray0[8] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(false);
      discretize0.getCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1714));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(23);
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      
      String string1 = discretize0.getRevision();
      assertEquals("8964", string1);
      
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      discretize0.setInvertSelection(true);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("$tE|HFM4Wv");
      discretize0.getRevision();
      discretize0.getOptions();
      discretize0.globalInfo();
      discretize0.getOptions();
      discretize0.setUseBinNumbers(false);
      discretize0.setFindNumBins(false);
      AllFilter allFilter0 = new AllFilter();
      StringReader stringReader0 = new StringReader("8964");
      stringReader0.reset();
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[8964], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.314663721384631
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1551.129335;
      discretize0.setOutputFormat();
      discretize0.getOptions();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("NOMINAL_ATTRIBUTES");
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.setUseEqualFrequency(true);
      discretize0.setInvertSelection(true);
      discretize0.setUseEqualFrequency(true);
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(0);
      discretize0.setOutputFormat();
      discretize0.getCapabilities();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(false);
      discretize0.useBinNumbersTipText();
      discretize0.getInvertSelection();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      int int0 = 0;
      DenseInstance denseInstance0 = new DenseInstance(0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(33);
      discretize0.setOutputFormat();
      discretize0.getCapabilities();
      int[] intArray0 = new int[6];
      intArray0[0] = 33;
      intArray0[1] = 33;
      intArray0[2] = 33;
      intArray0[3] = 33;
      intArray0[4] = 33;
      intArray0[5] = 33;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getUseBinNumbers();
      discretize0.setInvertSelection(false);
      discretize0.attributeIndicesTipText();
      Discretize discretize1 = new Discretize();
      discretize1.setUseEqualFrequency(true);
      discretize0.getBinRangesString(2);
      discretize1.getCapabilities();
      discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      
      boolean boolean0 = discretize1.getUseBinNumbers();
      assertTrue(discretize1.getUseEqualFrequency());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      String[] stringArray0 = discretize0.getOptions();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5202076722739175
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getUseEqualFrequency());
      
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.20082764903455
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("      else if (format.attribute(i).isNumeric())\n");
      discretize0.setInvertSelection(true);
      Locale.getISOCountries();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.83412587655526
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize("    // ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "    // ";
      stringArray0[1] = "    // ";
      stringArray0[2] = "-Y";
      stringArray0[3] = "    // ";
      discretize0.setBins(123);
      stringArray0[4] = "ng8lXq:}&{pi>'E$3";
      discretize0.setOptions(stringArray0);
      int int0 = 66;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 123;
      doubleArray1[1] = (double) 123;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 123;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 123;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (double) 0L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1.0);
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9683918915419634
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      discretize0.setOutputFormat();
      String[] stringArray0 = discretize0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1952257859);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.useBinNumbersTipText();
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("C&wc?w!T&yHq6$?");
      discretize0.setIgnoreClass(true);
      Discretize discretize1 = new Discretize();
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 1367.8939673278;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-534.3);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1367.8939673278;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-534.3);
      doubleArray2[3] = 2.0;
      doubleArray2[4] = (-1173.7406);
      doubleArray2[5] = (-534.3);
      doubleArray2[6] = 1367.8939673278;
      doubleArray2[7] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1173.7406);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-534.3);
      doubleArray3[3] = 1367.8939673278;
      doubleArray3[4] = (-534.3);
      doubleArray3[5] = 1367.8939673278;
      doubleArray3[6] = (-1173.7406);
      doubleArray3[7] = (-534.3);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1.7976931348623157E308;
      doubleArray5[1] = 1367.8939673278;
      doubleArray5[2] = 3088.994217;
      doubleArray5[3] = 1367.8939673278;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-1173.7406);
      doubleArray5[6] = 1367.8939673278;
      doubleArray5[7] = (-1.7976931348623157E308);
      doubleArray5[8] = 1.2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 1367.8939673278;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 1367.8939673278;
      doubleArray0[5] = doubleArray6;
      discretize1.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize1.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.m_DiscretizeCols = null;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9661755171495705
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. Tha is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      discretize0.setIgnoreClass(true);
      discretize0.getOptions();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      discretize0.m_MakeBinary = true;
      discretize0.setMakeBinary(true);
      discretize0.m_DiscretizeCols = null;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
