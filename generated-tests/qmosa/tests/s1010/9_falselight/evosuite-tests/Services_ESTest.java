/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:28:17 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 0);
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.Error = "Cw.pv}>%bg";
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("", 0);
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result1.reset();
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 0);
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **.\n****", string0);
      
      Services.testHTTPS("", (-1));
      Services.testSMTP("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **.\n****", 3000);
      Services.testHTTPS("", (-2546));
      Services services0 = new Services();
      Services.testSMTP("", 0);
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("", (-2546));
      services_SIMPLE_Result0.reset();
      String string1 = services_SIMPLE_Result2.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-2546**.\n****", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 0);
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      services_SIMPLE_Result0.Error = "Cw.pv}>%bg";
      services_SIMPLE_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("", 0);
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result1.reset();
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 0);
      assertTrue(services_HTTP_Result0.works);
      
      Services.testHTTPS("", (-1));
      Services.testSMTP("", 3000);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("", (-2546));
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertEquals(0, services_HTTP_Result1.code);
      assertFalse(services_HTTP_Result1.works);
      assertEquals(0L, services_HTTP_Result1.time);
      
      Services services0 = new Services();
      Services.testSMTP("", (-1));
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("", (-2546));
      services_SIMPLE_Result0.reset();
      String string0 = services_SIMPLE_Result2.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-2546**.\n****", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("**", (-1942));
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur : java.lang.IllegalArgumentException: port out of range:-1942**");
      services_SIMPLE_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("$`@", 0);
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result1.reset();
      Services.testHTTPS("", 0);
      Services.testHTTPS("xiv&Y,iM4x,3F:wg(", (-1));
      Services.testSMTP("boO3J_k,tE2jT/a", (-1942));
      Services.testHTTPS("** Code de page : ", (-2378));
      System.setCurrentTimeMillis(679L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://,r&N.");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "7j;+_r(2Sn");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("E\"VE", 5);
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.Error = "**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@612e6268) **.\n****";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ",r&N.");
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.reset();
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS(",r&N.", (-273));
      Services.testHTTP("", 5);
      Services services0 = new Services();
      services_HTTP_Result0.works = true;
      Services.testPOP3("", 0);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP(",r&N.", (-1));
      assertTrue(services_HTTP_Result1.works);
      assertEquals(12, services_HTTP_Result1.page_weight);
      
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("**** Resultat : \n** Fonctionnement : ", 3201);
      assertFalse(services_SIMPLE_Result1.works);
      assertEquals(0L, services_SIMPLE_Result1.time);
      
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("", 12);
      assertEquals(0L, services_HTTP_Result2.time);
      assertEquals(0, services_HTTP_Result2.page_weight);
      assertEquals(0, services_HTTP_Result2.code);
      assertFalse(services_HTTP_Result2.works);
  }
}
