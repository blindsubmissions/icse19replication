/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:28:47 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 3448L;
      Range.Builder range_Builder0 = new Range.Builder(3448L, 3448L);
      range_Builder0.expandBegin((-1L));
      long long1 = 127L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 300L;
      Range.of(range_CoordinateSystem0, 0L, 300L);
      long long1 = 2420L;
      Range range0 = Range.of(300L, 2420L);
      String string0 = "LIC";
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("LIC", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse LIC into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1541L), (-1541L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-1541L));
      range_Builder1.contractEnd((-4088L));
      Range.of((-1541L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1541L), (-4088L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.of(1L, (-2796L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(726L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 726L, (-1971L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.421572883571579
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of((-2339L));
      Range range1 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4876997150596765
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(2361L);
      range0.getLength();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2361L, 2867L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2361L);
      Range range1 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      range_Builder0.shift(2867L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.expandBegin(2867L);
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 2867 ]/SB", string0);
      
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift(1L);
      Range range2 = range1.intersection(range0);
      range_Builder0.copy();
      range_Builder1.expandBegin(899L);
      range_CoordinateSystem1.toString();
      range1.getBegin(range_CoordinateSystem1);
      range_Builder0.shift((-429L));
      Range.CoordinateSystem.values();
      range_Builder2.contractBegin(748L);
      long long1 = range0.getBegin();
      assertEquals(2361L, long1);
      assertFalse(range0.isEmpty());
      assertSame(range0, range2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("t{sOV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse t{sOV into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8782183066708504
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      String string0 = "b&Iz></me9iH^NxO";
      linkedList0.clear();
      linkedList0.offerLast(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("b&Iz></me9iH^NxO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse b&Iz></me9iH^NxO into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6064835324638316
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-947L), 0L);
      String string0 = "E|HF";
      Range.of((-947L));
      Range range1 = Range.of(0L, 0L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("\" rK.ZFAcfpU[V9q&", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \" rK.ZFAcfpU[V9q& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.780466368938681
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      range1.getBegin();
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange("{.9'5d7F@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse {.9'5d7F@ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = (-491L);
      // Undeclared exception!
      try { 
        Range.ofLength((-491L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2489051151076214
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.ofLength(0L);
      Range.of(0L, (-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.818458148228148
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2198L), (-2198L));
      Range range1 = Range.of((-2457L));
      boolean boolean0 = range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1);
      
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ -2457 .. -2456 ]/SB", string0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range2 = Range.of((-2457L), 0L);
      Range range3 = range2.intersection(range0);
      range_Builder0.expandBegin(663L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range1.iterator();
      boolean boolean2 = range0.endsBefore(range3);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.425652914445678
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3648L, 3648L);
      Range range2 = range0.intersection(range1);
      Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.getBegin();
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.894399544430038
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range.Comparators.values();
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3818404649893843
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.expandBegin(0L);
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(1L);
      Range range0 = Range.of(0L);
      List<Range> list0 = range0.split(1L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertEquals(0, list2.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5418167686403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-9223372036854775808L));
      long long0 = 330L;
      Range range1 = Range.ofLength(330L);
      long long1 = 0L;
      Range range2 = Range.ofLength(0L);
      range2.startsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem0);
      range0.startsBefore(range1);
      range2.spliterator();
      range1.toString();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5286920356708102
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3648L, 3648L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.complement(range3);
      assertSame(range3, range2);
      
      Range range4 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range4.getEnd(range_CoordinateSystem1);
      assertEquals(1L, long0);
      
      range1.endsBefore(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.5325246346763284
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin();
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 1 ]/SB", range_CoordinateSystem3);
      Range range2 = range0.intersection(range1);
      range2.complement(range0);
      long long0 = 1390L;
      Range.Builder range_Builder1 = new Range.Builder(709L);
      long long1 = 2891L;
      range_Builder0.shift(2891L);
      range_CoordinateSystem2.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1364528516688597
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483646L, 9223372036854775807L);
      range0.isSubRangeOf(range1);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("b&Iz></me9iH^NxO", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse b&Iz></me9iH^NxO into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.854276192958129
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2192L));
      Range range2 = Range.of((-2457L), 1L);
      range0.intersects(range2);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ -2147483648 .. -2147483649 ]/0B", string0);
      
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range2.complementFrom(list0);
      assertTrue(list1.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.of(327L, 327L);
      Range range3 = range2.intersection(range1);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandBegin(300L);
      long long0 = range3.getLength();
      assertEquals(1L, long0);
      
      range3.iterator();
      Range range4 = Range.of(0L);
      boolean boolean1 = range4.endsBefore(range1);
      assertFalse(range4.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9976527350569144
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 28L, 28L);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(28L);
      Range range1 = Range.ofLength(303L);
      long long0 = range1.getEnd();
      assertEquals(302L, long0);
      
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6671612855617406
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-947L), 0L);
      Range range1 = Range.of((-947L));
      Range range2 = Range.of(0L, 0L);
      range0.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.expandEnd((-1848L));
      Range range3 = Range.of(2177L);
      List<Range> list0 = range2.split(65535L);
      List<Range> list1 = range2.complementFrom(list0);
      range3.complementFrom(list1);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3142957219402285
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-9223372036854775808L));
      Range range1 = Range.of(1383L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 1383, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0407272942644323
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2198L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2198L), (-2198L));
      long long1 = 330L;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3886507826419217
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = 2147483647L;
      Range range1 = Range.of((-1L), 2147483647L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("rx[J+jLpPWg", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse rx[J+jLpPWg into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.067360880632762
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483647L);
      range0.isSubRangeOf(range1);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("b&Iz></me9iH^NxO", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse b&Iz></me9iH^NxO into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 28L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 28L, 28L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1112663269192624
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-1L));
      Range range1 = Range.of(9223372036854772268L);
      // Undeclared exception!
      try { 
        range1.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4738033482643194
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of((-2339L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2339L), (-2339L));
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range_Builder1.expandEnd((-2339L));
      Range.ofLength(32L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0752205480543715
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-9223372036854775808L));
      long long0 = 330L;
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.60951221638988
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(2147483649L);
      Range range1 = Range.of(2147483649L);
      List<Range> list0 = range1.split(9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      assertFalse(range2.isEmpty());
      
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3249833060587983
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = range0.getEnd();
      assertEquals(2147483646L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2147483646L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(308L, 4294967295L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2147483646L, 2147483647L);
      range_Builder0.expandEnd(308L);
      Range range1 = Range.ofLength(1420L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.691428312996626
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of((-2L));
      Range range1 = Range.of((-2L), 3648L);
      range1.endsBefore(range0);
      range0.intersection(range1);
      Range range2 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(0L, 1618L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer1);
      Range.of(313L, 9223372032559808513L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.69115776222383
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-1L));
      range_Builder0.shift((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 327L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder1.expandEnd((-1L));
      Range range2 = Range.of(330L);
      List<Range> list0 = range1.split(330L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      long long0 = range2.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9853090733261873
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(308L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(308L);
      range_Builder0.contractBegin(308L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.8918202981106305
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of((-2339L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483649L, 2147483649L);
      range_Builder0.expandEnd(2453L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range1.split(27L);
      range1.spliterator();
      Range.ofLength(832L);
      range1.complementFrom(list0);
      range0.getLength();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4302878990369603
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of((-2L));
      Range range1 = Range.of((-2L));
      boolean boolean0 = range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2L), 3648L);
      range_Builder0.build();
      boolean boolean1 = range3.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertSame(range1, range2);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3144129199196897
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.of(1L, 2147483647L);
      Range range1 = Range.of(127L, 9223372034707292162L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of((-2339L));
      Range range1 = Range.of((-2339L), (-2339L));
      range0.equals((Object) null);
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2684048940236274
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 334L;
      Range range0 = Range.of(334L);
      Range range1 = Range.of(334L, 2420L);
      range1.spliterator();
      range0.isSubRangeOf(range1);
      long long1 = 0L;
      String string0 = "JrM}QNI>d.3uBNHs";
      Long long2 = new Long(2420L);
      range1.equals(long2);
      // Undeclared exception!
      try { 
        Range.parseRange("JrM}QNI>d.3uBNHs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse JrM}QNI>d.3uBNHs into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.282693997278065
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of((-2339L));
      Range range1 = Range.of((-2339L), (-2339L));
      Long long0 = new Long((-2339L));
      Long.sum((-2339L), (-2339L));
      boolean boolean0 = range0.equals(long0);
      boolean boolean1 = range1.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertSame(range1, range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of((-2L));
      Range range1 = Range.of(654L);
      range0.intersects(range1);
      Range range2 = Range.ofLength(0L);
      Range range3 = Range.of((-2L));
      Object object0 = new Object();
      boolean boolean0 = range3.equals(object0);
      assertFalse(boolean0);
      assertFalse(range3.isEmpty());
      
      long long0 = range2.getEnd();
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.060562356770618
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(9223372034707292036L);
      Range range1 = Range.of(9223372034707292036L, 9223372034707292036L);
      boolean boolean0 = range0.equals((Object) null);
      assertSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9683918915419634
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = 9223372036854775764L;
      Range range0 = Range.of(400L, 400L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0878475864182797
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of((-2L));
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(12L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range1.equals(consumer0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.5237402260342625
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.of(9223372036854775764L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(2147483649L);
      Range range1 = Range.of(2147483649L, 9223372036854775764L);
      List<Range> list0 = range1.split(9223372036854775764L);
      Range.ofLength(9223372036854775764L);
      range1.complementFrom(list0);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.012574206852389
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long long0 = 2258L;
      Range range0 = Range.of(2258L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals((Object) null);
      Range range1 = Range.of(9223372034707292116L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of((-2339L));
      Range range1 = Range.of((-2339L), (-2339L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Z)[", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Z)[ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
