/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:28:01 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2322);
      simpleNode0.jjtClose();
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('\\');
      simpleNode0.dump("", stringWriter2);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]JWXEID.9I%0{");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      stringReader0.mark(0);
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      stringReader0.mark(584);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('P');
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      simpleNode0.dump("]JWXEID.9I%0{", stringWriter2);
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode0.parent = (Node) simpleNode1;
      simpleNode0.jjtClose();
      Node node0 = simpleNode0.jjtGetParent();
      assertNotSame(simpleNode0, node0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 15;
      SimpleNode simpleNode0 = new SimpleNode(15);
      Writer writer0 = null;
      simpleNode0.dump("", (Writer) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      String string0 = "C+H_";
      simpleNode0.jjtSetParent((Node) null);
      arrayList0.removeAll(simpleNode0.identifiers);
      simpleNode0.dump("C+H_", (Writer) null);
      simpleNode0.toString("`;VEvI_i 2~'y");
      simpleNode0.setIdentifier((String) null);
      simpleNode0.jjtGetParent();
      Node[] nodeArray0 = new Node[3];
      simpleNode0.identifiers.add((String) null);
      nodeArray0[0] = null;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = null;
      simpleNode0.identifiers.add("<=");
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 17;
      SimpleNode simpleNode0 = new SimpleNode(17);
      simpleNode0.jjtOpen();
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtOpen();
      simpleNode0.jjtAddChild((Node) null, 17);
      String string0 = null;
      simpleNode0.setIdentifier((String) null);
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtSetParent((Node) null);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(91);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.jjtGetParent();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.jjtAddChild((Node) null, 91);
      StringWriter stringWriter0 = new StringWriter(91);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      simpleNode0.dump("", stringWriter1);
      assertEquals(92, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(10);
      simpleNode0.jjtAddChild(simpleNode1, 2666);
      simpleNode0.toString(" ");
      simpleNode1.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode1.setIdentifier("({&3RaTKU{SGRr8-8=");
      simpleNode1.id = 2666;
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode0.setIdentifier((String) null);
      simpleNode1.jjtGetNumChildren();
      simpleNode1.jjtAddChild(simpleNode0, 1);
      assertEquals(2667, simpleNode0.jjtGetNumChildren());
      assertEquals(2, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(17);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild(simpleNode0, 17);
      simpleNode0.jjtAddChild((Node) null, 17);
      StringWriter stringWriter0 = new StringWriter(17);
      simpleNode0.dump("", stringWriter0);
      simpleNode0.setIdentifier("");
      simpleNode0.jjtAddChild((Node) null, 17);
      simpleNode0.jjtOpen();
      simpleNode0.jjtAddChild((Node) null, 17);
      simpleNode0.dump("", stringWriter0);
      assertEquals("<VariableDeclarator></VariableDeclarator>\n<VariableDeclarator>\n</VariableDeclarator>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("--");
      assertEquals("--VariableDeclarator : ", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3897154547004784
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(17);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild(simpleNode0, 17);
      simpleNode0.jjtAddChild((Node) null, 17);
      StringWriter stringWriter0 = new StringWriter(17);
      simpleNode0.dump("", stringWriter0);
      simpleNode0.setIdentifier("-~=be");
      SimpleNode simpleNode1 = new SimpleNode(17);
      simpleNode1.jjtAddChild((Node) null, 17);
      simpleNode0.jjtOpen();
      simpleNode1.jjtAddChild((Node) null, 17);
      simpleNode0.dump("", stringWriter0);
      simpleNode1.toString("slt&g/Pz9B");
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("<HEX_LITERAL>", stringWriter0);
      assertEquals("<VariableDeclarator></VariableDeclarator>\n<VariableDeclarator>\n  <identifier>-~=be</identifier>\n</VariableDeclarator>\n<VariableDeclarator>\n  <identifier>-~=be</identifier>\n</VariableDeclarator>\n<VariableDeclarator>\n  <identifier>-~=be</identifier>\n</VariableDeclarator>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(17);
      simpleNode0.jjtAddChild(simpleNode0, 17);
      simpleNode0.jjtAddChild(simpleNode0, 17);
      int int0 = 82;
      StringWriter stringWriter0 = new StringWriter(82);
      // Undeclared exception!
      try { 
        simpleNode0.dump("", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7999587982097305
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(17);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild(simpleNode0, 17);
      simpleNode0.jjtAddChild((Node) null, 17);
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(82);
      simpleNode0.dump("", stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = ']';
      simpleNode0.dump("}", stringWriter0);
      simpleNode0.setIdentifier("}");
      simpleNode0.jjtAddChild((Node) null, 18);
      simpleNode0.jjtOpen();
      simpleNode0.jjtAddChild((Node) null, 82);
      simpleNode0.dump(".{I6pQal.*_T", stringWriter0);
      simpleNode0.toString("");
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        simpleNode0.dump("+'tKp", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.611157817343917
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(17);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild(simpleNode0, 17);
      simpleNode0.jjtAddChild((Node) null, 17);
      StringWriter stringWriter0 = new StringWriter(17);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.dump("}", stringWriter0);
      JavaParser javaParser0 = new JavaParser("CCDG(5~0-g-1_9");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 18);
      simpleNode1.setIdentifier("CCDG(5~0-g-1_9");
      simpleNode0.jjtAddChild((Node) null, 17);
      simpleNode1.jjtOpen();
      simpleNode0.jjtAddChild((Node) null, 17);
      simpleNode1.id = 18;
      simpleNode1.dump("&", stringWriter0);
      simpleNode0.toString("CCDG(5~0-g-1_9");
      simpleNode1.dump("tf&R$2LW/5u?}4[B'q", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode1.dump("+'tKp", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.777661295762166
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 17;
      StringWriter stringWriter0 = new StringWriter(17);
      SimpleNode simpleNode0 = new SimpleNode(17);
      simpleNode0.dump(")", stringWriter0);
      String string0 = "-~=be";
      simpleNode0.setIdentifier("-~=be");
      SimpleNode simpleNode1 = new SimpleNode(1772);
      String string1 = "<=";
      simpleNode0.setIdentifier("<=");
      int int1 = 0;
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.jjtOpen();
      simpleNode1.jjtAddChild(simpleNode0, 139);
      // Undeclared exception!
      try { 
        simpleNode0.dump("Lexical error at line ", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1772
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8717814824679821
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(17);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild(simpleNode0, 17);
      simpleNode0.jjtAddChild((Node) null, 17);
      StringWriter stringWriter0 = new StringWriter(17);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.dump("}", stringWriter0);
      JavaParser javaParser0 = new JavaParser("CCDG(5~0-g-1_9");
      simpleNode0.setIdentifier(">>");
      simpleNode0.dump("CCDG(5~0-g-1_9", stringWriter0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1240357221909014
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(17);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild(simpleNode0, 17);
      simpleNode0.jjtAddChild((Node) null, 17);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<STRING_LITERAL>");
      StringWriter stringWriter0 = new StringWriter(17);
      simpleNode0.dump("Vp(KR$]o6LYgF", stringWriter0);
      simpleNode0.setIdentifier("<");
      SimpleNode simpleNode1 = new SimpleNode(17);
      simpleNode1.jjtAddChild((Node) null, 2014);
      simpleNode1.dump("-~=be", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode(44);
      simpleNode2.toString();
      JavaParser javaParser0 = new JavaParser("*le");
      SimpleNode simpleNode3 = new SimpleNode(javaParser0, 44);
      simpleNode3.dump("GES,d", stringWriter0);
      simpleNode2.dump("<", stringWriter0);
      simpleNode0.dump("*le", stringWriter0);
      String string0 = "bO{PMADz)yEW<jX";
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-1082438159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4258484492385814
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(17);
      SimpleNode simpleNode0 = new SimpleNode(17);
      StringReader stringReader0 = new StringReader(">=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Node node0 = javaParser0.currNode;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode1 = new SimpleNode(17);
      simpleNode1.setIdentifier(">=");
      simpleNode1.dump("\"volatile\"", stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2701);
      simpleNode0.dump(">=", stringWriter0);
      assertEquals("<VariableDeclarator>\n  <identifier>*ge</identifier>\n</VariableDeclarator>\n", stringWriter0.toString());
  }
}
