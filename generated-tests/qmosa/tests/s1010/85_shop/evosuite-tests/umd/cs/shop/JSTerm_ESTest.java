/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:18:02 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.equalT = 41;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      predicate2.test(jSSubstitution0);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate0.or(predicate2);
      Predicate<JSSubstitution> predicate3 = predicate0.negate();
      predicate3.or(predicate0);
      JSJshopVars.flagLevel = 0;
      jSTerm0.removeIf(predicate3);
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VE#,Yl3}~`y`gth");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 0;
      streamTokenizer0.ttype = 0;
      streamTokenizer0.wordChars(0, 0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar(1601);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RQ:9T]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) "RQ:9T]";
      objectArray0[5] = (Object) "RQ:9T]";
      jSTerm0.toArray(objectArray0);
      jSTerm0.makeEval(false);
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.equalT = 41;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1286207461851414
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      stringReader0.close();
      streamTokenizer0.parseNumbers();
      jSTerm1.isGround();
      jSTerm0.makeVariable();
      jSTerm1.makeConstant();
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.call();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2451588719874644
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      stringReader0.close();
      streamTokenizer0.parseNumbers();
      jSTerm1.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm1.isEval();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm1.isConstant();
      jSTerm1.makeEval(false);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wSubP;*|P)|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm0.toStr();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@eJl+f#s[0D");
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'V';
      charArray0[2] = '*';
      charArray0[3] = '|';
      charArray0[4] = 'p';
      charArray0[5] = '6';
      charArray0[6] = '&';
      charArray0[7] = 'd';
      charArray0[8] = 'a';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.245349003328637
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-2750L));
      System.setCurrentTimeMillis((-2750L));
      System.setCurrentTimeMillis(624L);
      System.setCurrentTimeMillis(624L);
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.VarCounter = 44;
      jSTerm1.makeEval(true);
      jSTerm1.isGround();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.equals(jSTerm0);
      stringReader0.close();
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(2603L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1843588422233213
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-2750L));
      System.setCurrentTimeMillis((-2750L));
      System.setCurrentTimeMillis(624L);
      System.setCurrentTimeMillis(624L);
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.VarCounter = 44;
      jSTerm1.isGround();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super JSSubstitution, ? extends Integer>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.675181144602198
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.equals(jSTerm0);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.matches(jSTerm4, jSSubstitution0);
      jSTerm1.toStr();
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm1.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4822127410294628
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wS&ubP;*|P)|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm2.makeVariable();
      jSTerm1.makeFunction();
      jSTerm2.isEmpty();
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm1.isGround();
      jSTerm4.matches(jSTerm3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm2);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm3.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.464263422407009
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.equals(jSTerm0);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.listIterator(41);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5445217373791467
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.equals(jSTerm0);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.print();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.95052687404108
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wS&ubP;*|P)|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm2.makeVariable();
      jSTerm1.makeFunction();
      jSTerm0.isEmpty();
      jSTerm1.isConstant();
      streamTokenizer0.slashSlashComments(false);
      jSTerm2.parseList(streamTokenizer0);
      jSTerm0.cloneT();
      jSTerm2.isGround();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.496563110085501
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wS&ubP;*|P)|");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      stringReader0.skip((-1635L));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      jSTerm1.isConstant();
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.stream();
      jSSubstitution0.add((Object) streamTokenizer0);
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm3.isGround();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.equals(jSTerm3);
      int int0 = (-2906);
      // Undeclared exception!
      try { 
        jSTerm4.listIterator((-2906));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2906
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4393565259587424
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.equals(jSTerm0);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isGround();
      jSTerm1.matches(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSTerm3);
      jSTerm1.call();
      assertTrue(jSTerm0.isFunction());
      
      JSTerm jSTerm4 = jSTerm3.call();
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.488327743368588
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wS&ubP;*|P)|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip(41);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      jSTerm2.makeVariable();
      jSTerm0.makeFunction();
      jSTerm1.isEmpty();
      jSTerm1.isConstant();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm0.print();
      jSTerm4.call();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0951288133774395
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.equals(jSTerm0);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.isConstant();
      jSTerm2.equals(jSTerm0);
      jSTerm1.equals(jSTerm2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2685350920163803
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm1.makeVariable();
      jSTerm1.isEmpty();
      jSTerm1.isConstant();
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      jSTerm1.equals(jSTerm2);
      jSTerm1.call();
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?8<Or+|Zw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.equals(jSTerm0);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wSuP;*|P)|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.cloneT();
      jSTerm0.print();
      jSTerm0.call();
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lfj?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(62, (-2599));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("((XI4/LF'{#W+`h*5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.073542846408523
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%jU6<Qko4rN7^9xJ:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2174.745218823;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8143075196071254
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
