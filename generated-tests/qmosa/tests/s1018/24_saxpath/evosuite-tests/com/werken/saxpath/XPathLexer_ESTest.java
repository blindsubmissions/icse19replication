/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:45:13 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.not();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token4);
      
      xPathLexer0.getXPath();
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.consume(2149);
      xPathLexer0.getPreviousToken();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.colon();
      int int0 = xPathLexer0.endPosition();
      xPathLexer0.setXPath("KILY6[i9C'K.");
      xPathLexer0.star();
      xPathLexer0.endPosition();
      xPathLexer0.rightParen();
      int int1 = xPathLexer0.currentPosition();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.comma();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("3", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("oL", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals("9", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.isIdentifierChar('\uFFFF');
      xPathLexer0.or();
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.consume(13);
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.and();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer0.isIdentifierStartChar(':');
      xPathLexer0.rightBracket();
      char char0 = xPathLexer0.LA(1028);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3108817628549732
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":jy(5P)}z9s6");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.identifier();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.consume(504);
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.LA(0);
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.consume(1);
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.consume();
      assertEquals(":jy(5P)}z9s6", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0280290733074104
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.currentPosition();
      xPathLexer0.literal();
      xPathLexer0.getXPath();
      xPathLexer0.hasMoreChars();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.comma();
      xPathLexer0.consume(402);
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.isIdentifierStartChar('Z');
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      assertNull(xPathLexer0.getXPath());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0381291864107818
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.and();
      char char0 = xPathLexer0.LA(32);
      assertEquals('\uFFFF', char0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("O1A", token2.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("$", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.LA(0);
      xPathLexer0.setXPath("u?jO1A{$>nW");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('$');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6016223038259187
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("{G2n<", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals("G2n", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.endPosition();
      xPathLexer0.number();
      xPathLexer0.consume((-1));
      xPathLexer0.or();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.nextToken();
      char char0 = xPathLexer0.LA((-1));
      assertEquals('<', char0);
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.isIdentifierChar('X');
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('X');
      assertTrue(boolean0);
      
      xPathLexer0.isIdentifierChar('X');
      xPathLexer0.endPosition();
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7928822602693724
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.endPosition();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.LA(7);
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume(11);
      xPathLexer0.LA(0);
      xPathLexer0.or();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6312235165535405
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("#", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("q", token5.getTokenText());
      
      xPathLexer0.isIdentifierChar('a');
      xPathLexer0.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("Nr8j9-cE", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.setXPath("[ (");
      xPathLexer0.consume(111);
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('o');
      xPathLexer1.rightBracket();
      xPathLexer0.LA(111);
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2072130095956681
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("C", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.minus();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("Y", token2.getTokenText());
      
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("X", token4.getTokenText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.657698580420737
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.LA(19);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('/');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer1.setXPath("&I;}E@rR969");
      xPathLexer0.consume((-1533));
      xPathLexer1.dollar();
      xPathLexer1.and();
      xPathLexer1.slashes();
      xPathLexer0.star();
      xPathLexer1.isIdentifierStartChar('\uFFFF');
      xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.LA(19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2601270251697878
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      xPathLexer0.setXPath("8,:y/k[HfJ");
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("8", token2.getTokenText());
      
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(":", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer1.isIdentifierChar('}');
      xPathLexer1.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("y", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      String string0 = "^uJZ)?\\udCh#H_b";
      xPathLexer1.setXPath(string0);
      xPathLexer0.consume(2);
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("^", token7.getTokenText());
      
      xPathLexer1.and();
      Token token8 = xPathLexer0.slashes();
      assertEquals("[", token8.getTokenText());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("u", token9.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('*');
      assertFalse(boolean0);
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      char char0 = xPathLexer0.LA(45);
      assertEquals('\uFFFF', char0);
      
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      assertEquals("J", token11.getTokenText());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("Z", token12.getTokenText());
      
      Token token13 = xPathLexer1.whitespace();
      assertEquals("", token13.getTokenText());
      assertEquals((-2), token13.getTokenType());
      
      Token token14 = xPathLexer0.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.7682491671090934
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d_CYts5N;K");
      XPathLexer xPathLexer1 = new XPathLexer("#mA]'VAD,");
      Token token0 = xPathLexer1.number();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("_CYts5N;K", token2.getTokenText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8716496251359276
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]$mEGF");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.star();
      assertEquals("$", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("E", token2.getTokenText());
      
      xPathLexer0.setXPath(") (");
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals(")", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(" (", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.getPreviousToken();
      xPathLexer0.consume(2958);
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3921348111519665
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.consume(1334);
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }
}
