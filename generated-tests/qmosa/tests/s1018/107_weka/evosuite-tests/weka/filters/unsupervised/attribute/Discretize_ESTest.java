/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:16:31 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopy(discretize0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      try { 
        Filter.makeCopies(discretize0, (-2048));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DP74/aP1}o7<D";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "Number of folds must be greater than 1";
      Discretize.main(stringArray0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      discretize0.m_ClassIndex = 10;
      discretize0.setUseBinNumbers(true);
      discretize0.setBins(304);
      discretize0.getOptions();
      discretize0.m_FindNumBins = true;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(304);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("!kW]~=R6g |");
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1121));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("   * @return a short description\n");
      discretize0.useEqualFrequencyTipText();
      discretize0.getFindNumBins();
      discretize0.setInvertSelection(false);
      discretize0.m_NumBins = (-56);
      discretize0.setInvertSelection(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "   * @return a short description\n";
      Discretize.main(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.attributeIndicesTipText();
      String string0 = "\tA filter to apply (can be specified multiple times).";
      Discretize discretize1 = new Discretize("\tA filter to apply (can be specified multiple times).");
      // Undeclared exception!
      try { 
        discretize1.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(false);
      discretize0.setIgnoreClass(true);
      int int0 = (-212);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-212));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("SlAt%D8O5;ngl");
      String string0 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setOutputFormat();
      Instances instances0 = new Instances("v; g", arrayList0, 104);
      int int0 = 0;
      Instances instances1 = null;
      try {
        instances1 = new Instances(instances0, (-2680), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.getRevision();
      int int0 = 41;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8964";
      stringArray0[1] = "8964";
      stringArray0[2] = "8964";
      stringArray0[3] = "    values = new double[obj.length];\n";
      stringArray0[4] = "8964";
      stringArray0[5] = "8964";
      stringArray0[6] = "8964";
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 0;
      discretize0.getBinRangesString(0);
      discretize0.getBins();
      discretize0.setInvertSelection(true);
      discretize0.findNumBinsTipText();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setInvertSelection(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[2] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[3] = null;
      Discretize.main(stringArray0);
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")";
      discretize0.getOptions();
      stringArray0[1] = "Ah$#x2dXeHp<\"H794D";
      discretize0.setIgnoreClass(true);
      stringArray0[2] = "^:}w't1kGh6kMytz";
      stringArray0[3] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[4] = "";
      int int0 = (-352);
      discretize0.m_NumBins = (-352);
      discretize0.listOptions();
      discretize0.setOptions(stringArray0);
      discretize0.makeBinaryTipText();
      StringReader stringReader0 = new StringReader("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Use], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("inf");
      discretize0.setMakeBinary(false);
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2343.6511197485;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 315.886;
      doubleArray1[5] = 364.899535;
      doubleArray1[6] = (-704.6901131857);
      doubleArray1[7] = 2.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 315.886;
      doubleArray2[1] = 2343.6511197485;
      doubleArray2[2] = 364.899535;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1153.9276;
      doubleArray2[6] = 2.0;
      doubleArray2[7] = 2343.6511197485;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = Double.NaN;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 2343.6511197485;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 364.899535;
      doubleArray4[4] = 1.7976931348623157E308;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = Double.NaN;
      doubleArray4[7] = Double.NaN;
      doubleArray4[8] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1.7976931348623157E308;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = 2343.6511197485;
      doubleArray5[4] = 1476.66842391;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1153.9276;
      doubleArray6[1] = (-704.6901131857);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = Double.NaN;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1476.66842391;
      doubleArray7[4] = 1.7976931348623157E308;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 1476.66842391;
      doubleArray8[4] = Double.NaN;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = 1.7976931348623157E308;
      doubleArray9[1] = 2.0;
      doubleArray9[2] = 2343.6511197485;
      doubleArray9[3] = 315.886;
      doubleArray9[4] = 1.7976931348623157E308;
      doubleArray9[5] = 0.0;
      doubleArray9[6] = 1.7976931348623157E308;
      doubleArray9[7] = 1153.9276;
      doubleArray9[8] = (-704.6901131857);
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(3783);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3783
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(false);
      int int0 = 3783;
      discretize0.m_IgnoreClass = false;
      discretize0.getBinRangesString(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4.57826535);
      doubleArray0[1] = (double) 3783;
      DenseInstance denseInstance0 = new DenseInstance(3783, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("g\"sb5");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g\"sb5";
      stringArray0[1] = "g\"sb5";
      String[] stringArray1 = discretize0.getOptions();
      stringArray0[2] = "g\"sb5";
      stringArray0[3] = "g\"sb5";
      stringArray0[4] = "g\"sb5";
      stringArray0[5] = "g\"sb5";
      stringArray0[6] = "g\"sb5";
      stringArray0[7] = "g\"sb5";
      discretize0.setOptions(stringArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2298.706635168056;
      discretize0.binsTipText();
      int[] intArray0 = new int[1];
      intArray0[0] = 1569;
      discretize0.setAttributeIndicesArray(intArray0);
      Discretize.main(stringArray1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(6, stringArray1.length);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("hQw");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "hQw";
      stringArray0[1] = "";
      stringArray0[2] = "hQw";
      stringArray0[3] = "";
      stringArray0[4] = "hQw";
      stringArray0[5] = "";
      stringArray0[6] = "hQw";
      stringArray0[7] = "hQw";
      stringArray0[8] = "hQw";
      discretize0.getCutPoints(4);
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize1.setOutputFormat();
      discretize0.useEqualFrequencyTipText();
      discretize1.getAttributeIndices();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 10.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 1959;
      intArray0[1] = (-1952257859);
      intArray0[2] = 13;
      intArray0[3] = (-1077);
      intArray0[4] = (-1952257859);
      intArray0[5] = 1;
      intArray0[6] = 741;
      SparseInstance sparseInstance0 = new SparseInstance(10.0, doubleArray0, intArray0, 741);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      sparseInstance1.dataset();
      try { 
        discretize1.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.378620199410213
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.getInvertSelection();
      discretize0.setOutputFormat();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray0.length);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-3156));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "inf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Can't ignore class when changing the number of attributes!");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-846.26);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-2166.5617013);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-846.26);
      doubleArray2[4] = (-846.26);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-2166.5617013);
      doubleArray3[4] = 132.481768;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-2166.5617013);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-846.26);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 132.481768;
      doubleArray5[3] = (-2166.5617013);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-2166.5617013);
      doubleArray5[6] = 132.481768;
      doubleArray5[7] = 132.481768;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4260151319598084
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("z$2s]\"]x9aRNVK");
      discretize0.setUseEqualFrequency(true);
      discretize0.getCapabilities();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("inf");
      discretize0.setMakeBinary(true);
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[11];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2343.6511197485;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 315.886;
      doubleArray1[5] = 364.899535;
      doubleArray1[6] = (-704.6901131857);
      doubleArray1[7] = 2.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize1 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9661755171495705
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("    Object[][]\tresult;\n");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.615630577027551
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("inf");
      discretize0.setMakeBinary(true);
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2343.6511197485;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      Discretize discretize1 = new Discretize();
      discretize1.getBinRangesString(2002);
      discretize0.getOptions();
      double[][] doubleArray1 = new double[6][4];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-2746);
      doubleArray2[1] = (double) (-2746);
      doubleArray2[2] = (double) (-2746);
      doubleArray2[3] = 2343.6511197485;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2343.6511197485;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      discretize1.m_CutPoints = doubleArray1;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2746));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[0][5];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[19][5];
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(5);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertNotNull(string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }
}
