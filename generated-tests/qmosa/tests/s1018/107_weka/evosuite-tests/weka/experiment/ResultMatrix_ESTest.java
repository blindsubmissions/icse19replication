/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:17:22 GMT 2018
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.setStdDevPrec(26);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 175;
      intArray0[4] = 26;
      intArray0[5] = 26;
      intArray0[6] = 0;
      resultMatrixGnuPlot0.m_PrintRowNames = false;
      intArray0[7] = 26;
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.setMeanWidth(26);
      resultMatrixGnuPlot0.setShowAverage(false);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.meanWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-2631), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.m_HeaderKeys = vector0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixPlainText0);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      
      resultMatrixSignificance0.m_StdDevWidth = 2;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex1);
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      resultMatrixGnuPlot0.m_NonSigWins = intArray0;
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixLatex1.getDefaultSignificanceWidth();
      resultMatrixLatex0.getSignificanceWidth();
      resultMatrixPlainText0.toStringRanking();
      assertEquals(1, resultMatrixLatex0.getColCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      String string0 = resultMatrixCSV0.toStringKey();
      assertEquals("Key,\n[1],col0\n", string0);
      
      resultMatrixCSV0.getRowHidden(3263);
      String string1 = resultMatrixCSV0.meanWidthTipText();
      assertEquals("The width of the mean (0 = optimal).", string1);
      
      resultMatrixCSV0.clearHeader();
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.m_RankingLosses = intArray0;
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.removeFilterNameTipText();
      int[][] intArray1 = new int[2][2];
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName((-1));
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.removeFilterName("col");
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixGnuPlot0.clearRanking();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.TIE_STRING = " ";
      resultMatrixSignificance0.setRemoveFilterName(false);
      resultMatrixSignificance0.getDefaultMeanWidth();
      resultMatrixCSV0.clear();
      resultMatrixSignificance0.getDefaultPrintColNames();
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintColNames();
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.631612186595399
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[0];
      resultMatrixLatex0.m_EnumerateColNames = false;
      intArray0[0] = intArray1;
      resultMatrixLatex0.setRanking(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      
      resultMatrixLatex0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.9512437185814298
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[9][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 1;
      intArray1[2] = (-165);
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 276;
      intArray1[6] = 0;
      intArray1[7] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 276;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = (-165);
      intArray2[6] = 0;
      intArray2[7] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = (-165);
      intArray3[3] = (-165);
      intArray3[4] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 2;
      intArray4[1] = 276;
      intArray4[2] = 1;
      intArray4[3] = 1;
      intArray4[4] = 0;
      intArray4[5] = 26;
      intArray4[6] = 276;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = 1;
      intArray5[1] = 1;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      intArray6[0] = 0;
      intArray6[1] = (-165);
      intArray6[2] = (-165);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      intArray7[0] = (-165);
      intArray7[1] = (-165);
      intArray7[2] = 0;
      intArray7[3] = 2;
      intArray7[4] = 1;
      intArray7[5] = 276;
      intArray7[6] = (-165);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      intArray8[0] = 276;
      intArray8[1] = 2;
      intArray8[2] = 26;
      intArray8[3] = 1596;
      intArray8[4] = 0;
      intArray8[5] = (-165);
      intArray8[6] = 2;
      intArray8[7] = 26;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[8];
      intArray9[0] = 2757;
      intArray9[1] = 1;
      intArray9[2] = (-165);
      intArray9[3] = (-165);
      intArray9[4] = 0;
      intArray9[5] = 0;
      intArray9[6] = 276;
      intArray9[7] = 2;
      intArray0[8] = intArray9;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixLatex0.toStringMatrix();
      assertTrue(resultMatrixLatex0.getEnumerateRowNames());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2536462828828747
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.m_EnumerateColNames = true;
      resultMatrixPlainText0.setSize(0, 1);
      resultMatrixCSV0.assign(resultMatrixPlainText0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.padString("*", 1);
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 453;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray2[4] = 2;
      intArray2[5] = 1551;
      intArray2[6] = 0;
      intArray2[7] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 1;
      intArray3[1] = 2;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 97;
      intArray5[1] = 2;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 2;
      intArray7[1] = (-795);
      intArray7[2] = 433;
      intArray7[3] = 97;
      intArray7[4] = 1;
      intArray7[5] = 453;
      intArray7[6] = 2;
      intArray7[7] = 0;
      intArray7[8] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 97;
      intArray8[1] = 0;
      intArray8[2] = 433;
      intArray8[3] = 453;
      intArray8[4] = 453;
      intArray8[5] = 97;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[5];
      intArray9[0] = 0;
      intArray9[1] = 1;
      intArray9[2] = 2;
      intArray9[3] = 1;
      intArray9[4] = (-795);
      intArray0[8] = intArray9;
      resultMatrixGnuPlot0.m_Wins = intArray0;
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.isStdDev(1);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.enumerateColNamesTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      Vector<Vector<String>> vector0 = new Vector<Vector<String>>();
      resultMatrixHTML0.m_HeaderValues = vector0;
      resultMatrixHTML0.getDefaultEnumerateColNames();
      Vector<String> vector1 = new Vector<String>();
      vector0.add(vector1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.LEFT_PARENTHESES = "*";
      String string0 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n*1) col0\n", string0);
      
      resultMatrixSignificance0.getDefaultRowNameWidth();
      boolean boolean0 = resultMatrixCSV1.getEnumerateColNames();
      assertTrue(boolean0);
      
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV1.getRowOrder();
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      
      resultMatrixCSV0.toStringKey();
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9702919135521193
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertNotNull(resultMatrixHTML0);
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertNotNull(string0);
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.m_CountWidth = 1037;
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      String string1 = resultMatrixHTML0.getDisplayName();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertNotNull(string1);
      assertEquals("HTML", string1);
      
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 1037;
      intArray1[3] = 1;
      intArray1[4] = 1037;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1037;
      intArray2[1] = 1037;
      intArray2[2] = 1;
      intArray2[3] = (-1510);
      intArray2[4] = 0;
      intArray2[5] = 2;
      intArray0[1] = intArray2;
      resultMatrixHTML0.m_Wins = intArray0;
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      resultMatrixHTML0.clearSummary();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      int[] intArray3 = resultMatrixHTML0.getColOrder();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertNull(intArray3);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(1037, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.clear();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      
      resultMatrixGnuPlot0.clear();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      
      boolean boolean0 = resultMatrixGnuPlot0.isAverage(1037);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(boolean0);
      
      resultMatrixHTML0.setShowAverage(false);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      String string2 = resultMatrixHTML0.countWidthTipText();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1037, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertNotNull(string2);
      assertEquals("The width of the counts (0 = optimal).", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertNotNull(resultMatrixSignificance0);
      
      String string0 = resultMatrixSignificance0.padString("  ", 0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertNotNull(string0);
      assertEquals("  ", string0);
      
      int int0 = resultMatrixSignificance0.getStdDevWidth();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7841896339182655
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(97, 0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertNotNull(resultMatrixPlainText0);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 97;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray0[2] = doubleArray3;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      
      resultMatrixPlainText0.RIGHT_PARENTHESES = "MZxpBkOSp~";
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      
      resultMatrixPlainText0.m_ColNameWidth = 0;
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      
      String[] stringArray0 = resultMatrixPlainText0.getOptions();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(19, stringArray0.length);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertNotNull(stringArray0);
      
      resultMatrixPlainText0.setPrintColNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      
      boolean boolean0 = resultMatrixPlainText0.getDefaultRemoveFilterName();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(boolean0);
      
      String string0 = resultMatrixPlainText0.getDisplayName();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertNotNull(string0);
      assertEquals("Plain Text", string0);
      
      int int0 = resultMatrixPlainText0.getDefaultStdDevWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, int0);
      
      String string1 = resultMatrixPlainText0.showStdDevTipText();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertNotNull(string1);
      assertEquals("Whether to display the standard deviation column.", string1);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(97, resultMatrixSignificance0.getColCount());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(97, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertNotNull(resultMatrixSignificance0);
      
      String string2 = resultMatrixSignificance0.toStringKey();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(97, resultMatrixSignificance0.getColCount());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(97, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertNotNull(string2);
      
      String string3 = resultMatrixSignificance0.enumerateRowNamesTipText();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(97, resultMatrixPlainText0.getColCount());
      assertEquals(97, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(97, resultMatrixSignificance0.getColCount());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(97, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertNotNull(string3);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", string3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertNotNull(resultMatrixLatex0);
      
      resultMatrixLatex0.LEFT_PARENTHESES = "kk}qr}#";
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      resultMatrixLatex0.m_CountWidth = 1;
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      resultMatrixLatex0.m_PrintColNames = false;
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      int int0 = resultMatrixLatex0.getDefaultMeanWidth();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, int0);
      
      String string0 = resultMatrixLatex0.printColNamesTipText();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertNotNull(string0);
      assertEquals("Whether to output column names or just numbers representing them.", string0);
      
      boolean boolean0 = resultMatrixLatex0.getDefaultPrintRowNames();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(boolean0);
      
      int int1 = resultMatrixLatex0.getDefaultSignificanceWidth();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(int1 == int0);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, int1);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertNotNull(resultMatrixHTML0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixHTML0.m_CountWidth = (-659);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals((-659), resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      
      resultMatrixHTML0.m_RankingDiff = intArray0;
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals((-659), resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      
      String string1 = resultMatrixHTML0.toStringKey();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals((-659), resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertNotNull(string1);
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n   <tr><td><b>(1)</b></td><td>col0</td></tr>\n</table>\n", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertNotNull(resultMatrixLatex0);
      
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 1;
      intArray6[3] = 0;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.007333185232473
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertNotNull(resultMatrixLatex0);
      
      int int0 = resultMatrixLatex0.getDefaultRowNameWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, int0);
      
      resultMatrixLatex0.clearRanking();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      assertArrayEquals(new int[] {1, 1, 2}, intArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(3, intArray0.length);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      
      resultMatrixLatex0.setRemoveFilterName(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      
      String string0 = resultMatrixLatex0.getDisplayName();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertNotNull(string0);
      assertEquals("LaTeX", string0);
      
      resultMatrixLatex0.setPrintRowNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertNotNull(resultMatrixHTML0);
      
      String string1 = resultMatrixHTML0.toString();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertNotNull(string1);
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td><td align=\"center\" colspan=\"2\"><b>(2)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td><td align=\"right\">&nbsp;</td><td align=\"center\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td><td align=\"right\">&nbsp;</td><td align=\"center\">(0/0/0)</td></tr>\n</table>\n", string1);
      
      Enumeration enumeration0 = resultMatrixHTML0.listOptions();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertNotNull(enumeration0);
      
      boolean boolean0 = resultMatrixHTML0.getDefaultPrintColNames();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(boolean0);
      
      String string2 = resultMatrixLatex0.meanWidthTipText();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertNotNull(string2);
      assertEquals("The width of the mean (0 = optimal).", string2);
      
      int int1 = resultMatrixHTML0.getColCount();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(int1 == int0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, int1);
      
      String string3 = resultMatrixLatex0.toStringSummary();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertNotNull(string3);
      assertEquals("-summary data not set-", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.219507705176104
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertNotNull(resultMatrixHTML0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertNotNull(resultMatrixLatex0);
      
      String string0 = resultMatrixLatex0.doubleToString(2, 0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertNotNull(string0);
      assertEquals("2.", string0);
      
      String string1 = resultMatrixLatex0.countWidthTipText();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertNotNull(string1);
      assertEquals("The width of the counts (0 = optimal).", string1);
      
      String string2 = resultMatrixLatex0.toStringKey();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertNotNull(string2);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "(";
      ResultMatrixCSV.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertNotNull(resultMatrixGnuPlot0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-109);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = (-2550);
      intArray0[5] = 0;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      
      int int0 = resultMatrixGnuPlot0.getDefaultMeanWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, int0);
      
      String string0 = resultMatrixGnuPlot0.meanPrecTipText();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertNotNull(string0);
      assertEquals("The number of decimals after the decimal point for the mean.", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.9238894176953725
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertNotNull(resultMatrixPlainText0);
      
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertNotNull(string0);
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      String string1 = resultMatrixPlainText0.globalInfo();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertNotNull(string1);
      assertEquals("Generates the output as plain text (for fixed width fonts).", string1);
      
      int int0 = resultMatrixPlainText0.getDefaultColNameWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, int0);
      
      String[][] stringArray0 = new String[9][8];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray1[1] = "(";
      stringArray1[2] = "(";
      stringArray1[3] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "*";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray3[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray3[4] = "v";
      stringArray3[5] = "*";
      stringArray3[6] = "v";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray4[0] = " ";
      stringArray4[1] = "*";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[3];
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      
      stringArray5[0] = "(";
      stringArray5[1] = "v";
      stringArray5[2] = "(";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[9];
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray1));
      
      stringArray6[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray6[1] = ")";
      stringArray6[2] = ")";
      stringArray6[3] = "*";
      stringArray6[4] = "v";
      stringArray6[5] = "(";
      stringArray6[6] = "v";
      stringArray6[7] = "Generates the output as plain text (for fixed width fonts).";
      stringArray6[8] = "*";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[8];
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray1));
      
      stringArray7[0] = "v";
      stringArray7[1] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray7[2] = "Generates the output as plain text (for fixed width fonts).";
      stringArray7[3] = " ";
      stringArray7[4] = "(";
      stringArray7[5] = "Generates the matrix output as HTML.";
      stringArray7[6] = " ";
      stringArray7[7] = "*";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertFalse(stringArray8.equals((Object)stringArray6));
      
      stringArray8[0] = "(";
      stringArray8[1] = ")";
      stringArray8[2] = "v";
      stringArray8[3] = ")";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[1];
      assertFalse(stringArray9.equals((Object)stringArray7));
      assertFalse(stringArray9.equals((Object)stringArray3));
      assertFalse(stringArray9.equals((Object)stringArray6));
      assertFalse(stringArray9.equals((Object)stringArray2));
      assertFalse(stringArray9.equals((Object)stringArray5));
      assertFalse(stringArray9.equals((Object)stringArray8));
      assertFalse(stringArray9.equals((Object)stringArray1));
      assertFalse(stringArray9.equals((Object)stringArray4));
      
      stringArray9[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray0[8] = stringArray9;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2047775241322567
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertNotNull(resultMatrixLatex0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertNotNull(resultMatrixPlainText0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertNotNull(resultMatrixHTML0);
      
      resultMatrixHTML0.LEFT_PARENTHESES = null;
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      resultMatrixHTML0.setMeanPrec(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      resultMatrixPlainText0.setMeanPrec(5);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(5, resultMatrixPlainText0.getMeanPrec());
      
      resultMatrixHTML0.setMean(1, 23, (-1564.0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(5, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(1, (-163));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertNotNull(resultMatrixLatex0);
      
      String string0 = "mjXtLzw";
      resultMatrixLatex0.clear();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      
      resultMatrixLatex0.setMeanWidth(25);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(25, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      
      String string1 = resultMatrixLatex0.trimString("mjXtLzw", (-1));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(string1.equals((Object)string0));
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(25, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertNotNull(string1);
      assertEquals("mjXtLzw", string1);
      
      resultMatrixLatex0.setMeanPrec((-1));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(25, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      
      int[] intArray0 = resultMatrixLatex0.getColOrder();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(25, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertNull(intArray0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.110873864173309
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertNotNull(resultMatrixCSV0);
      
      resultMatrixCSV0.clear();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(18, stringArray0.length);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertNotNull(stringArray0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      
      String string0 = resultMatrixGnuPlot0.getRowName((-3735));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertNull(string0);
      
      resultMatrixGnuPlot0.assign(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      
      String string1 = resultMatrixGnuPlot0.padString(" ", (-3735));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertNotNull(string2);
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"[1]\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string2);
      
      resultMatrixCSV0.setCount((-5088), (-3735));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      
      boolean boolean0 = resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(boolean0);
      
      resultMatrixCSV0.setRowName((-5088), "*");
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      
      String string3 = resultMatrixGnuPlot0.rowNameWidthTipText();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertNotNull(string3);
      assertEquals("The maximum width for the row names (0 = optimal).", string3);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertNotNull(resultMatrixPlainText0);
      
      int int0 = resultMatrixPlainText0.getDefaultCountWidth();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(5, int0);
      
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertNotNull(resultMatrixLatex0);
      
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 1;
      intArray6[3] = 0;
      intArray0[5] = intArray6;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertNotNull(resultMatrixHTML0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertNotNull(resultMatrixGnuPlot0);
      
      boolean boolean0 = resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(boolean0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertNotNull(resultMatrixCSV0);
      
      resultMatrixCSV0.setRowName(1596, "*");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2047775241322567
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertNotNull(resultMatrixHTML0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertNotNull(resultMatrixSignificance0);
      
      String string0 = resultMatrixSignificance0.getColName(2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertNull(string0);
      
      boolean boolean0 = resultMatrixSignificance0.getDefaultRemoveFilterName();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(boolean0);
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertNotNull(resultMatrixHTML1);
      
      String string1 = resultMatrixHTML0.toStringSummary();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertNotNull(string1);
      assertEquals("-summary data not set-", string1);
      
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(resultMatrixHTML1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML2.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML2.equals((Object)resultMatrixHTML1));
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML2.getRowCount());
      assertFalse(resultMatrixHTML2.getPrintColNames());
      assertEquals(0, resultMatrixHTML2.getSignificanceWidth());
      assertFalse(resultMatrixHTML2.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML2.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML2.meanWidthTipText());
      assertEquals(2, resultMatrixHTML2.getStdDevPrec());
      assertTrue(resultMatrixHTML2.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML2.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML2.showStdDevTipText());
      assertFalse(resultMatrixHTML2.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML2.getEnumerateColNames());
      assertFalse(resultMatrixHTML2.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML2.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML2.getVisibleRowCount());
      assertFalse(resultMatrixHTML2.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML2.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML2.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML2.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML2.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML2.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML2.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML2.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML2.meanPrecTipText());
      assertEquals(0, resultMatrixHTML2.getCountWidth());
      assertEquals(2, resultMatrixHTML2.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML2.getVisibleColCount());
      assertTrue(resultMatrixHTML2.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML2.showAverageTipText());
      assertFalse(resultMatrixHTML2.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML2.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML2.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML2.countWidthTipText());
      assertEquals("HTML", resultMatrixHTML2.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML2.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML2.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML2.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML2.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML2.getColNameWidth());
      assertFalse(resultMatrixHTML2.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML2.globalInfo());
      assertEquals(0, resultMatrixHTML2.getMeanWidth());
      assertEquals(0, resultMatrixHTML2.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML2.getDefaultColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML2.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML2.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML2.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML2.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML2.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML2.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML2.significanceWidthTipText());
      assertNotNull(resultMatrixHTML2);
      
      String string2 = resultMatrixHTML2.getDisplayName();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML2));
      assertFalse(resultMatrixHTML2.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML2.equals((Object)resultMatrixHTML1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      assertNotSame(resultMatrixHTML1, resultMatrixHTML2);
      assertNotSame(resultMatrixHTML2, resultMatrixHTML0);
      assertNotSame(resultMatrixHTML2, resultMatrixHTML1);
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML2.getRowCount());
      assertFalse(resultMatrixHTML2.getPrintColNames());
      assertEquals(0, resultMatrixHTML2.getSignificanceWidth());
      assertFalse(resultMatrixHTML2.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML2.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML2.meanWidthTipText());
      assertEquals(2, resultMatrixHTML2.getStdDevPrec());
      assertTrue(resultMatrixHTML2.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML2.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML2.showStdDevTipText());
      assertFalse(resultMatrixHTML2.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML2.getEnumerateColNames());
      assertFalse(resultMatrixHTML2.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML2.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML2.getVisibleRowCount());
      assertFalse(resultMatrixHTML2.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML2.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML2.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML2.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML2.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML2.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML2.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML2.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML2.meanPrecTipText());
      assertEquals(0, resultMatrixHTML2.getCountWidth());
      assertEquals(2, resultMatrixHTML2.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML2.getVisibleColCount());
      assertTrue(resultMatrixHTML2.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML2.showAverageTipText());
      assertFalse(resultMatrixHTML2.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML2.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML2.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML2.countWidthTipText());
      assertEquals("HTML", resultMatrixHTML2.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML2.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML2.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML2.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML2.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML2.getColNameWidth());
      assertFalse(resultMatrixHTML2.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML2.globalInfo());
      assertEquals(0, resultMatrixHTML2.getMeanWidth());
      assertEquals(0, resultMatrixHTML2.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML2.getDefaultColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML2.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML2.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML2.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML2.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML2.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML2.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML2.significanceWidthTipText());
      assertNotNull(string2);
      assertEquals("HTML", string2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertArrayEquals(new int[] {2, 1, 1, (-1), 0}, intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(5, intArray0.length);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertNotNull(resultMatrixHTML0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setStdDevPrec((-2750));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      resultMatrixGnuPlot0.setMeanWidth(2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      resultMatrixGnuPlot0.setShowAverage(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      String string0 = resultMatrixGnuPlot0.toStringSummary();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertNotNull(string0);
      assertEquals("-summary data not set-", string0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertNotNull(resultMatrixGnuPlot1);
      
      int int0 = resultMatrixGnuPlot1.getDefaultColNameWidth();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertEquals(50, int0);
      
      String string1 = resultMatrixGnuPlot1.toStringKey();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertNotNull(string1);
      assertEquals("Key:\n1 col0\n", string1);
      
      String string2 = resultMatrixGnuPlot1.meanWidthTipText();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertNotNull(string2);
      assertEquals("The width of the mean (0 = optimal).", string2);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertNotNull(resultMatrixPlainText0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains((-2750)));
      
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(394, 394);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1268461319453738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertNotNull(resultMatrixLatex0);
      
      resultMatrixLatex0.clearSummary();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      resultMatrixLatex0.clearRanking();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      double[] doubleArray0 = new double[0];
      resultMatrixLatex0.setEnumerateColNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      String string0 = resultMatrixLatex0.removeFilterName(" statistically significant improvement or degradation}");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertNotNull(string0);
      assertEquals(" statistically significant improvement or degradation}", string0);
      
      resultMatrixLatex0.m_Counts = doubleArray0;
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      String string1 = resultMatrixLatex0.getRowName((-3963));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertNull(string1);
      
      resultMatrixLatex0.setPrintColNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      resultMatrixLatex0.clearHeader();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      resultMatrixLatex0.setColHidden(0, false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      resultMatrixLatex0.m_StdDev = null;
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3963);
      intArray0[1] = 0;
      intArray0[2] = (-3963);
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      resultMatrixLatex0.setRowOrder(intArray0);
      assertArrayEquals(new int[] {(-3963), 0, (-3963), 2, 0, 0, 0}, intArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(7, intArray0.length);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setCount(0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.282693997278065
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertNotNull(resultMatrixLatex0);
      
      int int0 = resultMatrixLatex0.getDefaultRowNameWidth();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, int0);
      
      resultMatrixLatex0.clearRanking();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      
      int[] intArray0 = new int[3];
      intArray0[2] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      assertArrayEquals(new int[] {0, 1, 2}, intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(3, intArray0.length);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      
      resultMatrixLatex0.setRemoveFilterName(true);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertNotNull(resultMatrixPlainText0);
      
      String[][] stringArray0 = new String[2][3];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "$\bullet$";
      stringArray1[1] = "Generates the matrix output as HTML.";
      stringArray1[2] = ")";
      stringArray1[3] = ")";
      stringArray1[4] = " ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "$\bullet$";
      stringArray2[1] = "Generates the matrix output as HTML.";
      stringArray2[2] = "v";
      stringArray2[3] = "Generates the matrix output as HTML.";
      stringArray0[1] = stringArray2;
      int int1 = resultMatrixPlainText0.getColSize(stringArray0, 91);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.054921687619788
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertNotNull(resultMatrixLatex0);
      
      int int0 = resultMatrixLatex0.getDefaultRowNameWidth();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, int0);
      
      resultMatrixLatex0.clearRanking();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      String string0 = resultMatrixLatex0.getDisplayName();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertNotNull(string0);
      assertEquals("LaTeX", string0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertNotNull(resultMatrixHTML0);
      
      String string1 = resultMatrixHTML0.toString();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertNotNull(string1);
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td><td align=\"center\" colspan=\"2\"><b>(2)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td><td align=\"right\">&nbsp;</td><td align=\"center\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td><td align=\"right\">&nbsp;</td><td align=\"center\">(0/0/0)</td></tr>\n</table>\n", string1);
      
      Enumeration enumeration0 = resultMatrixHTML0.listOptions();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertNotNull(enumeration0);
      
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = resultMatrixHTML0.globalInfo();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertNotNull(string2);
      assertEquals("Generates the matrix output as HTML.", string2);
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertEquals(25, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex1.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(2, resultMatrixLatex1.getColCount());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertNotNull(resultMatrixLatex1);
      
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertNotNull(resultMatrixLatex0);
      
      resultMatrixLatex0.setRowNameWidth(32);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(32, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      
      resultMatrixLatex0.clearRanking();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(32, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      
      resultMatrixLatex0.setEnumerateColNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(32, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertNotNull(resultMatrixHTML0);
      
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.8615345021002687
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertNotNull(resultMatrixHTML0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertNotNull(resultMatrixLatex0);
      
      String string0 = resultMatrixLatex0.removeFilterName(" statistically significant improvement or degradation}");
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertNotNull(string0);
      assertEquals(" statistically significant improvement or degradation}", string0);
      
      String string1 = resultMatrixLatex0.getRowName(1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertNull(string1);
      
      resultMatrixLatex0.setPrintColNames(true);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      
      resultMatrixLatex0.clearHeader();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      
      boolean boolean0 = false;
      resultMatrixLatex0.setColHidden(1, false);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      
      resultMatrixLatex0.setCount(1, 0.0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      
      String[] stringArray0 = null;
      ResultMatrixGnuPlot.main((String[]) null);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertNotNull(resultMatrixSignificance0);
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertNotNull(resultMatrixSignificance1);
      
      int int0 = resultMatrixSignificance1.getDefaultRowNameWidth();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals(40, int0);
      
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.897357129212931
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertNotNull(resultMatrixLatex0);
      
      resultMatrixLatex0.clearSummary();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      
      resultMatrixLatex0.setStdDevWidth((-1736));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      
      boolean boolean0 = resultMatrixLatex0.isAverage((-434));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(boolean0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertNotNull(resultMatrixHTML0);
      
      boolean boolean1 = resultMatrixHTML0.getDefaultPrintColNames();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(boolean1);
  }
}
