/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 16:00:23 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullParserWrapper;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "Attributes must be given in name, value pairs.";
      Form form0 = new Form("Attributes must be given in name, value pairs.");
      Form form1 = form0.addFormValidationRule("kdb", "kdb");
      String string1 = null;
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(form1, (String) null, "Attributes must be given in name, value pairs.", stringSelectModel0, (CharSequence) null);
      // Undeclared exception!
      try { 
        form1.addFormElement(select0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "$1";
      Table table0 = null;
      try {
        table0 = new Table((Component) null, "$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      DateInput dateInput0 = null;
      try {
        dateInput0 = new DateInput(form0, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4681399390162084
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "Tfoot component can be added only to a Table.";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Tfoot component can be added only to a Table.");
      Table table0 = null;
      try {
        table0 = new Table(xmlEntityRef0, "Tfoot component can be added only to a Table.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Form form0 = new Form("nbsp");
      Label label0 = null;
      try {
        label0 = new Label(form0, form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      DateInput dateInput0 = new DateInput(checkbox0, "&quot;", "org.mvel.conversion.LongCH$5", "&quot;");
      Hidden hidden0 = new Hidden(dateInput0, "", "script");
      Block block0 = new Block(hidden0);
      // Undeclared exception!
      try { 
        block0.hidden("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      String string1 = "kbd";
      // Undeclared exception!
      try { 
        form0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer();
      Image image0 = new Image(errorPage0, stringBuffer0, stringBuffer0);
      String string0 = "$H92c";
      image0.getPage();
      Table table0 = new Table(image0, "$H92c");
      Table table1 = table0.renderHint(stringBuffer0);
      TableBlock tableBlock0 = new TableBlock(table1);
      Block block0 = tableBlock0.renderHint(stringBuffer0);
      // Undeclared exception!
      try { 
        block0.id("$H92c");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "9Z6Ddc";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("9Z6Ddc");
      xmlEntityRef0._clear();
      String string1 = "";
      NumberInput numberInput0 = null;
      try {
        numberInput0 = new NumberInput(xmlEntityRef0, "9Z6Ddc", "", "9Z6Ddc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "hJ:g";
      Table table0 = new Table(errorPage0, "hJ:g");
      TableBlock tableBlock0 = new TableBlock(table0);
      tableBlock0.col();
      Class<Object> class0 = Object.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance("", class0);
      xmlPullWrapperFactory0.newPullParserWrapper();
      XmlSerializerWrapper xmlSerializerWrapper0 = xmlPullWrapperFactory0.newSerializerWrapper();
      // Undeclared exception!
      try { 
        tableBlock0._render(xmlSerializerWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Class<Object> class0 = Object.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance("", class0);
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNotNull(xmlPullWrapperFactory0);
      
      XmlPullParserWrapper xmlPullParserWrapper0 = xmlPullWrapperFactory0.newPullParserWrapper();
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertEquals(0, xmlPullParserWrapper0.getLineNumber());
      assertNull(xmlPullParserWrapper0.getPrefix());
      assertNull(xmlPullParserWrapper0.getNamespace());
      assertNull(xmlPullParserWrapper0.getInputEncoding());
      assertEquals((-1), xmlPullParserWrapper0.getAttributeCount());
      assertEquals(0, xmlPullParserWrapper0.getColumnNumber());
      assertEquals(0, xmlPullParserWrapper0.getDepth());
      assertEquals(0, xmlPullParserWrapper0.getEventType());
      assertNotNull(xmlPullParserWrapper0);
      
      XmlSerializerWrapper xmlSerializerWrapper0 = xmlPullWrapperFactory0.newSerializerWrapper();
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertEquals(0, xmlSerializerWrapper0.getDepth());
      assertNull(xmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNull(xmlSerializerWrapper0.getName());
      assertNull(xmlSerializerWrapper0.getNamespace());
      assertNotNull(xmlSerializerWrapper0);
      
      XmlPullWrapperFactory xmlPullWrapperFactory1 = XmlPullWrapperFactory.newInstance();
      assertFalse(xmlPullWrapperFactory1.isValidating());
      assertFalse(xmlPullWrapperFactory1.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory1.equals((Object)xmlPullWrapperFactory0));
      assertNotSame(xmlPullWrapperFactory1, xmlPullWrapperFactory0);
      assertNotNull(xmlPullWrapperFactory1);
      
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper((XmlSerializer) null, xmlPullWrapperFactory1);
      assertFalse(xmlPullWrapperFactory1.isValidating());
      assertFalse(xmlPullWrapperFactory1.isNamespaceAware());
      assertNull(staticXmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertFalse(xmlPullWrapperFactory1.equals((Object)xmlPullWrapperFactory0));
      assertFalse(staticXmlSerializerWrapper0.equals((Object)xmlSerializerWrapper0));
      assertNotNull(staticXmlSerializerWrapper0);
      
      // Undeclared exception!
      try { 
        errorPage0.passwordInput("(w+)s*=s*[\\\"']([^\\\"']*)[\\\"']");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4139465595971847
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      String string0 = "";
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      String string1 = "&quot;";
      String string2 = "org.mvel.conversion.LongCH$5";
      // Undeclared exception!
      try { 
        checkbox0.style();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      String string0 = "org.mvel.conversion.LongCH$5";
      DateInput dateInput0 = new DateInput(checkbox0, "&quot;", "org.mvel.conversion.LongCH$5", "&quot;");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertNotNull(dateInput0);
      
      Hidden hidden0 = new Hidden(dateInput0, "", "script");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("script", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertNotNull(hidden0);
      
      Block block0 = new Block(hidden0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("script", hidden0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      dateInput0.validate();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        dateInput0.span();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "9Z6Ddc";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("9Z6Ddc");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("9Z6Ddc", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "8<", " MuSiKo PawKDfOfM");
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("8<", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals(" MuSiKo PawKDfOfM", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.setBinding("8<");
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("8<", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals(" MuSiKo PawKDfOfM", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals(" MuSiKo PawKDfOfM", formElement0.getComponentId());
      assertEquals("8<", formElement0.getFormElementName());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "8<";
      Checkbox checkbox0 = new Checkbox((Component) null, "8<", " Mu/SiKo PawKDfOfM");
      assertEquals("8<", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals(" Mu/SiKo PawKDfOfM", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2546036339902322
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      DateInput dateInput0 = new DateInput(checkbox0, "", "", "");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertNotNull(dateInput0);
      
      Hidden hidden0 = new Hidden(checkbox0, "", "");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertNotNull(hidden0);
      
      Block block0 = new Block(dateInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      // Undeclared exception!
      try { 
        block0.checkbox("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4056809721528243
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.nbsp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3659950858257948
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      String string0 = "org.mvel.conversion.LongCH$5";
      DateInput dateInput0 = new DateInput(checkbox0, "&quot;", "org.mvel.conversion.LongCH$5", "&quot;");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertNotNull(dateInput0);
      
      Hidden hidden0 = new Hidden(dateInput0, "", "script");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("script", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertNotNull(hidden0);
      
      Block block0 = new Block(hidden0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertEquals("script", hidden0.getComponentId());
      assertEquals("", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      FormElement formElement0 = checkbox0.fieldBinding("&quot;");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      
      TextArea textArea0 = new TextArea(formElement0, "8U43f.tb4E!e{y2@[", "h4");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("h4", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("8U43f.tb4E!e{y2@[", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertNotNull(textArea0);
      
      // Undeclared exception!
      try { 
        textArea0.br();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Image image0 = new Image(errorPage0, stringBuffer0, stringBuffer0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertNotNull(image0);
      
      StandaloneComponent standaloneComponent0 = image0.getPage();
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertFalse(standaloneComponent0._isBuilt());
      assertTrue(standaloneComponent0.isPage());
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertNotNull(standaloneComponent0);
      
      Table table0 = new Table(image0, "$H92c");
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("$H92c", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      // Undeclared exception!
      try { 
        image0.small();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      String string0 = "";
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      String string1 = "org.mvel.conversion.LongCH$5";
      DateInput dateInput0 = new DateInput(checkbox0, "&quot;", "org.mvel.conversion.LongCH$5", "&quot;");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertNotNull(dateInput0);
      
      String string2 = "q";
      FormElement formElement0 = checkbox0.addValidationError("q");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertFalse(formElement0.isValid());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "p", "p");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("p", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      DateInput dateInput0 = new DateInput(checkbox0, "&quot;", "org.mvel.conversion.LongCH$5", "&quot;");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("p", checkbox0.getFormElementName());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertNotNull(dateInput0);
      
      Hidden hidden0 = new Hidden(dateInput0, "p", "script");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("p", checkbox0.getFormElementName());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("p", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertNotNull(hidden0);
      
      Block block0 = new Block(hidden0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("p", checkbox0.getFormElementName());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("p", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      Block block1 = (Block)block0.noframes();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("p", checkbox0.getFormElementName());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("p", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_3", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertNotNull(block1);
      
      Table table0 = new Table(block0, "");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("p", checkbox0.getFormElementName());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("p", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertFalse(block0.equals((Object)block1));
      assertNotNull(table0);
      
      Table table1 = table0.id("");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("p", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("p", checkbox0.getFormElementName());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isValid());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("p", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table0.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("", table1.getComponentId());
      assertFalse(block0.equals((Object)block1));
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      
      // Undeclared exception!
      try { 
        dateInput0.wBlock("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "8<", " MuSiKo PawKDfOfM");
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("8<", checkbox0.getFormElementName());
      assertEquals(" MuSiKo PawKDfOfM", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      Checkbox checkbox1 = (Checkbox)checkbox0.setBinding("8<");
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("8<", checkbox0.getFormElementName());
      assertEquals(" MuSiKo PawKDfOfM", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertEquals(" MuSiKo PawKDfOfM", checkbox1.getComponentId());
      assertEquals("8<", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertNotNull(checkbox1);
      
      Checkbox checkbox2 = (Checkbox)checkbox1.addInternalRenderHint((String) null);
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("8<", checkbox0.getFormElementName());
      assertEquals(" MuSiKo PawKDfOfM", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertEquals(" MuSiKo PawKDfOfM", checkbox1.getComponentId());
      assertEquals("8<", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertTrue(checkbox2.isEmpty());
      assertTrue(checkbox2.isValid());
      assertFalse(checkbox2._isGeneratedId());
      assertEquals(" MuSiKo PawKDfOfM", checkbox2.getComponentId());
      assertEquals("8<", checkbox2.getFormElementName());
      assertEquals("input", checkbox2.defaultTagName());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox0, checkbox2);
      assertSame(checkbox1, checkbox2);
      assertSame(checkbox1, checkbox0);
      assertSame(checkbox2, checkbox1);
      assertSame(checkbox2, checkbox0);
      assertNotNull(checkbox2);
      
      // Undeclared exception!
      try { 
        checkbox1.p((Object) " MuSiKo PawKDfOfM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.581477200068027
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      Block block0 = (Block)errorPage0.wBlock("");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      String string0 = "org.mvel.conversion.LongCH$5";
      DateInput dateInput0 = new DateInput(checkbox0, "&quot;", "org.mvel.conversion.LongCH$5", "&quot;");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertNotNull(dateInput0);
      
      Hidden hidden0 = new Hidden(dateInput0, "", "script");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertNotNull(hidden0);
      
      Block block1 = new Block(hidden0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      
      Table table0 = new Table(block1, "");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertFalse(block1.equals((Object)block0));
      assertNotNull(table0);
      
      Table table1 = table0.id("");
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isValid());
      assertEquals("&quot;", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("script", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertEquals("", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("", table1.getComponentId());
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block1, block0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      
      block1.add(checkbox0);
      TableRow tableRow0 = table1.tr();
      hidden0.p((Object) tableRow0);
      checkbox0.wrapSelf();
      errorPage0.find(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      DateInput dateInput0 = new DateInput(checkbox0, "", "", "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertNotNull(dateInput0);
      
      String string0 = checkbox0.toString();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(string0);
      
      Hidden hidden0 = new Hidden(checkbox0, "", "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertNotNull(hidden0);
      
      Block block0 = new Block(dateInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertTrue(dateInput0.isEmpty());
      assertEquals("", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      // Undeclared exception!
      try { 
        block0.hidden(">yS;'}q<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Class<Object> class0 = Object.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance("", class0);
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNotNull(xmlPullWrapperFactory0);
      
      XmlPullParserWrapper xmlPullParserWrapper0 = xmlPullWrapperFactory0.newPullParserWrapper();
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertEquals(0, xmlPullParserWrapper0.getEventType());
      assertEquals(0, xmlPullParserWrapper0.getDepth());
      assertEquals((-1), xmlPullParserWrapper0.getAttributeCount());
      assertNull(xmlPullParserWrapper0.getPrefix());
      assertEquals(0, xmlPullParserWrapper0.getLineNumber());
      assertEquals(0, xmlPullParserWrapper0.getColumnNumber());
      assertNull(xmlPullParserWrapper0.getInputEncoding());
      assertNull(xmlPullParserWrapper0.getNamespace());
      assertNotNull(xmlPullParserWrapper0);
      
      XmlSerializerWrapper xmlSerializerWrapper0 = xmlPullWrapperFactory0.newSerializerWrapper();
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNull(xmlSerializerWrapper0.getName());
      assertNull(xmlSerializerWrapper0.getNamespace());
      assertEquals(0, xmlSerializerWrapper0.getDepth());
      assertNull(xmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNotNull(xmlSerializerWrapper0);
      
      XmlPullWrapperFactory xmlPullWrapperFactory1 = XmlPullWrapperFactory.newInstance();
      assertFalse(xmlPullWrapperFactory1.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory1.isValidating());
      assertFalse(xmlPullWrapperFactory1.equals((Object)xmlPullWrapperFactory0));
      assertNotSame(xmlPullWrapperFactory1, xmlPullWrapperFactory0);
      assertNotNull(xmlPullWrapperFactory1);
      
      MXSerializer mXSerializer0 = new MXSerializer();
      assertNull(mXSerializer0.getNamespace());
      assertEquals(0, mXSerializer0.getDepth());
      assertNull(mXSerializer0.getName());
      assertNotNull(mXSerializer0);
      
      Block block0 = (Block)errorPage0.h6();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      MXSerializer mXSerializer1 = (MXSerializer)mXSerializer0.text(charArray0, (-3704), 0);
      assertArrayEquals(new char[] {'>'}, charArray0);
      assertNull(mXSerializer0.getNamespace());
      assertEquals(0, mXSerializer0.getDepth());
      assertNull(mXSerializer0.getName());
      assertNull(mXSerializer1.getName());
      assertEquals(0, mXSerializer1.getDepth());
      assertNull(mXSerializer1.getNamespace());
      assertSame(mXSerializer0, mXSerializer1);
      assertSame(mXSerializer1, mXSerializer0);
      assertEquals(1, charArray0.length);
      assertNotNull(mXSerializer1);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 0, 2183);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "8<";
      Component component0 = null;
      String string1 = " MuSiKo Pa\\wKDfOfM";
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      TextArea textArea0 = new TextArea(errorPage0, "jXo!:CO-b>kL0r", (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("jXo!:CO-b>kL0r", textArea0.getFormElementName());
      assertEquals("TextArea_1", textArea0.getComponentId());
      assertTrue(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertNotNull(textArea0);
      
      FormElement formElement0 = textArea0.value(" MuSiKo PawKDfOfM");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("jXo!:CO-b>kL0r", textArea0.getFormElementName());
      assertEquals("TextArea_1", textArea0.getComponentId());
      assertTrue(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("TextArea_1", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("jXo!:CO-b>kL0r", formElement0.getFormElementName());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotNull(formElement0);
      
      NumberInput numberInput0 = new NumberInput(formElement0, (String) null, "4p!=W9~[3Q:6uuf)^");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("jXo!:CO-b>kL0r", textArea0.getFormElementName());
      assertEquals("TextArea_1", textArea0.getComponentId());
      assertTrue(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("TextArea_1", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("jXo!:CO-b>kL0r", formElement0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("4p!=W9~[3Q:6uuf)^", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertNull(numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertNotNull(numberInput0);
      
      numberInput0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("jXo!:CO-b>kL0r", textArea0.getFormElementName());
      assertEquals("TextArea_1", textArea0.getComponentId());
      assertTrue(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("TextArea_1", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("jXo!:CO-b>kL0r", formElement0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("4p!=W9~[3Q:6uuf)^", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertNull(numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      
      // Undeclared exception!
      try { 
        textArea0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "9Z6Ddc";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("9Z6Ddc");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("9Z6Ddc", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.buttonInput("9Z6Ddc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.403640410614949
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      DateInput dateInput0 = new DateInput(checkbox0, "", "", "");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("", dateInput0.getFormElementName());
      assertNotNull(dateInput0);
      
      String string0 = checkbox0.toString();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertNotNull(string0);
      
      Hidden hidden0 = new Hidden(checkbox0, "", "");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertTrue(hidden0.isEmpty());
      assertEquals("", hidden0.getFormElementName());
      assertNotNull(hidden0);
      
      ElExpression elExpression0 = new ElExpression("<input id=\"Checkbox_1\"type=\"java.lang.String@0000000004\" />");
      assertEquals(59, elExpression0.length());
      assertNotNull(elExpression0);
      
      Text text0 = null;
      try {
        text0 = new Text(checkbox0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression <input id=\"Checkbox_1\"type=\"java.lang.String@0000000004\" /> in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "8<";
      Checkbox checkbox0 = new Checkbox((Component) null, "8<", "8<");
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("8<", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("8<", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      Checkbox checkbox1 = (Checkbox)checkbox0.setBinding("8<");
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("8<", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("8<", checkbox0.getComponentId());
      assertEquals("8<", checkbox1.getComponentId());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("8<", checkbox1.getFormElementName());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertNotNull(checkbox1);
      
      Checkbox checkbox2 = (Checkbox)checkbox1.addInternalRenderHint("8<");
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("8<", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("8<", checkbox0.getComponentId());
      assertEquals("8<", checkbox1.getComponentId());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("8<", checkbox1.getFormElementName());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox2.isValid());
      assertTrue(checkbox2.isEmpty());
      assertEquals("8<", checkbox2.getComponentId());
      assertEquals("8<", checkbox2.getFormElementName());
      assertFalse(checkbox2._isGeneratedId());
      assertEquals("input", checkbox2.defaultTagName());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox0, checkbox2);
      assertSame(checkbox1, checkbox2);
      assertSame(checkbox1, checkbox0);
      assertSame(checkbox2, checkbox0);
      assertSame(checkbox2, checkbox1);
      assertNotNull(checkbox2);
      
      String string1 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        checkbox2.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4123863316663874
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      String string0 = "org.mvel.conversion.LongCH$5";
      String string1 = "script";
      FormElement formElement0 = checkbox0.fieldBinding("&quot;");
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0._isGeneratedId());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      
      String string2 = "8U43f.tb4E!e{y2@[";
      // Undeclared exception!
      try { 
        formElement0.script();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6750071990872883
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      Block block0 = (Block)errorPage0.wBlock("");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      DateInput dateInput0 = new DateInput(checkbox0, "", "org.mvel.conversion.LongCH$5", "org.mvel.conversion.LongCH$5");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("input", dateInput0.defaultTagName());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("", dateInput0.getFormElementName());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertNotNull(dateInput0);
      
      Hidden hidden0 = new Hidden(errorPage0, "org.apache.commons.io.filefilter.EmptyFileFilter", "l9)%#m0?n");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("org.apache.commons.io.filefilter.EmptyFileFilter", hidden0.getFormElementName());
      assertEquals("l9)%#m0?n", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertNotNull(hidden0);
      
      Block block1 = new Block(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      
      Table table0 = new Table(block0, "Block_1");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("Block_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(block0.equals((Object)block1));
      assertNotNull(table0);
      
      Table table1 = table0.id("@YVTDou\":[A,Q;0U\"=");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("@YVTDou\":[A,Q;0U\"=", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("@YVTDou\":[A,Q;0U\"=", table1.getComponentId());
      assertFalse(block0.equals((Object)block1));
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      
      Table table2 = (Table)block1.add(table1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("@YVTDou\":[A,Q;0U\"=", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("@YVTDou\":[A,Q;0U\"=", table1.getComponentId());
      assertEquals("@YVTDou\":[A,Q;0U\"=", table2.getComponentId());
      assertFalse(table2._isGeneratedId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(block0.equals((Object)block1));
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block0, block1);
      assertNotSame(block1, block0);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(table2);
      
      TableRow tableRow0 = table1.tr();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("@YVTDou\":[A,Q;0U\"=", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("@YVTDou\":[A,Q;0U\"=", table1.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertFalse(block0.equals((Object)block1));
      assertNotSame(block0, block1);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertNotNull(tableRow0);
      
      // Undeclared exception!
      try { 
        hidden0.p((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      boolean boolean0 = errorPage0.isPageRewinding();
      assertFalse(boolean0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      DateInput dateInput0 = new DateInput(checkbox0, "", "", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertNotNull(dateInput0);
      
      String string0 = checkbox0.toString();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(string0);
      
      Hidden hidden0 = new Hidden(checkbox0, "", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", hidden0.getFormElementName());
      assertTrue(hidden0.isEmpty());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertNotNull(hidden0);
      
      Block block0 = new Block(dateInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      String string1 = ">yS;'}q<";
      // Undeclared exception!
      try { 
        dateInput0.i((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Form form0 = new Form("WR2wlAIC~/3HLY7=HQU");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("WR2wlAIC~/3HLY7=HQU", form0.getComponentId());
      assertNotNull(form0);
      
      String string0 = null;
      String string1 = "java/lang/Doble";
      Hidden hidden0 = new Hidden(form0, (String) null, "java/lang/Doble");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("WR2wlAIC~/3HLY7=HQU", form0.getComponentId());
      assertEquals("java/lang/Doble", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertNull(hidden0.getFormElementName());
      assertNotNull(hidden0);
      
      String string2 = "x8v32%?]/XFYQ\"1cxD";
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertNotNull(stringSelectModel0);
      
      Hidden hidden1 = (Hidden)hidden0.actionBinding("org.mvel.conversion.ShortCH$6");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("WR2wlAIC~/3HLY7=HQU", form0.getComponentId());
      assertEquals("java/lang/Doble", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertNull(hidden0.getFormElementName());
      assertEquals("java/lang/Doble", hidden1.getComponentId());
      assertEquals("input", hidden1.defaultTagName());
      assertTrue(hidden1.isValid());
      assertTrue(hidden1.isEmpty());
      assertFalse(hidden1._isGeneratedId());
      assertNull(hidden1.getFormElementName());
      assertSame(hidden0, hidden1);
      assertSame(hidden1, hidden0);
      assertNotNull(hidden1);
      
      ElExpression elExpression0 = new ElExpression("x8v32%?]/XFYQ\"1cxD");
      assertEquals(18, elExpression0.length());
      assertEquals("x8v32%?]/XFYQ\"1cxD", elExpression0.toString());
      assertEquals("x8v32%?]/XFYQ\"1cxD", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(hidden0, (String) null, "x8v32%?]/XFYQ\"1cxD", stringSelectModel0, elExpression0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("WR2wlAIC~/3HLY7=HQU", form0.getComponentId());
      assertEquals("java/lang/Doble", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertNull(hidden0.getFormElementName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals(18, elExpression0.length());
      assertEquals("x8v32%?]/XFYQ\"1cxD", elExpression0.toString());
      assertEquals("x8v32%?]/XFYQ\"1cxD", elExpression0.getExpression());
      assertFalse(checkboxGroup0._isBuilt());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertEquals("input", checkboxGroup0.defaultTagName());
      assertTrue(checkboxGroup0.isValid());
      assertTrue(checkboxGroup0.isEmpty());
      assertNull(checkboxGroup0.getFormElementName());
      assertEquals("x8v32%?]/XFYQ\"1cxD", checkboxGroup0.getComponentId());
      assertNotNull(checkboxGroup0);
      
      // Undeclared exception!
      try { 
        checkboxGroup0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Hidden hidden0 = new Hidden(errorPage0, "s+|4 ", "s+|4 ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("s+|4 ", hidden0.getFormElementName());
      assertEquals("s+|4 ", hidden0.getComponentId());
      assertNotNull(hidden0);
      
      Table table0 = new Table(hidden0, (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("s+|4 ", hidden0.getFormElementName());
      assertEquals("s+|4 ", hidden0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("s+|4 ", hidden0.getFormElementName());
      assertEquals("s+|4 ", hidden0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.tbody();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("s+|4 ", hidden0.getFormElementName());
      assertEquals("s+|4 ", hidden0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(tableBlock0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("s+|4 ", hidden0.getFormElementName());
      assertEquals("s+|4 ", hidden0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      assertNotNull(block0);
      
      Select select0 = new Select(block0, "s+|4 ", (String) null, (ISelectModel) null, (CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", hidden0.defaultTagName());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("s+|4 ", hidden0.getFormElementName());
      assertEquals("s+|4 ", hidden0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertTrue(select0.isValid());
      assertTrue(select0._isGeneratedId());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isEmpty());
      assertEquals("Select_1", select0.getComponentId());
      assertEquals("s+|4 ", select0.getFormElementName());
      assertFalse(select0._isBuilt());
      assertNotNull(select0);
      
      // Undeclared exception!
      try { 
        select0.fileInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      Block block0 = (Block)errorPage0.wBlock("");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      DateInput dateInput0 = new DateInput(checkbox0, "", "org.mvel.conversion.LongCH$5", "org.mvel.conversion.LongCH$5");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("", dateInput0.getFormElementName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isValid());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertNotNull(dateInput0);
      
      Hidden hidden0 = new Hidden(errorPage0, "", "l9)%#m0?n");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(hidden0.isEmpty());
      assertEquals("input", hidden0.defaultTagName());
      assertEquals("", hidden0.getFormElementName());
      assertFalse(hidden0._isGeneratedId());
      assertEquals("l9)%#m0?n", hidden0.getComponentId());
      assertTrue(hidden0.isValid());
      assertNotNull(hidden0);
      
      Block block1 = new Block(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.mvel.conversion.LongCH$5";
      stringArray0[1] = "l9)%#m0?n";
      stringArray0[2] = "l9)%#m0?n";
      stringArray0[3] = "org.mvel.conversion.LongCH$5";
      stringArray0[4] = "";
      stringArray0[5] = "l9)%#m0?n";
      Checkbox checkbox1 = (Checkbox)checkbox0.attributes(stringArray0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("", checkbox1.getFormElementName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertEquals(6, stringArray0.length);
      assertNotNull(checkbox1);
      
      Hidden hidden1 = new Hidden(checkbox1, "l9)%#m0?n", "org.mvel.conversion.LongCH$5");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("", checkbox1.getFormElementName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertEquals("org.mvel.conversion.LongCH$5", hidden1.getComponentId());
      assertTrue(hidden1.isEmpty());
      assertFalse(hidden1._isGeneratedId());
      assertTrue(hidden1.isValid());
      assertEquals("l9)%#m0?n", hidden1.getFormElementName());
      assertEquals("input", hidden1.defaultTagName());
      assertFalse(hidden1.equals((Object)hidden0));
      assertEquals(6, stringArray0.length);
      assertNotNull(hidden1);
      
      Submit submit0 = new Submit(dateInput0, "edBB$sQRUoX", "y%Rzoz,8cU~S<");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("", dateInput0.getFormElementName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isValid());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("edBB$sQRUoX", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isEmpty());
      assertEquals("y%Rzoz,8cU~S<", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertNotNull(submit0);
      
      // Undeclared exception!
      try { 
        checkbox0.h2((Object) submit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0262296229952916
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "8<";
      Checkbox checkbox0 = new Checkbox((Component) null, "8<", "8<");
      assertEquals("8<", checkbox0.getFormElementName());
      assertEquals("8<", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      Checkbox checkbox1 = (Checkbox)checkbox0.setBinding("8<");
      assertEquals("8<", checkbox0.getFormElementName());
      assertEquals("8<", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("8<", checkbox1.getComponentId());
      assertFalse(checkbox1._isGeneratedId());
      assertTrue(checkbox1.isEmpty());
      assertEquals("8<", checkbox1.getFormElementName());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertNotNull(checkbox1);
      
      Checkbox checkbox2 = (Checkbox)checkbox1.addInternalRenderHint("8<");
      assertEquals("8<", checkbox0.getFormElementName());
      assertEquals("8<", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox1.isValid());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("8<", checkbox1.getComponentId());
      assertFalse(checkbox1._isGeneratedId());
      assertTrue(checkbox1.isEmpty());
      assertEquals("8<", checkbox1.getFormElementName());
      assertEquals("8<", checkbox2.getComponentId());
      assertFalse(checkbox2._isGeneratedId());
      assertTrue(checkbox2.isValid());
      assertTrue(checkbox2.isEmpty());
      assertEquals("8<", checkbox2.getFormElementName());
      assertEquals("input", checkbox2.defaultTagName());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox0, checkbox2);
      assertSame(checkbox1, checkbox2);
      assertSame(checkbox1, checkbox0);
      assertSame(checkbox2, checkbox0);
      assertSame(checkbox2, checkbox1);
      assertNotNull(checkbox2);
      
      String string1 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        checkbox0.small((Object) checkbox1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.38888971472958
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "$+G?B Kkilz,", (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("$+G?B Kkilz,", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.setBinding("");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("$+G?B Kkilz,", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("$+G?B Kkilz,", formElement0.getFormElementName());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      
      Checkbox checkbox1 = (Checkbox)checkbox0.addInternalRenderHint((String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("$+G?B Kkilz,", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("$+G?B Kkilz,", checkbox1.getFormElementName());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox0, formElement0);
      assertSame(checkbox1, formElement0);
      assertSame(checkbox1, checkbox0);
      assertNotNull(checkbox1);
      
      String string0 = null;
      Checkbox checkbox2 = new Checkbox(formElement0, "org.mvel.conversion.FloatCH$3", (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("$+G?B Kkilz,", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("$+G?B Kkilz,", formElement0.getFormElementName());
      assertTrue(checkbox2.isValid());
      assertEquals("input", checkbox2.defaultTagName());
      assertEquals("org.mvel.conversion.FloatCH$3", checkbox2.getFormElementName());
      assertEquals("Checkbox_2", checkbox2.getComponentId());
      assertTrue(checkbox2.isEmpty());
      assertTrue(checkbox2._isGeneratedId());
      assertFalse(checkbox2.equals((Object)checkbox0));
      assertFalse(checkbox2.equals((Object)formElement0));
      assertFalse(checkbox2.equals((Object)checkbox1));
      assertNotNull(checkbox2);
      
      String[] stringArray0 = new String[0];
      Checkbox checkbox3 = (Checkbox)checkbox2.attributes(stringArray0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("$+G?B Kkilz,", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("Checkbox_1", formElement0.getComponentId());
      assertTrue(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("$+G?B Kkilz,", formElement0.getFormElementName());
      assertTrue(checkbox2.isValid());
      assertEquals("input", checkbox2.defaultTagName());
      assertEquals("org.mvel.conversion.FloatCH$3", checkbox2.getFormElementName());
      assertEquals("Checkbox_2", checkbox2.getComponentId());
      assertTrue(checkbox2.isEmpty());
      assertTrue(checkbox2._isGeneratedId());
      assertTrue(checkbox3.isEmpty());
      assertTrue(checkbox3.isValid());
      assertTrue(checkbox3._isGeneratedId());
      assertEquals("input", checkbox3.defaultTagName());
      assertEquals("org.mvel.conversion.FloatCH$3", checkbox3.getFormElementName());
      assertEquals("Checkbox_2", checkbox3.getComponentId());
      assertFalse(checkbox0.equals((Object)checkbox2));
      assertFalse(formElement0.equals((Object)checkbox2));
      assertFalse(checkbox2.equals((Object)checkbox0));
      assertFalse(checkbox2.equals((Object)formElement0));
      assertFalse(checkbox2.equals((Object)checkbox1));
      assertFalse(checkbox3.equals((Object)checkbox1));
      assertFalse(checkbox3.equals((Object)checkbox0));
      assertFalse(checkbox3.equals((Object)formElement0));
      assertSame(checkbox0, checkbox1);
      assertNotSame(checkbox0, checkbox3);
      assertSame(checkbox0, formElement0);
      assertNotSame(checkbox0, checkbox2);
      assertNotSame(formElement0, checkbox2);
      assertSame(formElement0, checkbox0);
      assertSame(formElement0, checkbox1);
      assertNotSame(formElement0, checkbox3);
      assertNotSame(checkbox2, checkbox0);
      assertNotSame(checkbox2, formElement0);
      assertSame(checkbox2, checkbox3);
      assertNotSame(checkbox2, checkbox1);
      assertNotSame(checkbox3, checkbox1);
      assertSame(checkbox3, checkbox2);
      assertNotSame(checkbox3, checkbox0);
      assertNotSame(checkbox3, formElement0);
      assertEquals(0, stringArray0.length);
      assertNotNull(checkbox3);
      
      Hidden hidden0 = new Hidden(checkbox1, "Fk", (String) null);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("$+G?B Kkilz,", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("$+G?B Kkilz,", checkbox1.getFormElementName());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertEquals("Fk", hidden0.getFormElementName());
      assertEquals("Hidden_1", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertTrue(hidden0.isValid());
      assertTrue(hidden0._isGeneratedId());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(checkbox0.equals((Object)checkbox3));
      assertFalse(checkbox0.equals((Object)checkbox2));
      assertFalse(checkbox1.equals((Object)checkbox2));
      assertFalse(checkbox1.equals((Object)checkbox3));
      assertNotNull(hidden0);
      
      // Undeclared exception!
      try { 
        checkbox0.h2((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5583273456910005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      Block block0 = (Block)errorPage0.wBlock("");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      DateInput dateInput0 = new DateInput(checkbox0, "", "org.mvel.conversion.LongCH$5", "org.mvel.conversion.LongCH$5");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("org.mvel.conversion.LongCH$5", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("", dateInput0.getFormElementName());
      assertFalse(dateInput0._isGeneratedId());
      assertTrue(dateInput0.isValid());
      assertEquals("input", dateInput0.defaultTagName());
      assertNotNull(dateInput0);
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.javascript("");
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) dateInput0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) actionExpression1;
      objectArray0[4] = (Object) "org.mvel.conversion.LongCH$5";
      objectArray0[5] = (Object) block0;
      objectArray0[6] = (Object) actionExpression1;
      objectArray0[7] = (Object) "org.mvel.conversion.LongCH$5";
      objectArray0[8] = (Object) actionExpression0;
      Block block1 = (Block)errorPage0.wBlock(actionExpression1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(0, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression1.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("", actionExpression1.getExpression());
      assertEquals("", actionExpression1.toString());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(0, actionExpression1.length());
      assertEquals("", actionExpression1.getActionExpression());
      assertEquals("", actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block1, block0);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(block1);
      
      // Undeclared exception!
      try { 
        errorPage0.find("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id  on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
