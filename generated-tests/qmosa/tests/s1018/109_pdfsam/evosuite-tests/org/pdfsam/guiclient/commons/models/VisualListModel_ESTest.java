/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:16:01 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ComponentSampleModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferUShort;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.SampleModel;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.dto.VisualPageListItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1011);
      intArray0[1] = 0;
      intArray0[2] = (-1033);
      intArray0[3] = (-3098);
      intArray0[4] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      visualListModel0.moveDownIndex((-2684));
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(489, "NZK\"ylI@Un}w+-+v,", "NZK\"ylI@Un}w+-+v,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.reverseElements(intArray1);
      String string0 = "";
      visualListModel0.clearData();
      int int1 = (-511);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = (-2942);
      visualListModel0.moveUpIndex(0);
      intArray0[1] = 0;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.prependAllElements(vector0);
      intArray0[2] = 360;
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[5];
      int int0 = 0;
      intArray1[0] = 0;
      intArray1[1] = 360;
      intArray1[2] = 360;
      intArray1[3] = 0;
      int int1 = 2791;
      intArray1[4] = 2791;
      visualListModel0.elementsChanged();
      visualListModel0.undeleteElements(intArray1);
      visualListModel0.elementsChanged();
      visualListModel0.moveUpIndex(360);
      visualListModel0.moveUpIndexes(intArray1);
      int int2 = 0;
      boolean boolean0 = true;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(6411, 0, intArray1, 0, true, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 565;
      visualListModel0.moveUpIndex(565);
      visualListModel0.getValidElements();
      visualListModel0.addAllElements(565, (Collection<VisualPageListItem>) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)196;
      short short0 = (short) (-3957);
      shortArray0[1] = (short) (-3957);
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(565, shortArray0);
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, (RenderingHints) null);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((short)196, (short) (-3957), (short)196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 196
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      int int0 = 2134;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.subList(2134, 2134);
      visualListModel0.prependAllElements(hashSet0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 184;
      // Undeclared exception!
      try { 
        visualListModel0.subList(184, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(184) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = null;
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(linkedHashSet0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1639;
      intArray0[1] = (-510);
      intArray0[2] = 0;
      intArray0[3] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[1];
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) visualListModel0;
      objectArray0[1] = (Object) visualListModel0;
      objectArray0[2] = (Object) visualListModel0;
      objectArray0[3] = (Object) visualListModel0;
      objectArray0[4] = (Object) visualListModel0;
      objectArray0[5] = (Object) visualListModel0;
      objectArray0[6] = (Object) visualListModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(objectArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.removeListDataListener(jComboBox0);
      intArray0[0] = 1;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1315);
      intArray0[2] = 1;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveDownIndex(180);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      int int0 = (-228);
      intArray0[0] = (-228);
      visualListModel0.subList((-228), (-228));
      visualListModel0.moveUpIndexes(intArray0);
      intArray0[1] = (-3616);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.addAllElements((-228), (Collection<VisualPageListItem>) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2749, (-228), byteArray0, (-3616), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      visualListModel0.moveDownIndex((-1));
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.elementsChanged();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.subList(0, 1974);
      visualListModel0.addAllElements(1356, (Collection<VisualPageListItem>) null);
      visualListModel0.getSize();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[6];
      String string0 = "";
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ICC Profile Data
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.clearData();
      int int0 = (-3583);
      visualListModel0.moveDownIndexes(intArray0);
      String string0 = "";
      String string1 = "|JPl@Yx`kXi%@CL`q";
      int int1 = 9999;
      // Undeclared exception!
      try { 
        visualListModel0.subList(9999, 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(9999) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[9];
      visualListModel0.subList(1619, 1619);
      intArray0[0] = 1619;
      intArray0[1] = (-1523);
      intArray0[2] = (-559);
      intArray0[3] = 180;
      visualListModel0.removeElements((-1523), 1, true);
      intArray0[4] = 255;
      intArray0[5] = 0;
      intArray0[6] = (-1834);
      intArray0[7] = 527;
      int[] intArray1 = new int[1];
      intArray1[0] = (-1834);
      visualListModel0.removeElements(intArray1, false);
      intArray0[8] = 1;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1931);
      intArray0[1] = 0;
      intArray0[3] = 0;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.addAllElements(9, (Collection<VisualPageListItem>) vector0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndex((-1429));
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.prependAllElements(priorityQueue0);
      visualListModel0.prependAllElements(priorityQueue0);
      int[] intArray1 = new int[1];
      priorityQueue0.clear();
      int int0 = 484;
      intArray1[0] = 484;
      visualListModel0.rotateClockwiseElements(intArray1);
      int int1 = 1335;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-1429), "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[3];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.getValidElements();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.getSize();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6363914389377974
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[1];
      intArray0[0] = 184;
      visualListModel0.undeleteElements(intArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.moveUpIndex(184);
      visualListModel0.removeElements(979, 979, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 979;
      visualListModel0.reverseElements(intArray1);
      visualListModel0.addAllElements(collection0);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.addAllElements(1236, collection0);
      visualListModel0.getSize();
      visualListModel0.subList(1040, 3);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.removeAllElements();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.clearData();
      visualListModel0.moveUpIndex(1);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.moveDownIndex(12);
      Object object0 = visualListModel0.getElementAt(1);
      assertNull(object0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1931);
      intArray0[1] = 0;
      intArray0[3] = 0;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) vector0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndex((-1429));
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.prependAllElements(priorityQueue0);
      visualListModel0.prependAllElements(priorityQueue0);
      int[] intArray1 = new int[1];
      priorityQueue0.clear();
      int int0 = 484;
      intArray1[0] = 484;
      visualListModel0.rotateClockwiseElements(intArray1);
      int int1 = 1335;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-1429), "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7351264569629223
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.getElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements(intArray1, false);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(2338, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2338
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.moveDownIndex((-4262));
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-25));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -25
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.getValidElements();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel1.elementsChanged();
      VisualPageListItem[] visualPageListItemArray1 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray1.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[1];
      Object[] objectArray0 = new Object[7];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(objectArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.moveUpIndex((-1063));
      visualListModel0.removeElements((-1063), 0, true);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel1.addAllElements((Collection<VisualPageListItem>) treeSet0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveDownIndexes(intArray0);
      visualListModel0.addAllElements((-1063), (Collection<VisualPageListItem>) treeSet0);
      visualListModel1.getSize();
      int int0 = 3;
      // Undeclared exception!
      try { 
        visualListModel2.subList(30000, (-729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(30000) > toIndex(-729)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = (-2942);
      visualListModel0.moveUpIndex(0);
      intArray0[1] = 0;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.prependAllElements(vector0);
      intArray0[2] = 360;
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      visualListModel0.elementsChanged();
      vector0.add((VisualPageListItem) null);
      intArray1[1] = 360;
      intArray1[3] = 0;
      intArray1[4] = 360;
      visualListModel0.removeElements(360, (-405), false);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      visualListModel0.moveUpIndex((-1));
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8343719702816237
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualPageListItemArray0[0] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.elementsChanged();
      visualListModel0.getElements();
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      int[] intArray0 = new int[6];
      intArray0[0] = 4694;
      intArray0[1] = 1520;
      intArray0[2] = 1910;
      intArray0[3] = 114;
      visualListModel0.subList(4694, 1520, false);
      intArray0[4] = 92;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      intArray0[5] = (-737);
      visualListModel0.moveUpIndexes(intArray0);
      assertArrayEquals(new int[] {4694, 1520, 1910, 114, 92, (-737)}, intArray0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[4];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.prependAllElements(stack0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.elementsChanged();
      visualListModel0.removeElements((-23), 427, true);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.addElementAt((VisualPageListItem) null, (-528));
      visualListModel0.updateElementAt((-528), (VisualPageListItem) null);
      int[] intArray0 = new int[3];
      intArray0[0] = (-528);
      intArray0[1] = (-528);
      intArray0[2] = (-528);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      priorityQueue0.remove((Object) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (-528));
      visualListModel0.moveDownIndex(7);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray1 = new int[6];
      intArray1[0] = (-528);
      intArray1[1] = (-528);
      intArray1[2] = (-528);
      intArray1[3] = (-528);
      intArray1[4] = 1040;
      intArray1[5] = (-528);
      visualListModel1.undeleteElements(intArray1);
      visualListModel0.reverseElements(intArray1);
      visualListModel1.removeElements(1442, (-528), true);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1308);
      visualListModel0.subList((-1308), (-1308), true);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[0];
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(30000, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 30000
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.removeElement(visualListModel0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (-616));
      visualListModel0.moveDownIndex(180);
      visualListModel0.elementChanged((VisualPageListItem) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[3];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.getValidElements();
      visualListModel0.updateElementAt((-1045), (VisualPageListItem) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1045));
      visualListModel0.moveDownIndex((-1045));
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.removeElements(intArray0, true);
      assertEquals(3, intArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8891591637540215
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[8];
      intArray0[0] = 90;
      intArray0[1] = 3204;
      intArray0[2] = (-1854);
      intArray0[3] = 0;
      intArray0[4] = (-1429);
      intArray0[5] = 2684;
      intArray0[6] = 2410;
      intArray0[7] = 110;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = 110;
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 110
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8636799873410002
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getValidElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 2410;
      intArray1[1] = (-1429);
      intArray1[2] = 2684;
      intArray1[3] = 2410;
      intArray1[4] = (-358);
      intArray1[5] = 2410;
      intArray1[6] = 0;
      intArray1[7] = (-1429);
      visualListModel0.reverseElements(intArray1);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.addAllElements((-1286), (Collection<VisualPageListItem>) null);
      visualListModel1.getValidElements();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.791759469228055
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayList0);
      visualListModel1.getValidElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      int[] intArray0 = new int[6];
      int int0 = (-1);
      intArray0[0] = (-1);
      intArray0[1] = (-2644);
      intArray0[2] = (-2353);
      intArray0[3] = (-936);
      visualListModel0.addElement((VisualPageListItem) null);
      intArray0[4] = 1266;
      intArray0[5] = (-1);
      visualListModel1.rotateClockwiseElements(intArray0);
      vector0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      int[] intArray1 = new int[1];
      intArray1[0] = (-358);
      visualListModel0.moveUpIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getValidElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      int int0 = (-1);
      visualListModel0.moveUpIndex((-1));
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel1.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel1.prependAllElements(vector0);
      priorityQueue0.clear();
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1383330595080277
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[8];
      intArray0[0] = 90;
      intArray0[1] = 3204;
      intArray0[2] = (-1854);
      visualListModel0.moveDownIndex(0);
      int[] intArray1 = new int[9];
      intArray1[0] = (-1854);
      intArray1[1] = (-1854);
      intArray1[2] = 0;
      intArray1[3] = 3204;
      intArray1[4] = 0;
      intArray1[5] = (-1854);
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = (-1854);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.addAllElements(2684, (Collection<VisualPageListItem>) null);
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8343719702816237
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.ensureCapacity(2161);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      visualListModel0.getElements();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[8];
      intArray0[1] = 3204;
      intArray0[2] = (-1854);
      intArray0[3] = (-1854);
      intArray0[4] = (-1429);
      intArray0[5] = 2684;
      intArray0[6] = 2410;
      int int0 = 110;
      intArray0[7] = 110;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[1];
      visualListModel0.moveDownIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2450352741261774
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.getElements();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      assertEquals(1, visualListModel0.getSize());
      
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, true);
      int[] intArray1 = new int[6];
      intArray1[0] = 110;
      intArray1[1] = 110;
      intArray1[2] = 110;
      intArray1[3] = 614;
      intArray1[4] = 110;
      intArray1[5] = 110;
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray2 = new int[6];
      intArray2[0] = 110;
      intArray2[1] = 614;
      intArray2[2] = 110;
      intArray2[3] = 614;
      intArray2[4] = 801;
      intArray2[5] = 614;
      visualListModel0.moveUpIndexes(intArray2);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      visualListModel0.reverseElements(intArray0);
      intArray0[0] = 0;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) vector0);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }
}
