/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:50:47 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.compile.DeleteNode;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "2";
      SQLUtil.substituteMarkers("", "2", "");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String string1 = "*=qj)V:BEA _V.";
      String string2 = "m1(gMn$%5h";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m1(gMn$%5h");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("2");
      defaultDBTable1.getIndex("m1(gMn$%5h");
      // Undeclared exception!
      try { 
        defaultDBTable0.removeIndex((DBIndex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (double) 0);
      stringBuilder1.insert(0, ')');
      SQLUtil.addRequiredCondition("org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder1);
      assertEquals(")0.0 and org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder1.toString());
      
      boolean boolean0 = SQLUtil.isProcedureCall(";8IG,=\"?|^Z)d-yq");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "G7gPuO3GcOj(3tdt%?(";
      stringArray0[1] = "2Tf";
      stringArray0[2] = "TRIGGERNAME";
      stringArray0[3] = "";
      stringArray0[4] = "h*\u0007_4ScEt@?(3XUz";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("G7gPuO3GcOj(3tdt%?( = 'G7gPuO3GcOj(3tdt%?(' AND 2Tf = '2Tf' AND TRIGGERNAME = 'TRIGGERNAME' AND  = '' AND h*\u0007_4ScEt@?(3XUz = 'h*\u0007_4ScEt@?(3XUz'", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Character character0 = new Character('%');
      Character.isIdeographic((-1765));
      Character.isAlphabetic((-1765));
      Character.isIdeographic(3);
      char[] charArray0 = new char[4];
      Character.isIdeographic(0);
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = 'E';
      charArray0[3] = '%';
      Character.toChars(3, charArray0, 3);
      SQLUtil.substituteMarkers("8!^75PhW~", "8!^75PhW~", character0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")@M";
      SQLUtil.join(")@M", "C&Ha", stringArray0, ")@M", ")@M", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      int int0 = (-735);
      // Undeclared exception!
      try { 
        errorMessages0.getNCharacterStream((-735));
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNCharacterStream(I)Ljava/io/Reader; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.removeComments("5IX4|");
      SQLUtil.isQuery("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5IX4|";
      stringArray0[1] = "";
      stringArray0[2] = ",Q{nu";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      // Undeclared exception!
      try { 
        SQLUtil.join("PermissionsCache", "5IX4|", stringArray0, "", "", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1546193098639694
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("|/");
      SQLUtil.mutatesStructure("|/");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v|0Hfse}[,O!/T}s";
      stringArray0[1] = "v|0Hfse}[,O!/T}s";
      stringArray0[2] = "v|0Hfse}[,O!/T}s";
      stringArray0[3] = "v|0Hfse}[,O!/T}s";
      stringArray0[4] = "getCurrentSchemaName";
      stringArray0[5] = "v|0Hfse}[,O!/T}s";
      stringArray0[6] = "v|0Hfse}[,O!/T}s";
      stringArray0[7] = "v|0Hfse}[,O!/T}s";
      stringArray0[8] = "v|0Hfse}[,O!/T}s";
      String string0 = SQLUtil.leftJoin("v|0Hfse}[,O!/T}s", stringArray0, "v|0Hfse}[,O!/T}s", "v|0Hfse}[,O!/T}s", stringArray0);
      assertEquals("left join v|0Hfse}[,O!/T}s as v|0Hfse}[,O!/T}s on v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.getCurrentSchemaName = v|0Hfse}[,O!/T}s.getCurrentSchemaName and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9512595041439562
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure(" or ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " or ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      assertEquals(" as  on . or  = . or  and . = . and . = . and . = .", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O]:x=$#m?su", (DBTable) null, 0, "");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("O]:x=$#m?su  NULL", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "execute";
      String string0 = ">}vO[";
      SQLUtil.mutatesStructure("0@hf<");
      String string1 = "gmO(Q";
      Object object0 = new Object();
      SQLUtil.substituteMarkers("execute", "gmO(Q", object0);
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      boolean boolean0 = SQLUtil.isDDL("delete|/");
      assertFalse(boolean0);
      
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.toString();
      defaultDBColumn0.setOwner(compositeDBObject0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      boolean boolean0 = SQLUtil.isDML("k");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("#UM,1x2waU):2", true, "vKhtFH~[z<&g$W,", "exec");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK exec", string0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM k WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string2 = SQLUtil.innerJoin("select into?%1r9*1#d7n5n", stringArray0, "callor", "callor", stringArray0);
      assertEquals("callor as callor on select into?%1r9*1#d7n5n.null = callor.null and select into?%1r9*1#d7n5n.null = callor.null and select into?%1r9*1#d7n5n.null = callor.null and select into?%1r9*1#d7n5n.null = callor.null and select into?%1r9*1#d7n5n.null = callor.null and select into?%1r9*1#d7n5n.null = callor.null and select into?%1r9*1#d7n5n.null = callor.null", string2);
      
      String string3 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("k K NULL", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = null;
      String string1 = "create table";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create table");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("create table", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(90, "|ZLA[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 90
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("update");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, 15, "update");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.setDefaultValue("update");
      defaultDBColumn0.toString();
      defaultDBColumn0.setOwner(compositeDBObject0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[update : UPDATE]", vector0.toString());
      
      SQLUtil.isDML("update");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "execute";
      stringArray0[6] = ">}vO[";
      SQLUtil.innerJoin("execute", stringArray0, "execute", ">}vO[", stringArray0);
      SQLUtil.isQuery("execute as >}vO[ on execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.>}vO[ = >}vO[.>}vO[");
      SQLUtil.innerJoin("execute as >}vO[ on execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.>}vO[ = >}vO[.>}vO[", stringArray0, ">}vO[", "(u5*]2EDRnU", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DSD:");
      Locale locale0 = Locale.US;
      locale0.toLanguageTag();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "(u5*]2EDRnU", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      SQLUtil.normalize("execute as >}vO[ on execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.>}vO[ = >}vO[.>}vO[", true);
      SQLUtil.isProcedureCall("execute");
      Random.setNextRandom(42);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9559838465843622
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("|/");
      assertNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      DBCatalog dBCatalog0 = new DBCatalog("U!Q&S64Xg82");
      dBCatalog0.getSchema("/p?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable0.getIndex("update|/");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "drop materialized view";
      stringArray0[2] = "drop materialized view";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "drop materialized view";
      stringArray0[5] = "drop materialized view";
      stringArray0[6] = "drop materialized view";
      stringArray0[7] = "drop materialized view";
      stringArray0[8] = "drop materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized view", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("~^dv>j8%*\"");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBSchema dBSchema0 = new DBSchema("drop materialized view");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "create unique index");
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "execute";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("- ");
      SQLUtil.removeComments(" and ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, (-562), "execute");
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXECUTE", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8065071652616695
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)47;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = "truncatek";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "truncatek");
      SQLUtil.mutatesDataOrStructure("truncatek");
      Random.setNextRandom(262);
      String string1 = "E(z0{mkJXke1g";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("E(z0{mkJXke1g");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("drop index|/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("U!Q&S64Xg82");
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBCatalog0.getSchema("/p?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">HNKt:&;>5_7`L9Cb3", (DBSchema) null);
      defaultDBTable0.getIndex(".");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("U!Q&S64Xg82", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-900), ">HNKt:&;>5_7`L9Cb3");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop indexu!q&s64xg82", defaultDBTable0, dBDataType0, integer0, integer1);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop indexu!q&s64xg82 >HNKT:&;>5_7`L9CB3(0,1) NULL", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("U!Q&S64Xg82");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U!Q&S64Xg82");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "U!Q&S64Xg82", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("U!Q&S64Xg82", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "JDXnNpQ+8@>", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "0H`U", true, stringArray0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint1, nameSpec0);
      DBSchema dBSchema0 = new DBSchema("CONSTRAINT 0H`U UNIQUE ()");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("CONSTRAINT 0H`U UNIQUE ()", dBSchema0);
      defaultDBTable1.getCatalog();
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint1, nameSpec1);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8200759753606213
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[3] = "execute";
      String string0 = ">}vO[";
      SQLUtil.mutatesStructure("execute");
      String string1 = "gmO(Q";
      Object object0 = new Object();
      SQLUtil.renderValue("execute");
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("execut");
      SQLUtil.isDDL("drop index");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'B';
      charArray0[2] = 'u';
      // Undeclared exception!
      try { 
        pipedWriter0.write(charArray0, 2486, 2486);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.007556307437838
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("U!Q&S64Xg82");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U!Q&S64Xg82");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "U!Q&S64Xg82", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("U!Q&S64Xg82", false, dBUniqueConstraint0);
      dBUniqueIndex0.setDoc(":9dp}wY:/#]#");
      dBUniqueIndex0.getTable();
      boolean boolean0 = SQLUtil.isDDL("/W&W<Hkf&R nO7_'V");
      assertFalse(boolean0);
      
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedReader0.connect(pipedWriter0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer1);
      assertEquals("- 0", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.677908725644198
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("U!Q&S64Xg82");
      String string0 = SQLUtil.normalize("^Dw/VYdWj", false);
      assertEquals("^ Dw / VYdWj", string0);
      
      SQLUtil.normalize("U!Q&S64Xg82", false);
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
      
      boolean boolean1 = new Boolean(false);
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.normalize("create materalized viewu!q&s64xg82", false);
      assertEquals("create materalized viewu ! q & s64xg82", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("orgapache.debyiapi.sql.dictionary.ViewDescriptor", compositeDBObject0);
      tableContainer0.getTable("orgapache.debyiapi.sql.dictionary.ViewDescriptor");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("orgapache.debyiapi.sql.dictionary.ViewDescriptor", (DBTable) null, (-1619), "NNI0tMn'Ki");
      SQLUtil.removeComments("orgapache.debyiapi.sql.dictionary.ViewDescriptor");
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column orgapache.debyiapi.sql.dictionary.ViewDescriptor", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("org.hsqldb.jdbc.jdbcCallableStatement");
      Boolean boolean0 = Boolean.FALSE;
      DBCatalog dBCatalog0 = new DBCatalog("lsVoE^^=$df");
      Boolean boolean1 = new Boolean(true);
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      SQLUtil.normalize("truncate! yq } f3 ; ^ 3 / ", true);
      SQLUtil.addOptionalCondition("truncate ! yq } f3 ; ^ 3 / ", stringBuilder0);
      assertEquals("truncate ! yq } f3 ; ^ 3 / ", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DSD:");
      Locale locale0 = Locale.US;
      String string0 = "kzzxDullOx)8K|Xt";
      StringReader stringReader0 = new StringReader("kzzxDullOx)8K|Xt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, 6, ")@G(skO'q*?\"xD_wm;s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: )@G(skO'q*?\"xD_wm;s
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8599672810355049
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("orgapache.debyiapi.sql.dictionary.ViewDescriptor", compositeDBObject0);
      tableContainer0.getTable("orgapache.debyiapi.sql.dictionary.ViewDescriptor");
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.normalize(";<4Z)Xo=~:chiaW1u.", false);
      assertEquals("; < 4Z) Xo = ~ : chiaW1u.", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6722962280908585
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("U!Q&S64Xg82");
      String string0 = SQLUtil.normalize("^Dw/VYdWj", false);
      assertEquals("^ Dw / VYdWj", string0);
      
      boolean boolean0 = SQLUtil.isDML("^[d([7't-T");
      Boolean boolean1 = new Boolean(false);
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean2 = SQLUtil.isQuery("^ Dw / VYdWj");
      assertTrue(boolean2 == boolean0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.normalize("A7@c>YElLcr~'", false);
      assertEquals("A7 @ c > YEl  Lcr ~ ''", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("drop materialized viewparameter index");
      Boolean boolean0 = Boolean.FALSE;
      DBCatalog dBCatalog0 = new DBCatalog("execparameter index");
      dBCatalog0.getSchemas();
      dBCatalog0.getSchema("lsVoE^^=$df");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("executeparameter index", (DBSchema) null);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("drop materialized viewparameter index");
      DBIndex dBIndex0 = defaultDBTable0.getIndex("execparameter index");
      assertNull(dBIndex0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("updateparameter index");
      tableContainer0.getTable(" DEFAULT ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (-1619), "updateparameter index");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("orgapache.deb");
      assertNull(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("F]+%Gz1'iH");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " ", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("orgapache.deb", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(5127, "orgapache.debyiapi.sql.d");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.NotNode", dBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("LCSg3!28M(y~", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("org.apache.derby.impl.sql.compile.NotNode, LCSg3!28M(y~", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLUtil.normalize("D,^>2>}U^Wf![", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"jM~5l", defaultDBTable0, (-93175913), "{1$QRzlj");
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4241299173467734
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("5");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DBDataType dBDataType0 = DBDataType.getInstance((-918), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.divideUnsigned(3736, (-1262));
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = new Integer(5);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8Es6({t`7!", defaultDBTable0, dBDataType0, integer3, integer4);
      Integer.getInteger("a$L63(`R/fgHj5");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("execute", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDDL("8Es6({t`7!");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "execute");
      StringBuilder stringBuilder1 = stringBuilder0.append("%zlzv&r");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder2);
      assertEquals("execute%zlzv&rEXECUTE(0)", stringBuilder0.toString());
      assertEquals("execute%zlzv&rEXECUTE(0)", stringBuilder1.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("orgapache.debyiapi.sql.dictionary.ViewDescriptor", compositeDBObject0);
      tableContainer0.getTable("orgapache.debyiapi.sql.dictionary.ViewDescriptor");
      SQLUtil.normalize(",XdK*8CwDG", false);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 0);
      stringBuilder1.insert(0, ')');
      SQLUtil.addRequiredCondition("org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("43Y22.U");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("43Y22.U", defaultDBTable0, 794, "cre;ate table ");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "43Y22.U", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "I[oBzIo$I+)h<y", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("W8&g:K-?-C$ J", true);
      assertEquals("W8 & g : K - ? - C $ J", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 0);
      stringBuilder1.insert(0, ')');
      SQLUtil.addRequiredCondition("org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder1);
      assertEquals(")0 and org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder1.toString());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("43Y22.U");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("43Y22.U", defaultDBTable0, 794, "cre;ate table ");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "43Y22.U", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.US;
      mockPrintWriter0.printf(locale0, "I[oBzIo$I+)h<y", (Object[]) null);
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("43Y22.U.43Y22.U", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("");
      defaultDBTable0.getIndex("");
      TableContainer tableContainer0 = new TableContainer(" on ");
      tableContainer0.getTable(" on ");
      SQLUtil.isDML("");
      SQLUtil.removeComments("");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.addRequiredCondition("W%p0Ik90zmC", stringBuilder0);
      assertEquals("W%p0Ik90zmC", stringBuilder0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DSD:");
      Locale locale0 = Locale.US;
      DBDataType dBDataType0 = DBDataType.getInstance((-1998273036), "(u5*]2EDRnU");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-1998273036));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d+o", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDDL("d+o (U5*]2EDRNU(0,-1998273036) NULL");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DSD:");
      StringBuilder stringBuilder1 = stringBuilder0.append("alter tabledelete|/");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuilder stringBuilder2 = stringBuilder1.append(2147.6F);
      stringBuilder2.append(stringBuffer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter tabledelete|/", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5763820666248933
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("lZfKj+G$oa#", false);
      SQLUtil.normalize("lZfKj + G $ oa #", false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("lZfKj+G$oa#");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create materialized view");
      SQLUtil.isDML("Em@D[S;&$hpg");
      Boolean boolean0 = new Boolean(false);
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.normalize("$HZnF\"HH'F4`>hqj`", false);
      System.setCurrentTimeMillis((-4));
      Random.setNextRandom((-1118));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9959217847159894
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("k");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable1, 0, "k");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "k", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(794);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "*U}zoT1?In/=", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, printWriter0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT k CONSTRAINT k ", stringBuilder0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("5");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-918), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.divideUnsigned(3736, 3736);
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8Es6({t`7!", defaultDBTable0, dBDataType0, integer3, integer0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      Integer.getInteger("a$L63(`R/fgHj5");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("execute", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      Locale.getISOLanguages();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("8Es6({t`7!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 8Es6({t`7!
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DSD:");
      Locale locale0 = Locale.CANADA;
      String[] stringArray0 = Locale.getISOLanguages();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.vti.IQualifyable", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT org.apache.derby.vti.IQualifyable ", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("k", dBSchema0);
      dBTrigger0.setColumnName("k");
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.toString();
      defaultDBColumn0.setOwner(defaultDBTable0);
      defaultDBColumn0.setOwner(compositeDBObject0);
      vector0.add((DBColumn) defaultDBColumn0);
      assertEquals("[k : K]", vector0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "k : K";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.normalize(",XdK*8%wsG", true);
      SQLUtil.removeComments(".71zIZAn,(DJ X-");
      String string0 = SQLUtil.normalize(".71zIZAn,(DJ X-", true);
      assertEquals(".71zIZAn, (DJ  X -", string0);
      
      String string1 = SQLUtil.normalize("&qjDmq!?X\"iy1", true);
      assertEquals("& qjDmq  ! ? X \"iy1\"", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer(" on ");
      tableContainer0.getTable(" on ");
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 3040, ";:RI'n00/P4buC_UR");
      defaultDBColumn0.setDefaultValue("table null");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" ;:RI'N00/P4BUC_UR DEFAULT table null NULL", string1);
  }
}
