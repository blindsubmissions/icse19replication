/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:50:52 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(32767L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(3477L);
      range_Builder0.expandEnd(3477L);
      Range range0 = Range.ofLength(32767L);
      range0.iterator();
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("aq]d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse aq]d into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.550853610621009
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.split(342L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(2, list1.size());
      
      List<Range> list2 = range1.complement(range0);
      assertFalse(list2.contains(range0));
      
      boolean boolean0 = range0.startsBefore(range1);
      range0.isEmpty();
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.of(0L, 3499L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.36274100073709
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(255L, 255L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 307L;
      Range range0 = Range.of(307L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.ofLength((-778L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = (-3516L);
      Range range0 = Range.of((-3516L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        linkedList0.addAll((Collection<? extends Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.713572066704311
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      Long long0 = new Long(0L);
      boolean boolean0 = range2.equals(long0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder2 = range_Builder0.expandEnd(0L);
      range_Builder2.expandEnd(0L);
      range0.spliterator();
      range_Builder2.expandBegin(1543L);
      Range.Builder range_Builder3 = range_Builder2.expandBegin(1155L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range.ofLength(1676L);
      range0.endsBefore(range1);
      assertFalse(range1.isEmpty());
      
      Range range3 = range_Builder3.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.205843029051155
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of((-955L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-955L), (-955L));
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("~uw{~M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.~uw{~M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.144010601267822
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 3016L;
      Range range0 = Range.of((-32768L), 3016L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.44690641025925
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-6158L), (-388L));
      range0.iterator();
      range1.isSubRangeOf(range0);
      range0.getLength();
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("yeKGbBd*Zk,{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse yeKGbBd*Zk,{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      range0.toString(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem0, (-1857L), 2147483647L);
      Long long1 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem2);
      range3.equals(long1);
      range1.isSubRangeOf(range0);
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 0 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 0 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2323056870626585
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(3044L, long0);
      
      Range range1 = Range.of(3044L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(3044L, 65535L);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5172991505538103
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of((-311L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.462175611736218
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 1097L);
      Range.Builder range_Builder1 = new Range.Builder(1097L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-826L), 1097L);
      Range range1 = Range.of(range_CoordinateSystem0, (-826L), 1097L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      range0.split(1097L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-826L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = (-32768L);
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      long long1 = (-778L);
      range_Builder0.contractBegin((-778L));
      range_Builder0.shift((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = ".8R1J&3ac|";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(".8R1J&3ac|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem..8R1J&3ac|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9319232930107053
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getLength();
      Range range1 = Range.of(0L);
      range0.equals(range1);
      range0.getLength();
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4752722019489437
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.split(342L);
      List<Range> list1 = new LinkedList<Range>();
      List<Range> list2 = range1.complement(range0);
      assertTrue(list2.equals((Object)list0));
      
      range0.startsBefore(range1);
      boolean boolean0 = range0.endsBefore(range1);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(0L, 3499L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range2.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 3500 ]/RB", string0);
      
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1 == boolean0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6089129574485446
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L);
      range1.intersects(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range0.toString(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem0, (-1857L), 2147483647L);
      Long long1 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range3.equals(long1);
      range1.isSubRangeOf(range0);
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 0 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 0 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5006662473378385
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      Long long0 = new Long(0L);
      range2.equals(long0);
      range_Builder0.expandEnd(0L);
      range0.getEnd();
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem.values();
      range1.complement(range0);
      List<Range> list1 = range0.split(2147483646L);
      assertTrue(list1.equals((Object)list0));
      
      Range range3 = Range.of(32767L);
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      range2.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      String string0 = range3.toString();
      assertEquals("[ 32767 .. 32767 ]/0B", string0);
      
      range2.isSubRangeOf(range0);
      assertSame(range2, range1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string1 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 1 ]/0B", string1);
      
      long long1 = range0.getEnd();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6679015525175416
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.split(342L);
      range0.complementFrom(list0);
      range1.complement(range0);
      range1.endsBefore(range0);
      boolean boolean0 = range0.startsBefore(range1);
      range0.isEmpty();
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.of((-22774L), (-22774L));
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.460813707881683
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      range0.getLength();
      Range range1 = Range.of(0L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range1);
      linkedList0.addAll((Collection<? extends Range>) list0);
      Range.of(0L, 0L);
      Long long1 = new Long(0L);
      range0.equals((Object) null);
      long long2 = (-1L);
      Range range2 = Range.of((-1184L), (-1L));
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0447063524141162
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-70L), 391L);
      range0.iterator();
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 426L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.7841896339182655
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range0 = Range.of(32767L, 32767L);
      long long0 = new Long(32767L);
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(32767L);
      range0.toString(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range1.toString();
      Range.of(32767L, 32767L);
      Range.of(32767L);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 32767L, 1344L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3400223572050023
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.split(342L);
      range0.complementFrom(list0);
      range1.complement(range0);
      long long1 = 2039L;
      Range range2 = Range.of(2039L);
      range0.intersects(range1);
      range1.startsBefore(range2);
      String string0 = "3H#nUdo<^b::da&";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("3H#nUdo<^b::da&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.3H#nUdo<^b::da&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      Long long0 = new Long(0L);
      range1.equals(long0);
      Range.Builder range_Builder3 = range_Builder0.expandEnd(0L);
      range_Builder3.expandEnd(0L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      boolean boolean0 = range0.equals(range_Builder4);
      assertFalse(boolean0);
      assertSame(range0, range1);
      
      range_Builder4.copy();
      range_Builder2.expandBegin(0L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.ofLength(266L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4450985573993775
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder1.build();
      Long long0 = new Long(0L);
      boolean boolean0 = range1.equals(range2);
      assertTrue(boolean0);
      
      Range.Builder range_Builder3 = range_Builder0.expandEnd(9223372036854775807L);
      Range.Builder range_Builder4 = range_Builder3.expandEnd(1543L);
      range2.spliterator();
      range_Builder4.expandBegin((-572L));
      range_Builder0.expandBegin((-4294965887L));
      Range.Builder range_Builder5 = new Range.Builder(range0);
      range_Builder5.shift(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
      
      Range range3 = Range.ofLength(9223372036854775807L);
      range2.endsBefore(range3);
      Range range4 = range_Builder2.build();
      assertFalse(range4.equals((Object)range0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.5734504974788237
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range1 = range_Builder3.build();
      Range range2 = range_Builder2.build();
      Long long0 = new Long(0L);
      range0.equals(range_Builder1);
      Range.Builder range_Builder4 = range_Builder1.expandEnd((-2686L));
      Range.Builder range_Builder5 = range_Builder4.expandEnd(255L);
      range1.spliterator();
      Range.Builder range_Builder6 = range_Builder3.expandBegin(1543L);
      Range.Builder range_Builder7 = range_Builder5.expandBegin(255L);
      range_Builder6.shift(5454L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range3 = Range.ofLength(1155L);
      range3.endsBefore(range2);
      // Undeclared exception!
      try { 
        range_Builder7.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4530423560316788
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range0 = Range.of(32779L, 32779L);
      Long long0 = new Long(32779L);
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(32779L);
      range0.toString(range_CoordinateSystem0);
      List<Range> list0 = new LinkedList<Range>();
      range0.complementFrom(list0);
      range1.toString();
      Range.parseRange("[ 32779 .. 32780 ]/SB");
      Range.of(32779L);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 1344L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (long) long0, 1344L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-70L), 391L);
      range0.iterator();
      Range.of(range_CoordinateSystem0, 391L, 391L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-70L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9761388013384344
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range.of((-9223372036854775808L));
      long long1 = 127L;
      long long2 = (-2370L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2370L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6180531569146637
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range0 = Range.of(32767L, 32767L);
      Long long0 = new Long(32767L);
      Range range1 = Range.ofLength(32767L);
      range0.toString(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range1.toString();
      Range range2 = Range.of(32767L, (long) long0);
      Range range3 = Range.parseRange("[ 0 .. 32766 ]/0B", range_CoordinateSystem0);
      range1.complement(range3);
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8413121967140618
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of((-3517L), 4294967295L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range1.complement(range0);
      range1.endsBefore(range0);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("qptZMx", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse qptZMx into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.098792309646413
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long1 = new Long(0L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-1892L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.590135422941325
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 342L, 9223372036854775059L);
      Range range2 = range_Builder0.build();
      Range range3 = range_Builder0.build();
      Long long0 = new Long((-128L));
      range0.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(778L);
      range_Builder0.expandEnd(0L);
      Range range4 = Range.of((-957L));
      range4.spliterator();
      range_Builder1.expandBegin(9223372036854775059L);
      range_Builder0.expandBegin((-32768L));
      range_Builder1.shift(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range.ofLength(678L);
      range2.endsBefore(range4);
      Range range5 = range_Builder0.build();
      assertFalse(range5.equals((Object)range3));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.194006062681857
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Long long0 = new Long(3044L);
      range0.equals(long0);
      Range range1 = Range.of(1473L, 3044L);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 2584L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5798554591419465
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range0 = Range.of(32767L, 32767L);
      Long long0 = new Long(32767L);
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(32767L);
      range0.toString(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Long long1 = new Long(32767L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(2457L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2457L);
      long long2 = 1543L;
      Range.Builder range_Builder2 = range_Builder1.expandEnd(11L);
      range0.spliterator();
      long long3 = (-1966L);
      range_Builder2.expandBegin((-1966L));
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2457L, (-572L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.478218378615145
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of((-32768L), 3022L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3022L, 4294967295L);
      range1.spliterator();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.of(3022L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 3022L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.equals("5g@3x");
      Range range1 = Range.ofLength(1504L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      range1.isSubRangeOf(range0);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 0 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 0 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.4718979174106694
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-70L), 391L);
      range0.iterator();
      Range range1 = Range.of(range_CoordinateSystem0, 391L, 391L);
      Range range2 = Range.of(range_CoordinateSystem0, (-1476L), (-70L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(392L, long0);
      
      Range.of(392L);
      Range range3 = range1.intersection(range2);
      assertNotSame(range1, range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1427753621937113
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Range.of((-22778L));
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(9223372036854775807L);
      range0.equals(long2);
      long long3 = 1495L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
