/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:45:08 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "Fi.J.Eog~\"Fez%";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Fi.J.Eog~\"Fez%", "Fi.J.Eog~\"Fez%", (VersionNumber) null);
      String string1 = "update";
      defaultDatabase0.getTable("update", false);
      String string2 = "org.apache.derby.impl.store.access.btree.OpenBTree";
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "org.apache.derby.impl.store.access.btree.OpenBTree", false, "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("alter table");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      String[] stringArray0 = new String[6];
      stringArray0[0] = " NULL";
      stringArray0[1] = "XMLCDATA";
      stringArray0[2] = " NULL";
      stringArray0[3] = "alter table";
      stringArray0[4] = "alter table";
      stringArray0[5] = "alter table";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" NULL", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NULL\" ", stringBuilder0.toString());
      
      String string0 = SQLUtil.leftJoin("<=>", stringArray0, "XMLCDATA", "alter table", stringArray0);
      assertEquals("left join XMLCDATA as alter table on <=>. NULL = alter table. NULL and <=>.XMLCDATA = alter table.XMLCDATA and <=>. NULL = alter table. NULL and <=>.alter table = alter table.alter table and <=>.alter table = alter table.alter table and <=>.alter table = alter table.alter table", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " WHERE ";
      stringArray0[1] = "";
      String string0 = SQLUtil.innerJoin(" WHERE ", stringArray0, "", "", stringArray0);
      assertEquals(" as  on  WHERE . WHERE  = . WHERE  and  WHERE . = .", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Character character0 = new Character('q');
      Character.compare('W', 'q');
      SQLUtil.substituteMarkers("BLOB", "BLOB", character0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "'q'";
      stringArray0[2] = "'q'";
      stringArray0[3] = "'q'";
      stringArray0[4] = "BLOB";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "i1x\"6^sp";
      SQLUtil.mutatesStructure("i1x\"6^sp");
      SQLUtil.parseColumnTypeAndSize("i1x\"6^sp");
      SQLUtil.isDDL("");
      SQLUtil.renderValue("");
      int int0 = 1480;
      StringBuilder stringBuilder0 = new StringBuilder(1480);
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'p';
      charArray0[2] = ')';
      charArray0[3] = '1';
      charArray0[4] = 'A';
      charArray0[5] = '4';
      charArray0[6] = ';';
      charArray0[7] = '0';
      charArray0[8] = '5';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1480, "''");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1480
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "wQ6I+cN{zl#0R.v:";
      SQLUtil.isQuery("wQ6I+cN{zl#0R.v:");
      SQLUtil.removeComments("wQ6I+cN{zl#0R.v:");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.isProcedureCall("AGGREGATION");
      SQLUtil.isDML("AGGREGATION");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AGGREGATION";
      stringArray0[1] = "AGGREGATION";
      stringArray0[2] = "AGGREGATION";
      String string0 = "3Ry:hDOZBr";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "3Ry:hDOZBr";
      stringArray1[1] = "Q+*i.I@BC|o-E(-T";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "0W1#[f5.'yz/MItu1";
      stringArray1[6] = "AGGREGATION";
      stringArray1[7] = "3Ry:hDOZBr";
      stringArray1[8] = "3Ry:hDOZBr";
      SQLUtil.innerJoin("0W1#[f5.'yz/MItu1", stringArray0, "3Ry:hDOZBr", "", stringArray1);
      SQLUtil.renderColumnListWithTableName("0W1#[f5.'yz/MItu1", stringArray1);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      String string1 = ":Ai8]M_?&\\%7";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = "further problems destroying connection: ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "further problems destroying connection: ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("3Ry:hDOZBr as  on 0W1#[f5.'yz/MItu1.AGGREGATION = .3Ry:hDOZBr and 0W1#[f5.'yz/MItu1.AGGREGATION = .Q+*i.I@BC|o-E(-T and 0W1#[f5.'yz/MItu1.AGGREGATION = .", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("4>HIQz+c,7<.7Rb ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.normalize("y8&1x6:_i|=G|3>+", false);
      SQLUtil.mutatesStructure("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?(xm`O^wG,&lH";
      stringArray0[1] = "y8 & 1x6 : _i | = G | 3 > +";
      stringArray0[2] = "y8 & 1x6 : _i | = G | 3 > +";
      SQLUtil.renderColumnListWithTableName("?(xm`O^wG,&lH", stringArray0);
      SQLUtil.isDML("");
      SQLUtil.mutatesStructure("jo\"</a$ U-%!5Lp@");
      DBSchema dBSchema0 = new DBSchema("*=@H-");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?3Ce", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "into";
      stringArray0[1] = "org.postgresql.jdbc4.Jdbc4Blob";
      stringArray0[2] = "alter table";
      stringArray0[3] = "";
      stringArray0[4] = "H";
      stringArray0[5] = "`e.q0p_>Kw42\"";
      stringArray0[6] = "";
      stringArray0[7] = "k1{-;L$";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE into = 'into' AND org.postgresql.jdbc4.Jdbc4Blob = 'org.postgresql.jdbc4.Jdbc4Blob' AND alter table = 'alter table' AND  = '' AND H = 'H' AND `e.q0p_>Kw42\" = '`e.q0p_>Kw42\"' AND  = '' AND k1{-;L$ = 'k1{-;L$'", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      stringArray0[2] = "7W'1X[2r\\']5";
      stringArray0[3] = "7W'1X[2r\\']5";
      stringArray0[4] = "7W'1X[2r\\']5";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("inner", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      String string0 = SQLUtil.leftJoin(";f_>=\";)O{Pt4", stringArray0, "7W'1X[2r\\']5", "crGYeate table ", stringArray0);
      assertEquals("left join 7W'1X[2r\\']5 as crGYeate table  on ;f_>=\";)O{Pt4.7W'1X[2r\\']5 = crGYeate table .7W'1X[2r\\']5 and ;f_>=\";)O{Pt4.7W'1X[2r\\']5 = crGYeate table .7W'1X[2r\\']5 and ;f_>=\";)O{Pt4.7W'1X[2r\\']5 = crGYeate table .7W'1X[2r\\']5 and ;f_>=\";)O{Pt4.7W'1X[2r\\']5 = crGYeate table .7W'1X[2r\\']5 and ;f_>=\";)O{Pt4.7W'1X[2r\\']5 = crGYeate table .7W'1X[2r\\']5 and ;f_>=\";)O{Pt4.null = crGYeate table .null and ;f_>=\";)O{Pt4.null = crGYeate table .null and ;f_>=\";)O{Pt4.null = crGYeate table .null", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "1st column", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint1.setDoc("");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint1);
      assertEquals("CONSTRAINT \"1st column\" ", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("null.1st column", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("VLN#kh}WP", false, dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint0.setDoc("VLN#kh}WP");
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.ownerDotComponent(dBUniqueConstraint1);
      StringBuilder stringBuilder0 = new StringBuilder("c/+yznJ*._.N?qO<&@");
      int int0 = (-575);
      StringBuilder stringBuilder1 = stringBuilder0.append((-575));
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-575), (CharSequence) "java.lang.Object@50a2f361");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -575
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.join("fH8Q`r)41u[j]RXR-;<", "fH8Q`r)41u[j]RXR-;<", stringArray0, "", "fH8Q`r)41u[j]RXR-;<", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("/;");
      SQLUtil.addRequiredCondition("fH8Q`r)41u[j]RXR-;< join  as fH8Q`r)41u[j]RXR-;< on ", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("/;");
      SQLUtil.renderColumnListWithTableName("Bit set cannot shrink from ", stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedString(6);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Px(L|xa9.?FT", defaultDBTable1, (DBDataType) null, (Integer) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9404479886553264
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("alter table");
      SQLUtil.removeComments("call,");
      SQLUtil.normalize("u2x+kb/+C)C", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter table";
      stringArray0[1] = "u2x + kb / + C) C";
      stringArray0[2] = "";
      stringArray0[3] = "call,";
      stringArray0[4] = "alter table";
      stringArray0[5] = "alter table";
      stringArray0[6] = "create table ";
      stringArray0[7] = "call,";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al3{{~O|}.e\"#Ab");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Al3{{~O|}.e\"#Ab", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.leftJoin("XMLCDATA", stringArray0, "alter materialized view,", "wDl!", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.join("fH8Q`r)41u[j]RXR-;<", "fH8Q`r)41u[j]RXR-;<", stringArray0, "", "fH8Q`r)41u[j]RXR-;<", stringArray0);
      String string0 = "drop table";
      String string1 = "/;";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("fH8Q`r)41u[j]RXR-;< join  as fH8Q`r)41u[j]RXR-;< on ", stringBuilder0);
      boolean boolean0 = false;
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      StringBuilder stringBuilder3 = new StringBuilder("/;");
      // Undeclared exception!
      try { 
        stringBuilder2.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Nb?~R[b;_Z(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Nb?~R[b;_Z(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al3{{~O|}.e\"#Ab");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Al3{{~O|}.e\"#Ab", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8~[v%J5t&*'2-jh{^@J");
      String string0 = "drop materialized viewtruncate";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop materialized viewtruncate", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Al3{{~O|}.e\"#Ab", false, dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint1.setDoc((String) null);
      SQLUtil.constraintName(dBUniqueConstraint0);
      CompositeDBObject<?> compositeDBObject0 = dBForeignKeyConstraint0.getOwner();
      SQLUtil.ownerDotComponent(compositeDBObject0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("2`TmzW*NqjZT!W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "1st column", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint1.setDoc("");
      dBUniqueConstraint0.setName("alter index");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"alter index\" ", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("null.alter index", string1);
      
      String string2 = SQLUtil.typeAndName(dBUniqueConstraint1);
      assertEquals("unique constraint alter index", string2);
      assertNotNull(string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-27);
      SQLUtil.removeComments("llD#");
      SQLUtil.normalize("yF\"No?", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "llD#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("llD#");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file1);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5660857389596289
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("AGGREGATION");
      SQLUtil.removeComments("AGGREGATION");
      SQLUtil.normalize("java.lang.Float", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m{!NB#RJVv^";
      stringArray0[1] = "java.lang.Float";
      stringArray0[2] = "call,";
      stringArray0[3] = "call,";
      stringArray0[4] = "java.lang.Float";
      stringArray0[0] = "java.lang.Float";
      stringArray0[6] = "u2x+kb/+C)C";
      stringArray0[7] = "AGGREGATION";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "AGGREGATION", true, stringArray0);
      assertEquals("AGGREGATION", dBUniqueConstraint0.getName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.64622455382987
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("alter table");
      SQLUtil.removeComments("call,");
      SQLUtil.normalize("call,", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter table";
      stringArray0[2] = "";
      stringArray0[3] = "call,";
      stringArray0[4] = "alter table";
      stringArray0[5] = "alter table";
      stringArray0[6] = "create table ";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "call,");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter materialized viewtruncate");
      StringBuilder stringBuilder1 = stringBuilder0.insert(5, 565.5728F);
      stringBuilder1.reverse();
      stringBuilder1.append((CharSequence) "alter table");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "m{!NB#RJVv^", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBUniqueConstraint0.toString();
      StringBuilder stringBuilder2 = stringBuilder0.insert(5, 565.5728F);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder2, nameSpec0);
      assertEquals("8275.565.5728565,llacalter tableCONSTRAINT m{!NB#RJVv^ ", stringBuilder0.toString());
      assertEquals("8275.565.5728565,llacalter tableCONSTRAINT m{!NB#RJVv^ ", stringBuilder2.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2722755014019393
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("alter table");
      SQLUtil.removeComments("call,");
      SQLUtil.normalize("u2x+kb/+C)C", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter table";
      stringArray0[2] = "";
      stringArray0[3] = "call,";
      stringArray0[4] = "alter table";
      stringArray0[5] = "alter table";
      stringArray0[6] = "create table ";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "call,");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter materialized viewtruncate");
      StringBuilder stringBuilder1 = stringBuilder0.insert(5, 565.5728F);
      stringBuilder1.append((CharSequence) "alter table");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "m{!NB#RJVv^", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = stringBuilder0.insert(5, 565.5728F);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder2, nameSpec0);
      assertEquals("call,565.5728565.5728alter tableCONSTRAINT m{!NB#RJVv^ ", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT m{!NB#RJVv^ UNIQUE (alter table, , , call,, alter table, alter table, create table , )", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-31);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.typeAndName((DBObject) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop table";
      stringArray0[1] = "updatef9";
      stringArray0[2] = "drop table";
      stringArray0[3] = "drop table";
      stringArray0[4] = "updatef9";
      stringArray0[5] = "drop table";
      String string0 = SQLUtil.join("updatef9", "drop table", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("updatef9 join null as null on drop table.drop table = null.drop table and drop table.updatef9 = null.updatef9 and drop table.drop table = null.drop table and drop table.drop table = null.drop table and drop table.updatef9 = null.updatef9 and drop table.drop table = null.drop table", string0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 63);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("`$*-eg9&zZ7T`Z");
      SQLUtil.removeComments("`$*-eg9&zZ7T`Z");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)97;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.normalize("`$*-eg9&zZ7T`Z", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      defaultDBTable0.getComponents();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T-^7rnZ~T@B^@QBDB";
      stringArray0[1] = "01A&t**pq{jp";
      stringArray0[2] = "`$*-eg9&zZ7T`Z";
      stringArray0[3] = "1-wk8$G^";
      stringArray0[4] = "`$*-eg9&zZ7T`Z";
      stringArray0[5] = "1m#k9ZqSO#\"gw::";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("1-wk8$G^", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertEquals(256, charArrayWriter0.size());
      assertEquals("create table null (\n)ALTER TABLE null ADD \n\tFOREIGN KEY (T-^7rnZ~T@B^@QBDB, 01A&t**pq{jp, `$*-eg9&zZ7T`Z, 1-wk8$G^, `$*-eg9&zZ7T`Z, 1m#k9ZqSO#\"gw::) REFERENCES null(T-^7rnZ~T@B^@QBDB, 01A&t**pq{jp, `$*-eg9&zZ7T`Z, 1-wk8$G^, `$*-eg9&zZ7T`Z, 1m#k9ZqSO#\"gw::)", charArrayWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9328065726143313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("K}NLki(#a*5ou0P++YT");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "K}NLki(#a*5ou0P++YT";
      stringArray0[1] = "calltruncate";
      stringArray0[2] = "";
      stringArray0[3] = "drop indextruncate";
      SQLUtil.join("K}NLki(#a*5ou0P++YT", "calltruncate", stringArray0, "", (String) null, stringArray0);
      String string0 = ";h>(F*tR F%Q$%T/*";
      SQLUtil.join("drop indextruncate", "drop index", stringArray0, "M", ";h>(F*tR F%Q$%T/*", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(180);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 180, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-31);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.typeAndName((DBObject) null);
      String string0 = "updatef9";
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SQLUtil.join((String) null, (String) null, stringArray0, "f\"TA:{)Sj-|B", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((byte)92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.isDML("fLhX~p$W@>>_");
      String string0 = "p='w'm8";
      StringBuilder stringBuilder0 = new StringBuilder(1628);
      SQLUtil.addOptionalCondition("p='w'm8", stringBuilder0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable("p='w'm8");
      DBDataType dBDataType0 = DBDataType.getInstance(1628, "p='w'm8");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("p='w'm8", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      Integer integer0 = fBManagedConnectionFactory0.getTransactionIsolation();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("p='w'm8", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = null;
      try {
        defaultDBColumn2 = new DefaultDBColumn("fLhX~p$W@>>_", (DBTable) null, (-395), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " REFERENCES ";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      DBDataType dBDataType0 = DBDataType.getInstance((-1713), "an");
      Integer integer0 = new Integer((-1713));
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("an", defaultDBTable0, dBDataType0, integer2);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("an, an, an, null, an, an, null, an, an", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 40);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder("delete");
      SQLUtil.addOptionalCondition("alter sessionk}nlki(#a*5ou0p++yt", stringBuilder0);
      assertEquals("delete or alter sessionk}nlki(#a*5ou0p++yt", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isDDL("drop indexk}nlki(#a*5ou0p++yt");
      String string0 = "$?e";
      SQLUtil.parseColumnTypeAndSize("$?e");
      DBTable dBTable0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6987829895138011
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.isQuery("AGGREGATION");
      Boolean boolean0 = new Boolean("selectk}nlki(#a*5ou0p++yt");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = ",";
      stringArray0[3] = "execute";
      stringArray0[4] = "AGGREGATION";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execute", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-75257504));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " REFERENCES ";
      stringArray0[1] = " REFERENCES ";
      stringArray0[2] = " is not allowed";
      stringArray0[3] = " REFERENCES ";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      DBDataType.getInstance(37, "rf~y<s3)F");
      Integer integer0 = new Integer(44);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned(914, 44);
      DBDataType dBDataType0 = DBDataType.getInstance(44, "AY0N`9I[n");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ep+G", defaultDBTable0, dBDataType0, (Integer) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop indextruncate", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("drop indextruncate AY0N`9I[N NULL", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" REFERENCES ");
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("BmkpKh^\">IXEOlhcG", compositeDBObject0);
      tableContainer0.getTable(" REFERENCES ");
      dBSchema0.isIdentical((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " REFERENCES ";
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 40);
      pipedWriter0.flush();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) 40;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("40", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0710178890244566
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" REmFERENES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REmFERENES ", dBSchema0);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      StringWriter stringWriter0 = new StringWriter();
      DBDataType dBDataType0 = DBDataType.getInstance((-112166490), " REmFERENES ");
      Integer integer0 = new Integer((-1970));
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedLong((-112166490));
      Integer.divideUnsigned(1938, (-1713));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REmFERENES ", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.normalize(" REmFERENES   REMFERENES (2) NULL", false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " REFERENCES ";
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 40;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 40);
      SQLUtil.mutatesStructure("drop indexk}nlki(#a*5ou0p++yt");
      SQLUtil.mutatesDataOrStructure("rw");
      String string0 = " (";
      SQLUtil.mutatesDataOrStructure(" (");
      // Undeclared exception!
      try { 
        DBDataType.getInstance(" (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3061066090853948
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = " REFERENCES ";
      DBSchema dBSchema0 = new DBSchema(" REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " REFERENCES ";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      int int0 = (-1995557439);
      DBDataType.getInstance((-1995557439), " REFERENCES ");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, 386, "_VI//Q:c}f`u\"0(Ch&)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ch&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4799555205445176
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al3{{~O|}.e\"#Ab");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Al3{{~O|}.e\"#Ab", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT Al3{{~O|}.e\"#Ab FOREIGN KEY (, , ) REFERENCES Al3{{~O|}.e\"#Ab(, , )", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray0);
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM Al3{{~O|}.e\"#Ab WHERE null = null AND null = null AND null = null", string1);
      
      String string2 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT Al3{{~O|}.e\"#Ab ", string2);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("execaggregation");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ", dBSchema0);
      String[] stringArray0 = new String[1];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Integer.divideUnsigned((-1681774260), 519);
      dBSchema0.setOwner(defaultDBTable0);
      DBDataType dBDataType0 = DBDataType.getInstance(34, "rename");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.normalize(" REFERENCES  RENAME(1) NULL", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table  REFERENCES  (\n\t REFERENCES  RENAME(1) NULL\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      StringBuilder stringBuilder0 = new StringBuilder("calltruncate");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(2179);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2528), 3151.2F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2528
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5857708352080968
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al3{{~O|}.e\"#Ab");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Al3{{~O|}.e\"#Ab", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT Al3{{~O|}.e\"#Ab FOREIGN KEY (, , ) REFERENCES Al3{{~O|}.e\"#Ab(, , )", string0);
      
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , ) REFERENCES Al3{{~O|}.e\"#Ab(, , )", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.893788232391138
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[1];
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop indexk}nlki(#a*5ou0p++yt", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[0] = "table null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBPrimaryKeyConstraint0.setDoc("Sn:CC~8^o");
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (table null)", string0);
      
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string1);
      
      boolean boolean0 = SQLUtil.isQuery("select intodrop materialized viewk}nlki(#a*5ou0p++yt");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al3{{~O|}.e\"#Ab");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Al3{{~O|}.e\"#Ab", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("Al3{{~O|}.e\"#Ab", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Al3{{~O|}.e\"#Ab", defaultDBTable0, 512, "CONSTRAINT Al3{{~O|}.e\"#Ab FOREIGN KEY (, , , ) REFERENCES Al3{{~O|}.e\"#Ab(, , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5591188476784612
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("K}NLki(#a*5ou0P++YT");
      assertNull(boolean0);
      
      SQLUtil.isQuery("is:");
      SQLUtil.isDML("drop materialized viewk}nlki(#a*5ou0p++yt");
      SQLUtil.isDML("K}NLki(#a*5ou0P++YT");
      String string0 = SQLUtil.normalize("drop materialized viewk}nlki(#a*5ou0p++yt", false);
      assertEquals("drop materialized viewk } nlki (# a * 5ou0p + + yt", string0);
      
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create table ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table ", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create table ";
      stringArray0[1] = "create table ";
      VersionNumber versionNumber0 = VersionNumber.valueOf("viewk}nlki(#a*5ou0p++yt");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("table null", "table null", versionNumber0);
      defaultDatabase0.getTables(false);
      DBCatalog dBCatalog0 = new DBCatalog("call", defaultDatabase0);
      dBSchema0.setCatalog(dBCatalog0);
      stringArray0[3] = "create table ";
      stringArray0[4] = "create table ";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("create table ");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("create table ", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(948, (float) (-1013));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 948
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create table ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table ", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create table ";
      stringArray0[1] = "create table ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VersionNumber versionNumber0 = VersionNumber.valueOf("create table ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("table null", "table null", versionNumber0);
      defaultDatabase0.getTables(false);
      DBCatalog dBCatalog0 = new DBCatalog("call", defaultDatabase0);
      dBSchema0.setCatalog(dBCatalog0);
      stringArray0[3] = "create table ";
      stringArray0[4] = "create table ";
      stringArray0[5] = "create table ";
      stringArray0[6] = "create table ";
      stringArray0[7] = "create table ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table ", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("create table ");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("create table ", stringBuilder0);
      stringBuilder1.append(true);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(948, (float) (-1013));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 948
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.normalize("8s#eub[%2'V|quPbo", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.addIndex((DBIndex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6707441709201767
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("K}NLki(#a*5ou0P++YT");
      SQLUtil.normalize("*/", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("sZ4");
      // Undeclared exception!
      try { 
        defaultDBTable1.addIndex((DBIndex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("u2x+kb/+C)C", false);
      assertEquals("u2x + kb / + C) C", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-415), "deleteal3{{~o|}.e\"#ab");
      boolean boolean0 = SQLUtil.isDML("deleteal3{{~o|}.e\"#ab");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al3{{~O|}.e\"#Ab");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Al3{{~O|}.e\"#Ab", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1992), "update");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Al3{{~O|}.e\"#Ab", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("CONSTRAINT Al3{{~O|}.e\"#Ab UPDATE(1,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7930940134110525
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insertcreate table");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      SQLUtil.isQuery("O}JL-R|JnE{");
      boolean boolean1 = SQLUtil.isDML("k}nl");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8043716191528456
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 24;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 24);
      pipedWriter0.flush();
      boolean boolean0 = true;
      SQLUtil.normalize("select intou", true);
      SQLUtil.mutatesDataOrStructure("select intou");
      DBTable dBTable0 = null;
      DBDataType dBDataType0 = DBDataType.getInstance(24, "JgVic[ns~");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kU2<$pC_@4n}$`T", (DBTable) null, dBDataType0, integer0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "select intou";
      stringArray0[1] = "!'>%Z3n<w";
      stringArray0[2] = "JgVic[ns~";
      stringArray0[3] = "select intou";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }
}
