/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:45:42 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = (-1100L);
      long long1 = 0L;
      Range range0 = Range.of((-1100L), 0L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7072697097848133
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7376696182833657
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(1057L);
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 1057L);
      range2.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.iterator();
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-1L));
      range3.equals(long0);
      range0.startsBefore(range3);
      range0.toString();
      range_CoordinateSystem0.toString();
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, 0L, (-1L));
      range4.startsBefore(range1);
      range3.iterator();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = (-32768L);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6845527467167205
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      range0.toString();
      Range.parseRange("[ 0 .. 0 ]/0B");
      Range.of(0L);
      range0.asRange();
      Range range1 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4876997150596765
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-484L), (-484L));
      List<Range> list0 = range0.split(1608L);
      assertTrue(list0.contains(range0));
      
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertEquals(0, list2.size());
      
      long long0 = range0.getBegin();
      assertEquals((-485L), long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      range0.endsBefore(range1);
      range1.toString();
      range1.intersects(range0);
      range1.toString();
      range0.toString();
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-44L), 1L);
      range_Builder0.shift(1L);
      Range range3 = range_Builder0.build();
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-3933L);
      Range range0 = Range.of((-3933L));
      Range range1 = Range.of((-3933L));
      range0.complement(range1);
      Range range2 = Range.of((-3933L));
      range1.equals(range0);
      range2.endsBefore(range0);
      range2.toString();
      range1.equals(range2);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9470047701612976
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 3455L;
      Range range0 = Range.of(3455L);
      String string0 = "b";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 0L;
      range0.getBegin();
      range_Builder0.expandBegin((-32768L));
      Range range1 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1368L), (-1368L));
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandBegin((-1392L));
      range_Builder0.contractEnd((-1392L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("rgSJ35IafOCb%/, ,D", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse rgSJ35IafOCb%/, ,D into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3214631067247744
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of((-1217L));
      long long0 = 127L;
      Range range1 = Range.of(127L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.ofLength(1L);
      range1.getEnd(range_CoordinateSystem0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.7897695916591974
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(1064L);
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 1064L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem2);
      range2.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.iterator();
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-1L));
      range3.equals(long0);
      range0.startsBefore(range3);
      range0.toString();
      range_CoordinateSystem0.toString();
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd(0L);
      Range range4 = Range.of((-1L), 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range4.complementFrom(list0);
      range4.startsBefore(range1);
      range3.iterator();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2631392423007344
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.652025057551274
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of((-765L), (-765L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = Range.of((-765L), (-765L));
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range range2 = Range.of((-765L));
      range2.startsBefore(range0);
      Range range3 = range1.intersection(range0);
      Range.ofLength(1951L);
      long long0 = range3.getEnd();
      assertEquals((-765L), long0);
      
      range0.startsBefore(range2);
      Range range4 = Range.of((-765L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range4.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range4.toString(range_CoordinateSystem2);
      assertEquals("[ -764 .. -764 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem3, (-765L), 9997L);
      boolean boolean0 = range4.isSubRangeOf(range5);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range3.getBegin(range_CoordinateSystem4);
      assertSame(range3, range0);
      assertEquals((-764L), long1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.32147771836471
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem2, 0L, 4294967295L);
      range0.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4947075731865787
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of((-1217L));
      Range.of(127L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(1L);
      Range range2 = Range.of(range_CoordinateSystem0, (-1217L), 127L);
      Long long0 = new Long(65535L);
      range1.equals("");
      range1.startsBefore(range2);
      range0.toString();
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd((-1217L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 0L, (-1217L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.298278162964361
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 3455L;
      Range range0 = Range.of(3455L);
      String string0 = "b";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("b", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse b into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1709395301969012
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-1L));
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1149L), (-1149L));
      range_Builder0.shift(9223372036854775807L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1202915653012844
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-484L);
      Range range0 = Range.of(range_CoordinateSystem0, (-484L), (-484L));
      long long1 = 1608L;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1150L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6138867021630077
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(3455L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = Range.of(726L, 4294967295L);
      Range range2 = Range.ofLength(3455L);
      range1.endsBefore(range2);
      range2.startsBefore(range0);
      Range range3 = Range.of((-765L));
      range1.startsBefore(range3);
      Range range4 = range2.intersection(range1);
      Range.ofLength(3455L);
      range1.getEnd();
      range3.startsBefore(range4);
      Range range5 = Range.of(1951L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range5.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range5.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("I;fk6'yE[oobJUHjR{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.I;fk6'yE[oobJUHjR{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6797600091160207
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(1057L);
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 1057L);
      range2.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.iterator();
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-1L));
      range3.equals(long0);
      range0.startsBefore(range3);
      range0.toString();
      range_CoordinateSystem0.toString();
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-322L));
      String string0 = null;
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      long long0 = 1044L;
      Range.of(1044L);
      // Undeclared exception!
      try { 
        Range.of(1044L, (-322L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2066031287599803
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.endsBefore(range0);
      range0.toString();
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("cluster distance can not be negative", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.445098557399377
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 1057L);
      Range range3 = range2.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.iterator();
      List<Range> list0 = range3.split(57L);
      List<Range> list1 = range2.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list0);
      assertFalse(list2.contains(range2));
      assertTrue(list0.equals((Object)list1));
      
      long long0 = range1.getBegin();
      assertSame(range1, range0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6378642135843537
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-765L), (-765L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = Range.of((-765L), (-765L));
      boolean boolean0 = range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range range2 = Range.of((-765L));
      range2.startsBefore(range0);
      Range range3 = range1.intersection(range0);
      Range range4 = Range.ofLength(1951L);
      long long0 = range3.getEnd();
      assertEquals((-765L), long0);
      
      range0.startsBefore(range2);
      Range range5 = Range.of((-765L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range5.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range5.toString(range_CoordinateSystem2);
      assertEquals("[ -764 .. -764 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range6 = Range.of(range_CoordinateSystem3, (-765L), 9997L);
      boolean boolean1 = range5.isSubRangeOf(range6);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = range4.isSubRangeOf(range2);
      assertFalse(range4.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4496047755482273
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 386 .. 386 ]/RB", string0);
      
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      Range range3 = Range.ofLength(32767L);
      boolean boolean0 = range2.startsBefore(range3);
      assertFalse(boolean0);
      
      range0.endsBefore(range1);
      Range range4 = Range.ofLength(385L);
      range1.getEnd();
      Range range5 = Range.ofLength(385L);
      range4.startsBefore(range5);
      Range.of(3454L);
      range4.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string1 = range5.toString(range_CoordinateSystem2);
      assertEquals("[ 0 .. 384 ]/0B", string1);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range6 = Range.of(range_CoordinateSystem3, 9997L, 9223372036854775807L);
      assertFalse(range6.isEmpty());
      
      boolean boolean1 = range4.isSubRangeOf(range1);
      assertFalse(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem4);
      assertSame(range0, range1);
      assertEquals(385L, long0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(1057L);
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 1057L);
      range2.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.iterator();
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-1L));
      range3.equals(long0);
      range0.startsBefore(range3);
      range_CoordinateSystem0.toString();
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.734993887636655
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-1217L));
      Range.of((-1217L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getLength();
      Range range1 = Range.ofLength(1L);
      Range range2 = Range.of(range_CoordinateSystem0, (-1217L), (-1217L));
      Long long0 = new Long(65535L);
      range1.equals("");
      range1.startsBefore(range2);
      range0.toString();
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd((-1217L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 0L, (-1217L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.544483314769229
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(1017L);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 385L, 385L);
      Long long0 = new Long((-5149L));
      range0.equals("3`(-OBRB");
      range1.startsBefore(range0);
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem3, (-386L), 28L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem4, 0L, 1024L);
      range3.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("3`(-OBRB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.3`(-OBRB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8096782340777837
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 385L;
      Range range0 = Range.of(385L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.7783741877689194
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-484L), (-484L));
      Range range1 = Range.of(2847L, 2847L);
      range0.startsBefore(range1);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem2);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.copy();
      range_Builder0.expandEnd(2847L);
      range1.complement(range0);
      Range range2 = Range.of((-485L), 0L);
      Object object0 = new Object();
      range1.equals(range0);
      Range range3 = Range.of(range_CoordinateSystem1, (-2147483648L), (-782L));
      range3.startsBefore(range0);
      range2.iterator();
      // Undeclared exception!
      try { 
        range2.split((-1122L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.83412587655526
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 21L;
      Range range0 = Range.of(21L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4312157584838596
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-484L), (-484L));
      Range range1 = Range.of(2847L, 2847L);
      range0.startsBefore(range1);
      range1.toString();
      Range.of(2847L);
      Range range2 = Range.of((-484L), (-484L));
      Range range3 = Range.of((-484L), 127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, (-3539L), (-3539L));
      range4.endsBefore(range2);
      Range range5 = Range.of((-3195L));
      range5.toString();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 1043L, (-3145L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
