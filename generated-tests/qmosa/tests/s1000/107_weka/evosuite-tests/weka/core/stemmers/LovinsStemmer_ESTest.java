/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:11:29 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      lovinsStemmer0.globalInfo();
      stringArray0[1] = "8034";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stem("fully");
      assertEquals("fl", string0);
      
      String string1 = lovinsStemmer0.stemString("124-133");
      assertEquals("124-133", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Fn(q7+:2PyneIpOr]);");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("{Eyfk})7Bh>Y");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("acy");
      String string2 = lovinsStemmer0.stemString("k?,i'O|qn]w%,zrA");
      assertEquals("k?,i'|qn]w%,zr", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1745224581429377
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Pr]`R='a.;!k-;lsj@B");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      String string0 = lovinsStemmer0.stemString("An article in a conference proceedings.");
      assertEquals("an articl in a confer proceed.", string0);
      
      stringArray0[0] = "ZmB/;.nu0";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("ZmB/;.nu0");
      assertEquals("zmb/;.nu0", string1);
      
      lovinsStemmer0.stem("zmb/;.nu0");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("s'");
      assertEquals("s'", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ZmB/;.nu0");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
      
      String string5 = lovinsStemmer0.stem("");
      assertFalse(string5.equals((Object)string4));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"A8a)UzW_=z{2Zs";
      lovinsStemmer0.stemString("mB<Enk;GE$t:");
      stringArray0[1] = "5yv^E,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "`0vHz";
      stringArray0[5] = "(>u#)wS|kF!/e@ ?l";
      stringArray0[6] = "ys";
      lovinsStemmer0.stem("\"A8a)UzW_=z{2Zs");
      stringArray0[7] = "gE-wYUx";
      stringArray0[8] = "The Mathematical Reviews number.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ating");
      LovinsStemmer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0987616403665754
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GG9lWDb=4Bh6A+MOdm\"";
      stringArray0[1] = "@l|dT}>K~H&";
      stringArray0[2] = "ul";
      stringArray0[3] = "editor";
      stringArray0[4] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("icism");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("editor");
      assertEquals("edit", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stem("edit");
      assertEquals("edit", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9398473390054318
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("8hyxwpand");
      assertEquals("8hyxwpans", string0);
      
      lovinsStemmer0.stemString("^U5_b8!9CI");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^u5_b8!9c";
      stringArray0[1] = "YEAR";
      stringArray0[2] = "lTYX";
      stringArray0[3] = "YEAR";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[7] = "^U5_b8!9CI";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("8hyxwtex");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("entialness");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("enti");
      String string1 = lovinsStemmer0.stemString("=#;5<[3m");
      assertEquals("=#;5<[3m", string1);
      
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      String string4 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9242074232752622
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stem("\"O~/`lK<Fw&2");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stem("ltyxond");
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer2.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer1.stemString("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("8034");
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("istically");
      assertEquals("ist", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9918043194309514
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"A8a)UzW_=z{2Zs";
      lovinsStemmer0.stemString("mB<Enk;GE$t:");
      stringArray0[1] = "5yv^E,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "`0vHz";
      stringArray0[5] = "(>u#)wS|kF!/e@ ?l";
      stringArray0[6] = "ys";
      lovinsStemmer0.stem("\"A8a)UzW_=z{2Zs");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("pep m6p}llux");
      assertEquals("pep m6p}lluc", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "8034";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("\"A8a)UzW_=z{2Zs");
      assertEquals("\"a8a)uzw_=z{2z", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Pr]`R='a.;!k-;lsj@B");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      String string0 = lovinsStemmer0.stemString("tex");
      assertEquals("tic", string0);
      
      stringArray0[0] = "ZmB/;.nu0";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ZmB/;.nu0");
      lovinsStemmer0.stem("zmb/;.nu0");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("JYe.o ");
      assertEquals("jy.o ", string1);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("Original array with NaN (doubles): ");
      String string2 = lovinsStemmer0.stemString("HkP+*2+vmLL");
      assertEquals("hkp+*2+vml", string2);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9398473390054318
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      lovinsStemmer0.globalInfo();
      stringArray0[1] = "8034";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("fully");
      String string0 = lovinsStemmer0.stemString("124-133");
      assertEquals("124-133", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Fn(q7+:2PyneIpOr]);");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("cid");
      assertEquals("cis", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stem("Fn(q7+:2PyneIpOr]);");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      String string4 = lovinsStemmer0.stem("fully");
      assertEquals("fl", string4);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0348749367173813
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("bex");
      String string0 = lovinsStemmer1.stem("AUTHOR");
      lovinsStemmer0.getRevision();
      lovinsStemmer2.stemString("iful");
      String string1 = lovinsStemmer1.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9870345990982079
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("The sponsoring institution of a technical report.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("A link to a postscript file.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString(":,}L:.m`(<qM");
      assertEquals(":,}l:.m`(<qm", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("the sponsoring institution of a technical report.");
      assertEquals("th sponsor institut of a techn report.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("th sponsor institut of a techn report.");
      assertEquals("th spons institut of a techn report.", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0086074596411065
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Pr]`R='a.;!k-;lsj@B");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      String string0 = lovinsStemmer0.stemString("An article in a conference proceedings.");
      assertEquals("an articl in a confer proceed.", string0);
      
      stringArray0[0] = "ZmB/;.nu0";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("ZmB/;.nu0");
      assertEquals("zmb/;.nu0", string1);
      
      lovinsStemmer0.stem("zmb/;.nu0");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pr]`r='a.;!k-;lsj@b");
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("lid");
      assertEquals("lis", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.getRevision();
      String string4 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1595400651542491
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ousax");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ousac";
      stringArray0[1] = "";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "ousax";
      stringArray0[6] = "wek.cor.stemmer.lovinsstemmer";
      stringArray0[7] = "An article in a conference proceedings.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ousend");
      lovinsStemmer0.stem("MASTERSTHESIS");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.067807763157761
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("YEAR");
      lovinsStemmer0.stemString("lTYX");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("^U5_b8!9CI");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("mastersthesuad");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9524303320983685
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Wv6%7uYu");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.stemString(" o{=DH`<6_0zBxV>{");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("vad");
      lovinsStemmer0.stem("8034");
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9242074232752622
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(")");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("h");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("the www universal resource locator that points to the item being referenced. this often is used for technical reports to point to the ftp site where the postscript source of the report is located.end");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.ens", string0);
      
      lovinsStemmer0.stem("sq!Of9)S$e`([>");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("ert");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.ens");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("q~qBfeWWis0qipZ");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer1.stem("ousax");
      assertEquals("ousac", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6379296524832974
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("TITLE");
      lovinsStemmer0.stem("b%/, ,DZ<V{&Lf^)tZt");
      lovinsStemmer0.stem("?");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("I[Uo|,n.j{_EE");
      assertEquals("i[uo|,n.j{_ee", string2);
      
      String string3 = lovinsStemmer0.stemString("Get position of option -o: ");
      assertEquals("ges posit of opt -o: ", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8668939107306135
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(")");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("h");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("the www universal resource locator that points to the item being referenced. this often is used for technical reports to point to the ftp site where the postscript source of the report is located.end");
      lovinsStemmer0.stem("sq!Of9)S$e`([>");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("ltyxrud");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stem("Get position of option -o: ");
      assertEquals("get position of option -o: ", string3);
  }
}
