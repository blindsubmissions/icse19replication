/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:35:18 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player0.getName();
      player0.getStrength();
      player0.gangStrength();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)5;
      player1.unpack(byteArray0);
      player0.getMoney();
      player0.getY();
      player1.getZ();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 3279;
      Player player0 = new Player(3279, "gui.ModuleBrowserDialog$ModuleFilter", "gui.ModuleBrowserDialog$ModuleFilter", 3279);
      player0.isDead();
      Player player1 = new Player(0, "gui.ModuleBrowserDialog$ModuleFilter", "*<ub[:aYeGMkP&'3", 0);
      player0.prev = (Party) player1;
      int int1 = (-2029);
      float float0 = (-1.0F);
      MockFile mockFile0 = new MockFile("", "gui.ModuleBrowserDialog$ModuleFilter");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(2621, "gui.ModuleBrowserDialog$ModuleFilter", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 57);
      boolean boolean0 = player0.isConnected();
      assertTrue(boolean0);
      
      int int0 = player0.type();
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(5, int0);
      assertFalse(player0.isDead());
      assertEquals("gui.ModuleBrowserDialog$ModuleFilter", player0.getIP());
      assertEquals(57, player0.getPictureId());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-423));
      player0.gangStrength();
      player0.setDead();
      player0.isDead();
      player0.isDead();
      player0.setY(1);
      player0.setDead();
      MockFile mockFile0 = new MockFile("");
      mockFile0.setReadable(true);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((-2014), "", (-2014));
      player0.setY((-2014));
      player0.pack();
      Party party0 = player0.head;
      player0.next = null;
      player0.setDead((long) (-2014));
      player0.remove((Party) null);
      player0.setZ(0.0F);
      player0.add((Party) null);
      player0.getMoney();
      player0.setConnected(false);
      player0.remove((Party) null);
      player0.reset(true);
      boolean boolean0 = player0.isDead();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-4578), "state.Player", " ", (-4578));
      Player player1 = new Player();
      player1.setZ((-4578));
      player0.isJoinOK(player1, true);
      player1.setConnected(false);
      assertEquals((-4578.0F), player1.getZ(), 0.01F);
      
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(0, "0.0.0.0", "0.0.0.0", 4919, 0);
      Party party0 = new Party();
      party0.next = (Party) player0;
      player0.add(party0);
      player0.setMoney(0);
      player0.setDead(1L);
      player0.getIP();
      player0.setDead(1L, false);
      player0.setDead((long) 0);
      player0.setConnected(true);
      player0.setDead((-399L), false);
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      player0.setZ(0.0F);
      player0.setJoinOK(player1, false);
      player0.getY();
      player0.getStrength();
      assertEquals((-399L), player0.getTimeOfDeath());
      
      player1.setMoney(0);
      player1.setDead(0L, false);
      String string0 = player1.getIP();
      assertEquals("0.0.0.0", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.toString();
      player0.setZ((-339.3F));
      player0.setX(0.0F);
      player0.setMoney(0.0F);
      int int0 = player0.getPictureId();
      assertEquals((-339.3F), player0.getZ(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0, "kvqH%^$mt|e(j\"%u", "", 1, 4919);
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals("Player-1", player1.toString());
      assertEquals(0, player1.getPictureId());
      
      player0.reset(false);
      assertEquals(1, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(4919, player0.getStrength());
      assertEquals("kvqH%^$mt|e(j\"%u", player0.getIP());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((-1128), (String) null, (String) null, 0, (-1128));
      float float0 = player0.getX();
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals((-1128), player0.getStrength());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(1073);
      Player player1 = new Player(0);
      player0.next = (Party) player1;
      player1.setDead();
      player0.setX(388.0F);
      byte[] byteArray0 = player0.pack();
      player1.getY();
      player0.pack();
      player1.setZ((-1053.069F));
      player1.getY();
      player1.prev = (Party) player0;
      player0.setY(0.1F);
      player0.getIP();
      player1.unpack(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(byteArray0, 1073, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(0, (String) null, 0);
      Party party0 = new Party();
      player0.prev = party0;
      party0.id = (-658);
      player0.remove(party0);
      player0.setZ((-1406.2135F));
      player0.isConnected();
      player0.setDead();
      player0.getIP();
      Player player1 = new Player((-658), "", "6V-:>i", 0, 10);
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, true);
      System.setCurrentTimeMillis((-2600L));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~E7N?L985oF6");
      System.setCurrentTimeMillis(1571L);
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "", (short)4919);
      player0.reset(false);
      player0.boss = (Party) player1;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      player0.pack(dataOutputStream0);
      player1.remove(player0);
      player0.isJoinOK(player1, true);
      System.setCurrentTimeMillis(489L);
      player1.setJoinOK(player0, true);
      System.setCurrentTimeMillis(489L);
      System.setCurrentTimeMillis(489L);
      System.setCurrentTimeMillis(1392409281320L);
      player1.isJoinOK(player0, false);
      System.setCurrentTimeMillis(489L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4260151319598084
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(0, (String) null, 0);
      Party party0 = new Party();
      player0.prev = party0;
      player0.remove(party0);
      player0.setZ(0);
      player0.isConnected();
      Player player1 = new Player((short)4919, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 1);
      player1.setDead();
      player1.getIP();
      assertEquals(1392409281320L, player1.getTimeOfDeath());
      
      Player player2 = new Player((-445), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "", 0, (-3222));
      player0.setJoinOK(player2, false);
      player0.isJoinOK(player2, true);
      System.setCurrentTimeMillis((-1L));
      Player player3 = new Player((-42), (String) null, "0.0.0.0", (-42), 1247);
      player3.isJoinOK(player0, true);
      assertEquals(0, player0.getPictureId());
  }
}
