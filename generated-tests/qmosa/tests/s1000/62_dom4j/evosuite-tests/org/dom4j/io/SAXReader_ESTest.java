/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:39:22 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.CharBuffer;
import java.util.Locale;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttribute;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "Validation not supported for XMLReader: ";
      sAXReader0.getDispatchHandler();
      try { 
        sAXReader0.read("Validation not supported for XMLReader: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: Validation not supported for XMLReader:  Nested exception: no protocol: Validation not supported for XMLReader: 
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      xMLFilterImpl1.setEntityResolver((EntityResolver) null);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      InputSource inputSource0 = new InputSource(stringReader0);
      inputSource0.getByteStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@7bff37b0 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@7bff37b0 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createComment("Rs_");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setEntityResolver(handlerBase0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "rvt8o&Z Ri[";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("rvt8o&Z Ri[");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class rvt8o&Z Ri[ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("E%\"k");
      sAXReader_SAXEntityResolver0.resolveEntity("LA\"ivxfqxh|?^)", "LA\"ivxfqxh|?^)");
      sAXReader_SAXEntityResolver0.resolveEntity("E%\"k", "E%\"k");
      sAXReader_SAXEntityResolver0.uriPrefix = "NAMESPACE_NODE";
      sAXReader_SAXEntityResolver0.resolveEntity("E%\"k", "E%\"k");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getEntityResolver();
      sAXReader0.setXMLReader(parserAdapter0);
      xMLFilterImpl0.endDocument();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(xMLFilterImpl1, sAXContentHandler0);
      sAXReader0.removeHandler("<8yvYz$mrt!");
      StringReader stringReader0 = new StringReader("<8yvYz$mrt!");
      try { 
        sAXReader0.read((Reader) stringReader0, "Index: {0}, Size: {1}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes Nested exception: Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.615630577027551
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.skippedEntity((String) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.removeHandler("GguUU53");
      assertTrue(sAXReader0.isStringInternEnabled());
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.setStringInternEnabled(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/IiWi3X-P");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader0.setMergeAdjacentText(false);
      assertFalse(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      sAXReader1.isIgnoreComments();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      pruningDispatchHandler0.resetHandlers();
      String string0 = "W0+KTE";
      try { 
        sAXReader0.setProperty("W0+KTE", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'W0+KTE' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName qName0 = QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "U2de");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      sAXReader0.isStringInternEnabled();
      BeanElement beanElement0 = new BeanElement("Cannot lookup namespace URIs in DOM 2", qName0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList0, (-3015));
      Element element0 = beanAttribute0.getParent();
      dOMNamespace0.getPath(element0);
      try { 
        sAXReader0.read("U2de");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/U2de (No such file or directory) Nested exception: /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/U2de (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      inputSource0.getSystemId();
      sAXReader0.setStripWhitespaceText(true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader0.getEncoding();
      sAXReader0.setEncoding("");
      StringReader stringReader0 = new StringReader("");
      String string0 = "Sa,@(,<LAn";
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputStream inputStream0 = null;
      try { 
        sAXReader0.setFeature("", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "xQ$9XDUk[B(@Ea";
      try { 
        sAXReader0.setXMLReaderClassName("xQ$9XDUk[B(@Ea");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class xQ$9XDUk[B(@Ea not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.setXMLReader(xMLReader0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      QName qName0 = QName.get("");
      qName0.getDocumentFactory();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName.get((String) null, namespace0, "");
      qName0.getQualifiedName();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.setIgnoreComments(true);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      sAXReader0.isStripWhitespaceText();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = ".i:";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(".i:");
      sAXReader_SAXEntityResolver0.uriPrefix = "org.dom4j.tree.FlyweightText";
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.FlyweightText", ".i:");
      String string1 = "\"%";
      sAXReader_SAXEntityResolver0.resolveEntity(".i:", "\"%");
      sAXReader_SAXEntityResolver0.resolveEntity("ecXS8JwjLKr", "~cU{dg>K<>5H$Vs@M(");
      boolean boolean0 = true;
      try { 
        MockURI.URI("u:N+6TA ev", "org.dom4j.io.SAXReader$SAXEntityResolver", "\"%", "org.dom4j.io.SAXReader$SAXEntityResolver");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: u:N+6TA ev://org.dom4j.io.SAXReader$SAXEntityResolver%22%25#org.dom4j.io.SAXReader$SAXEntityResolver
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("bCTk");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.DefaultComment", "Invalid XPath expression: ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("org.dom4j.tree.AbstractCDATA");
      sAXReader_SAXEntityResolver1.resolveEntity("\"%", ":");
      sAXReader_SAXEntityResolver1.resolveEntity("", (String) null);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.075220548054372
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName qName0 = QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "U2de");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanElement beanElement0 = new BeanElement("Cannot lookup namespace URIs in DOM 2", qName0);
      xMLFilterImpl0.endDocument();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
      sAXReader0.removeHandler("U2de");
      StringReader stringReader0 = new StringReader("org.dom4j.tree.AbstractCDATA");
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      String string0 = "'c>fZUN5a{&";
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9530375303326304
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName qName0 = QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "U2de");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("U2de");
      sAXReader_SAXEntityResolver0.resolveEntity(",", "2");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLFilterImpl1.getEntityResolver();
      sAXReader0.setXMLReader(parserAdapter0);
      xMLFilterImpl1.endDocument();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(xMLFilterImpl1, sAXContentHandler0);
      sAXReader0.removeHandler(",");
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "[Ta_@/{&]k>p8lQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes Nested exception: Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9319232930107053
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.getEncoding();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.aFileURI;
      MockURI.relativize(uRI0, uRI1);
      URL uRL0 = MockURI.toURL(uRI1);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/foo.bar (No such file or directory) Nested exception: /tmp/foo.bar (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName qName0 = QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "U2de");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      sAXReader0.isStringInternEnabled();
      BeanElement beanElement0 = new BeanElement("Cannot lookup namespace URIs in DOM 2", qName0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList0, (-3015));
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.processingInstruction("", "X");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      sAXReader0.installXMLFilter((XMLReader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("#document", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class #document not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "E%\"k";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("E%\"k");
      sAXReader_SAXEntityResolver0.resolveEntity("LA\"ivxfqxh|?^)", "LA\"ivxfqxh|?^)");
      sAXReader_SAXEntityResolver0.resolveEntity("zFF", "zFF");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter1);
      xMLReaderAdapter0.setErrorHandler(xMLFilterImpl1);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.removeHandler("org.dom4j.io.SAXReader$SAXEntityResolver");
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes Nested exception: Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0870423502280264
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("/", "");
      QName qName0 = QName.get("/", (Namespace) dOMNamespace0, "/");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanElement beanElement0 = new BeanElement("/", "/");
      xMLFilterImpl0.endDocument();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, true);
      sAXReader1.removeHandler("L");
      StringReader stringReader0 = new StringReader("U2de");
      try { 
        sAXReader1.read((Reader) stringReader0, "org.dom4j.tree.DefaultElement");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/org.dom4j.tree.DefaultElement : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2826939972780647
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      HandlerBase handlerBase0 = new HandlerBase();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      handlerBase0.endElement("rvt8o&Z Ri[");
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.setEntityResolver(handlerBase0);
      sAXReader0.isStringInternEnabled();
      sAXReader0.getErrorHandler();
      sAXReader0.setValidation(false);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.getDispatchHandler();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.getDispatchHandler();
      sAXReader0.getDispatchHandler();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.removeHandler("rvt8o&Z Ri[");
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.getEntityResolver();
      sAXReader0.getXMLReader();
      sAXReader0.setIgnoreComments(false);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isStringInternEnabled();
      StringReader stringReader0 = new StringReader("rvt8o&Z Ri[");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.87821830667085
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2993);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Hn!rNa]_~i/X*");
      sAXReader_SAXEntityResolver0.uriPrefix = "+QB_";
      sAXReader_SAXEntityResolver0.resolveEntity("Hn!rNa]_~i/X*", "Hn!rNa]_~i/X*");
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1678);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "+QB_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
