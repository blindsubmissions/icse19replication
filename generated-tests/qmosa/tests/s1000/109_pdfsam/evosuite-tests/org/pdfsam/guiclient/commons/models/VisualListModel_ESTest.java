/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 07:59:47 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.awt.image.renderable.ParameterBlock;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.media.jai.CollectionImage;
import javax.media.jai.OperationRegistry;
import javax.media.jai.PlanarImage;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 0;
      visualListModel0.rotateClockwiseElements(intArray0);
      assertArrayEquals(new int[] {4, 0}, intArray0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      int int0 = 256;
      intArray0[0] = 256;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.data = vector0;
      int int1 = 0;
      intArray0[1] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(256, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 256
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 3, true);
      visualListModel0.removeElements(0, 0, true);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      visualListModel0.addAllElements(collection0);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      visualListModel0.removeElements(intArray0, true);
      assertEquals(8, intArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 256;
      boolean boolean0 = false;
      visualListModel0.subList(256, 256, false);
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) null);
      int int1 = 906;
      visualListModel0.moveUpIndex(906);
      visualListModel0.removeElements((-1844), 408, false);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int int2 = (-709);
      // Undeclared exception!
      try { 
        visualListModel0.subList(906, (-709));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(906) > toIndex(-709)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, false);
      visualListModel0.addAllElements(1, collection0);
      visualListModel0.removeElements(0, (-742), false);
      visualListModel0.subList((-742), (-742), false);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "z8^E@Q|;&sXo";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "v";
      arrayList0.toArray(stringArray0);
      arrayList0.spliterator();
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) arrayList0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-742);
      intArray0[1] = (-742);
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 0;
      visualListModel0.getElements();
      intArray0[2] = 11;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.clearData();
      visualListModel0.subList((-128), 0, true);
      visualListModel0.undeleteElements(intArray0);
      assertArrayEquals(new int[] {4, 0, 11}, intArray0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(9, intArray0.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1766);
      intArray0[2] = (-4143);
      intArray0[3] = 14;
      intArray0[4] = 0;
      intArray0[5] = 2244;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      intArray0[8] = 2788;
      visualListModel0.reverseElements(intArray0);
      assertEquals(9, intArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.removeElements(3, 3, false);
      int[] intArray0 = new int[3];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      intArray0[0] = 1413;
      intArray0[1] = (-2744);
      intArray0[2] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      assertArrayEquals(new int[] {1413, (-2744), 0}, intArray0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 4147;
      intArray0[1] = 1755;
      intArray0[2] = 0;
      intArray0[3] = 50;
      intArray0[4] = (-1389);
      intArray0[5] = (-373);
      intArray0[6] = 803;
      intArray0[7] = 0;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveDownIndex(4147);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(4147, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 4147
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      OperationRegistry operationRegistry0 = new OperationRegistry();
      HashMap<RenderingHints.Key, DefaultTableModel> hashMap0 = new HashMap<RenderingHints.Key, DefaultTableModel>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Object[][] objectArray0 = new Object[8][4];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "";
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) "";
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) hashMap0;
      objectArray2[1] = (Object) operationRegistry0;
      objectArray2[2] = (Object) operationRegistry0;
      objectArray2[3] = (Object) sunHints_Key0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) "";
      objectArray2[6] = (Object) null;
      objectArray2[7] = (Object) visualListModel0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[3];
      objectArray3[0] = (Object) operationRegistry0;
      objectArray3[1] = (Object) null;
      objectArray3[2] = (Object) hashMap0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[1];
      objectArray4[0] = (Object) sunHints_Key0;
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[9];
      objectArray5[0] = (Object) "";
      objectArray5[1] = (Object) null;
      objectArray5[2] = (Object) null;
      objectArray5[3] = (Object) "";
      objectArray5[4] = (Object) visualListModel0;
      objectArray5[5] = (Object) sunHints_Key0;
      visualListModel0.getElementAt(265);
      objectArray5[6] = null;
      objectArray5[7] = (Object) null;
      objectArray5[8] = (Object) operationRegistry0;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[5];
      objectArray6[0] = (Object) visualListModel0;
      objectArray6[1] = (Object) hashMap0;
      objectArray6[2] = (Object) hashMap0;
      objectArray6[3] = (Object) null;
      objectArray6[4] = (Object) operationRegistry0;
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[3];
      objectArray7[0] = (Object) "";
      objectArray7[1] = (Object) null;
      objectArray7[2] = (Object) "";
      objectArray0[6] = objectArray7;
      Object[] objectArray8 = new Object[3];
      objectArray8[0] = (Object) visualListModel0;
      objectArray8[1] = (Object) "";
      objectArray8[2] = null;
      objectArray0[7] = objectArray8;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      hashMap0.put(sunHints_Key0, defaultTableModel0);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      // Undeclared exception!
      try { 
        operationRegistry0.createCollection("", (ParameterBlock) null, renderingHints0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) priorityQueue0);
      intArray0[1] = (-1115);
      intArray0[2] = 1;
      intArray0[3] = (-800);
      intArray0[4] = 3991;
      intArray0[5] = (-1);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.elementsChanged();
      visualListModel0.moveUpIndex(1071);
      visualListModel0.getValidElements();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-597), (-800), false);
      assertNull(collection0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1154);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1154
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>(vector0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndex((-1834));
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>(vector0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector1);
      intArray0[1] = 1258;
      intArray0[2] = (-1072);
      visualListModel0.getElements();
      visualListModel0.getSize();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getSize();
      visualListModel1.removeElements(2225, (-1461), false);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 3, true);
      visualListModel0.removeElements((-1473), 256, true);
      visualListModel0.subList(0, 256);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.prependAllElements(vector0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1473);
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1473);
      intArray0[6] = 0;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.getSize();
      visualListModel0.removeElements(intArray0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 3, true);
      visualListModel0.removeElements(0, 0, true);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-1), 0);
      assertNull(collection0);
      
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 3;
      intArray0[4] = (-1154);
      intArray0[5] = 0;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveUpIndex(0);
      visualListModel0.getSize();
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>(vector0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      visualListModel0.getElements();
      visualListModel0.getValidElements();
      visualListModel0.appendAllElements(vector0);
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getElementAt(447);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-1072), "", "#v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.removeElements(3, 3, false);
      int[] intArray0 = new int[3];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.subList(3, 3);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      intArray0[0] = 1413;
      intArray0[1] = (-2744);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.updateElementAt(255, (VisualPageListItem) null);
      assertFalse(visualListModel0.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 256;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "iWH9";
      stringArray0[2] = "iWH9";
      stringArray0[3] = "v";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "v";
      arrayList0.toArray(stringArray0);
      arrayList0.spliterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 512;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      visualListModel0.getElementAt(0);
      objectArray0[2] = null;
      arrayList0.toArray(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v";
      arrayList0.toArray(stringArray0);
      arrayList0.spliterator();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements(512, (Collection<VisualPageListItem>) arrayList0);
      visualListModel1.addAllElements((-1910), (Collection<VisualPageListItem>) arrayList0);
      int[] intArray1 = new int[1];
      visualListModel1.moveDownIndexes(intArray1);
      int[] intArray2 = new int[3];
      intArray2[0] = 116;
      intArray2[1] = 512;
      intArray2[2] = 0;
      visualListModel1.undeleteElements(intArray2);
      assertEquals(3, intArray2.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.setData(vector0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.getSize();
      VisualListModel visualListModel3 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel2.rotateClockwiseElements(intArray0);
      visualListModel1.addElementAt((VisualPageListItem) null, (-661));
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      Collection<VisualPageListItem> collection0 = new ArrayList<VisualPageListItem>(2101);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.appendAllElements(collection0);
      visualListModel0.reverseElements(intArray1);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-2925), "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel1.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "iWH9";
      stringArray0[1] = "iWH9";
      stringArray0[2] = "iWH9";
      stringArray0[3] = "";
      stringArray0[4] = "iWH9";
      stringArray0[5] = "v";
      stringArray0[6] = "iWH9";
      stringArray0[7] = "v";
      stringArray0[8] = "v";
      arrayList0.toArray(stringArray0);
      arrayList0.spliterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel2 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel2.moveDownIndexes(intArray0);
      assertEquals(0, intArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel1.removeElements(intArray0, true);
      visualListModel0.updateElementAt((-213), (VisualPageListItem) null);
      visualListModel0.moveUpIndex((-213));
      visualListModel0.moveDownIndex((-213));
      assertFalse(visualListModel0.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6762349391347307
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(hashSet0);
      int[] intArray0 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.undeleteElements(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.getSize();
      VisualListModel visualListModel4 = new VisualListModel();
      assertEquals(0, visualListModel4.getSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(linkedHashSet0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(hashSet0);
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      assertFalse(visualListModel0.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1573;
      intArray0[6] = 0;
      intArray0[7] = 2915;
      visualListModel0.getListDataListeners();
      visualListModel1.removeElements(intArray0, false);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.updateElementAt(0, (VisualPageListItem) null);
      visualListModel2.moveUpIndex(8);
      visualListModel0.moveDownIndex(1);
      visualListModel0.getValidElements();
      visualListModel0.addElement((VisualPageListItem) null);
      assertFalse(visualListModel0.equals((Object)visualListModel2));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel1.setData(vector0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.getSize();
      VisualListModel visualListModel3 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel3.rotateClockwiseElements(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 1);
      assertFalse(visualListModel0.equals((Object)visualListModel2));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.elementChanged((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel1.setData(vector0);
      // Undeclared exception!
      try { 
        visualListModel1.appendAllElements(vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      visualListModel0.removeElements(65535, 543, false);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.setData(vector0);
      visualListModel0.getSize();
      VisualListModel visualListModel2 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel2.moveDownIndexes(intArray0);
      visualListModel2.getValidElements();
      visualListModel2.getElements();
      visualListModel2.removeElements(intArray0, false);
      assertEquals(0, intArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      vector1.retainAll(vector0);
      vector0.addAll((Collection<? extends VisualPageListItem>) vector1);
      vector0.setSize(559);
      visualListModel0.elementsChanged();
      visualListModel0.prependAllElements(vector0);
      visualListModel0.moveUpIndex(16);
      visualListModel0.moveUpIndex((-3606));
      visualListModel0.moveDownIndex(3);
      assertEquals(1118, visualListModel0.getSize());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.subList(604, 604);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel1.setData(visualPageListItemArray0);
      assertEquals(2, visualListModel1.getSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) linkedHashSet0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      TimeZone.getAvailableIDs(675);
      arrayList0.spliterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 675;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      visualListModel1.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) linkedHashSet0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      TimeZone.getAvailableIDs(675);
      arrayList0.spliterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 675;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.clearData();
      visualListModel0.moveUpIndexes(intArray0);
      assertArrayEquals(new int[] {675, 0, 1, 1, 1}, intArray0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3143738430069454
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) linkedHashSet0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      TimeZone.getAvailableIDs(675);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(0, 0, false);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 256;
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) linkedHashSet0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      TimeZone.getAvailableIDs(675);
      arrayList0.spliterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      int[] intArray0 = new int[1];
      intArray0[0] = 675;
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 675
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) linkedHashSet0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      TimeZone.getAvailableIDs(675);
      arrayList0.spliterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.754105330999288
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      visualListModel0.setData(vector0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) linkedHashSet0);
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, false);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel2 = new VisualListModel();
      int[] intArray1 = new int[5];
      visualListModel0.undeleteElements(intArray1);
      visualListModel0.removeElements(0, 0, true);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4735023850806486
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) linkedHashSet0);
      int int0 = 0;
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      int int1 = 675;
      arrayList0.add((VisualPageListItem) null);
      TimeZone.getAvailableIDs(675);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[5];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(0, 0, false);
      int[] intArray1 = new int[2];
      visualListModel1.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel2 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4844575358174863
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) linkedHashSet0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      arrayList0.add((VisualPageListItem) null);
      TimeZone.getAvailableIDs(675);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 256;
      intArray0[1] = 256;
      visualListModel1.moveUpIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 255
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      int int0 = 0;
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      int int1 = 675;
      TimeZone.getAvailableIDs();
      arrayList0.spliterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5832584594204766
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      arrayList0.add((VisualPageListItem) null);
      TimeZone.getAvailableIDs(659);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel1.moveUpIndexes(intArray0);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5193826646423012
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.getElements();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.add((VisualPageListItem) null);
      arrayList0.toArray((Object[]) visualPageListItemArray0);
      arrayList0.add((VisualPageListItem) null);
      TimeZone.getAvailableIDs(659);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel1.moveUpIndexes(intArray0);
      assertEquals(2, intArray0.length);
  }
}
