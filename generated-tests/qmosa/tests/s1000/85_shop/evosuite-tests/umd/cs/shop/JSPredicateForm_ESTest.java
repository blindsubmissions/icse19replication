/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:44:43 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = null;
      jSPredicateForm0.equals((JSPredicateForm) null);
      jSPredicateForm0.removeElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("<=");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t*q-?@SqLyl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.instance(jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.backquote = (-2672);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution1);
      assertNotSame(jSPredicateForm3, jSPredicateForm2);
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(887);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      stringReader0.markSupported();
      jSSubstitution0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(887);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      stringReader0.markSupported();
      jSSubstitution0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      boolean boolean0 = jSTerm1.equals(jSPredicateForm0);
      assertFalse(boolean0);
      
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.addElement(stringReader0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(887);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      jSTerm1.ensureCapacity(887);
      stringReader0.markSupported();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution2.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(887);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      stringReader0.markSupported();
      jSSubstitution0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches(jSPredicateForm0);
      jSSubstitution2.clear();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution3 = jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution2);
      assertFalse(jSSubstitution3.fail());
      
      System.setCurrentTimeMillis((-1));
      jSPredicateForm0.print();
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(887);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSSubstitution0.add((Object) stringReader0);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(887);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.equals(jSPredicateForm0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(887);
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9002560512685369
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(887);
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Iv.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 887;
      stringReader0.mark(887);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSTerm> function0 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function1 = unaryOperator0.andThen((Function<? super Object, ? extends JSTerm>) function0);
      Function<Object, JSTerm> function2 = unaryOperator0.andThen((Function<? super Object, ? extends JSTerm>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends JSTerm>) function2);
      UnaryOperator<JSTerm> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends JSTerm>) function1);
      UnaryOperator.identity();
      UnaryOperator<JSTerm> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super JSPredicateForm, ? extends JSTerm>) function1);
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(VGQ&Yad^vh");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9559838465843622
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("SyV)N(O=]tan^3j5:'I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      jSTerm1.toStr();
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm0.standarizerPredicateForm();
      jSTerm1.applySubstitutionPF(jSSubstitution3);
      stringReader0.reset();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm1.print();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function0 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function1 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function0);
      unaryOperator0.compose((Function<? super JSPredicateForm, ? extends JSTerm>) function1);
      jSTerm1.replaceAll(unaryOperator1);
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm("(8)y$!Fy!D+|fV{[");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SyV)N(O=]tan^3j5N'K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.add((Object) jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0467385326945515
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("SyV)N(O=]tan^3j5:'I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      jSTerm1.toStr();
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm0.standarizerPredicateForm();
      jSTerm1.applySubstitutionPF(jSSubstitution3);
      stringReader0.reset();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm1.print();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function0 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function1 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function0);
      unaryOperator0.compose((Function<? super JSPredicateForm, ? extends JSTerm>) function1);
      jSTerm1.replaceAll(unaryOperator1);
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm("()y$!Fy!D+|fV{[");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
