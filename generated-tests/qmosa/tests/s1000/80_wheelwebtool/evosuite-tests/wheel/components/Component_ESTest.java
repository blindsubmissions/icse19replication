/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 10:39:48 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "r(3Tz#MmY~t>%D";
      Form form0 = new Form("r(3Tz#MmY~t>%D");
      String string1 = "samp";
      String string2 = null;
      FileInput fileInput0 = null;
      try {
        fileInput0 = new FileInput(form0, "samp", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ":aYeGMkP&'";
      Form form0 = new Form(":aYeGMkP&'");
      Table table0 = null;
      try {
        table0 = new Table(form0, ":aYeGMkP&'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Component component0 = null;
      String string0 = "vmFCQ";
      Hidden hidden0 = new Hidden((Component) null, "vmFCQ", "vmFCQ");
      // Undeclared exception!
      try { 
        hidden0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "action";
      String string1 = "org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate";
      FileInput fileInput0 = new FileInput((Component) null, "action", "org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate");
      // Undeclared exception!
      try { 
        fileInput0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "G6GnS~%D,73T";
      Form form0 = new Form("G6GnS~%D,73T");
      form0.create();
      form0.addFormValidationError("G6GnS~%D,73T");
      int int0 = (-2889);
      // Undeclared exception!
      try { 
        form0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7782333057997077
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ErrorPage errorPage1 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage1);
      String string0 = "`uBmZ)~ct";
      String string1 = "";
      NumberInput numberInput0 = null;
      try {
        numberInput0 = new NumberInput(text0, "`uBmZ)~ct", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize DecimalFormat with pattern ''.
         //
         verifyException("wheel.components.NumberInput", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "T;u^*]VY`0v";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("T;u^*]VY`0v");
      // Undeclared exception!
      try { 
        xmlEntityRef0.bdo("T;u^*]VY`0v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Form form0 = new Form("<fragment");
      TextInput textInput0 = new TextInput(form0, "tt", "<fragment");
      FormElement formElement0 = textInput0.value("");
      // Undeclared exception!
      try { 
        formElement0.a();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "S8JwjLKrHp-R");
      Table table1 = table0.renderHint("S8JwjLKrHp-R");
      table1.bdo((CharSequence) null);
      TableRow tableRow0 = new TableRow(table1);
      Block block0 = tableRow0.createTh();
      StandaloneComponent standaloneComponent0 = block0._getTopLevelComponent(false);
      Component component0 = standaloneComponent0.button();
      Radio radio0 = new Radio(tableRow0, "S8JwjLKrHp-R", "CmFxZ~jt=7");
      radio0.value("");
      component0.legend((Object) block0);
      FileInput fileInput0 = new FileInput(table1, "<BPk-#%Y", "eh/pEA");
      DateInput dateInput0 = new DateInput(fileInput0, "eh/pEA", "Tr component can be added only to a TableBlock.", "<BPk-#%Y");
      table1.selectModel();
      ElExpression elExpression0 = new ElExpression("eh/pEA");
      assertEquals("eh/pEA", elExpression0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Form form0 = new Form((String) null);
      form0._clear();
      Component component0 = form0.up(0);
      // Undeclared exception!
      try { 
        component0.img((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "p", "p");
      Table table0 = new Table(fileInput0, "p");
      String string0 = "FTW";
      errorPage0.add(table0);
      Component component0 = table0.ins((Object) "p");
      Component component1 = component0.form("p");
      TextInput textInput0 = new TextInput(table0, "", "FTW");
      component1.h6();
      FormElement formElement0 = textInput0.value("p");
      // Undeclared exception!
      try { 
        formElement0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "6";
      InitialFieldValue initialFieldValue0 = new InitialFieldValue(errorPage0, "6");
      assertNotNull(initialFieldValue0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("6", initialFieldValue0.getStringReplacement());
      
      Label label0 = (Label)errorPage0.em((Object) initialFieldValue0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("6", initialFieldValue0.getStringReplacement());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      String string1 = "7JlUt@M6I7s";
      Form form0 = new Form("7JlUt@M6I7s");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("7JlUt@M6I7s", form0.getComponentId());
      
      Form form1 = form0.renderHint("7JlUt@M6I7s");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("7JlUt@M6I7s", form0.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("7JlUt@M6I7s", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        form0.i((Object) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Form form0 = new Form((String) null);
      assertNotNull(form0);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      // Undeclared exception!
      try { 
        form0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      String string0 = "p";
      FileInput fileInput0 = new FileInput(errorPage0, "p", "p");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(fileInput0.isEmpty());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals("p", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      
      Table table0 = new Table(fileInput0, "p");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(fileInput0.isEmpty());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals("p", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      
      String string1 = "";
      String string2 = "FTW";
      // Undeclared exception!
      try { 
        table0.id("FTW");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Form form0 = new Form("zC&o*iMo||fGg9NX");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("zC&o*iMo||fGg9NX", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      Form form1 = form0.renderHint("zC&o*iMo||fGg9NX");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertEquals("form", form0.defaultTagName());
      assertEquals("zC&o*iMo||fGg9NX", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("zC&o*iMo||fGg9NX", form1.getComponentId());
      
      // Undeclared exception!
      try { 
        form0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      ElExpression elExpression0 = new ElExpression("/s");
      assertNotNull(elExpression0);
      assertEquals("/s", elExpression0.getExpression());
      assertEquals("/s", elExpression0.toString());
      assertEquals(2, elExpression0.length());
      
      Image image0 = null;
      try {
        image0 = new Image(errorPage0, elExpression0, "/s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression /s in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      Block block0 = (Block)errorPage0.small();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      Form form0 = new Form("p{!yvfg7'9P");
      assertNotNull(form0);
      assertEquals("p{!yvfg7'9P", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.renderHint("`*9w?03]N7");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertEquals("p{!yvfg7'9P", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("p{!yvfg7'9P", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      
      // Undeclared exception!
      try { 
        actionExpression0.subSequence(1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "p";
      FileInput fileInput0 = new FileInput(errorPage0, "p", "p");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      
      Table table0 = new Table(fileInput0, "p");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      
      String string1 = "FTW";
      Table table1 = (Table)errorPage0.add(table0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("p", table1.getComponentId());
      
      TextInput textInput0 = new TextInput(errorPage0, "%jNH[", (String) null);
      assertNotNull(textInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("%jNH[", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertEquals("TextInput_1", textInput0.getComponentId());
      
      Label label0 = (Label)table0.dd((Object) textInput0);
      assertSame(table0, table1);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("%jNH[", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      Label label1 = (Label)table0.ins((Object) "p");
      assertSame(table0, table1);
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      
      Form form0 = (Form)label1.form("p");
      assertSame(table0, table1);
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(form0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("p", form0.getComponentId());
      assertTrue(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      
      TextInput textInput1 = new TextInput(table0, "", "FTW");
      assertFalse(textInput1.equals((Object)textInput0));
      assertNotNull(textInput1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertTrue(textInput1.isValid());
      assertEquals("FTW", textInput1.getComponentId());
      assertFalse(textInput1._isGeneratedId());
      assertEquals("", textInput1.getFormElementName());
      assertEquals("input", textInput1.defaultTagName());
      assertTrue(textInput1.isEmpty());
      
      TextInput textInput2 = (TextInput)textInput1.value("p");
      assertSame(table0, table1);
      assertNotSame(textInput1, textInput0);
      assertSame(textInput1, textInput2);
      assertSame(textInput2, textInput1);
      assertNotSame(textInput2, textInput0);
      assertFalse(textInput1.equals((Object)textInput0));
      assertFalse(textInput2.equals((Object)textInput0));
      assertNotNull(textInput2);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isValid());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertTrue(textInput1.isValid());
      assertEquals("FTW", textInput1.getComponentId());
      assertFalse(textInput1._isGeneratedId());
      assertEquals("", textInput1.getFormElementName());
      assertEquals("input", textInput1.defaultTagName());
      assertTrue(textInput1.isEmpty());
      assertTrue(textInput2.isValid());
      assertTrue(textInput2.isEmpty());
      assertFalse(textInput2._isGeneratedId());
      assertEquals("input", textInput2.defaultTagName());
      assertEquals("", textInput2.getFormElementName());
      assertEquals("FTW", textInput2.getComponentId());
      
      // Undeclared exception!
      try { 
        textInput2.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Form form0 = new Form((String) null);
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        form0.li((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      CharSequence charSequence0 = null;
      Form form0 = new Form((String) null);
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      
      Form form1 = form0.renderHint((CharSequence) null);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      
      // Undeclared exception!
      try { 
        form1.id((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      String string0 = "8_aoKJDP}u*-UeA";
      FileInput fileInput0 = new FileInput(errorPage0, "action", "8_aoKJDP}u*-UeA");
      assertNotNull(fileInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("action", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("8_aoKJDP}u*-UeA", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      
      ErrorPage errorPage1 = (ErrorPage)errorPage0.actionBinding("action");
      assertSame(errorPage0, errorPage1);
      assertSame(errorPage1, errorPage0);
      assertNotNull(errorPage1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      
      // Undeclared exception!
      try { 
        fileInput0.br();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Table table0 = new Table(errorPage0, "S8JwjLKrHp-R");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("S8JwjLKrHp-R", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      
      String string0 = "org.mvel.util.ParseTools";
      FileInput fileInput0 = new FileInput(errorPage0, "S8JwjLKrHp-R", (String) null);
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("FileInput_1", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("S8JwjLKrHp-R", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      
      // Undeclared exception!
      try { 
        fileInput0.ul();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0335620542068176
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Form form0 = new Form("Tried to access a form, but none was submitted.");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("Tried to access a form, but none was submitted.", form0.getComponentId());
      
      form0._clear();
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("Tried to access a form, but none was submitted.", form0.getComponentId());
      
      // Undeclared exception!
      try { 
        form0.up(288);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      
      String string0 = "8_aoKJDP}u*-UeA";
      FileInput fileInput0 = new FileInput(errorPage0, "action", "8_aoKJDP}u*-UeA");
      assertNotNull(fileInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("8_aoKJDP}u*-UeA", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("action", fileInput0.getFormElementName());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      
      Block block0 = (Block)errorPage0.dl();
      assertNotNull(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      FileInput fileInput1 = (FileInput)fileInput0.renderHint((CharSequence) null);
      assertSame(fileInput0, fileInput1);
      assertSame(fileInput1, fileInput0);
      assertNotNull(fileInput1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("8_aoKJDP}u*-UeA", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("action", fileInput0.getFormElementName());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertEquals("8_aoKJDP}u*-UeA", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("action", fileInput1.getFormElementName());
      assertTrue(fileInput1.isValid());
      assertEquals("input", fileInput1.defaultTagName());
      assertTrue(fileInput1.isEmpty());
      assertFalse(fileInput1._isGeneratedId());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      
      // Undeclared exception!
      try { 
        fileInput0.br();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.245035274126178
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "p", "p");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isEmpty());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      
      Table table0 = new Table(fileInput0, "p");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("p", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isEmpty());
      assertEquals("p", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("p", table0.getComponentId());
      
      Table table1 = new Table(errorPage0, "");
      assertFalse(table1.equals((Object)table0));
      assertNotNull(table1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      
      Form form0 = new Form("org.mvel.util.ParseTools");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertEquals("org.mvel.util.ParseTools", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        form0.end((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "S8JwjLKrHp-R";
      ErrorPage errorPage1 = new ErrorPage();
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotNull(errorPage1);
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      
      // Undeclared exception!
      try { 
        errorPage1.add(errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Form form0 = new Form("Tried to access a form, but none was submitted.");
      assertNotNull(form0);
      assertEquals("Tried to access a form, but none was submitted.", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        form0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
