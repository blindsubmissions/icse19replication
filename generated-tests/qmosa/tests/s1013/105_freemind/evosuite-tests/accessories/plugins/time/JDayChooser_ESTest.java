/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:54:37 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.MenuBar;
import freemind.controller.StructuredMenuHolder;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.extensions.ExportHook;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import freemind.modes.MindMapNode;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMapModel;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.browsemode.EncryptedBrowseNode;
import freemind.modes.filemode.FileController;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.view.mindmapview.attributeview.AttributePopupMenu;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Dimension2D;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.File;
import java.net.URL;
import java.sql.Timestamp;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSlider;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicDesktopPaneUI;
import javax.swing.plaf.basic.BasicSliderUI;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.dom.svg.SVGOMClipPathElement;
import org.apache.batik.dom.svg.SVGOMDocument;
import org.apache.batik.ext.awt.color.ICCColorSpaceExt;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.xalan.templates.OutputProperties;
import org.apache.xerces.dom.DOMImplementationImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xml.serializer.ToHTMLStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.OsmFileCacheTileLoader;
import org.openstreetmap.gui.jmapviewer.Tile;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;
import plugins.collaboration.database.DatabaseConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.isDayBordersVisible();
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlignmentX(10.0F);
      int int0 = 3;
      jDayChooser0.setYear(3);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDay();
      int int0 = 228;
      long long0 = (-3145L);
      int int1 = 8771;
      int int2 = 0;
      char char0 = '*';
      MenuElement[] menuElementArray0 = new MenuElement[4];
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1108, true);
      focusEvent0.paramString();
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      jDayChooser0.getRegisteredKeyStrokes();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 160);
      focusEvent1.setSource(metalComboBoxEditor_UIResource0);
      metalComboBoxEditor_UIResource0.focusLost(focusEvent1);
      jDayChooser0.addFocusListener(metalComboBoxEditor_UIResource0);
      jDayChooser0.getActionMap();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(282);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDaysInMonth();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      jDayChooser0.getSelectedDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getVerticalTextPosition();
      jDayChooser_DecoratorButton0.setSelectedIcon((Icon) null);
      jDayChooser_DecoratorButton0.getToolTipText();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setMaxDayCharacters(0);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getDay();
      jDayChooser0.setForeground(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setDay((-2411));
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "day";
      stringArray0[1] = "month";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-2411), stringArray0, stringArray0, stringArray0, stringArray0, iBindingFactory0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.getColorModel();
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      basicDesktopPaneUI0.getMaximumSize(jDayChooser0);
      Dimension dimension0 = basicDesktopPaneUI0.getMinimumSize(jDayChooser0);
      jDayChooser0.getSize(dimension0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.createVolatileImage(1427, 0);
      jDayChooser0.setEnabled(true);
      Date date0 = jDayChooser0.getMinSelectableDate();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      jDayChooser0.createVolatileImage(0, 1794, imageCapabilities0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setEnabled(false);
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      String string0 = "";
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("day", "day", "");
      DOMImplementation dOMImplementation0 = SVGDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGOMClipPathElement sVGOMClipPathElement0 = null;
      try {
        sVGOMClipPathElement0 = new SVGOMClipPathElement("M]|P", genericDocument0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The prefix \"M]|P\" is invalid. Current node type: 1, name: clipPath.
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.invalidate();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1277), "");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getLocale();
      jDayChooser0.setMonth((-882));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.580510611766821
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      Date date0 = null;
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.repaint();
      int int0 = 14;
      String string0 = "Six";
      MindMapMode mindMapMode0 = new MindMapMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinimumSize();
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.oldDayBackgroundColor = (Color) systemColor0;
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.weekPanel = (JPanel) jYearChooser0;
      jDayChooser0.setMonth(331);
      jDayChooser0.getDay();
      jDayChooser0.getSundayForeground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      String string0 = "day";
      byte byte0 = (byte)0;
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      // Undeclared exception!
      try { 
        bufferedImage0.setRGB(1023, 297, (-789));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1108, true);
      focusEvent0.paramString();
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      jDayChooser0.getRegisteredKeyStrokes();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 160);
      focusEvent1.setSource(metalComboBoxEditor_UIResource0);
      metalComboBoxEditor_UIResource0.focusLost(focusEvent1);
      jDayChooser0.addFocusListener(metalComboBoxEditor_UIResource0);
      jDayChooser0.getActionMap();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(282);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDay(0);
      jDayChooser0.setYear(160);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0103168603880395
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.add((Component) jDayChooser0, (Object) null);
      ToHTMLStream toHTMLStream0 = new ToHTMLStream();
      jDayChooser0.setMaxDayCharacters((-2647));
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDaysInMonth();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDay((-21));
      jDayChooser0.getSelectedDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.getVerticalTextPosition();
      jDayChooser_DecoratorButton0.setSelectedIcon((Icon) null);
      jDayChooser_DecoratorButton1.getToolTipText();
      jDayChooser_DecoratorButton1.isFocusable();
      jDayChooser0.setMaxDayCharacters(0);
      Date date0 = jDayChooser0.maxSelectableDate;
      JDayChooser jDayChooser1 = new JDayChooser();
      MockDate mockDate0 = new MockDate(0, 31, 0, (-21), (-21));
      jDayChooser1.setMinSelectableDate(mockDate0);
      jDayChooser1.getDay();
      jDayChooser0.setForeground(color0);
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser1.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1108, true);
      focusEvent0.paramString();
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      jDayChooser0.getRegisteredKeyStrokes();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 5850);
      focusEvent1.setSource(metalComboBoxEditor_UIResource0);
      metalComboBoxEditor_UIResource0.focusLost(focusEvent1);
      jDayChooser0.addFocusListener(metalComboBoxEditor_UIResource0);
      jDayChooser0.getActionMap();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(282);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      jDayChooser0.getSelectedDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getVerticalTextPosition();
      jDayChooser_DecoratorButton0.setSelectedIcon((Icon) null);
      jDayChooser_DecoratorButton0.getToolTipText();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setMaxDayCharacters(0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      int int0 = SwingConstants.SOUTH_WEST;
      jDayChooser_DecoratorButton0.isFocusable();
      Color color0 = Color.BLUE;
      jDayChooser0.setSundayForeground(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.635227114183329
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(33, 33);
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      basicDesktopPaneUI0.getMaximumSize(jDayChooser0);
      basicDesktopPaneUI0.getMinimumSize(jDayChooser0);
      jDayChooser0.getActionMap();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(28);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1571);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1108, true);
      focusEvent0.paramString();
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      int int0 = 160;
      jDayChooser0.getRegisteredKeyStrokes();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 160);
      focusEvent1.setSource(metalComboBoxEditor_UIResource0);
      metalComboBoxEditor_UIResource0.focusLost(focusEvent1);
      jDayChooser0.addFocusListener(metalComboBoxEditor_UIResource0);
      jDayChooser0.getActionMap();
      jDayChooser0.updateUI();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "year";
      stringArray0[1] = "year";
      stringArray0[2] = "day";
      stringArray0[3] = "year";
      stringArray0[4] = "day";
      stringArray0[5] = "year";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMonth(1);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.add((Component) jDayChooser0, (Object) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlwaysFireDayProperty(true);
      Date date0 = jDayChooser1.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser1.focusGained((FocusEvent) null);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jCheckBoxMenuItem0, 2, 86400000L, 26, 26, ',', 1563);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setInheritsPopupMenu(true);
      int int0 = 21;
      jDayChooser0.setDebugGraphicsOptions(21);
      jDayChooser0.setLocation(21, 21);
      jDayChooser0.getRootPane();
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.isDecorationBackgroundVisible();
      JSlider jSlider0 = null;
      try {
        jSlider0 = new JSlider(669, 669, 21, (-912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // orientation must be one of: VERTICAL, HORIZONTAL
         //
         verifyException("javax.swing.JSlider", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      Dimension dimension0 = new Dimension();
      jDayChooser0.setMinimumSize(dimension0);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.updateUI();
      TimeZone timeZone0 = TimeZone.getTimeZone("day");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZoneOffset zoneOffset1 = ZoneOffset.from(zoneOffset0);
      TimeZone.getTimeZone((ZoneId) zoneOffset1);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setCalendar(calendar0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      dimension0.setSize(0, 37);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDayBordersVisible(true);
      MockDate mockDate0 = new MockDate(0, 37, 20);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.getMaxSelectableDate();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 0, (-5554L), 928, 928, 'N', 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      jDayChooser0.getRegisteredKeyStrokes();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_REGIONS;
      focusEvent1.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource1 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource1.focusLost(focusEvent0);
      metalComboBoxEditor_UIResource1.setItem(gVTAttributedCharacterIterator_TextAttribute0);
      JDayChooser jDayChooser1 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      jDayChooser1.addFocusListener(metalComboBoxEditor_UIResource1);
      jDayChooser1.getActionMap();
      jDayChooser0.updateUI();
      jDayChooser1.setMaxDayCharacters((-143));
      jDayChooser1.getDaysInMonth();
      jDayChooser1.getDaysInMonth();
      Color color0 = jDayChooser1.getDecorationBackgroundColor();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setDay(28);
      jDayChooser2.setMonth(28);
      jDayChooser0.setDay((int) gVTAttributedCharacterIterator_TextAttribute0.SMALL_CAPS);
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(16, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.580510611766821
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(175);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7734338836114283
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(false);
      Date date1 = jDayChooser0.defaultMaxSelectableDate;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSelectableDateRange(date0, (Date) null);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7107572577786656
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(32);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(32);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.606610584382382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getFloatingColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.805633693905106
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      jDayChooser0.getRegisteredKeyStrokes();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_REGIONS;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      focusEvent1.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource1 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource1.focusLost(focusEvent0);
      JDayChooser jDayChooser1 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      jDayChooser1.addFocusListener(metalComboBoxEditor_UIResource1);
      Color color0 = Color.green;
      jDayChooser0.decorationBackgroundColor = color0;
      jDayChooser1.getActionMap();
      jDayChooser0.updateUI();
      jDayChooser1.setMaxDayCharacters((-143));
      jDayChooser1.getDaysInMonth();
      int int0 = SwingConstants.NEXT;
      jDayChooser1.getDecorationBackgroundColor();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setDay(12);
      jDayChooser2.setMonth(28);
      jDayChooser1.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser2.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
