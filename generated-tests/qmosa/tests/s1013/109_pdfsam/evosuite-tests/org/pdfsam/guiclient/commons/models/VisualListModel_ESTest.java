/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:41:57 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.math.BigInteger;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      visualListModel0.clearData();
      visualListModel0.subList(0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.appendAllElements(arrayDeque0);
      visualListModel0.getElementAt(4);
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      visualListModel0.moveUpIndexes(intArray0);
      intArray0[4] = 4;
      intArray0[5] = (-1);
      intArray0[6] = 4;
      intArray0[7] = 4;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      int int0 = (-166);
      intArray0[0] = (-166);
      intArray0[1] = (-3208);
      intArray0[2] = 1;
      intArray0[3] = 0;
      visualListModel0.moveDownIndex(4);
      intArray0[4] = (-274);
      boolean boolean0 = true;
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements(intArray0, true);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0, "", ":r8}=z5x:spA|]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JList<VisualPageListItem> jList0 = new JList<VisualPageListItem>(visualListModel0);
      jList0.getLastVisibleIndex();
      jList0.firePropertyChange(":@ u", '-', '-');
      List<VisualPageListItem> list0 = jList0.getSelectedValuesList();
      visualListModel0.prependAllElements(list0);
      visualListModel0.moveUpIndex(0);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 3177;
      boolean boolean0 = true;
      visualListModel0.removeElements(1, 3177, true);
      visualListModel0.subList(3177, 3177, true);
      visualListModel0.getElementAt(0);
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.reverseElements(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      byte[][] byteArray0 = new byte[9][9];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-49);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-49);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-74);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-49);
      byteArray3[4] = (byte)2;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-74);
      byteArray3[7] = (byte) (-49);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte)0;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[2];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)0;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[7];
      byteArray7[0] = (byte)0;
      byteArray7[1] = (byte)1;
      byteArray7[2] = (byte)0;
      byteArray7[3] = (byte) (-1);
      byteArray7[4] = (byte)0;
      byteArray7[5] = (byte) (-49);
      byteArray7[6] = (byte) (-49);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[2];
      byteArray8[0] = (byte) (-1);
      byteArray8[1] = (byte)0;
      byteArray0[7] = byteArray8;
      byte[] byteArray9 = new byte[3];
      byteArray9[0] = (byte)0;
      byteArray9[1] = (byte)0;
      byteArray9[2] = (byte) (-49);
      byteArray0[8] = byteArray9;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(255, byteArray0);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 1);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_LCDContrastKey0, defaultTableModel0);
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((byte) (-1), 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1073);
      intArray0[1] = 933;
      intArray0[2] = (-1963);
      intArray0[3] = (-728);
      intArray0[4] = 0;
      visualListModel0.removeElements(intArray0, false);
      int[] intArray1 = new int[0];
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.subList((-873), 0);
      visualListModel0.addAllElements((-873), (Collection<VisualPageListItem>) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1778);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1778);
      intArray0[1] = (-1778);
      intArray0[2] = (-1778);
      intArray0[3] = (-1778);
      intArray0[4] = (-1778);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-1778), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1778
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[4];
      visualListModel0.getListDataListeners();
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2159);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.moveDownIndex(0);
      visualListModel0.reverseElements(intArray1);
      visualListModel0.getElements();
      visualListModel0.removeElements((-242), 0, false);
      visualListModel0.removeElements((-2159), (-1), false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.moveDownIndex((-690));
      int[] intArray0 = new int[9];
      intArray0[0] = (-690);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      intArray0[1] = 2625;
      intArray0[2] = (-690);
      intArray0[3] = (-690);
      intArray0[4] = (-690);
      intArray0[5] = (-690);
      intArray0[6] = (-690);
      intArray0[7] = (-690);
      intArray0[8] = (-690);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.subList((-1789), 719);
      visualListModel0.getElements();
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.data = vector0;
      visualListModel0.removeElements(0, 1000, true);
      int[] intArray0 = new int[8];
      intArray0[0] = 1000;
      visualListModel0.addAllElements(6, (Collection<VisualPageListItem>) null);
      intArray0[1] = 6;
      intArray0[2] = 0;
      intArray0[3] = (-1954);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1000;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.getSize();
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int0 = 1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)112;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1, 1, intArray0, (-1043), 366, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transferType must be eitherDataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.clearData();
      visualListModel0.prependAllElements(hashSet0);
      visualListModel0.addAllElements((-2822), (Collection<VisualPageListItem>) hashSet0);
      visualListModel0.subList((-2453), (-2453));
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((BufferedImage) null, 371, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2055);
      intArray0[1] = 0;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = 1750;
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.setData(vector0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(2004, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2004
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.313153678733635
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getListDataListeners();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2904);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 5197;
      intArray0[6] = 0;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel1.getSize();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.addAllElements(8, (Collection<VisualPageListItem>) null);
      visualListModel0.moveDownIndex(8);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.getElements();
      visualListModel2.removeElements(0, (-1), true);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.removeElements(5197, 0, true);
      visualListModel0.moveUpIndexes(intArray0);
      assertNotSame(visualListModel0, visualListModel1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.clearData();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1277));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1277
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.338371704803573
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<String> vector0 = new Vector<String>();
      visualListModel0.elementsChanged();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      visualListModel0.removeElements(1000, (-690), true);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) priorityQueue0);
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      intArray0[1] = 30000;
      intArray0[2] = 6;
      intArray0[3] = 1691;
      intArray0[4] = 1000;
      intArray0[5] = 0;
      intArray0[6] = 6;
      intArray0[7] = (-1954);
      intArray0[8] = 6;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.getSize();
      visualListModel0.addElementAt((VisualPageListItem) null, (-2822));
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.351673301904631
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getListDataListeners();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2904);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 5197;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel1.getSize();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.addAllElements(8, (Collection<VisualPageListItem>) null);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel2.moveDownIndexes(intArray0);
      visualListModel1.removeElements(intArray0, true);
      visualListModel1.moveUpIndex(2730);
      visualListModel1.getSize();
      visualListModel2.elementChanged((VisualPageListItem) null);
      assertNotSame(visualListModel2, visualListModel0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5001380263654265
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[3];
      visualListModel0.moveDownIndexes(intArray0);
      intArray0[0] = 0;
      visualListModel0.getValidElements();
      visualListModel0.undeleteElements(intArray0);
      intArray0[1] = (-1);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addAllElements(2583, (Collection<VisualPageListItem>) null);
      visualListModel0.moveDownIndex(0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getElements();
      visualListModel0.removeElements(0, 0, true);
      visualListModel0.removeElements((-418), 0, false);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.clearData();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-4020), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-4020)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(11, 11, false);
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      List<VisualPageListItem> list0 = visualListModel1.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 2896;
      int int0 = (-165);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      intArray0[2] = (-165);
      intArray0[3] = 5190;
      intArray0[4] = (-5074);
      intArray0[5] = (-1675);
      intArray0[6] = 50000;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      boolean boolean0 = true;
      visualListModel0.removeElements(intArray0, true);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1, "org.pdfsam.guiclient.commons.models.VisualListModel", "org.pdfsam.guiclient.commons.models.VisualListModel");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      defaultComboBoxModel0.getIndexOf(visualListModel0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.clearData();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel1.addAllElements(8, (Collection<VisualPageListItem>) treeSet0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.prependAllElements(treeSet0);
      visualListModel0.moveUpIndex((-785));
      visualListModel1.getSize();
      visualListModel2.elementChanged((VisualPageListItem) null);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 1897;
      intArray0[1] = 952;
      intArray0[2] = 1093;
      intArray0[3] = 1730;
      intArray0[4] = 3039;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      intArray0[5] = (-2904);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addAllElements(3039, (Collection<VisualPageListItem>) vector0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getSize();
      visualListModel0.moveDownIndex(952);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndex(1897);
      visualListModel0.getSize();
      visualListModel0.updateElementAt((-2904), (VisualPageListItem) null);
      visualListModel0.updateElementAt((-659), (VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      int int0 = visualListModel0.getSize();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.getValidElements();
      visualListModel0.getSize();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.subList(0, 1330, false);
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.removeElements(intArray0, true);
      visualListModel1.moveUpIndex(1330);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<String> stack0 = new Stack<String>();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.moveUpIndexes(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray1 = new int[7];
      intArray1[0] = 3039;
      intArray1[1] = 1730;
      intArray1[2] = (-2904);
      intArray1[3] = (-2904);
      intArray1[4] = 3039;
      intArray1[5] = (-2904);
      intArray1[6] = (-2904);
      visualListModel1.reverseElements(intArray1);
      visualListModel1.moveUpIndexes(intArray1);
      visualListModel1.getSize();
      visualListModel0.moveDownIndex(8);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateClockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.143952200643869
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<String> stack0 = new Stack<String>();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray1 = new int[7];
      intArray1[0] = 3039;
      intArray1[1] = 1730;
      intArray1[2] = 3039;
      intArray1[3] = 1730;
      intArray1[4] = 3039;
      intArray1[5] = 3039;
      intArray1[6] = 3039;
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel3.moveDownIndexes(intArray1);
      VisualListModel visualListModel4 = new VisualListModel();
      visualListModel4.moveUpIndex(1730);
      VisualListModel visualListModel5 = new VisualListModel();
      visualListModel5.getSize();
      visualListModel3.moveDownIndex(3039);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      assertEquals(1, visualListModel0.getSize());
      
      visualListModel0.removeElements(intArray0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.addAllElements((-12), (Collection<VisualPageListItem>) null);
      visualListModel0.updateElementAt((-12), (VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.data = vector0;
      visualListModel0.removeElements((-12), (-12), true);
      int[] intArray0 = new int[8];
      intArray0[0] = (-12);
      visualListModel0.addAllElements((-12), (Collection<VisualPageListItem>) null);
      intArray0[1] = (-12);
      intArray0[2] = (-12);
      intArray0[3] = (-1954);
      intArray0[4] = (-1954);
      vector0.add((VisualPageListItem) null);
      intArray0[5] = (-12);
      intArray0[6] = (-12);
      intArray0[7] = (-12);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements((-12), (Collection<VisualPageListItem>) visualListModel0.data);
      visualListModel0.clearData();
      assertNotSame(visualListModel0, visualListModel1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 1897;
      intArray0[1] = 952;
      intArray0[2] = 1093;
      intArray0[3] = 1730;
      intArray0[4] = 3039;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      intArray0[5] = (-2904);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getSize();
      visualListModel0.moveDownIndex(952);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndex(1897);
      visualListModel0.moveDownIndex((-1131));
      visualListModel0.getSize();
      visualListModel0.updateElementAt(3039, (VisualPageListItem) null);
      visualListModel0.updateElementAt(1331, (VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.getSize();
      visualListModel0.moveUpIndex((-3217));
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<String> stack0 = new Stack<String>();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.moveUpIndexes(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem visualPageListItem1 = null;
      visualListModel1.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getSize();
      int int0 = 1571;
      visualListModel0.moveDownIndex(1571);
      // Undeclared exception!
      try { 
        visualListModel1.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2110688711446103
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<String> stack0 = new Stack<String>();
      int int0 = 1730;
      int int1 = 3039;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray1 = new int[7];
      intArray1[0] = 3039;
      intArray1[1] = 1730;
      intArray1[2] = 3039;
      intArray1[3] = 1730;
      intArray1[4] = 3039;
      visualListModel1.moveUpIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel1.prependAllElements(vector0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.moveUpIndex(360);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<String> stack0 = new Stack<String>();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.moveUpIndexes(intArray0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      vector0.addAll((Collection<? extends VisualPageListItem>) stack1);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.addElement((VisualPageListItem) null);
      visualListModel1.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveUpIndexes(intArray0);
      visualListModel1.getSize();
      visualListModel1.moveUpIndexes(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      visualListModel1.moveDownIndexes(intArray1);
      visualListModel1.prependAllElements(vector0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel2.addElement((VisualPageListItem) null);
      visualListModel2.reverseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3512572841273185
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 1897;
      intArray0[1] = 952;
      visualListModel0.moveDownIndexes(intArray0);
      intArray0[2] = 1093;
      intArray0[3] = 1730;
      intArray0[4] = 1093;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      intArray0[5] = (-2904);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getSize();
      visualListModel0.moveDownIndex(952);
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.prependAllElements(vector0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.elementChanged((VisualPageListItem) null);
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(3, visualListModel0.getSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.539654447440098
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.clearData();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.moveDownIndex(0);
      hashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) hashSet0);
      visualListModel0.clearData();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) hashSet0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }
}
