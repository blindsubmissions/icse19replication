/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:11:54 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBResultSet;
import org.h2.command.dml.ScriptCommand;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin("", stringArray0, "last", "", stringArray0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("last", "", (VersionNumber) null);
      defaultDatabase0.getTable("last as  on ", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "@nUQ~j1=L_-2";
      stringArray0[0] = "@nUQ~j1=L_-2";
      stringArray0[1] = "@9Hg.|XcS";
      String string1 = ">(}PnEHP``g";
      stringArray0[2] = ">(}PnEHP``g";
      SQLUtil.renderColumnNames(stringArray0);
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.mutatesStructure("Can't set query timeout negative");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Can't set query timeout negative";
      stringArray0[1] = "Can't set query timeout negative";
      stringArray0[2] = "drop materialized view";
      stringArray0[3] = "Can't set query timeout negative";
      stringArray0[4] = "2qME?#j";
      stringArray0[5] = "Can't set query timeout negative";
      stringArray0[6] = "Can't set query timeout negative";
      stringArray0[7] = "Can't set query timeout negative";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.removeComments("Can't set query timeout negative");
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      dBCatalog0.setDoc((String) null);
      dBCatalog0.getSchema("TU%#G");
      DBSequence dBSequence0 = new DBSequence("Can't set query timeout negative = 'Can't set query timeout negative' AND Can't set query timeout negative = 'Can't set query timeout negative' AND drop materialized view = 'drop materialized view' AND Can't set query timeout negative = 'Can't set query timeout negative' AND 2qME?#j = '2qME?#j' AND Can't set query timeout negative = 'Can't set query timeout negative' AND Can't set query timeout negative = 'Can't set query timeout negative' AND Can't set query timeout negative = 'Can't set query timeout negative'", (DBSchema) null);
      SQLUtil.typeAndName(dBSequence0);
      SQLUtil.parseColumnTypeAndSize("org.apache.derby.impl.io.vfmem.DataStoreEntry");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Can't set query timeout negative");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "sequence Can't set query timeout negative = 'Can't set query timeout negative' AND Can't set query timeout negative = 'Can't set query timeout negative' AND drop materialized view = 'drop materialized view' AND Can't set query timeout negative = 'Can't set query timeout negative' AND 2qME?#j = '2qME?#j' AND Can't set query timeout negative = 'Can't set query timeout negative' AND Can't set query timeout negative = 'Can't set query timeout negative' AND Can't set query timeout negative = 'Can't set query timeout negative'", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Can't set query timeout negative", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint((String) null, true, dBTable0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.ANTLRStringStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("like");
      String string0 = ";Z|8QB9,6)^6A]Foh";
      SQLUtil.isProcedureCall(";Z|8QB9,6)^6A]Foh");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint(";Z|8QB9,6)^6A]Foh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "[4\u0006uyzyBi{'";
      stringArray0[2] = "Illegal column type format: ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "B3r@m;;vBfKwG?kV11";
      stringArray0[6] = "org.h2.expression.Wildcard";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" = '' AND [4\u0006uyzyBi{' = '[4\u0006uyzyBi{'' AND Illegal column type format:  = 'Illegal column type format: ' AND  = '' AND  = '' AND B3r@m;;vBfKwG?kV11 = 'B3r@m;;vBfKwG?kV11' AND org.h2.expression.Wildcard = 'org.h2.expression.Wildcard'", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("aIe;4-l*#1=7,", (DBSchema) null);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "[4\u0006uyzyBi{'";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "aIe;4-l*#1=7,";
      stringArray1[4] = "org.h2.expression.Wildcard";
      stringArray1[5] = " = '' AND [4\u0006uyzyBi{' = '[4\u0006uyzyBi{'' AND Illegal column type format:  = 'Illegal column type format: ' AND  = '' AND  = '' AND B3r@m;;vBfKwG?kV11 = 'B3r@m;;vBfKwG?kV11' AND org.h2.expression.Wildcard = 'org.h2.expression.Wildcard'";
      stringArray1[6] = "^4>_Nh)ZEhphC#h:";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("y!b", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", dBTable0, (DBDataType) null, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("aIe;4-l*#1=7,", defaultDBTable0, 461, "^4>_Nh)ZEhphC#h:");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", aIe;4-l*#1=7,", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "e8j_%tKc";
      stringArray0[1] = "e8j_%tKc";
      SQLUtil.innerJoin("e8j_%tKc", stringArray0, "2jX8fwwXG", "aV{6NRV", stringArray0);
      String string0 = "(PI";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "e8j_%tKc");
      int int0 = (-40);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-40), (long) (-40));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -40
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p21|W#";
      SQLUtil.leftJoin("p21|W#", stringArray0, "p21|W#", "_3+wD8RPc0@", stringArray0);
      SQLUtil.renderColumnListWithTableName(" dt'zT3dd", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" dt'zT3dd.p21|W#");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("OldEncryptedBootPassword", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2037), (CharSequence) "_3+wD8RPc0@", 25165824, (-2037));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -2037
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDML("M%04+IY");
      String string0 = "*/";
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("*/", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("M%04+IY");
      SQLUtil.addOptionalCondition("!msYMt4 .bM", stringBuilder0);
      String string1 = "{1_Iy+>!%.#";
      SQLUtil.addRequiredCondition("{1_Iy+>!%.#", stringBuilder0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("{1_Iy+>!%.#", "!msYMt4 .bM", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("5D<hSCW", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '5D<hSCW'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "drop index";
      SQLUtil.mutatesStructure("drop index");
      SQLUtil.isQuery("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      String string1 = "q";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.removeUniqueConstraint((DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "FOREIGN KEY ";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "X9y\"&cCx'H{}", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema(">V+e;bEK>AMcK", dBCatalog0);
      dBCatalog0.addSchema(dBSchema0);
      DBPackage dBPackage0 = new DBPackage("FOREIGN KEY ", dBSchema0);
      SQLUtil.ownerDotComponent(dBPackage0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "drop index", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[4] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[5] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.impl.sql.compile.CreateSchemaNode", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.renderValue("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      SQLUtil.removeComments("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      String string0 = "R8?>qrQjQF";
      int int0 = 63;
      StringBuilder stringBuilder0 = new StringBuilder(63);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(63, (CharSequence) "org.apache.derby.impl.sql.compile.CreateSchemaNode");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 63
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Uc#w$*|#azB:jss7r";
      stringArray0[1] = "-";
      String string0 = "org.databene.commons.file.FileSuffixFilter";
      stringArray0[2] = "org.databene.commons.file.FileSuffixFilter";
      stringArray0[3] = "COUNT";
      stringArray0[4] = "zfT{o,=BdH%i~v6>,!";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("8", true);
      String string1 = "56-C-=:8I/!3w+1+l";
      DBCatalog dBCatalog0 = new DBCatalog("56-C-=:8I/!3w+1+l");
      DBSchema dBSchema0 = new DBSchema("//", dBCatalog0);
      dBCatalog0.getSchemas();
      DBPackage dBPackage0 = new DBPackage("Uc#w$*|#azB:jss7r", dBSchema0);
      SQLUtil.ownerDotComponent(dBPackage0);
      SQLUtil.isDML(" as ");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.listIterator();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.normalize("", false);
      String string0 = "-]7}ts7_WNU}\"8woCx";
      DBSchema dBSchema0 = new DBSchema("-]7}ts7_WNU}\"8woCx");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FLOAT8", dBSchema0);
      int int0 = (-209);
      DBDataType.getInstance((-209), "");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderValue((Object) null);
      SQLUtil.removeComments("create materialized view");
      String string1 = "R8?>qrQjQF";
      int int1 = 582;
      StringBuilder stringBuilder0 = new StringBuilder(582);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(63, (CharSequence) "R8?>qrQjQF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 63
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYp'}$.s";
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderValue(nameSpec0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(180);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.139085894695714
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW");
      Integer integer0 = new Integer((-2322));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8&S\"~uQPoEK[zW", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.isIdentical((DBObject) null);
      defaultDBColumn0.setDefaultValue("8&S\"~uQPoEK[zW");
      SQLUtil.renderValue(defaultDBColumn0);
      DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)");
      SQLUtil.normalize("8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)", true);
      SQLUtil.mutatesDataOrStructure("8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)");
      SQLUtil.isDML("8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "call";
      stringArray0[1] = "8 & S \"~uQPoEK[zW : 8&S\" ~ UQPOEK [ ZW (- 2322)";
      stringArray0[2] = "8 & S \"~uQPoEK[zW : 8&S\" ~ UQPOEK [ ZW (- 2322)";
      stringArray0[3] = "8 & S \"~uQPoEK[zW : 8&S\" ~ UQPOEK [ ZW (- 2322)";
      stringArray0[4] = "8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "8 & S \"~uQPoEK[zW : 8&S\" ~ UQPOEK [ ZW (- 2322)", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3306600933628872
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@nUQ~j1=L_-2";
      stringArray0[1] = "@9Hg.|XcS";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("(@nUQ~j1=L_-2, @9Hg.|XcS, )", true);
      String string0 = "//";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("9c/z&wd", dBCatalog0);
      dBCatalog0.getSchemas();
      DBPackage dBPackage0 = new DBPackage("^=)0ov", dBSchema0);
      SQLUtil.removeComments("@nUQ~j1=L_-2");
      SQLUtil.isDML("56-C-=:8I/!3w+1+l");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.listIterator();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1054336368954942
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@nUQ~j1=L_-2";
      stringArray0[1] = "@9Hg.|XcS";
      stringArray0[2] = ">(}PnEHP``g";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("@nUQ~j1=L_-2");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@nUQ~j1=L_-2", defaultDBTable0, (-502), "selectlike");
      defaultDBColumn0.isIdentical(defaultDBTable0);
      defaultDBColumn0.setDefaultValue("@9Hg.|XcS");
      SQLUtil.renderValue("@9Hg.|XcS");
      DBDataType.getInstance((-502), "");
      SQLUtil.normalize("'@9Hg.|XcS'", true);
      SQLUtil.mutatesDataOrStructure("QeH`");
      SQLUtil.isDML("(@nUQ~j1=L_-2, @9Hg.|XcS, >(}PnEHP``g)");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("call", false);
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, " WHERE ", false, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBTable dBTable0 = null;
      DBDataType dBDataType0 = DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW");
      Integer integer0 = new Integer((-2322));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8&S\"~uQPoEK[zW", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBDataType.getInstance(2397, "insert");
      Integer integer1 = RawTransaction.COMMIT;
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select");
      DBDataType dBDataType1 = DBDataType.getInstance(189, "5))CwdJ");
      Integer integer2 = Integer.getInteger("insert", 1003);
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("insert", (DBTable) null, dBDataType1, integer2, integer3);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize(";z|8", true);
      SQLUtil.isQuery("UJ");
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSchema();
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("UJ", (DBSchema) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "; z | 8";
      stringArray0[2] = "; z | 8";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'UJ' has no foreign key with the columns (, ; z | 8, ; z | 8, )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[12];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("s8bNYp'}$.s", stringBuilder0);
      int int0 = (-238843351);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "s8bNYp'}$.s");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-238843351), (CharSequence) charBuffer0, (-238843351), 3332);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -238843351
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2025210748201953
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW");
      Integer integer0 = new Integer((-2322));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8&S\"~uQPoEK[zW", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBDataType.getInstance(2397, "insert");
      SQLUtil.renderValue("insert");
      DBDataType.getInstance((-2322), "alter tablejz@/f");
      boolean boolean0 = false;
      SQLUtil.normalize("'insert'", false);
      SQLUtil.mutatesDataOrStructure("LEADING");
      SQLUtil.isDML("insert");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "LEADING";
      stringArray0[1] = "insert";
      stringArray0[2] = "Q7Fj|PyK#LM'vB.";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "Q7Fj|PyK#LM'vB.", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "FOREIGN KEY ";
      String string1 = "X9y\"&cCx'H{}";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "X9y\"&cCx'H{}", (VersionNumber) null);
      defaultDatabase0.setImportedIndexes(false);
      DBCatalog dBCatalog0 = new DBCatalog("", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema(">V+e;bEK>AMcK", dBCatalog0);
      dBCatalog0.addSchema(dBSchema0);
      DBPackage dBPackage0 = new DBPackage("FOREIGN KEY ", (DBSchema) null);
      SQLUtil.ownerDotComponent(dBPackage0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "drop index", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDML("M%04+IY");
      DBDataType.getInstance((-209), "");
      DBDataType.getInstance(317, "(ax7AX>zheYEQAPA@");
      SQLUtil.isDML("6qa#w=6");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(a&`jA<yP*p`JtT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (a&`jA<yP*p`JtT
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8051274077913924
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.removeComments("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("last", "", (VersionNumber) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IUYH/[<YZQ,RL", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT IUYH/[<YZQ,RL FOREIGN KEY () REFERENCES ()", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "CONSTRAINT IUYH/[<YZQ,RL FOREIGN KEY () REFERENCES ()");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      stringBuilder1.append(0L);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamei7f9+n}dh-", defaultDBTable0, 66552, "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      String string1 = SQLUtil.normalize("CONSTRAINT IUYH/[<YZQ,RL FOREIGN KEY () REFERENCES ()", false);
      assertEquals("CONSTRAINT IUYH / [ < YZQ, RL FOREIGN KEY () REFERENCES ()", string1);
      
      boolean boolean0 = SQLUtil.isDML("drop indexxslah.d");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.isDDL("execute");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "3W1WXxd[x/<M]|";
      stringArray0[6] = "execute";
      stringArray0[7] = "execute";
      SQLUtil.renderColumnListWithTableName("execute", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDML("M%04+IY");
      SQLUtil.normalize("*/", false);
      StringBuilder stringBuilder0 = new StringBuilder("M%04+IY");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("!msYMt4 .bM", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      SQLUtil.addRequiredCondition("X]zB|!bObiHY_gs4X", stringBuilder2);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("constr");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      stringBuilder0.insert(0, (CharSequence) "");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("M%04+IY or !msYMt4 .bM or null and X]zB|!bObiHY_gs4X", stringBuilder1.toString());
      assertEquals("M%04+IY or !msYMt4 .bM or null and X]zB|!bObiHY_gs4X", stringBuilder3.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDML("M%04+IY");
      SQLUtil.normalize("*/", false);
      StringBuilder stringBuilder0 = new StringBuilder("M%04+IY");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!msYMt4 .bM");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!msYMt4 .bM";
      stringArray0[1] = "!msYMt4 .bM";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter index", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      stringBuilder2.append(0L);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", defaultDBTable0, 66552, "select");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("M%04+IY0SELECT", stringBuilder2.toString());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "!msYMt4 .bM", false, stringArray0);
      SQLUtil.normalize("*/", false);
      boolean boolean0 = SQLUtil.isDML("!msYMt4 .bM");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW");
      Integer integer0 = new Integer((-2322));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8&S\"~uQPoEK[zW", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.isIdentical((DBObject) null);
      defaultDBColumn0.setDefaultValue("8&S\"~uQPoEK[zW");
      SQLUtil.renderValue(defaultDBColumn0);
      DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)");
      SQLUtil.normalize("8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)", true);
      DBDataType.getInstance(2397, "(ax7AX>zheYEQAPA@");
      SQLUtil.isDML("REDO_LOG_BINARY");
      SQLUtil.parseColumnTypeAndSize("8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8&S\"~uQPoEK[zW";
      stringArray0[1] = "8&S\"~uQPoEK[zW : 8&S\"~UQPOEK[ZW(-2322)";
      stringArray0[2] = "(ax7AX>zheYEQAPA@";
      stringArray0[3] = "REDO_LOG_BINARY";
      stringArray0[4] = "8&S\"~uQPoEK[zW";
      stringArray0[5] = "(ax7AX>zheYEQAPA@";
      SQLUtil.join("REDO_LOG_BINARY", "8 & S \"~uQPoEK[zW : 8&S\" ~ UQPOEK [ ZW (- 2322)", stringArray0, "8 & S \"~uQPoEK[zW : 8&S\" ~ UQPOEK [ ZW (- 2322)", "V.Q", stringArray0);
      System.setCurrentTimeMillis(2397);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" join ");
      SQLUtil.isDML("M%04+IY");
      SQLUtil.normalize("*/", false);
      StringBuilder stringBuilder0 = new StringBuilder("M%04+IY");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("{hx0~`bt;=^fxm;\"Io<", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      SQLUtil.addRequiredCondition("X]zB|!bObiHY_gs4X", stringBuilder2);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("constr");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      stringBuilder0.insert(0, (CharSequence) " join ");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNotSame(nameSpec0, nameSpec1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isDML("M%04+IY");
      DBDataType.getInstance((-209), "");
      SQLUtil.mutatesDataOrStructure("dwRH(!umf\"Na");
      SQLUtil.isDML("dwRH(!umf\"Na");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("call", false);
      SQLUtil.isQuery("M%04+IY");
      SQLUtil.isDML("5P>cxllEl Umz;2");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("dwRH(!umf\"Na", (String) null, "dwRH(!umf\"Na");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1175899590635634
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDML("M%04+IY");
      DBDataType.getInstance((-209), "");
      String string0 = "dwRH(!umf\"N\\a";
      SQLUtil.mutatesDataOrStructure("dwRH(!umf\"Na");
      SQLUtil.isDML("dwRH(!umf\"Na");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M%04+IY";
      stringArray0[1] = "dwRH(!umf\"Na";
      stringArray0[2] = "call";
      stringArray0[3] = "wIf=Ehmb|ksFpZfk";
      stringArray0[4] = "M%04+IY";
      stringArray0[5] = "M%04+IY";
      stringArray0[6] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      SQLUtil.normalize("call", false);
      SQLUtil.isQuery("M%04+IY");
      SQLUtil.isDML("wIf=Ehmb|ksFpZfk");
      String string1 = "execute";
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDML("M%04+IY");
      DBDataType dBDataType0 = DBDataType.getInstance((-209), "");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-209));
      Integer integer2 = RawTransaction.COMMIT;
      Integer.min(1137, (-209));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer1, integer2);
      defaultDBColumn0.isEquivalent((DBObject) null);
      SQLUtil.isDML("alter tablelike");
      StringBuilder stringBuilder0 = new StringBuilder("&_*");
      StringBuilder stringBuilder1 = stringBuilder0.append(1235);
      SQLUtil.addOptionalCondition("", stringBuilder1);
      assertEquals("&_*1235 or ", stringBuilder1.toString());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&_*";
      stringArray0[1] = "M%04+IY";
      stringArray0[2] = "}Yat*JnYL^\u0000'";
      stringArray0[3] = "alter tablelike";
      stringArray0[4] = "&_*";
      String string0 = SQLUtil.join("", "M%04+IY", stringArray0, "WU8Rw[Vr$K", "", stringArray0);
      assertEquals("WU8Rw[Vr$K as  on M%04+IY.&_* = .&_* and M%04+IY.M%04+IY = .M%04+IY and M%04+IY.}Yat*JnYL^\u0000' = .}Yat*JnYL^\u0000' and M%04+IY.alter tablelike = .alter tablelike and M%04+IY.&_* = .&_*", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getSequences(true);
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}]");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("updatem%04+iy");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "updatem%04+iy";
      stringArray0[1] = "}]";
      stringArray0[2] = "constr";
      stringArray0[3] = "updatem%04+iy";
      stringArray0[4] = null;
      stringArray0[5] = "constr";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "constr", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("insert=edo_log_binary");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("insert=edo_log_binaryCONSTRAINT constr ", stringBuilder0.toString());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.73798344858705
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.removeComments("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("last", "", (VersionNumber) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IUYH/[<YZQ,RL", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cEU:lY`;'C\"A@O]S<");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("", defaultDBTable0.getName());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9867316488081914
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getSequences(true);
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}]");
      tableContainer0.getSchema();
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.renderValue(dBForeignKeyConstraint0);
      SQLUtil.removeComments("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kl7");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.403640410614949
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isDML("");
      SQLUtil.normalize("*/", false);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addOptionalCondition("!msYMt4 .bM", stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      SQLUtil.addRequiredCondition("X]zB|!bObiHY_gs4X", stringBuilder1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("XSLAH.D");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2326944771870663
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      SQLUtil.normalize("", false);
      String string1 = "-]7}ts7_WNU}\"8woCx";
      DBSchema dBSchema0 = new DBSchema("-]7}ts7_WNU}\"8woCx");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FLOAT8", dBSchema0);
      dBSchema0.getTables();
      DBDataType dBDataType0 = DBDataType.getInstance((-209), "");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "update";
      stringArray0[1] = "";
      stringArray0[2] = "d";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.isQuery("");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8326348006222501
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("insert");
      SQLUtil.isDML(":6@~9c=c?f5");
      SQLUtil.normalize("select intodwrh(!umfpn_1", true);
      StringBuilder stringBuilder0 = new StringBuilder("BLOB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BLOB");
      SQLUtil.addOptionalCondition("executedwrh(!umfpn_1", stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      boolean boolean0 = true;
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      SQLUtil.addRequiredCondition("S^8Qt4'Gd!{l3hleZN-", stringBuilder2);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("select intodwrh(!umfpn_1");
      FromVTI fromVTI0 = new FromVTI();
      DBDataType dBDataType0 = DBDataType.getInstance(131, ":6@~9c=c?f5");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0, (Integer) 2);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DBDataType.getInstance((-209), "");
      SQLUtil.mutatesDataOrStructure("dwRH(!umfPN_1");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      SQLUtil.isDML("TRANSACTION_NONE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("dwRH(!umfPN_1");
      SQLUtil.isDML("7A<]/a2)e/\"FIl|K4+E");
      Character character0 = Character.valueOf('4');
      Character.isBmpCodePoint((-209));
      Character.isAlphabetic((-209));
      String string0 = SQLUtil.substituteMarkers("<LxeR:*i}", "call", character0);
      assertEquals("<LxeR:*i}", string0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
      
      boolean boolean1 = SQLUtil.isQuery("- 0");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.338371704803573
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("insert");
      SQLUtil.isDML(":6@~9c=c?f5");
      SQLUtil.normalize("select intodwrh(!umfpn_1", true);
      StringBuilder stringBuilder0 = new StringBuilder("BLOB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BLOB");
      SQLUtil.addOptionalCondition("executedwrh(!umfpn_1", stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      SQLUtil.addRequiredCondition("S^8Qt4'Gd!{l3hleZN-", stringBuilder2);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("select intodwrh(!umfpn_1");
      FromVTI fromVTI0 = new FromVTI();
      SQLUtil.mutatesDataOrStructure("executedwrh(!umfpn_1");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0643625189132626
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW");
      Integer integer0 = new Integer((-2322));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8&S\"~uQPoEK[zW", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.isIdentical((DBObject) null);
      SQLUtil.removeComments("8&S\"~uQPoEK[zW");
      DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW");
      SQLUtil.removeComments("8&S\"~uQPoEK[zW");
      DBDataType.getInstance(2397, "(ax7AX>zheYEQAPA@");
      SQLUtil.isDML("8&S\"~uQPoEK[zW");
      SQLUtil.parseColumnTypeAndSize("h_");
      String string0 = SQLUtil.normalize("8&S\"~uQPoEK[zW", true);
      assertEquals("8 & S \"~uQPoEK[zW\"", string0);
      
      boolean boolean0 = SQLUtil.isQuery("select into");
      boolean boolean1 = SQLUtil.isDML("8&s\"~uqpoek[zw 8&s\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.083377640644436
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = new Integer((-2322));
      SQLUtil.renderValue("%nsert");
      DBDataType.getInstance((-2322), "alter tablejz@/f");
      SQLUtil.normalize("'%nsert'", false);
      SQLUtil.mutatesDataOrStructure("LEADING");
      SQLUtil.isDML("insert");
      Integer.min(49, (-117211462));
      Integer integer1 = RawTransaction.COMMIT;
      SQLUtil.normalize("alter tablejz@/f", false);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("updatetransaction_none");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "8&S\"~uQPoEK[zW";
      DBTable dBTable0 = null;
      DBDataType dBDataType0 = DBDataType.getInstance(2397, "8&S\"~uQPoEK[zW");
      int int0 = (-2322);
      Integer integer0 = new Integer((-2322));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8&S\"~uQPoEK[zW", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("-");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8&S\"~uQPoEK[zW 8&S\"~UQPOEK[ZW(-2322) DEFAULT - NULL";
      SQLUtil.renderColumnListWithTableName("8&S\"~uQPoEK[zW 8&S\"~UQPOEK[ZW(-2322) DEFAULT - NULL", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("8&S\"~uQPoEK[zW");
      String string1 = "eM:NoUcSm*rBDHQ";
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("eM:NoUcSm*rBDHQ", stringBuilder0);
      String string2 = "{1_Iy+>!%.#";
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String string3 = "fT5~xr@=yP<<zS:k!";
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "eM:NoUcSm*rBDHQ", (-2322), 2397);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -2322, end 2397, s.length() 15
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9813325147239833
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer((-209));
      SQLUtil.renderValue(integer0);
      String string0 = "alter tablejz@/f";
      DBDataType.getInstance((-209), "YE<R");
      boolean boolean0 = false;
      SQLUtil.mutatesDataOrStructure("\u0001K\u0003\uFFFF\u0001L\t\uFFFF\u0001J");
      // Undeclared exception!
      SQLUtil.isDML("~s/*'6^CL&BU{?6");
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "delete+7)oeka");
      SQLUtil.removeComments("^YOQ");
      SQLUtil.normalize("delete", false);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("drop materialized viewxslah.d");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("w_^`J", dBSchema0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = Integer.getInteger("delete+7)oeka", integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w_^`J", defaultDBTable0, (DBDataType) null, integer1);
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        errorMessages0.getCharacterStream("drop materialized viewxslah.d");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getCharacterStream
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }
}
