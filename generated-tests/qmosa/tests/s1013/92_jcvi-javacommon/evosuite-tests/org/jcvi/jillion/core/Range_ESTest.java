/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:23:00 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of((-709L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.ofLength(774L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift(774L);
      range0.getBegin();
      Range range2 = Range.ofLength(774L);
      Range.of(0L);
      Range range3 = Range.ofLength(1955L);
      Range range4 = Range.of(774L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range4.getBegin(range_CoordinateSystem0);
      assertEquals(775L, long0);
      
      long long1 = range3.getEnd();
      assertEquals(1954L, long1);
      
      List<Range> list0 = range4.split(774L);
      assertFalse(range4.isEmpty());
      assertTrue(list0.contains(range4));
      
      boolean boolean0 = range3.intersects(range1);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
      
      range_Builder1.expandEnd(774L);
      long long2 = range2.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range range0 = Range.of(3740L);
      Range range1 = Range.ofLength(681L);
      range0.intersection(range1);
      Range range2 = Range.ofLength(0L);
      range0.intersects(range2);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(681L, (-586L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.997068727089017
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift(0L);
      range_Builder0.copy();
      range_Builder0.expandEnd(0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandBegin(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1507L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.396633717042106
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 4294967294 ]/0B");
      range0.intersects(range1);
      range1.iterator();
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 4294967294 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 4294967294 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6635616461296423
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = (-2523L);
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-128L));
      range0.complement(range1);
      Range.of(0L, 0L);
      range0.toString(range_CoordinateSystem0);
      range0.iterator();
      Long long1 = new Long(1L);
      Long.compareUnsigned(3309L, (-128L));
      // Undeclared exception!
      try { 
        Range.of(0L, (-411L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8501476017100575
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(object0);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1L, 1549L);
      Range range2 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd();
      range_Builder0.build();
      range2.getBegin(range_CoordinateSystem2);
      range2.spliterator();
      Range.of(range_CoordinateSystem1, (-607L), 2L);
      range2.iterator();
      range2.getLength();
      Range.of(1142L);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8892425051146353
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.of(9223372036854775807L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5297507429500308
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-767L), 0L);
      Range.of((-834L), (-834L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getLength();
      range0.complement(range2);
      range0.isEmpty();
      range2.getEnd();
      range0.iterator();
      range0.getBegin();
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.337168805378498
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      range1.equals(object0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 726L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1633275625011605
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      String string0 = "";
      Range range1 = Range.of(9223372036854775807L);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.endsBefore(range1);
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd();
      Range range3 = Range.of(9223372036854775807L);
      range2.getBegin(range_CoordinateSystem1);
      range2.iterator();
      range0.isSubRangeOf(range1);
      range3.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.727591939698987
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-128L));
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-124L), 454L);
      List<Range> list1 = range1.split(1517L);
      assertTrue(list1.contains(range1));
      
      List<Range> list2 = range3.complementFrom(list0);
      assertTrue(list2.contains(range0));
      assertFalse(list2.contains(range2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6888794541139402
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      long long0 = new Long(2147483647L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.split(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range2.complementFrom(linkedList1);
      long long1 = 0L;
      Range range3 = Range.of(0L, 2147483647L);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators.values();
      range3.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("o", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5189874790670292
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-767L), 0L);
      long long0 = (-834L);
      Range range2 = Range.of((-834L), (-834L));
      range1.getEnd();
      range0.getEnd();
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range1.iterator();
      range1.isSubRangeOf(range2);
      range2.getEnd();
      Range.ofLength(127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-956L);
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-466L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -466 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.510991464080076
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      range0.getLength();
      range0.intersection(range1);
      Range range2 = Range.of(0L, 2147483647L);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators.values();
      Object object0 = new Object();
      Long long0 = new Long(4294967295L);
      range2.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 4294967295L);
      range0.getEnd();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-1470L), 2147483646L);
      // Undeclared exception!
      try { 
        range2.split((-4050L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6888794541139402
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2189L), (-2189L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2189L), (-232L));
      range0.getEnd();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.spliterator();
      range0.getEnd();
      Range range1 = Range.of(range_CoordinateSystem1, (-1278L), 1687L);
      range1.endsBefore(range0);
      range0.endsBefore(range1);
      String string0 = "b]^-{&wf<M`,n);G1I";
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      linkedList0.add(range0);
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.parseRange("\"'|Mm`-KCv~H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \"'|Mm`-KCv~H into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4696092493198822
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      Long long0 = new Long(2147483647L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.split((long) long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList1.add(range2);
      range2.complementFrom(linkedList1);
      long long1 = 0L;
      Range range3 = Range.of(0L, (long) long0);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators.values();
      range3.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.214496050675049
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2189L), (-2189L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2189L), (-232L));
      range0.getEnd();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.spliterator();
      range0.getEnd();
      Range range1 = Range.of(range_CoordinateSystem1, (-1278L), 1687L);
      range1.endsBefore(range0);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 2103L, 1687L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4908241150578365
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1324L), (-232L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4192641280908087
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.ofLength(1958L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      range0.getLength();
      range1.intersection(range0);
      Range range2 = Range.of(0L, (-1L));
      Range.CoordinateSystem.values();
      range2.getEnd();
      Range.Comparators.values();
      Object object0 = new Object();
      Long long0 = new Long(0L);
      Range range3 = Range.of(773L, 4294967295L);
      Object object1 = new Object();
      range3.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 849L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 849L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.507520601963136
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = (-1470L);
      Range range0 = Range.of((-1470L), (-1470L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 1410L);
      range0.intersects(range1);
      range0.forEach(consumer0);
      range0.intersects(range0);
      Range range2 = Range.of((-32768L), (-1470L));
      List<Range> list0 = range0.complement(range2);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        range0.split((-1470L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.402730283386213
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2189L), (-2189L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2189L), (-232L));
      range0.getEnd();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.spliterator();
      long long0 = 1687L;
      range0.getEnd();
      Range range1 = Range.of(range_CoordinateSystem1, (-1278L), 1687L);
      range1.endsBefore(range0);
      range1.complement(range0);
      long long1 = 0L;
      Range.of((-2189L), (-1504L));
      long long2 = 266L;
      // Undeclared exception!
      try { 
        Range.of(266L, (-2189L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6099645999989627
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      Long long0 = new Long(2147483647L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.split((long) long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList1.add(range2);
      range2.complementFrom(linkedList1);
      long long1 = 0L;
      Range range3 = Range.of(0L, (long) long0);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators.values();
      range3.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3088658662890835
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2189L), (-2189L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2189L), (-232L));
      range0.getEnd();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.spliterator();
      range0.getEnd();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-232L), 9223372036854775035L);
      // Undeclared exception!
      try { 
        range1.split((-1230L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2946849344639144
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775797L));
      String string0 = "";
      Range range1 = Range.of((-9223372036854775797L));
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.endsBefore(range1);
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range range3 = Range.of((-9223372036854775797L));
      range2.getBegin(range_CoordinateSystem1);
      range2.iterator();
      range3.iterator();
      range0.isSubRangeOf(range1);
      range3.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775796L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4329779847108766
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(743L, 743L);
      Range range0 = Range.of(0L, 743L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list1);
      linkedList0.add(range1);
      range0.complementFrom(list0);
      Range range2 = Range.of(743L, 2563L);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators.values();
      range2.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6052719972592016
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      Long long0 = new Long(2147483647L);
      List<Range> list0 = range1.split((long) long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList1.add(range0);
      range1.complementFrom(linkedList1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd();
      Range range2 = Range.of(2147483647L);
      range2.getBegin(range_CoordinateSystem0);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("V'!L|{4D?nD18s)U[Wf", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse V'!L|{4D?nD18s)U[Wf into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.110873864173309
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.ofLength(1958L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      range0.getLength();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(0L, (-1L));
      Range.CoordinateSystem.values();
      range3.getEnd();
      Range.Comparators.values();
      Object object0 = new Object();
      Long long0 = new Long(0L);
      Range.of((-32768L), (-2623L));
      Object object1 = new Object();
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 89L, 2147483647L);
      long long1 = range0.getEnd();
      assertEquals(1957L, long1);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem1, (-2623L), (-1L));
      List<Range> list0 = range5.split(89L);
      List<Range> list1 = range2.complement(range0);
      assertEquals(0, list1.size());
      
      List<Range> list2 = range4.complementFrom(list0);
      assertTrue(list2.contains(range5));
      assertFalse(list0.contains(range5));
      assertFalse(list2.equals((Object)list0));
      assertEquals(30, list0.size());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5785547225574548
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.endsBefore(range1);
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      range1.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd();
      Range range3 = Range.of(9223372036854775807L);
      range2.getBegin(range_CoordinateSystem1);
      range2.iterator();
      range0.isSubRangeOf(range1);
      range3.getEnd();
      Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-9223372036854775808L), (-9223372036854775808L));
      range2.getEnd();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 9223372036854775807L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.023648232164306
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(1958L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1958L, 9223372036854775807L);
      range0.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range2.getEnd(range_CoordinateSystem0);
      range0.getEnd();
      Range range3 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem2);
      range2.iterator();
      range3.isSubRangeOf(range1);
      range2.getEnd();
      Range range4 = Range.ofLength(0L);
      Range.of(range_CoordinateSystem1, 9223372036854775806L, (-9223372036854775808L));
      range4.getEnd();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem3, (-2945L), 4294967295L);
      List<Range> list0 = range0.split(897L);
      Range range5 = Range.of(1958L);
      range5.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Ranges");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Ranges
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.182992772224098
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.endsBefore(range1);
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(4294967295L);
      range2.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 9223372036854775807L, (-9223372036854775808L));
      range3.getEnd();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-1535L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1536 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6699577386455746
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(2147483647L);
      range0.startsBefore(range0);
      range0.getLength();
      Range range1 = range0.intersection(range0);
      Range range2 = Range.of(0L, 2147483647L);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators.values();
      Object object0 = new Object();
      Long long0 = new Long(4294967295L);
      List<Range> list0 = range2.split(2147483647L);
      range1.complementFrom(list0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(2147483647L, 9223372036854773849L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6542220950859425
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of((-1470L), (-1470L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 1410L);
      range0.intersects(range1);
      range0.forEach(consumer0);
      range0.intersects(range0);
      Range range2 = Range.of((-32768L), (-1470L));
      range0.complement(range2);
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 0L, (-1470L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.173768833930095
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L), 685L);
      range0.iterator();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
