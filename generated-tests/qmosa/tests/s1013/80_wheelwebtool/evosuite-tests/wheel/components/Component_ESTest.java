/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:22:51 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      Form form1 = form0.renderHint((CharSequence) null);
      boolean boolean0 = true;
      form1._setBuilt(true);
      form1._getActions();
      Label label0 = null;
      try {
        label0 = new Label(form1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Form form0 = new Form("p");
      Form form1 = form0.renderHint("p");
      Form form2 = form1.addFormValidationError("'");
      TextInput textInput0 = null;
      try {
        textInput0 = new TextInput(form2, "'", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "T\"gj:", "T\"gj:");
      Checkbox checkbox0 = new Checkbox(textArea0, "Col component can be added only to a TableBlock.", "T\"gj:");
      String string0 = "textarea";
      Table table0 = null;
      try {
        table0 = new Table(checkbox0, "textarea");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Component component0 = null;
      String string0 = "Form elements can be created only by compoents that are attached to a form component.";
      Submit submit0 = new Submit((Component) null, "Form elements can be created only by compoents that are attached to a form component.", "Form elements can be created only by compoents that are attached to a form component.");
      // Undeclared exception!
      try { 
        submit0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "SCW|8@I3<M_#";
      Form form0 = new Form("SCW|8@I3<M_#");
      String string1 = "";
      Radio radio0 = new Radio(form0, "", "SCW|8@I3<M_#");
      Checkbox checkbox0 = new Checkbox(radio0, "r^yveJ>1]lg", "r^yveJ>1]lg");
      form0._getRenderableChildren();
      String string2 = "";
      FormElement formElement0 = checkbox0.setFormElementName("");
      TextInput textInput0 = null;
      try {
        textInput0 = new TextInput(formElement0, "", "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.38888971472958
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "", "");
      Link link0 = new Link(radio0, (Object) null);
      Label label0 = new Label(radio0, link0);
      Table table0 = new Table(label0, "");
      Table table1 = table0.renderHint("");
      TableBlock tableBlock0 = table1.colgroup();
      // Undeclared exception!
      try { 
        tableBlock0.id("end tag not allowed in epilog but got ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "SWNF-1sOm[59|@u", "SWNF-1sOm[59|@u");
      fileInput0.getMaxMemoryFileSize();
      Submit submit0 = new Submit(fileInput0, "SWNF-1sOm[59|@u", "b");
      FileInput fileInput1 = new FileInput(submit0, "SWNF-1sOm[59|@u", "SWNF-1sOm[59|@u");
      // Undeclared exception!
      try { 
        submit0.big((Object) fileInput1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "end tag name can not be null";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("end tag name can not be null");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h3((Object) "end tag name can not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5740973368489726
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "o";
      Form form0 = new Form("o");
      String string1 = "multiple";
      Form form1 = form0.renderHint("o");
      Any any0 = null;
      try {
        any0 = new Any(form1, "o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7140875411870102
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Form form0 = new Form("ev,?6;>D]");
      Form form1 = form0.renderHint("ev,?6;>D]");
      Form form2 = form1.addFormValidationRule("ev,?6;>D]", "ev,?6;>D]");
      Form form3 = form2.addFormValidationError((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Form form4 = form3._buildFromSerializedString(stringArray0);
      form2.getComponentName();
      // Undeclared exception!
      try { 
        form4.id("xe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "zp`L^}";
      Checkbox checkbox0 = new Checkbox(errorPage0, "0[", "zp`L^}");
      FormElement formElement0 = checkbox0.addValidationError("zp`L^}");
      StandaloneComponent standaloneComponent0 = formElement0._getTopLevelComponent(true);
      NumberInput numberInput0 = new NumberInput(standaloneComponent0, "4Jz;n.k-F5{vP", "");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0[";
      stringArray0[1] = "";
      stringArray0[2] = "4Jz;n.k-F5{vP";
      stringArray0[3] = "4Jz;n.k-F5{vP";
      stringArray0[4] = "0[";
      Block block0 = new Block(standaloneComponent0);
      block0.s((Object) "0[");
      Hidden hidden0 = new Hidden(errorPage0, "3\"#8|T[#ADWHp", "zp`L^}");
      Hidden hidden1 = new Hidden(checkbox0, "", "3\"#8|T[#ADWHp");
      hidden1.defaultTagName();
      ActionExpression actionExpression0 = new ActionExpression("");
      ActionExpression actionExpression1 = actionExpression0.submitForm(false);
      Form form0 = null;
      try {
        form0 = new Form(standaloneComponent0, (String) null, actionExpression1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      String string0 = "";
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      Table table0 = new Table(label0, "");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      
      Block block0 = (Block)table0.h6();
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      Table table1 = table0.renderHint("");
      assertNotNull(table1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.colgroup();
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      String string1 = "address";
      Hidden hidden0 = new Hidden(link0, "address", "a");
      assertNotNull(hidden0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertEquals("a", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertEquals("address", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      
      String string2 = hidden0.defaultTagName();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("input", string2);
      assertNotNull(string2);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(hidden0.isValid());
      assertEquals("a", hidden0.getComponentId());
      assertTrue(hidden0.isEmpty());
      assertEquals("address", hidden0.getFormElementName());
      assertEquals("input", hidden0.defaultTagName());
      assertFalse(hidden0._isGeneratedId());
      
      String string3 = "";
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      
      Form form1 = form0.renderHint((CharSequence) null);
      assertNotNull(form1);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      form1._setBuilt(true);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertTrue(form0._isBuilt());
      assertTrue(form1._isBuilt());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      List<ActionExpression> list0 = form1._getActions();
      assertNull(list0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertTrue(form0._isBuilt());
      assertTrue(form1._isBuilt());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      // Undeclared exception!
      try { 
        form0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Form form0 = new Form("ev,?6;>D]");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("ev,?6;>D]", form0.getComponentId());
      
      Form form1 = form0.renderHint("ev,?6;>D]");
      assertNotNull(form1);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("ev,?6;>D]", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("ev,?6;>D]", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      Form form2 = form1.addFormValidationRule("ev,?6;>D]", "ev,?6;>D]");
      assertNotNull(form2);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("ev,?6;>D]", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("ev,?6;>D]", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertEquals("ev,?6;>D]", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      
      Form form3 = form2.addFormValidationError((String) null);
      assertNotNull(form3);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("ev,?6;>D]", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("ev,?6;>D]", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertEquals("ev,?6;>D]", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertFalse(form3._isBuilt());
      assertEquals("ev,?6;>D]", form3.getComponentId());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form1, form3);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertSame(form2, form3);
      assertSame(form3, form0);
      assertSame(form3, form1);
      assertSame(form3, form2);
      
      String[] stringArray0 = new String[1];
      Set<FormElement> set0 = form2.getRewindFormElements();
      assertNotNull(set0);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("ev,?6;>D]", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("ev,?6;>D]", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertEquals("ev,?6;>D]", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form1, form3);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertSame(form2, form3);
      
      stringArray0[0] = null;
      Form form4 = form3._buildFromSerializedString(stringArray0);
      assertNotNull(form4);
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("ev,?6;>D]", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("ev,?6;>D]", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertEquals("ev,?6;>D]", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertFalse(form3._isBuilt());
      assertEquals("ev,?6;>D]", form3.getComponentId());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertFalse(form4._isBuilt());
      assertFalse(form4._isGeneratedId());
      assertEquals("ev,?6;>D]", form4.getComponentId());
      assertEquals("form", form4.defaultTagName());
      assertEquals(1, stringArray0.length);
      assertSame(form0, form4);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form1, form4);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form1, form3);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertSame(form2, form4);
      assertSame(form2, form3);
      assertSame(form3, form0);
      assertSame(form3, form1);
      assertSame(form3, form2);
      assertSame(form3, form4);
      assertSame(form4, form1);
      assertSame(form4, form0);
      assertSame(form4, form2);
      assertSame(form4, form3);
      
      String string0 = "xe";
      // Undeclared exception!
      try { 
        form4.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "org.mvel.conversion.IntegerCH$4";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.IntegerCH$4");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("org.mvel.conversion.IntegerCH$4", xmlEntityRef0.getComponentId());
      
      String string1 = "or3Yi";
      XmlEntityRef xmlEntityRef1 = (XmlEntityRef)xmlEntityRef0.actionBinding("or3Yi");
      assertNotNull(xmlEntityRef1);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("org.mvel.conversion.IntegerCH$4", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertEquals("org.mvel.conversion.IntegerCH$4", xmlEntityRef1.getComponentId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertSame(xmlEntityRef0, xmlEntityRef1);
      assertSame(xmlEntityRef1, xmlEntityRef0);
      
      String string2 = "LB!R";
      // Undeclared exception!
      try { 
        xmlEntityRef0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "org.mvel.conversion.ntegerCH$4";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.ntegerCH$4");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("org.mvel.conversion.ntegerCH$4", xmlEntityRef0.getComponentId());
      
      String string1 = "or3Yi";
      XmlEntityRef xmlEntityRef1 = (XmlEntityRef)xmlEntityRef0.actionBinding("or3Yi");
      assertNotNull(xmlEntityRef1);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("org.mvel.conversion.ntegerCH$4", xmlEntityRef0.getComponentId());
      assertEquals("org.mvel.conversion.ntegerCH$4", xmlEntityRef1.getComponentId());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertSame(xmlEntityRef0, xmlEntityRef1);
      assertSame(xmlEntityRef1, xmlEntityRef0);
      
      // Undeclared exception!
      try { 
        xmlEntityRef1.numberInput("LB!R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "SCW|8@I3<M_#";
      Form form0 = new Form("SCW|8@I3<M_#");
      assertNotNull(form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      String string1 = "";
      Radio radio0 = new Radio(form0, "", "SCW|8@I3<M_#");
      assertNotNull(radio0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("SCW|8@I3<M_#", radio0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(radio0, "r^yveJ>1]lg", "r^yveJ>1]lg");
      assertNotNull(checkbox0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("SCW|8@I3<M_#", radio0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("r^yveJ>1]lg", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("r^yveJ>1]lg", checkbox0.getFormElementName());
      
      List<RenderableComponent> list0 = form0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string2 = "";
      FormElement formElement0 = checkbox0.setFormElementName("");
      assertNotNull(formElement0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("SCW|8@I3<M_#", radio0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("r^yveJ>1]lg", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("r^yveJ>1]lg", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      // Undeclared exception!
      try { 
        formElement0.fileInput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.48495232717821
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("only one docdecl allowed in XML document");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      
      Form form0 = new Form(errorPage0, "only one docdecl allowed in XML document", actionExpression0);
      assertNotNull(form0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      
      Form form1 = form0.addFormElement(radio0);
      assertNotNull(form1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      Form form2 = form1.addFormValidationError("");
      assertNotNull(form2);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form2, form0);
      assertSame(form2, form1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "only one docdecl allowed in XML document";
      Form form3 = form1._buildFromSerializedString(stringArray0);
      assertNotNull(form3);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form3.getComponentId());
      assertFalse(form3._isBuilt());
      assertEquals(3, stringArray0.length);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form1, form3);
      assertSame(form3, form1);
      assertSame(form3, form2);
      assertSame(form3, form0);
      
      Form form4 = form1.addFormValidationRule("ul", "org.mvel.ast.IfNode");
      assertNotNull(form4);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("only one docdecl allowed in XML document", form4.getComponentId());
      assertEquals("form", form4.defaultTagName());
      assertFalse(form4._isBuilt());
      assertFalse(form4._isGeneratedId());
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form0, form4);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form1, form3);
      assertSame(form1, form4);
      assertSame(form4, form1);
      assertSame(form4, form0);
      assertSame(form4, form3);
      assertSame(form4, form2);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Text text0 = (Text)errorPage0.htmlText(long0);
      assertNotNull(text0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertNull(text0.defaultTagName());
      assertTrue(text0._isGeneratedId());
      assertEquals("Text_1", text0.getComponentId());
      assertTrue(text0.isHtml());
      assertFalse(text0.isCdata());
      
      form4._setBuilt(true);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertTrue(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertTrue(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertTrue(form4._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form4.getComponentId());
      assertEquals("form", form4.defaultTagName());
      assertFalse(form4._isGeneratedId());
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form0, form1);
      assertSame(form0, form4);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form1, form3);
      assertSame(form1, form4);
      assertSame(form4, form1);
      assertSame(form4, form0);
      assertSame(form4, form3);
      assertSame(form4, form2);
      
      DateInput dateInput0 = new DateInput(radio0, "", "", "");
      assertNotNull(dateInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("DateInput_1", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("", dateInput0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      
      // Undeclared exception!
      try { 
        dateInput0._setSubmitValue(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern ''.
         //
         verifyException("wheel.components.DateInput", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Form form0 = new Form("C");
      assertNotNull(form0);
      assertEquals("C", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        form0.placeholder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.480557892710279
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("only one docdecl allowed in XML document");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      
      Form form0 = new Form(errorPage0, "only one docdecl allowed in XML document", actionExpression0);
      assertNotNull(form0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      
      Form form1 = form0.addFormElement(radio0);
      assertNotNull(form1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      Form form2 = form1.addFormValidationError("");
      assertNotNull(form2);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("only one docdecl allowed in XML document", form2.getComponentId());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "only one docdecl allowed in XML document";
      Form form3 = form1._buildFromSerializedString(stringArray0);
      assertNotNull(form3);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form3.getComponentId());
      assertFalse(form3._isGeneratedId());
      assertEquals(3, stringArray0.length);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form1, form0);
      assertSame(form1, form3);
      assertSame(form1, form2);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertSame(form3, form0);
      
      Form form4 = form1.addFormValidationRule("ul", "org.mvel.ast.IfNode");
      assertNotNull(form4);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("only one docdecl allowed in XML document", form4.getComponentId());
      assertFalse(form4._isBuilt());
      assertEquals("form", form4.defaultTagName());
      assertFalse(form4._isGeneratedId());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form1, form0);
      assertSame(form1, form3);
      assertSame(form1, form2);
      assertSame(form1, form4);
      assertSame(form4, form3);
      assertSame(form4, form0);
      assertSame(form4, form1);
      assertSame(form4, form2);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Text text0 = (Text)errorPage0.htmlText(long0);
      assertNotNull(text0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Text_1", text0.getComponentId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isCdata());
      assertTrue(text0.isHtml());
      assertTrue(text0._isGeneratedId());
      
      form4._setBuilt(true);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(form0._isGeneratedId());
      assertTrue(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertTrue(form1._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form4.getComponentId());
      assertEquals("form", form4.defaultTagName());
      assertFalse(form4._isGeneratedId());
      assertTrue(form4._isBuilt());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form1, form0);
      assertSame(form1, form3);
      assertSame(form1, form2);
      assertSame(form1, form4);
      assertSame(form4, form3);
      assertSame(form4, form0);
      assertSame(form4, form1);
      assertSame(form4, form2);
      
      Table table0 = new Table(form1, "");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(form0._isGeneratedId());
      assertTrue(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertTrue(form1._isBuilt());
      
      TableBlock tableBlock0 = table0.thead();
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(form0._isGeneratedId());
      assertTrue(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertTrue(form1._isBuilt());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form1, form0);
      assertSame(form1, form3);
      assertSame(form1, form2);
      assertSame(form1, form4);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      String string0 = "W!!HM-}+ZD0#;3 ";
      String string1 = "empty number value";
      TextInput textInput0 = new TextInput(errorPage0, "W!!HM-}+ZD0#;3 ", "empty number value");
      assertNotNull(textInput0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("empty number value", textInput0.getComponentId());
      assertEquals("W!!HM-}+ZD0#;3 ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      
      String string2 = " and ";
      String string3 = "Ueg}$>3MP6a";
      String string4 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      
      String string5 = "";
      Checkbox checkbox0 = new Checkbox(textInput0, "", "W!!HM-}+ZD0#;3 ");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("empty number value", textInput0.getComponentId());
      assertEquals("W!!HM-}+ZD0#;3 ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("W!!HM-}+ZD0#;3 ", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      
      FormElement formElement0 = checkbox0.validationRule(" and ", " and ");
      assertNotNull(formElement0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("empty number value", textInput0.getComponentId());
      assertEquals("W!!HM-}+ZD0#;3 ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("W!!HM-}+ZD0#;3 ", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("W!!HM-}+ZD0#;3 ", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      DynamicSelectModel dynamicSelectModel0 = formElement0.selectModel();
      assertNotNull(dynamicSelectModel0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("empty number value", textInput0.getComponentId());
      assertEquals("W!!HM-}+ZD0#;3 ", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("W!!HM-}+ZD0#;3 ", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("W!!HM-}+ZD0#;3 ", formElement0.getComponentId());
      assertEquals("", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      Select select0 = null;
      try {
        select0 = new Select(textInput0, "empty number value", "W!!HM-}+ZD0#;3 ", dynamicSelectModel0, "Ueg}$>3MP6a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      Table table0 = new Table(label0, "");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      
      Table table1 = table0.renderHint("");
      assertNotNull(table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.colgroup();
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = (Block)errorPage0.h1();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("");
      assertNotNull(initialFieldValue0);
      assertEquals("", initialFieldValue0.getStringReplacement());
      
      Text text0 = new Text(radio0, initialFieldValue0);
      assertNotNull(text0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("", initialFieldValue0.getStringReplacement());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
      
      boolean boolean0 = text0.isHtml();
      assertFalse(boolean0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("", initialFieldValue0.getStringReplacement());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      assertFalse(text0.isCdata());
      assertTrue(text0._isGeneratedId());
      assertNull(text0.defaultTagName());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("only one docdecl allowed in XML document");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      
      Form form0 = new Form(errorPage0, "only one docdecl allowed in XML document", actionExpression0);
      assertNotNull(form0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      
      Form form1 = form0.addFormElement(radio0);
      assertNotNull(form1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      Form form2 = form1.addFormValidationError("");
      assertNotNull(form2);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form2.getComponentId());
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form0);
      assertSame(form2, form1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "only one docdecl allowed in XML document";
      Form form3 = form1._buildFromSerializedString(stringArray0);
      assertNotNull(form3);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertFalse(form3._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form3.getComponentId());
      assertFalse(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertEquals(3, stringArray0.length);
      assertSame(form0, form3);
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertSame(form3, form0);
      
      Form form4 = form1.addFormValidationRule("ul", "org.mvel.ast.IfNode");
      assertNotNull(form4);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form4.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form4.getComponentId());
      assertFalse(form4._isGeneratedId());
      assertFalse(form4._isBuilt());
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form4);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form4, form0);
      assertSame(form4, form1);
      assertSame(form4, form2);
      assertSame(form4, form3);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Text text0 = (Text)errorPage0.htmlText(long0);
      assertNotNull(text0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNull(text0.defaultTagName());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertTrue(text0.isHtml());
      assertTrue(text0._isGeneratedId());
      
      form4._setBuilt(true);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertTrue(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertTrue(form1._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form4.defaultTagName());
      assertTrue(form4._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form4.getComponentId());
      assertFalse(form4._isGeneratedId());
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form4);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form4, form0);
      assertSame(form4, form1);
      assertSame(form4, form2);
      assertSame(form4, form3);
      
      Link link1 = (Link)form3.a();
      assertFalse(link1.equals((Object)link0));
      assertNotNull(link1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link1._isGeneratedId());
      assertEquals("a", link1.defaultTagName());
      assertEquals("Link_2", link1.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertTrue(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertTrue(form1._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form3._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form3.getComponentId());
      assertTrue(form3._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertEquals(3, stringArray0.length);
      assertNotSame(link1, link0);
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form4);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertSame(form3, form4);
      assertSame(form3, form0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "#aDxdpT^-=zU;sc$", "#aDxdpT^-=zU;sc$");
      assertNotNull(radio0);
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getFormElementName());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(radio0, "[VW", "[VW");
      assertNotNull(checkbox0);
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getFormElementName());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("[VW", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("[VW", checkbox0.getFormElementName());
      
      FormElement formElement0 = checkbox0.value("");
      assertNotNull(formElement0);
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getFormElementName());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("[VW", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("[VW", checkbox0.getFormElementName());
      assertEquals("[VW", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("[VW", formElement0.getComponentId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      NumberInput numberInput0 = new NumberInput(formElement0, "CHECKCAST java/lang/Short", "6T_l+W)4`V3");
      assertNotNull(numberInput0);
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getFormElementName());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("[VW", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("[VW", checkbox0.getFormElementName());
      assertEquals("[VW", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("[VW", formElement0.getComponentId());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertEquals("6T_l+W)4`V3", numberInput0.getComponentId());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("CHECKCAST java/lang/Short", numberInput0.getFormElementName());
      assertFalse(numberInput0._isGeneratedId());
      
      String string0 = numberInput0._applyFormat("#aDxdpT^-=zU;sc$");
      assertNotNull(string0);
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getFormElementName());
      assertEquals("#aDxdpT^-=zU;sc$", radio0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("[VW", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("[VW", checkbox0.getFormElementName());
      assertEquals("[VW", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("[VW", formElement0.getComponentId());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertEquals("6T_l+W)4`V3", numberInput0.getComponentId());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("CHECKCAST java/lang/Short", numberInput0.getFormElementName());
      assertFalse(numberInput0._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("M,dNIGMk0F)-J");
      assertNotNull(dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      
      ElExpression elExpression0 = new ElExpression("java.lang.String@0000000007");
      assertNotNull(elExpression0);
      assertEquals(27, elExpression0.length());
      
      ElExpression elExpression1 = elExpression0.errorMessage("[VW");
      assertNotNull(elExpression1);
      assertEquals(27, elExpression0.length());
      assertEquals(27, elExpression1.length());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      
      RadioGroup radioGroup0 = null;
      try {
        radioGroup0 = new RadioGroup(numberInput0, "6T_l+W)4`V3", "[VW", dynamicSelectModel1, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "H(L>(oDi]S8G@lw4";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("H(L>(oDi]S8G@lw4");
      assertNotNull(xmlEntityRef0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("H(L>(oDi]S8G@lw4", xmlEntityRef0.getComponentId());
      
      XmlEntityRef xmlEntityRef1 = (XmlEntityRef)xmlEntityRef0.clasS("H(L>(oDi]S8G@lw4");
      assertNotNull(xmlEntityRef1);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("H(L>(oDi]S8G@lw4", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef1.defaultTagName());
      assertFalse(xmlEntityRef1._isGeneratedId());
      assertEquals("H(L>(oDi]S8G@lw4", xmlEntityRef1.getComponentId());
      assertSame(xmlEntityRef0, xmlEntityRef1);
      assertSame(xmlEntityRef1, xmlEntityRef0);
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("H(L>(oDi]S8G@lw4", (String) null);
      assertNotNull(initialFieldValue0);
      assertNull(initialFieldValue0.getStringReplacement());
      
      TextArea textArea0 = new TextArea(xmlEntityRef0, "H(L>(oDi]S8G@lw4", "H(L>(oDi]S8G@lw4");
      assertNotNull(textArea0);
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("H(L>(oDi]S8G@lw4", xmlEntityRef0.getComponentId());
      assertEquals("H(L>(oDi]S8G@lw4", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("H(L>(oDi]S8G@lw4", textArea0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        textArea0.ul();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      
      Link link0 = new Link(radio0, radio0);
      assertNotNull(link0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      Table table0 = new Table(label0, "");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      
      Table table1 = table0.renderHint("");
      assertNotNull(table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.colgroup();
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TextArea textArea0 = new TextArea(errorPage0, "k7%X-AKOA4=<t^fx", "k7%X-AKOA4=<t^fx");
      assertNotNull(textArea0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("k7%X-AKOA4=<t^fx", textArea0.getComponentId());
      assertEquals("k7%X-AKOA4=<t^fx", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      
      // Undeclared exception!
      try { 
        textArea0.sup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.002883041090651
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "SCW|8@I3<M_#";
      Form form0 = new Form("SCW|8@I3<M_#");
      assertNotNull(form0);
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      String string1 = "";
      Radio radio0 = new Radio(form0, "", "SCW|8@I3<M_#");
      assertNotNull(radio0);
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("SCW|8@I3<M_#", radio0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      
      Checkbox checkbox0 = new Checkbox(radio0, "r^yveJ>1]lg", "r^yveJ>1]lg");
      assertNotNull(checkbox0);
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertEquals("SCW|8@I3<M_#", radio0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("r^yveJ>1]lg", checkbox0.getComponentId());
      assertEquals("r^yveJ>1]lg", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      
      List<RenderableComponent> list0 = form0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("SCW|8@I3<M_#", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        radio0.cite();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Component component0 = null;
      String string0 = "3K";
      Submit submit0 = new Submit((Component) null, "3K", "3K");
      assertNotNull(submit0);
      assertTrue(submit0.isEmpty());
      assertEquals("3K", submit0.getComponentId());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("3K", submit0.getFormElementName());
      
      String string1 = "QPaZ&6@$F4lN~]_kpk9";
      FormElement formElement0 = submit0.value("QPaZ&6@$F4lN~]_kpk9");
      assertNotNull(formElement0);
      assertTrue(submit0.isEmpty());
      assertEquals("3K", submit0.getComponentId());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("3K", submit0.getFormElementName());
      assertEquals("3K", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("3K", formElement0.getFormElementName());
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      
      // Undeclared exception!
      try { 
        formElement0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4985291746095726
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      
      Table table0 = new Table(label0, "");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      
      Table table1 = table0.renderHint("");
      assertNotNull(table1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table0.tbody();
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertSame(table0, table1);
      
      List<RenderableComponent> list0 = new LinkedList<RenderableComponent>();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Block block0 = (Block)errorPage0.sub();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      TableBlock tableBlock1 = tableBlock0.id("end tag not allowed in epilog but got ");
      assertNotNull(tableBlock1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("end tag not allowed in epilog but got ", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("end tag not allowed in epilog but got ", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertSame(table0, table1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      TableRow tableRow0 = tableBlock1.tr();
      assertNotNull(tableRow0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("end tag not allowed in epilog but got ", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("end tag not allowed in epilog but got ", tableBlock1.getComponentId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertSame(table0, table1);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      
      Radio radio1 = new Radio(errorPage0, "|G8%{3=0J}", (String) null);
      assertFalse(radio1.equals((Object)radio0));
      assertNotNull(radio1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("|G8%{3=0J}", radio1.getFormElementName());
      assertEquals("Radio_2", radio1.getComponentId());
      assertTrue(radio1.isEmpty());
      assertEquals("input", radio1.defaultTagName());
      assertTrue(radio1.isValid());
      assertTrue(radio1._isGeneratedId());
      
      Checkbox checkbox0 = new Checkbox(radio0, "", "frameset");
      assertFalse(radio0.equals((Object)radio1));
      assertNotNull(checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("frameset", checkbox0.getComponentId());
      assertEquals("", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      
      FormElement formElement0 = checkbox0.value((String) null);
      assertFalse(radio0.equals((Object)radio1));
      assertNotNull(formElement0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("frameset", checkbox0.getComponentId());
      assertEquals("", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("frameset", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertNotSame(radio0, radio1);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      Table table0 = new Table(errorPage0, "z;/]X0W.dlZ-UT/");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table0.getComponentId());
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertNotNull(table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.tfoot();
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Table table2 = (Table)tableBlock0.table();
      assertFalse(table2.equals((Object)table0));
      assertFalse(table2.equals((Object)table1));
      assertNotNull(table2);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertEquals("Table_1", table2.getComponentId());
      assertTrue(table2._isGeneratedId());
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertNotSame(table2, table0);
      assertNotSame(table2, table1);
      
      TableBlock tableBlock1 = tableBlock0.id("ov3ukr^H;i_c<d");
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertNotNull(tableBlock1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("ov3ukr^H;i_c<d", tableBlock0.getComponentId());
      assertEquals("ov3ukr^H;i_c<d", tableBlock1.getComponentId());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      TableBlock tableBlock2 = tableBlock1.id("ov3ukr^H;i_c<d");
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertNotNull(tableBlock2);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("ov3ukr^H;i_c<d", tableBlock0.getComponentId());
      assertEquals("ov3ukr^H;i_c<d", tableBlock1.getComponentId());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock2._isGeneratedId());
      assertEquals("ov3ukr^H;i_c<d", tableBlock2.getComponentId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock0, tableBlock2);
      assertSame(tableBlock1, tableBlock2);
      assertSame(tableBlock1, tableBlock0);
      assertSame(tableBlock2, tableBlock0);
      assertSame(tableBlock2, tableBlock1);
      
      TableRow tableRow0 = tableBlock1.tr();
      assertFalse(table0.equals((Object)table2));
      assertFalse(table1.equals((Object)table2));
      assertNotNull(tableRow0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table0.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("z;/]X0W.dlZ-UT/", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("ov3ukr^H;i_c<d", tableBlock0.getComponentId());
      assertEquals("ov3ukr^H;i_c<d", tableBlock1.getComponentId());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertNotSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(table1, table2);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock0, tableBlock2);
      assertSame(tableBlock1, tableBlock2);
      assertSame(tableBlock1, tableBlock0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "ov3ukr^H;i_c<d";
      objectArray0[1] = (Object) "|G8%{3=0J}";
      objectArray0[2] = (Object) table1;
      objectArray0[3] = (Object) "z;/]X0W.dlZ-UT/";
      objectArray0[4] = (Object) tableRow0;
      objectArray0[5] = (Object) tableBlock2;
      // Undeclared exception!
      try { 
        table2.message("ov3ukr^H;i_c<d", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("only one docdecl allowed in XML document");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      
      Form form0 = new Form(errorPage0, "only one docdecl allowed in XML document", actionExpression0);
      assertNotNull(form0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.addFormElement(radio0);
      assertNotNull(form1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      Form form2 = form1.addFormValidationError("");
      assertNotNull(form2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form2.getComponentId());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form2, form0);
      assertSame(form2, form1);
      
      String[] stringArray0 = new String[3];
      Block block0 = (Block)form1.h5();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      
      stringArray0[0] = "";
      Table table0 = new Table(form1, "address");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("address", table0.getComponentId());
      
      Table table1 = table0.id("");
      assertNotNull(table1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.colgroup();
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      List<RenderableComponent> list0 = tableBlock0._getRenderableChildren();
      assertNotNull(list0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block1 = (Block)errorPage0.sub();
      assertFalse(block1.equals((Object)block0));
      assertNotNull(block1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotSame(block1, block0);
      
      TableBlock tableBlock1 = tableBlock0.id("");
      assertNotNull(tableBlock1);
      assertEquals("", tableBlock1.getComponentId());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertEquals("", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertSame(tableBlock1, tableBlock0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, tableBlock1);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertNotNull(tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertEquals("", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, tableBlock1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("only one docdecl allowed in XML document");
      assertNotNull(actionExpression0);
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      
      Form form0 = new Form(errorPage0, "only one docdecl allowed in XML document", actionExpression0);
      assertNotNull(form0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      
      Form form1 = form0.addFormElement(radio0);
      assertNotNull(form1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      Form form2 = form1.addFormValidationError("");
      assertNotNull(form2);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form2.getComponentId());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Form form3 = form0._buildFromSerializedString(stringArray0);
      assertNotNull(form3);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form3.getComponentId());
      assertFalse(form3._isBuilt());
      assertEquals(3, stringArray0.length);
      assertSame(form0, form1);
      assertSame(form0, form3);
      assertSame(form0, form2);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertSame(form3, form0);
      
      Form form4 = form3.addFormValidationRule("lqw>", "");
      assertNotNull(form4);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form3.getComponentId());
      assertFalse(form3._isBuilt());
      assertFalse(form4._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form4.getComponentId());
      assertFalse(form4._isGeneratedId());
      assertEquals("form", form4.defaultTagName());
      assertEquals(3, stringArray0.length);
      assertSame(form0, form1);
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form0, form2);
      assertSame(form3, form2);
      assertSame(form3, form1);
      assertSame(form3, form0);
      assertSame(form3, form4);
      assertSame(form4, form1);
      assertSame(form4, form0);
      assertSame(form4, form3);
      assertSame(form4, form2);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Text text0 = (Text)errorPage0.htmlText("lqw>");
      assertNotNull(text0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(text0.isHtml());
      assertTrue(text0._isGeneratedId());
      assertEquals("Text_1", text0.getComponentId());
      assertNull(text0.defaultTagName());
      assertFalse(text0.isCdata());
      
      form0.buildComponent();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getSourceId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertSame(form0, form1);
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form0, form2);
      
      form1._setBuilt(true);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getSourceId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertTrue(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertTrue(form1._isBuilt());
      assertSame(form0, form1);
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form0, form2);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form1, form4);
      
      Block block0 = (Block)form0.small();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(40, actionExpression0.length());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertNull(actionExpression0.getJavascript());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getSourceId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertTrue(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertSame(form0, form1);
      assertSame(form0, form4);
      assertSame(form0, form3);
      assertSame(form0, form2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.65780996755007
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      Table table0 = new Table(label0, "");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      
      Table table1 = table0.renderHint("");
      assertNotNull(table1);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.colgroup();
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      List<RenderableComponent> list0 = tableBlock0._getRenderableChildren();
      assertNotNull(list0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Block block0 = (Block)errorPage0.sub();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      TableBlock tableBlock1 = tableBlock0.id("end tag not allowed in epilog but got ");
      assertNotNull(tableBlock1);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("end tag not allowed in epilog but got ", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("end tag not allowed in epilog but got ", tableBlock1.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      TableRow tableRow0 = tableBlock1.tr();
      assertNotNull(tableRow0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Link_1", link0.getComponentId());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("end tag not allowed in epilog but got ", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertFalse(tableBlock1._isGeneratedId());
      assertEquals("end tag not allowed in epilog but got ", tableBlock1.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      Label label1 = (Label)errorPage0.cite((Object) radio0);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Label_2", label1.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertNotSame(label1, label0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6740904196444504
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      
      Radio radio1 = new Radio(errorPage0, "|G8%{3=0J}", (String) null);
      assertFalse(radio1.equals((Object)radio0));
      assertNotNull(radio1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("input", radio1.defaultTagName());
      assertTrue(radio1.isValid());
      assertTrue(radio1._isGeneratedId());
      assertEquals("Radio_2", radio1.getComponentId());
      assertTrue(radio1.isEmpty());
      assertEquals("|G8%{3=0J}", radio1.getFormElementName());
      
      Checkbox checkbox0 = new Checkbox(radio0, "[VW", "frameset");
      assertFalse(radio0.equals((Object)radio1));
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("[VW", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("frameset", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      
      FormElement formElement0 = checkbox0.value((String) null);
      assertFalse(radio0.equals((Object)radio1));
      assertNotNull(formElement0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("[VW", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("frameset", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("[VW", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("frameset", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertNotSame(radio0, radio1);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      Block block0 = (Block)errorPage0.map("");
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      // Undeclared exception!
      try { 
        radio0.title("7u|)eOAyq#Y0f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      
      Radio radio1 = new Radio(errorPage0, "|G8%{3=0J}", (String) null);
      assertFalse(radio1.equals((Object)radio0));
      assertNotNull(radio1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio1.isValid());
      assertTrue(radio1._isGeneratedId());
      assertTrue(radio1.isEmpty());
      assertEquals("input", radio1.defaultTagName());
      assertEquals("Radio_2", radio1.getComponentId());
      assertEquals("|G8%{3=0J}", radio1.getFormElementName());
      
      Checkbox checkbox0 = new Checkbox(radio0, "[VW", "frameset");
      assertFalse(radio0.equals((Object)radio1));
      assertNotNull(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("[VW", checkbox0.getFormElementName());
      assertEquals("frameset", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      
      FormElement formElement0 = checkbox0.value((String) null);
      assertFalse(radio0.equals((Object)radio1));
      assertNotNull(formElement0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("[VW", checkbox0.getFormElementName());
      assertEquals("frameset", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("frameset", formElement0.getComponentId());
      assertEquals("[VW", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertNotSame(radio0, radio1);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      Label label0 = (Label)errorPage0.address((Object) formElement0);
      assertFalse(radio0.equals((Object)radio1));
      assertNotNull(label0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("[VW", checkbox0.getFormElementName());
      assertEquals("frameset", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("frameset", formElement0.getComponentId());
      assertEquals("[VW", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isValid());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertNotSame(radio0, radio1);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      LinkedList<RenderableComponent> linkedList0 = new LinkedList<RenderableComponent>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Block block0 = (Block)errorPage0.sub();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      Label label0 = (Label)errorPage0.h4((Object) linkedList0);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(0, linkedList0.size());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.631051600132032
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      
      String string0 = "|G8%{3=0J}";
      String string1 = null;
      // Undeclared exception!
      try { 
        radio0.iframe();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("only one docdecl allowed in XML document");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getEvent());
      assertNull(actionExpression0.getJavascript());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      
      Form form0 = new Form(errorPage0, "only one docdecl allowed in XML document", actionExpression0);
      assertNotNull(form0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.addFormElement(radio0);
      assertNotNull(form1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      Form form2 = form1.addFormValidationError("");
      assertNotNull(form2);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form2.getComponentId());
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      Form form3 = form0._buildFromSerializedString(stringArray0);
      assertNotNull(form3);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isBuilt());
      assertFalse(form3._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form3.getComponentId());
      assertEquals(3, stringArray0.length);
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form0, form3);
      assertSame(form3, form0);
      assertSame(form3, form2);
      assertSame(form3, form1);
      
      Image image0 = (Image)form2.img("r=TT|6jZpGY=D:eFhp", "lqw>");
      assertNotNull(image0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("Radio_1", radio0.getComponentId());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals(40, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form2.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form0, form3);
      assertSame(form1, form3);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertSame(form2, form3);
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue(stringArray0[1], "");
      assertNotNull(initialFieldValue0);
      assertEquals("", initialFieldValue0.getStringReplacement());
      assertEquals(3, stringArray0.length);
      
      Label label1 = (Label)errorPage0.address((Object) null);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertNotSame(label1, label0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "lqw>", "r=TT|6jZpGY=D:eFhp");
      assertNotNull(checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("r=TT|6jZpGY=D:eFhp", checkbox0.getComponentId());
      assertEquals("lqw>", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      
      String string0 = checkbox0.defaultDomEvent();
      assertEquals("onclick", string0);
      assertNotNull(string0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("r=TT|6jZpGY=D:eFhp", checkbox0.getComponentId());
      assertEquals("lqw>", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Component component0 = null;
      FileInput fileInput0 = new FileInput((Component) null, "\u0007Vcg pnuD*G", "\u0007Vcg pnuD*G");
      assertNotNull(fileInput0);
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("\u0007Vcg pnuD*G", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("\u0007Vcg pnuD*G", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      
      // Undeclared exception!
      try { 
        fileInput0.area((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "org.xmlpull.mxp1.MXParserNonValidating", "org.xmlpull.mxp1.MXParserNonValidating");
      assertNotNull(fileInput0);
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      
      int int0 = fileInput0.getMaxMemoryFileSize();
      assertEquals(1000, int0);
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      
      String string0 = "b";
      Submit submit0 = new Submit(fileInput0, "org.xmlpull.mxp1.MXParserNonValidating", "b");
      assertNotNull(submit0);
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("b", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      
      FileInput fileInput1 = new FileInput(submit0, "org.xmlpull.mxp1.MXParserNonValidating", "org.xmlpull.mxp1.MXParserNonValidating");
      assertTrue(fileInput1.equals((Object)fileInput0));
      assertNotNull(fileInput1);
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("b", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertTrue(fileInput1.isEmpty());
      assertEquals("input", fileInput1.defaultTagName());
      assertFalse(fileInput1._isGeneratedId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput1.getFormElementName());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("org.xmlpull.mxp1.MXParserNonValidating", fileInput1.getComponentId());
      assertTrue(fileInput1.isValid());
      
      Submit submit1 = new Submit((Component) null, "b", "b");
      assertTrue(submit1.equals((Object)submit0));
      assertNotNull(submit1);
      assertEquals("b", submit1.getFormElementName());
      assertEquals("b", submit1.getComponentId());
      assertTrue(submit1.isEmpty());
      assertFalse(submit1._isGeneratedId());
      assertEquals("input", submit1.defaultTagName());
      assertTrue(submit1.isValid());
      
      // Undeclared exception!
      try { 
        submit1.h1((Object) submit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      String string0 = "";
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      
      Link link0 = new Link(radio0, (Object) null);
      assertNotNull(link0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      
      Label label0 = new Label(radio0, link0);
      assertNotNull(label0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("a", link0.defaultTagName());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      
      ActionExpression actionExpression0 = new ActionExpression("only one docdecl allowed in XML document");
      assertNotNull(actionExpression0);
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      
      Form form0 = new Form(errorPage0, "only one docdecl allowed in XML document", actionExpression0);
      assertNotNull(form0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.addFormElement(radio0);
      assertNotNull(form1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      Form form2 = form1.addFormValidationError("");
      assertNotNull(form2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertTrue(radio0.isEmpty());
      assertEquals("", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals(40, actionExpression0.length());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.getExpression());
      assertEquals("only one docdecl allowed in XML document", actionExpression0.toString());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("only one docdecl allowed in XML document", form1.getComponentId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertEquals("only one docdecl allowed in XML document", form2.getComponentId());
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form0);
      assertSame(form2, form1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        form1.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      Radio radio0 = new Radio(errorPage0, "", "");
      assertNotNull(radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      
      Link link0 = new Link(errorPage0, errorPage0);
      assertNotNull(link0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      
      Link link1 = new Link(radio0, link0);
      assertFalse(link1.equals((Object)link0));
      assertNotNull(link1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertTrue(link1._isGeneratedId());
      assertEquals("Link_2", link1.getComponentId());
      assertEquals("a", link1.defaultTagName());
      
      Submit submit0 = new Submit(radio0, "EZZ~1N.J!k5V", "e>wi=1r#8");
      assertNotNull(submit0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("e>wi=1r#8", submit0.getComponentId());
      assertEquals("EZZ~1N.J!k5V", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      
      FormElement formElement0 = submit0.value("EZZ~1N.J!k5V");
      assertNotNull(formElement0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("e>wi=1r#8", submit0.getComponentId());
      assertEquals("EZZ~1N.J!k5V", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("EZZ~1N.J!k5V", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("e>wi=1r#8", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      
      Long long0 = new Long((-2318L));
      assertEquals((-2318L), (long)long0);
      assertNotNull(long0);
      
      Label label0 = new Label(formElement0, long0);
      assertNotNull(label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("e>wi=1r#8", submit0.getComponentId());
      assertEquals("EZZ~1N.J!k5V", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("EZZ~1N.J!k5V", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("e>wi=1r#8", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("VH*]dHe");
      assertNotNull(actionExpression0);
      assertEquals("VH*]dHe", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("VH*]dHe", actionExpression0.getExpression());
      assertEquals(7, actionExpression0.length());
      assertNull(actionExpression0.getEvent());
      assertEquals("VH*]dHe", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      
      Form form0 = new Form(submit0, "AM/Hu", actionExpression0);
      assertNotNull(form0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("e>wi=1r#8", submit0.getComponentId());
      assertEquals("EZZ~1N.J!k5V", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("VH*]dHe", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("VH*]dHe", actionExpression0.getExpression());
      assertEquals(7, actionExpression0.length());
      assertEquals("VH*]dHe", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("AM/Hu", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      
      Form form1 = form0.addFormElement(formElement0);
      assertNotNull(form1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Radio_1", radio0.getComponentId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertTrue(radio0._isGeneratedId());
      assertEquals("", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(submit0.isEmpty());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertEquals("e>wi=1r#8", submit0.getComponentId());
      assertEquals("EZZ~1N.J!k5V", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("EZZ~1N.J!k5V", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertEquals("e>wi=1r#8", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("VH*]dHe", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("VH*]dHe", actionExpression0.getExpression());
      assertEquals(7, actionExpression0.length());
      assertEquals("VH*]dHe", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("AM/Hu", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("AM/Hu", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      assertNotNull(xmlEntityRef0);
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      
      Label label1 = (Label)errorPage0.address((Object) link0);
      assertFalse(link0.equals((Object)link1));
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertNotSame(link0, link1);
      assertNotSame(label1, label0);
      
      Block block0 = (Block)errorPage0.script();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "sup";
      Select select0 = new Select(errorPage0, "", "sup", "", (ISelectModel) null, true);
      assertNotNull(select0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals("sup", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      
      Label label0 = new Label(errorPage0, select0);
      assertNotNull(label0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals("sup", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      
      Table table0 = new Table(label0, (String) null);
      assertNotNull(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals("sup", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      
      TableBlock tableBlock0 = table0.colgroup();
      assertNotNull(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals("sup", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      TableBlock tableBlock1 = tableBlock0.renderHint("sup");
      assertNotNull(tableBlock1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals("sup", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertSame(tableBlock0, tableBlock1);
      assertSame(tableBlock1, tableBlock0);
      
      TableBlock tableBlock2 = new TableBlock(tableBlock1);
      assertFalse(tableBlock2.equals((Object)tableBlock0));
      assertFalse(tableBlock2.equals((Object)tableBlock1));
      assertNotNull(tableBlock2);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("", select0.getFormElementName());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals("sup", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("div", tableBlock1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock1.getComponentId());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("div", tableBlock2.defaultTagName());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock2.getComponentId());
      
      // Undeclared exception!
      try { 
        tableBlock2.id("Colgroup component can be added only to a Table.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }
}
