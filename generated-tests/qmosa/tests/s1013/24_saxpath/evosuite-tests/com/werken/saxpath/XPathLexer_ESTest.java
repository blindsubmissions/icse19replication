/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:14:19 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.isIdentifierStartChar('m');
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('C');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.LA(1);
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("");
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.minus();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-Uf|C");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("U", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("f", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("|", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("C", token5.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.consume(1437);
      xPathLexer0.operatorName();
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      int int1 = xPathLexer0.currentPosition();
      assertEquals(1450, int1);
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.setXPath("");
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.minus();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.consume((-1540));
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1931483948102635
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yX{)LPN");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("y", token0.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.consume();
      Token token7 = xPathLexer0.literal();
      assertEquals(27, token7.getTokenType());
      assertEquals("m.werken.saxpath.T", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      assertEquals("ken", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.and();
      Token token11 = xPathLexer0.whitespace();
      assertEquals((-2), token11.getTokenType());
      
      Token token12 = xPathLexer0.getPreviousToken();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer0.mod();
      char char0 = xPathLexer0.LA(1);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.literal();
      int int0 = xPathLexer0.endPosition();
      assertEquals(24, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3192707621675714
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('-');
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.isIdentifierChar('-');
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.consume();
      assertEquals("", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9282290771159163
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.setXPath("*vlp^rcThf");
      Token token6 = xPathLexer0.star();
      assertEquals("*", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("vlp", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0294532877969513
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7555497906641793
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hM^iIuMb");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("h", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("i", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("I", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("uMb", token5.getTokenText());
      assertNotNull(token5);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8367931136243967
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V>V");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("V>", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.div();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.consume((-2785));
      xPathLexer0.setXPath("!%.#ou@vMX");
      Token token5 = xPathLexer0.star();
      assertEquals("!", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("%.#ou@vMX", token6.getTokenText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3374050496166132
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2qfB*N<9{ZbP':w9/");
      Token token0 = xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5809186163135516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("*vlp^rcThf");
      Token token7 = xPathLexer1.nextToken();
      assertEquals(20, token7.getTokenType());
      assertEquals("*", token7.getTokenText());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.008810661463255
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2qfB*N<9{ZbP':w9/");
      Token token0 = xPathLexer0.comma();
      assertEquals("2", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("2qfB*N<9{ZbP':w9/");
      xPathLexer1.leftParen();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("q", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      char char0 = xPathLexer0.LA(20);
      assertEquals('\uFFFF', char0);
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer1.or();
      xPathLexer0.mod();
      xPathLexer1.rightBracket();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer1.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("fB", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
      
      xPathLexer1.div();
      Token token6 = xPathLexer1.leftParen();
      assertEquals("N", token6.getTokenText());
      
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("<9", token7.getTokenText());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("{ZbP':w9/", token8.getTokenText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9806564019101662
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J/NMPQ+");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("J", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.42622272114457
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r+Y1<2~y]");
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.leftParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0092970510010815
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals("", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9392901717875095
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pcen`5z3f\"k4b!!");
      xPathLexer0.star();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.div();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("n", token2.getTokenText());
      
      char char0 = xPathLexer0.LA(122);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("`5z3f\"k4b!!", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.consume(28);
      xPathLexer0.setXPath("!%.#ou@vMX");
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("!", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8742988326913208
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2qfB*N<9{ZbP':w9/");
      Token token0 = xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5766022207776271
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6(?B0T|z");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("?", token3.getTokenText());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals("B", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("0", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals("T", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.386557166861132
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      xPathLexer0.operatorName();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) ()", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('y');
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('i');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.setXPath("[ (17) ()");
      xPathLexer0.mod();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("(", token9.getTokenText());
      
      Token token10 = xPathLexer0.whitespace();
      assertEquals("", token10.getTokenText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2865294779725376
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.setXPath("6(?B0T|z");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("6", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals("", token8.getTokenText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.722546347635307
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2qfB*N<9{ZbP':w9/");
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("8Zr kV;SM");
      xPathLexer1.consume(51);
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      xPathLexer1.number();
      xPathLexer1.rightParen();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer1.and();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer1.number();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.div();
      assertNull(token0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4053520891761389
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      xPathLexer0.operatorName();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) ()", string0);
      
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.div();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (17) ()");
      xPathLexer1.and();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("[", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer1.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (17) ()");
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals("[", token9.getTokenText());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6422873274764842
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("iAinsE`AK");
      Token token0 = xPathLexer0.colon();
      assertEquals("i", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("n", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.setXPath("iAinsE`AK");
      xPathLexer0.or();
      Token token5 = xPathLexer0.dots();
      assertEquals("i", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("AinsE", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer0.whitespace();
      assertEquals((-2), token11.getTokenType());
  }
}
