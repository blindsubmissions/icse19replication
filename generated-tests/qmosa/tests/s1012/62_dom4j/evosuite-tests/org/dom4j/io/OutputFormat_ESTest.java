/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:49:57 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UTF-8";
      outputFormat0.parseOptions(stringArray0, 1183);
      outputFormat0.setIndentSize(0);
      outputFormat0.setEncoding("UTF-8");
      outputFormat0.setXHTML(true);
      outputFormat0.isTrimText();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isXHTML();
      outputFormat0.getIndent();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent(true);
      outputFormat0.isNewlines();
      outputFormat0.isXHTML();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterNTags((-1276));
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getLineSeparator();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setIndentSize(0);
      outputFormat0.getEncoding();
      outputFormat0.setAttributeQuoteCharacter('\"');
      boolean boolean0 = outputFormat0.isPadText();
      assertEquals((-1276), outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("]* 8of]_fZgS6", true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setTrimText(false);
      boolean boolean0 = outputFormat0.isNewlines();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize(0);
      boolean boolean0 = true;
      outputFormat0.setTrimText(true);
      OutputFormat.createCompactFormat();
      outputFormat0.setExpandEmptyElements(true);
      boolean boolean1 = false;
      outputFormat0.setIndentSize(0);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (q)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndentSize(275);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      outputFormat0.setPadText(true);
      outputFormat0.getIndent();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat.createPrettyPrint();
      outputFormat1.setIndentSize(0);
      assertTrue(outputFormat1.isTrimText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent(true);
      outputFormat1.setXHTML(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Y";
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      
      stringArray0[2] = "";
      outputFormat1.setIndentSize(0);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.setNewlines(false);
      assertEquals("", outputFormat1.getIndent());
      
      outputFormat0.setXHTML(false);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat1.setIndent("");
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setOmitEncoding(false);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("  ", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.setEncoding((String) null);
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isPadText());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isNewlines();
      outputFormat0.setIndent(true);
      outputFormat0.setLineSeparator("&q/FIc");
      outputFormat0.setIndentSize(3141);
      outputFormat0.getIndent();
      outputFormat0.setTrimText(false);
      outputFormat0.getEncoding();
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isTrimText();
      outputFormat0.setIndent("Tb.1bh_ZOdxR#tu'!");
      outputFormat0.setNewlines(false);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("Tb.1bh_ZOdxR#tu'!", outputFormat0.getIndent());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setOmitEncoding(false);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(true);
      outputFormat0.setExpandEmptyElements(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setSuppressDeclaration(true);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndentSize(0);
      outputFormat1.isOmitEncoding();
      outputFormat0.setNewlines(true);
      outputFormat0.isPadText();
      outputFormat0.isSuppressDeclaration();
      outputFormat1.getIndent();
      outputFormat1.isTrimText();
      outputFormat0.setNewlines(false);
      outputFormat1.setTrimText(false);
      outputFormat2.setXHTML(true);
      outputFormat0.setIndentSize(0);
      outputFormat1.setIndent("Gz%gcPzu");
      outputFormat2.isXHTML();
      outputFormat2.setPadText(false);
      outputFormat0.isTrimText();
      outputFormat2.setOmitEncoding(true);
      outputFormat1.setEncoding("");
      outputFormat1.setLineSeparator("<kSc");
      outputFormat0.getEncoding();
      outputFormat0.isXHTML();
      outputFormat0.setXHTML(false);
      outputFormat0.getIndent();
      outputFormat0.setNewlines(true);
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Pu\"Utz**H;~x};k", true, "");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewlines(true);
      outputFormat1.setExpandEmptyElements(true);
      outputFormat0.setXHTML(false);
      outputFormat1.setIndent((String) null);
      outputFormat0.isNewlines();
      outputFormat1.getNewLineAfterNTags();
      outputFormat1.setSuppressDeclaration(true);
      assertTrue(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isSuppressDeclaration());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.159588814308626
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat("N3Q*Ap{6))T", true, "N3Q*Ap{6))T");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N3Q*Ap{6))T";
      stringArray0[1] = "-expandEmptyY";
      stringArray0[2] = "N3Q*Ap{6))T";
      stringArray0[3] = "N3Q*Ap{6))T";
      stringArray0[4] = "N3Q*Ap{6))T";
      stringArray0[5] = "N3Q*Ap{6))T";
      outputFormat1.parseOptions(stringArray0, 1);
      char char0 = '.';
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('.');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (.)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.182995977034132
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-indent";
      stringArray0[1] = "jn]u3#9}2(-%g";
      stringArray0[2] = "eo5b1&p. ";
      stringArray0[3] = "Invalid attribute quote character (";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmptysE9)m|z%@z VHRL";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "__ap/Vzt1'Q-ta!3k_<";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"__ap/Vzt1'Q-ta!3k_<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9608919796672831
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NQ*A{))T";
      stringArray0[1] = "-expandEmptyY";
      stringArray0[2] = "NQ*A{))T";
      stringArray0[3] = "NQ*A{))T";
      stringArray0[4] = "NQ*A{))T";
      stringArray0[5] = "NQ*A{))T";
      outputFormat0.setIndentSize(2);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.908908734898781
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(true);
      OutputFormat outputFormat1 = new OutputFormat("N3Q*Ap{6))T", true, "N3Q*Ap{6))T");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N3Q*Ap{6))T";
      outputFormat1.setTrimText(true);
      stringArray0[1] = "-trimText";
      stringArray0[2] = "N3Q*Ap{6))T";
      stringArray0[3] = "N3Q*Ap{6))T";
      stringArray0[4] = "N3Q*Ap{6))T";
      stringArray0[5] = "-trimText";
      outputFormat1.parseOptions(stringArray0, 1);
      int int0 = outputFormat1.parseOptions(stringArray0, 376);
      assertTrue(outputFormat1.isTrimText());
      assertEquals(376, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6857402312769767
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = new OutputFormat("-xhtmlNQ*A{))T", false);
      outputFormat1.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-xhtmlNQ*A{))T";
      stringArray0[1] = "";
      stringArray0[2] = "Oq(";
      stringArray0[3] = "-xhtmlNQ*A{))T";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7549967581308246
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat("-xhtml", false, "-lineSeparator");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N3Q*Ap{6))T";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "N3Q*Ap{6))T";
      stringArray0[4] = "-xhtml";
      stringArray0[5] = "-xhtml";
      stringArray0[6] = "-lineSeparator";
      stringArray0[7] = "N3Q*Ap{6))T";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.parseOptions(stringArray0, 1);
      int int0 = outputFormat1.parseOptions(stringArray0, 2846);
      assertEquals("-trimText", outputFormat1.getLineSeparator());
      assertEquals(2846, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6245757807017087
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setNewLineAfterNTags(2303);
      assertEquals(2303, outputFormat1.getNewLineAfterNTags());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setTrimText(true);
      OutputFormat outputFormat3 = new OutputFormat("-padText", true, "uA");
      OutputFormat outputFormat4 = new OutputFormat("be@(OA&G/ A!$I", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "be@(OA&G/ A!$I";
      stringArray0[1] = "-padText";
      stringArray0[2] = ".'FNx7k.h";
      stringArray0[3] = "#@:m6H;'Pa%)3Bzh";
      stringArray0[4] = "uA";
      stringArray0[5] = "uA";
      int int0 = outputFormat4.parseOptions(stringArray0, 1);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 1;
      String[] stringArray0 = new String[4];
      stringArray0[2] = "-newlines";
      stringArray0[1] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[3] = "-newlines";
      outputFormat0.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('v');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (v)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0437938808441543
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat("-encoding", false, "-encoding");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-indentSize";
      stringArray0[5] = "-trimText";
      stringArray0[6] = "-trimTnt";
      stringArray0[7] = "+gLnJQVkP jc";
      stringArray0[8] = "-trimTnt";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-trimText\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-expandEmptyY";
      stringArray0[1] = "-expandEmptyY";
      outputFormat0.parseOptions(stringArray0, 108);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 108);
      outputFormat0.parseOptions(stringArray0, 2727);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-xhtml";
      stringArray1[1] = "-expandEmptyY";
      stringArray1[2] = "-expandEmptyY";
      stringArray1[3] = "-omitEncoding";
      stringArray1[4] = "-expandEmptyY";
      stringArray1[5] = "-expandEmptyY";
      stringArray1[6] = "m";
      stringArray1[7] = "-expandEmptyY";
      stringArray1[8] = "-expandEmptyY";
      outputFormat0.parseOptions(stringArray1, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 2013);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
