/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 14:10:35 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Any any0 = null;
      try {
        any0 = new Any(xmlEntityRef0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox(form0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Form form0 = new Form("param");
      String string0 = "";
      NumberInput numberInput0 = null;
      try {
        numberInput0 = new NumberInput(form0, "", "dL61$t&RPpm3YLmw_R", "param");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize DecimalFormat with pattern 'param'.
         //
         verifyException("wheel.components.NumberInput", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4681399390162084
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "ul";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ul");
      Table table0 = null;
      try {
        table0 = new Table(xmlEntityRef0, "ul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "keCz_tq^)";
      Hidden hidden0 = new Hidden((Component) null, "keCz_tq^)", "keCz_tq^)");
      String string1 = "=";
      TextArea textArea0 = new TextArea(hidden0, "=", "keCz_tq^)");
      ActionExpression actionExpression0 = new ActionExpression("=");
      // Undeclared exception!
      try { 
        hidden0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.legend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "Q";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Q");
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "l>)uo=)LH 6W";
      ActionExpression actionExpression0 = new ActionExpression("l>)uo=)LH 6W");
      Form form0 = new Form(errorPage0, "c[6Rv\"\"g)}", actionExpression0);
      form0.span();
      String string1 = "Q0;!/>_\"7%alT$";
      Form form1 = form0.id("Q0;!/>_\"7%alT$");
      Checkbox checkbox0 = new Checkbox(form1, "Q0;!/>_\"7%alT$", "Q0;!/>_\"7%alT$");
      // Undeclared exception!
      try { 
        checkbox0.wBlock(actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "0x8";
      Checkbox checkbox0 = new Checkbox((Component) null, "0x8", "0x8");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      Table table0 = new Table(errorPage0, (String) null);
      Table table1 = table0.renderHint((CharSequence) null);
      TableBlock tableBlock0 = table1.thead();
      String string1 = "O9R";
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string2 = "N@'<,3 <@'p6hZ";
      tableBlock0.b((Object) null);
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("N@'<,3 <@'p6hZ");
      String string3 = "";
      dynamicSelectModel1.translator("");
      Class<Calendar> class0 = Calendar.class;
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance((String) null, class0);
      XmlSerializer xmlSerializer0 = xmlPullParserFactory0.newSerializer();
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper(xmlSerializer0, xmlPullWrapperFactory0);
      try { 
        staticXmlSerializerWrapper0.startTag("O9R");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .", "Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .");
      assertNotNull(textInput0);
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .", textInput0.getFormElementName());
      assertFalse(textInput0._isGeneratedId());
      assertTrue(textInput0.isEmpty());
      assertTrue(textInput0.isValid());
      assertEquals("Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .", textInput0.getComponentId());
      
      // Undeclared exception!
      try { 
        textInput0.entity("Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5001892410863005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      
      FileInput fileInput0 = new FileInput(errorPage0, "a^", ":S");
      assertNotNull(fileInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(":S", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      assertNotNull(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(":S", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      
      String string0 = "button";
      Checkbox checkbox0 = new Checkbox(tableBlock0, ":S", "button");
      assertNotNull(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(":S", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals(":S", checkbox0.getFormElementName());
      
      FormElement formElement0 = checkbox0.setBinding("a^");
      assertNotNull(formElement0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(":S", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals(":S", checkbox0.getFormElementName());
      assertEquals(":S", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("button", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      NumberInput numberInput0 = new NumberInput(formElement0, "+]fF^=[Q_W0_", ":S");
      assertNotNull(numberInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(":S", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals(":S", checkbox0.getFormElementName());
      assertEquals(":S", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("button", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals(":S", numberInput0.getComponentId());
      assertTrue(numberInput0.isValid());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("+]fF^=[Q_W0_", numberInput0.getFormElementName());
      
      // Undeclared exception!
      try { 
        formElement0.abbr((Object) numberInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = null;
      Table table0 = new Table(errorPage0, (String) null);
      assertNotNull(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertNotNull(table1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertNotNull(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Any any0 = tableBlock0.col();
      assertNotNull(any0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Any any1 = (Any)any0.requestFocus();
      assertNotNull(any1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any1._isGeneratedId());
      assertNull(any1.defaultTagName());
      assertEquals("Any_1", any1.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertSame(any0, any1);
      assertSame(any1, any0);
      
      // Undeclared exception!
      try { 
        any0.object();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "";
      XmlSerializer xmlSerializer0 = null;
      String string1 = "Ad";
      String string2 = "";
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      assertNotNull(dynamicSelectModel0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      ElExpression elExpression0 = null;
      // Undeclared exception!
      try { 
        errorPage0.passwordInput("^5C3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5001892410863005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "a^", ":S");
      assertNotNull(fileInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      assertNotNull(tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      String string0 = "button";
      Checkbox checkbox0 = new Checkbox(tableBlock0, ":S", "button");
      assertNotNull(checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals(":S", checkbox0.getFormElementName());
      
      FormElement formElement0 = checkbox0.setBinding("a^");
      assertNotNull(formElement0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals(":S", checkbox0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("button", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals(":S", formElement0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      
      // Undeclared exception!
      try { 
        formElement0.h2();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.062069541300164
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "";
      Block block0 = new Block(errorPage0, "");
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      String string1 = ">BnQ:$&";
      Checkbox checkbox0 = new Checkbox(block0, "", ">BnQ:$&");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals(">BnQ:$&", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      
      String string2 = "";
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "a^", ":S");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      
      ElExpression elExpression0 = new ElExpression("a^");
      assertNotNull(elExpression0);
      assertEquals(2, elExpression0.length());
      assertEquals("a^", elExpression0.toString());
      assertEquals("a^", elExpression0.getExpression());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertEquals(2, elExpression0.length());
      assertEquals("a^", elExpression0.toString());
      assertEquals("a^", elExpression0.getExpression());
      assertEquals(2, elExpression1.length());
      assertEquals("a^", elExpression1.getExpression());
      assertEquals("a^", elExpression1.toString());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, (String) null, (String) null, (ISelectModel) null, elExpression1);
      assertNotNull(radioGroup0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(2, elExpression0.length());
      assertEquals("a^", elExpression0.toString());
      assertEquals("a^", elExpression0.getExpression());
      assertEquals(2, elExpression1.length());
      assertEquals("a^", elExpression1.getExpression());
      assertEquals("a^", elExpression1.toString());
      assertTrue(radioGroup0.isEmpty());
      assertNull(radioGroup0.getFormElementName());
      assertEquals("input", radioGroup0.defaultTagName());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0._isGeneratedId());
      assertEquals("RadioGroup_1", radioGroup0.getComponentId());
      assertFalse(radioGroup0._isBuilt());
      
      Label label0 = (Label)errorPage0.code((Object) radioGroup0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(2, elExpression0.length());
      assertEquals("a^", elExpression0.toString());
      assertEquals("a^", elExpression0.getExpression());
      assertEquals(2, elExpression1.length());
      assertEquals("a^", elExpression1.getExpression());
      assertEquals("a^", elExpression1.toString());
      assertTrue(radioGroup0.isEmpty());
      assertNull(radioGroup0.getFormElementName());
      assertEquals("input", radioGroup0.defaultTagName());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0._isGeneratedId());
      assertEquals("RadioGroup_1", radioGroup0.getComponentId());
      assertFalse(radioGroup0._isBuilt());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(tableBlock0, ":S", "button");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals(":S", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      
      Checkbox checkbox1 = (Checkbox)checkbox0.setBinding("a^");
      assertNotNull(checkbox1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals(":S", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox1.getComponentId());
      assertEquals(":S", checkbox1.getFormElementName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("input", checkbox1.defaultTagName());
      assertFalse(checkbox1._isGeneratedId());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox1.placeholder("button");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      FileInput fileInput0 = new FileInput(errorPage0, "a^", "m");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("m", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("m", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      
      Checkbox checkbox0 = new Checkbox(tableBlock0, "m", "button");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("m", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("m", checkbox0.getFormElementName());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      
      FileInput fileInput1 = (FileInput)fileInput0.actionBinding("m");
      assertNotNull(fileInput1);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("m", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput1.isEmpty());
      assertEquals("m", fileInput1.getComponentId());
      assertFalse(fileInput1._isGeneratedId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("input", fileInput1.defaultTagName());
      assertTrue(fileInput1.isValid());
      assertEquals("a^", fileInput1.getFormElementName());
      assertSame(fileInput0, fileInput1);
      assertSame(fileInput1, fileInput0);
      
      NumberInput numberInput0 = new NumberInput(checkbox0, "+]fF^=[Q_W0_", "m");
      assertNotNull(numberInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("m", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("m", checkbox0.getFormElementName());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("m", numberInput0.getComponentId());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("+]fF^=[Q_W0_", numberInput0.getFormElementName());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      
      // Undeclared exception!
      try { 
        checkbox0.placeholder("button");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "1EG;V0>1";
      Form form0 = new Form("1EG;V0>1");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("1EG;V0>1", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      
      String string1 = "uGL_BEv@Sz";
      Form form1 = form0.addFormValidationError("uGL_BEv@Sz");
      assertNotNull(form1);
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("1EG;V0>1", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("1EG;V0>1", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertSame(form0, form1);
      assertSame(form1, form0);
      
      // Undeclared exception!
      try { 
        form1.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "a^";
      String string1 = ":S";
      Block block0 = (Block)errorPage0.tt();
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      // Undeclared exception!
      try { 
        block0.get("a^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'a^'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5299660682191627
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = null;
      Table table0 = new Table(errorPage0, (String) null);
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      
      Table table1 = table0.renderHint((CharSequence) null);
      assertNotNull(table1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      TableBlock tableBlock0 = table1.thead();
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Any any0 = tableBlock0.col();
      assertNotNull(any0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      
      Any any1 = tableBlock0.col();
      assertNotNull(any1);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table1._isGeneratedId());
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNull(any1.defaultTagName());
      assertTrue(any1._isGeneratedId());
      assertEquals("Any_2", any1.getComponentId());
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotSame(any1, any0);
      assertFalse(any1.equals((Object)any0));
      
      // Undeclared exception!
      try { 
        any0.object();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      
      FileInput fileInput0 = new FileInput(errorPage0, "a^", ":S");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(tableBlock0, ":S", "button");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(":S", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      
      ElExpression elExpression0 = new ElExpression(":S");
      assertNotNull(elExpression0);
      assertEquals(2, elExpression0.length());
      assertEquals(":S", elExpression0.getExpression());
      assertEquals(":S", elExpression0.toString());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertEquals(2, elExpression0.length());
      assertEquals(":S", elExpression0.getExpression());
      assertEquals(":S", elExpression0.toString());
      assertEquals(2, elExpression1.length());
      assertEquals(":S", elExpression1.toString());
      assertEquals(":S", elExpression1.getExpression());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("Finder expression didn't evaluate to a boolean value.");
      assertNotNull(dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("button");
      assertNotNull(dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.value((String) null);
      assertNotNull(dynamicSelectModel3);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "button", "eRQ;gF0mn4Z*Y-Y", dynamicSelectModel3, elExpression0);
      assertNotNull(radioGroup0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals(2, elExpression0.length());
      assertEquals(":S", elExpression0.getExpression());
      assertEquals(":S", elExpression0.toString());
      assertEquals("input", radioGroup0.defaultTagName());
      assertEquals("button", radioGroup0.getFormElementName());
      assertFalse(radioGroup0._isGeneratedId());
      assertEquals("eRQ;gF0mn4Z*Y-Y", radioGroup0.getComponentId());
      assertFalse(radioGroup0._isBuilt());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0.isEmpty());
      
      Label label0 = (Label)errorPage0.code((Object) null);
      assertNotNull(label0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      
      TableBlock tableBlock1 = new TableBlock(checkbox0);
      assertNotNull(tableBlock1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(":S", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      
      Checkbox checkbox1 = new Checkbox(fileInput0, "button", "end tag name can not be null");
      assertNotNull(checkbox1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertEquals("end tag name can not be null", checkbox1.getComponentId());
      assertEquals("button", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertFalse(checkbox1.equals((Object)checkbox0));
      
      Checkbox checkbox2 = (Checkbox)checkbox1.setBinding(elExpression1);
      assertNotNull(checkbox2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(2, elExpression0.length());
      assertEquals(":S", elExpression0.getExpression());
      assertEquals(":S", elExpression0.toString());
      assertEquals(2, elExpression1.length());
      assertEquals(":S", elExpression1.toString());
      assertEquals(":S", elExpression1.getExpression());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertEquals("end tag name can not be null", checkbox1.getComponentId());
      assertEquals("button", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("input", checkbox2.defaultTagName());
      assertTrue(checkbox2.isValid());
      assertTrue(checkbox2.isEmpty());
      assertFalse(checkbox2._isGeneratedId());
      assertEquals("end tag name can not be null", checkbox2.getComponentId());
      assertEquals("button", checkbox2.getFormElementName());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertSame(checkbox1, checkbox2);
      assertNotSame(checkbox1, checkbox0);
      assertSame(checkbox2, checkbox1);
      assertNotSame(checkbox2, checkbox0);
      assertFalse(checkbox1.equals((Object)checkbox0));
      assertFalse(checkbox2.equals((Object)checkbox0));
      
      Block block0 = tableBlock1.placeholder((String) null);
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(":S", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(checkbox0, checkbox1);
      assertNotSame(checkbox0, checkbox2);
      assertNotSame(tableBlock1, tableBlock0);
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(checkbox0.equals((Object)checkbox1));
      assertFalse(checkbox0.equals((Object)checkbox2));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      
      Block block1 = (Block)tableBlock1.q();
      assertNotNull(block1);
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals(":S", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("div", tableBlock1.defaultTagName());
      assertTrue(tableBlock1._isGeneratedId());
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      assertNotSame(block1, block0);
      assertNotSame(tableBlock0, tableBlock1);
      assertNotSame(checkbox0, checkbox1);
      assertNotSame(checkbox0, checkbox2);
      assertNotSame(tableBlock1, tableBlock0);
      assertFalse(block1.equals((Object)block0));
      assertFalse(tableBlock0.equals((Object)tableBlock1));
      assertFalse(checkbox0.equals((Object)checkbox1));
      assertFalse(checkbox0.equals((Object)checkbox2));
      assertFalse(tableBlock1.equals((Object)tableBlock0));
      
      Map<String, Component> map0 = checkbox2.getComponents();
      assertNotNull(map0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(2, elExpression0.length());
      assertEquals(":S", elExpression0.getExpression());
      assertEquals(":S", elExpression0.toString());
      assertEquals(2, elExpression1.length());
      assertEquals(":S", elExpression1.toString());
      assertEquals(":S", elExpression1.getExpression());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1.isEmpty());
      assertEquals("end tag name can not be null", checkbox1.getComponentId());
      assertEquals("button", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("input", checkbox2.defaultTagName());
      assertTrue(checkbox2.isValid());
      assertTrue(checkbox2.isEmpty());
      assertFalse(checkbox2._isGeneratedId());
      assertEquals("end tag name can not be null", checkbox2.getComponentId());
      assertEquals("button", checkbox2.getFormElementName());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertSame(checkbox1, checkbox2);
      assertNotSame(checkbox1, checkbox0);
      assertSame(checkbox2, checkbox1);
      assertNotSame(checkbox2, checkbox0);
      assertFalse(checkbox1.equals((Object)checkbox0));
      assertFalse(checkbox2.equals((Object)checkbox0));
      
      // Undeclared exception!
      try { 
        tableBlock1.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5157547762849064
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      
      FileInput fileInput0 = new FileInput(errorPage0, "a^", ":S");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      
      ElExpression elExpression0 = new ElExpression("a^");
      assertNotNull(elExpression0);
      assertEquals(2, elExpression0.length());
      assertEquals("a^", elExpression0.toString());
      assertEquals("a^", elExpression0.getExpression());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertEquals(2, elExpression0.length());
      assertEquals("a^", elExpression0.toString());
      assertEquals("a^", elExpression0.getExpression());
      assertEquals("a^", elExpression1.getExpression());
      assertEquals("a^", elExpression1.toString());
      assertEquals(2, elExpression1.length());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, (String) null, (String) null, (ISelectModel) null, elExpression1);
      assertNotNull(radioGroup0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(2, elExpression0.length());
      assertEquals("a^", elExpression0.toString());
      assertEquals("a^", elExpression0.getExpression());
      assertEquals("a^", elExpression1.getExpression());
      assertEquals("a^", elExpression1.toString());
      assertEquals(2, elExpression1.length());
      assertFalse(radioGroup0._isBuilt());
      assertEquals("RadioGroup_1", radioGroup0.getComponentId());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0._isGeneratedId());
      assertNull(radioGroup0.getFormElementName());
      assertTrue(radioGroup0.isEmpty());
      assertEquals("input", radioGroup0.defaultTagName());
      
      Label label0 = (Label)errorPage0.code((Object) radioGroup0);
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(2, elExpression0.length());
      assertEquals("a^", elExpression0.toString());
      assertEquals("a^", elExpression0.getExpression());
      assertEquals("a^", elExpression1.getExpression());
      assertEquals("a^", elExpression1.toString());
      assertEquals(2, elExpression1.length());
      assertFalse(radioGroup0._isBuilt());
      assertEquals("RadioGroup_1", radioGroup0.getComponentId());
      assertTrue(radioGroup0.isValid());
      assertTrue(radioGroup0._isGeneratedId());
      assertNull(radioGroup0.getFormElementName());
      assertTrue(radioGroup0.isEmpty());
      assertEquals("input", radioGroup0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      String string0 = "button";
      Checkbox checkbox0 = new Checkbox(tableBlock0, ":S", "button");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals(":S", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      
      Checkbox checkbox1 = (Checkbox)checkbox0.setBinding("a^");
      assertNotNull(checkbox1);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("button", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals(":S", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("input", checkbox1.defaultTagName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals(":S", checkbox1.getFormElementName());
      assertTrue(checkbox1.isValid());
      assertEquals("button", checkbox1.getComponentId());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      
      // Undeclared exception!
      try { 
        fileInput0.em((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      FileInput fileInput0 = new FileInput(errorPage0, "a^", "m");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("m", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("m", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      FileInput fileInput1 = (FileInput)fileInput0.actionBinding("m");
      assertNotNull(fileInput1);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("m", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput1.isEmpty());
      assertFalse(fileInput1._isGeneratedId());
      assertEquals("m", fileInput1.getComponentId());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("a^", fileInput1.getFormElementName());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertSame(fileInput0, fileInput1);
      assertSame(fileInput1, fileInput0);
      
      // Undeclared exception!
      try { 
        errorPage0.textInput("+]fF^=[Q_W0_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.652371544323668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      String string0 = ":S";
      FileInput fileInput0 = new FileInput(errorPage0, "a^", ":S");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("a^", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      
      // Undeclared exception!
      try { 
        fileInput0.img("fieldset", ":S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      
      Block block0 = (Block)errorPage0.small();
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "a^", ":S");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(":S", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("a^", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isEmpty());
      
      // Undeclared exception!
      try { 
        fileInput0.title("button");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Form form0 = new Form("a^");
      assertNotNull(form0);
      assertEquals("a^", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      
      // Undeclared exception!
      try { 
        form0.h1((Object) "m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6523715443236675
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        errorPage0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("l>)uo=)LH 6W");
      assertNotNull(actionExpression0);
      assertEquals("l>)uo=)LH 6W", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("l>)uo=)LH 6W", actionExpression0.toString());
      assertEquals("l>)uo=)LH 6W", actionExpression0.getActionExpression());
      assertNull(actionExpression0.getJavascript());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals(12, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      
      String string0 = "attempt to optimize a method call for a reference that does not point to a method: ";
      FileInput fileInput0 = new FileInput(errorPage0, "attempt to optimize a method call for a reference that does not point to a method: ", "c[6Rv\"\"g)}");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("attempt to optimize a method call for a reference that does not point to a method: ", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("c[6Rv\"\"g)}", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      
      // Undeclared exception!
      try { 
        fileInput0.pre();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6523715443236675
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      
      FileInput fileInput0 = new FileInput(errorPage0, "", ":S");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals(":S", fileInput0.getComponentId());
      
      Link link0 = new Link(fileInput0, errorPage0);
      assertNotNull(link0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("", fileInput0.getFormElementName());
      assertEquals(":S", fileInput0.getComponentId());
      assertEquals("Link_1", link0.getComponentId());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        fileInput0.h5((Object) link0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .", "Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .");
      assertNotNull(textInput0);
      assertEquals("Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .", textInput0.getComponentId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0.isEmpty());
      
      // Undeclared exception!
      try { 
        textInput0.p((Object) "Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "}^";
      String string1 = " s:k&V:~?LB>yyWG7";
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      
      Table table0 = new Table(errorPage0, " s:k&V:~?LB>yyWG7");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals(" s:k&V:~?LB>yyWG7", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertNotNull(standaloneComponent0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      
      DynamicSelectModel dynamicSelectModel0 = standaloneComponent0.selectModel();
      assertNotNull(dynamicSelectModel0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("internal cache error: duplicated keys: ");
      assertNotNull(dynamicSelectModel1);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertFalse(standaloneComponent0._isBuilt());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      
      ElExpression elExpression0 = new ElExpression("}^");
      assertNotNull(elExpression0);
      assertEquals(2, elExpression0.length());
      assertEquals("}^", elExpression0.toString());
      assertEquals("}^", elExpression0.getExpression());
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertNotNull(elExpression1);
      assertEquals(2, elExpression0.length());
      assertEquals("}^", elExpression0.toString());
      assertEquals("}^", elExpression0.getExpression());
      assertEquals("}^", elExpression1.getExpression());
      assertEquals(2, elExpression1.length());
      assertEquals("}^", elExpression1.toString());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("U-dz", dynamicSelectModel1, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "Cannot add a form element. No surrounding form found.";
      Form form0 = new Form("Cannot add a form element. No surrounding form found.");
      assertNotNull(form0);
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("Cannot add a form element. No surrounding form found.", form0.getComponentId());
      assertFalse(form0._isBuilt());
      
      // Undeclared exception!
      try { 
        form0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
