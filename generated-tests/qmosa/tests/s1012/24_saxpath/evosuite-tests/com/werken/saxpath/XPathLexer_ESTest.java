/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:03:09 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.setXPath("");
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      
      xPathLexer0.setXPath("dX&");
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("dX", token3.getTokenText());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("&", token5.getTokenText());
      
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.colon();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(11, int0);
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.getXPath();
      xPathLexer0.or();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      assertNull(xPathLexer0.getXPath());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('L');
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.at();
      char char0 = '(';
      String string0 = "com.werken.saxpath.Token";
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("[ ", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token5);
      assertEquals(15, token5.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.consume((-1));
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.or();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer0.equals();
      int int1 = xPathLexer0.currentPosition();
      assertEquals(12, int1);
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cvF[vjL");
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.or();
      token0.toString();
      token0.toString();
      xPathLexer0.minus();
      token0.toString();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.mod();
      xPathLexer0.consume(0);
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      xPathLexer0.div();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6701198898068177
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"J-*VkN-~0O1&6!");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("J-", token1.getTokenText());
      
      xPathLexer0.setXPath("");
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("'@2");
      Token token2 = xPathLexer0.plus();
      assertEquals("'", token2.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('t');
      assertTrue(boolean0);
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("@", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("2", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.709472776584213
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.consume(136);
      xPathLexer0.setXPath(": cq{F@");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4198733115069848
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      Token token2 = xPathLexer0.at();
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.at();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("*5", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      char char0 = xPathLexer0.LA(5399);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.plus();
      assertEquals("-", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals("I", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("bEk", token7.getTokenText());
      
      Token token8 = xPathLexer0.minus();
      assertEquals("]", token8.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.consume(3819);
      xPathLexer0.minus();
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3841, int0);
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      
      xPathLexer0.or();
      Token token13 = xPathLexer0.nextToken();
      assertEquals((-1), token13.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9617334800189785
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.equals();
      assertEquals("w", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (4) ()", string0);
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("(7", token4.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("I", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.552085297620967
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.div();
      xPathLexer0.getPreviousToken();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9381824546861237
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath("QR.`LV@{dam!EjE");
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (13) (Q)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.not();
      assertEquals("R", token2.getTokenText());
      
      xPathLexer0.at();
      Token token3 = xPathLexer0.identifier();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.equals();
      assertEquals("`", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("LV", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      xPathLexer0.whitespace();
      Token token6 = xPathLexer0.at();
      assertEquals("{", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.LA(0);
      Token token7 = xPathLexer0.notEquals();
      assertEquals("da", token7.getTokenText());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      xPathLexer0.consume(0);
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3646847260604316
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setXPath("QR.`LV@{dam!EjE");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.pipe();
      String string0 = token0.toString();
      assertEquals("[ (13) (Q)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("V", token2.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) (Q)");
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("@", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.955533996676885
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.consume();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.LA(5399);
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.consume(3819);
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("96*5-IbEk]|Z%9oOZ*`");
      xPathLexer1.nextToken();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.getPreviousToken();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer("dG_i;oU+Nya&ago}");
      xPathLexer3.minus();
      xPathLexer3.minus();
      Token token0 = xPathLexer2.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2647428421818556
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.doubleColon();
      xPathLexer1.rightBracket();
      xPathLexer0.colon();
      xPathLexer1.dollar();
      Token token1 = xPathLexer0.comma();
      xPathLexer1.at();
      xPathLexer0.and();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9990663010221295
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('.');
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.endPosition();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer1.doubleColon();
      xPathLexer1.setXPath("H");
      xPathLexer1.operatorName();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3530389848393451
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.literal();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.consume(18);
      xPathLexer0.isIdentifierStartChar('r');
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.operatorName();
      assertNull(token2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.541462624387793
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?*26&,m_}d<");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.relationalOperator();
      token0.toString();
      token0.toString();
      xPathLexer0.setXPath("?*26&,m_}d<");
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume(110);
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8280753976603963
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Lb+/MuBe4");
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }
}
