/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:01:05 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.mutatesStructure("owner");
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "owner";
      stringArray0[2] = "owner";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[7] = "owner";
      stringArray0[8] = null;
      SQLUtil.leftJoin((String) null, stringArray0, "op_open/create_blob ", "alter session", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getColumns();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "INSERT INTO INFORMATION_SCHEMA.LOB_DATA(BLOCK, COMPRESSED, DATA) VALUES(?, ?, ?)";
      SQLUtil.isQuery("INSERT INTO INFORMATION_SCHEMA.LOB_DATA(BLOCK, COMPRESSED, DATA) VALUES(?, ?, ?)");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.isProcedureCall("");
      String string0 = "AZNI#]}tlG)o";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("AZNI#]}tlG)o", "AZNI#]}tlG)o", (VersionNumber) null);
      defaultDatabase0.getTable("", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "AZNI#]}tlG)o";
      stringArray0[2] = "AZNI#]}tlG)o";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "AZNI#]}tlG)o";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "uW@a9'RYw`";
      SQLUtil.substituteMarkers("uW@a9'RYw`", "uW@a9'RYw`", "uW@a9'RYw`");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c013800d-00fb-2641-07ec-000000134f30");
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.substituteMarkers("$Y~HCmJg<WcQzK", "", (Object) null);
      assertEquals("null$nullYnull~nullHnullCnullmnullJnullgnull<nullWnullcnullQnullznullKnull", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.20478541691352
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("9q");
      SQLUtil.isQuery("9q");
      SQLUtil.mutatesDataOrStructure("");
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("java.lang.Object@66176201", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals(41, dynamicByteArrayOutputStream0.getPosition());
      assertEquals(41, dynamicByteArrayOutputStream0.getUsed());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.removeComments("[>%r+");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("[>%r+", "", versionNumber0);
      defaultDatabase0.getTable("[>%r+", false);
      DBDataType dBDataType0 = DBDataType.getInstance(4711, "|XAResource.TMNOFLAGS");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|XAResource.TMNOFLAGS", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "[>%r+";
      stringArray0[2] = "";
      stringArray0[3] = "[>%r+";
      stringArray0[4] = "[>%r+";
      stringArray0[5] = "[>%r+";
      stringArray0[6] = "[>%r+";
      stringArray0[7] = "";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "ALTER TABLE ";
      stringArray0[8] = null;
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.ALTER TABLE , null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ", ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("m$7SfIZdkG~]JI9", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.ALTER TABLE , null.null", false, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , ALTER TABLE , ) REFERENCES null(, , , , , , , ALTER TABLE , )", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("|K3.apq'W~o@%N_5?f");
      assertFalse(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("FOREIGN KEY ");
      assertNull(boolean1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`Y^J$5l#Hps]'}7EG7";
      stringArray0[1] = "FOREIGN KEY ";
      stringArray0[2] = "FOREIGN KEY ";
      stringArray0[3] = "|K3.apq'W~o@%N_5?f";
      stringArray0[4] = "02L";
      stringArray0[5] = "FOREIGN KEY ";
      String string0 = SQLUtil.innerJoin("FOREIGN KEY ", stringArray0, "org.postgresql.jdbc3.AbstractJdbc3Clob", "org.postgresql.jdbc3.AbstractJdbc3Clob", stringArray0);
      assertEquals("org.postgresql.jdbc3.AbstractJdbc3Clob as org.postgresql.jdbc3.AbstractJdbc3Clob on FOREIGN KEY .`Y^J$5l#Hps]'}7EG7 = org.postgresql.jdbc3.AbstractJdbc3Clob.`Y^J$5l#Hps]'}7EG7 and FOREIGN KEY .FOREIGN KEY  = org.postgresql.jdbc3.AbstractJdbc3Clob.FOREIGN KEY  and FOREIGN KEY .FOREIGN KEY  = org.postgresql.jdbc3.AbstractJdbc3Clob.FOREIGN KEY  and FOREIGN KEY .|K3.apq'W~o@%N_5?f = org.postgresql.jdbc3.AbstractJdbc3Clob.|K3.apq'W~o@%N_5?f and FOREIGN KEY .02L = org.postgresql.jdbc3.AbstractJdbc3Clob.02L and FOREIGN KEY .FOREIGN KEY  = org.postgresql.jdbc3.AbstractJdbc3Clob.FOREIGN KEY ", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.normalize("LOCKS", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "LOCKS";
      stringArray0[2] = "LOCKS";
      stringArray0[3] = "org.apache.derby.impl.sql.execute.HashJoinResultSet";
      stringArray0[4] = "LOCKS";
      stringArray0[5] = "LOCKS";
      stringArray0[6] = "LOCKS";
      stringArray0[7] = "LOCKS";
      SQLUtil.renderColumnListWithTableName("LOCKS", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, 0, "MA7h<$Z^1>q_FD,Xab");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "null MA7H<$Z^1>Q_FD,XAB NULL";
      defaultDBColumn0.setTable((DBTable) null);
      defaultDBColumn0.setNullable(true);
      stringArray0[1] = "MA7h<$Z^1>q_FD,Xab";
      stringArray0[2] = "null MA7H<$Z^1>Q_FD,XAB NULL";
      SQLUtil.renderColumnListWithTableName("MA7h<$Z^1>q_FD,Xab", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "null MA7H<$Z^1>Q_FD,XAB NULL", true, "E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'E' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "call", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      Object object0 = new Object();
      Integer integer0 = RawTransaction.ABORT;
      dBForeignKeyConstraint0.equals(integer0);
      dBForeignKeyConstraint0.columnReferencedBy("");
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addRequiredCondition("<X9pZg;x9F]<R", stringBuilder0);
      SQLUtil.isQuery("O");
      dBForeignKeyConstraint0.setDoc("<X9pZg;x9F]<R");
      SQLUtil.removeComments("8J^d('.W");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "~jHmh";
      stringArray0[4] = "~jHmh";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "dk%_9f";
      stringArray0[8] = "~jHmh";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " or ", true, stringArray0);
      dBUniqueConstraint0.equals(" or ");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \" or \" ", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.133381930264545
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("9q");
      SQLUtil.isQuery("9q");
      SQLUtil.mutatesDataOrStructure("");
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("java.lang.Object@7d9a496", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(40, dynamicByteArrayOutputStream0.getPosition());
      assertEquals(40, dynamicByteArrayOutputStream0.getUsed());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[>%r+");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ohniujc";
      stringArray0[1] = "t:V";
      stringArray0[2] = "dk%_9f";
      stringArray0[3] = "ohniujc";
      stringArray0[4] = "ohniujc";
      stringArray0[5] = "[>%r+";
      stringArray0[6] = "dk%_9f";
      stringArray0[7] = "|XARESOURCE.TMNOFLAGS";
      stringArray0[8] = "[>%r+";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "?q1TVHQ%QGi|7M%I", true, stringArray0);
      Object object0 = new Object();
      dBUniqueConstraint0.equals("[>%r+");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT ?q1TVHQ%QGi|7M%I ", string0);
      
      String string1 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertNotNull(string1);
      assertEquals("unique constraint ?q1TVHQ%QGi|7M%I", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2194910043994125
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "call", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      Object object0 = new Object();
      Integer integer0 = RawTransaction.ABORT;
      dBForeignKeyConstraint0.equals(integer0);
      dBForeignKeyConstraint0.columnReferencedBy("");
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addRequiredCondition("<X9pZg;x9F]<R", stringBuilder0);
      assertEquals("<X9pZg;x9F]<R", stringBuilder0.toString());
      
      SQLUtil.normalize("\u0001\u00C3", false);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1847), "CONSTRAINT call ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , , ) REFERENCES (, , , , , , , , )", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " = ";
      stringArray0[1] = " = ";
      stringArray0[2] = " = ";
      stringArray0[3] = " = ";
      String string0 = SQLUtil.normalize("N%FTAbt8R|{m\"Av-1", false);
      assertEquals("N % FTAbt8R | { m \"Av-1\"", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0866739010750055
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("owner");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "owner";
      stringArray0[2] = "owner";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[8] = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("owner");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      mockPrintWriter0.print(673L);
      PrintWriter printWriter0 = mockPrintWriter0.printf("owner", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String[] stringArray1 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, stringArray0[0], true, stringArray1);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("OHNIUjc");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}qI<ANWT";
      stringArray0[1] = "OHNIUjc";
      stringArray0[2] = "}qI<ANWT";
      String string0 = SQLUtil.join("}qI<ANWT", "}qI<ANWT", stringArray0, "}qI<ANWT", (String) null, stringArray0);
      assertEquals("}qI<ANWT join }qI<ANWT as null on }qI<ANWT.}qI<ANWT = null.}qI<ANWT and }qI<ANWT.OHNIUjc = null.OHNIUjc and }qI<ANWT.}qI<ANWT = null.}qI<ANWT", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("OHNIUjc");
      assertTrue(boolean1.equals((Object)boolean0));
      
      Character character0 = Character.valueOf('l');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'l'", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      Object object0 = new Object();
      Integer integer0 = RawTransaction.ABORT;
      dBForeignKeyConstraint0.equals(integer0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray1);
      dBUniqueConstraint0.isIdentical(dBPrimaryKeyConstraint0);
      Object object1 = new Object();
      SQLUtil.constraintName(dBUniqueConstraint0);
      TableContainer tableContainer0 = new TableContainer("");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9091747482626005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("|K3.apq'W~o@%N_5?f");
      assertFalse(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("|K3.apq'W~o@%N_5?f");
      assertNull(boolean1);
      
      SQLUtil.normalize("43Y58.U", true);
      SQLUtil.removeComments("|K3.apq'W~o@%N_5?f");
      String string0 = SQLUtil.normalize(";t6pPL#{Sdf", true);
      assertEquals("; t6pPL # { Sdf", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4683033468870397
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.mutatesDataOrStructure("select intoohniujc");
      String string0 = SQLUtil.normalize("<_@b0|OwUg,Eeg", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<_@b0|OwUg,Eeg";
      stringArray0[1] = "WRf[`|:~Ol=p-S)";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string1 = SQLUtil.join((String) null, "WRf[`|:~Ol=p-S)", stringArray0, "WRf[`|:~Ol=p-S)", "<_@b0|OwUg,Eeg", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.normalize(">~{X;[vbj/ns%", true);
      assertEquals("> ~ { X ; [ vbj / ns %", string0);
      
      String string1 = SQLUtil.removeComments("> ~ { X ; [ vbj / ns %");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3195749966735852
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("", string0);
      
      String[] stringArray1 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7cal", true, stringArray1);
      String string1 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT 7cal PRIMARY KEY ()", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string2);
      
      String string3 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE  = '' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string3);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string4 = dBForeignKeyConstraint0.toString();
      assertEquals("FOREIGN KEY (, , , , , , , , ) REFERENCES (, , , , , , , , )", string4);
      
      Object object0 = new Object();
      Integer integer0 = RawTransaction.ABORT;
      dBForeignKeyConstraint0.equals(integer0);
      Object object1 = new Object();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "7cal", false, stringArray0);
      boolean boolean0 = SQLUtil.isQuery("FOREIGN KEY (, , , , , , , , ) REFERENCES (, , , , , , , , )");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3195749966735852
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("owner");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "owner";
      stringArray0[1] = "owner";
      stringArray0[2] = "owner";
      stringArray0[3] = "owner";
      stringArray0[4] = "owner";
      stringArray0[5] = "";
      stringArray0[6] = "owner";
      stringArray0[7] = "owner";
      stringArray0[8] = "owner";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("owner");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      DBDataType dBDataType0 = DBDataType.getInstance((-1061), "owner");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("owner", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("owner OWNER(3) NULL", string0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("owner", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT owner FOREIGN KEY (owner, owner, owner, owner, owner, , owner, owner, owner) REFERENCES owner(owner, owner, owner, owner, owner, , owner, owner, owner)", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.normalize("|K3.apq'W~o@%N_5?f", true);
      String string0 = SQLUtil.removeComments("^Xqc^T'o5(");
      assertEquals("^Xqc^T'o5(", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[>%r+");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ohniujc";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(")s");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(62.88F);
      StringBuilder stringBuilder2 = stringBuilder1.append((long) (byte)81);
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      SQLUtil.addRequiredCondition("ohniujc", stringBuilder3);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6707441709201767
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("*{u");
      assertNull(boolean0);
      
      String string0 = SQLUtil.normalize("SELECT * FROM ", true);
      assertEquals("SELECT * FROM", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[>%r+");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ohniujc";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(")s");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)81, "ohniujc");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[>%r+", defaultDBTable0, dBDataType0, integer0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      mockPrintWriter0.printf("ohniujc", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.normalize(" ekNu$3X", true);
      defaultDBTable1.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[>%r+");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[>%r+";
      stringArray0[1] = "m$7SfIZdkG~]JI9";
      stringArray0[2] = "[>%r+";
      stringArray0[3] = "Bcx";
      stringArray0[4] = "alter tableowner";
      stringArray0[5] = "m$7SfIZdkG~]JI9";
      stringArray0[6] = "[>%r+";
      stringArray0[7] = "m$7SfIZdkG~]JI9";
      stringArray0[8] = "bl";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[>%r+", false, stringArray0);
      dBUniqueConstraint0.addColumnName((String) null);
      Object object0 = new Object();
      Character character0 = new Character('A');
      dBUniqueConstraint0.equals("bl");
      defaultDBTable1.getUniqueConstraint(stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT [>%r+ ", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable1);
      assertEquals("table null", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[>%r+");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "select";
      stringArray0[1] = "m$7SfIZdkG~]JI9";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (select, m$7SfIZdkG~]JI9) REFERENCES [>%r+(select, m$7SfIZdkG~]JI9)", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("owner");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "owner";
      stringArray0[1] = "owner";
      stringArray0[2] = "owner";
      stringArray0[3] = "owner";
      stringArray0[4] = "owner";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("owner");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "owner";
      stringArray1[1] = "owner";
      stringArray1[2] = "owner";
      stringArray1[3] = " NOT";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("create unique indexselect intoohniujc", false, defaultDBTable0, stringArray1);
      dBNonUniqueIndex0.equals(" NOT");
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      defaultDBTable0.getColumns();
      SQLUtil.removeComments("create unique indexselect intoohniujc");
      String string0 = SQLUtil.ownerDotComponent(dBNonUniqueIndex0);
      assertEquals("owner.create unique indexselect intoohniujc", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9273921261392744
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("callselect intoohniujc");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)108;
      SQLUtil.mutatesDataOrStructure("rename");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m$7SfIZdkG~]JI9";
      stringArray0[1] = "alter tableowner";
      stringArray0[2] = "bl";
      stringArray0[3] = "drop table";
      stringArray0[4] = "drop table";
      stringArray0[5] = "bl";
      stringArray0[6] = "m$7SfIZdkG~]JI9";
      stringArray0[7] = "drop table";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-111);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Object object0 = new Object();
      Character character0 = new Character('8');
      defaultDBTable1.getUniqueConstraint(stringArray0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.mutatesStructure("owner");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "owner";
      stringArray0[1] = "owner";
      stringArray0[2] = "owner";
      stringArray0[3] = "owner";
      stringArray0[4] = "owner";
      stringArray0[5] = "";
      stringArray0[6] = "owner";
      stringArray0[7] = "owner";
      stringArray0[8] = "owner";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("owner");
      byte byte0 = (byte)81;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      int int0 = (-1061);
      DBDataType dBDataType0 = DBDataType.getInstance((-1061), "owner");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("owner", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.normalize("c", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("lV", stringBuilder0);
      int int1 = (-128);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-128), (CharSequence) stringBuilder0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -128
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[>%r+");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = ", ";
      SQLUtil.normalize("F", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "lV");
      SQLUtil.addOptionalCondition("lV", stringBuilder0);
      stringBuilder0.append(2076.2480613693);
      int int0 = 40;
      StringBuilder stringBuilder1 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder1.deleteCharAt((-1794052841));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1794052841
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("{Ho),&", true);
      assertEquals("{ Ho), &", string0);
      
      TableContainer tableContainer0 = new TableContainer("{  Ho), &");
      TableContainer tableContainer1 = new TableContainer("{  Ho), &");
      tableContainer1.getSchema();
      String string1 = SQLUtil.normalize("{  Ho), &", true);
      assertEquals("{ Ho), &", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("42500");
      assertNull(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 44);
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0679759122939765
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "[>%r+";
      stringArray0[3] = "[>%r+";
      stringArray0[4] = ", ";
      stringArray0[5] = ", ";
      SQLUtil.mutatesDataOrStructure("truncatecallselect intoohniujc");
      SQLUtil.typeAndName(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("_4zW(}+|Cs:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: _4zW(}+|Cs:
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.8823830530748153
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--");
      byte byte0 = (byte)81;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      int int0 = (-1061);
      DBDataType dBDataType0 = DBDataType.getInstance((-292), "--");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.normalize("|B.@{-0+", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-- --(2) NULL");
      SQLUtil.addOptionalCondition("--", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((int) (byte)81, (CharSequence) "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 81
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize(">~{X;[vbj/ns%", true);
      assertEquals("> ~ { X ; [ vbj / ns %", string0);
      
      String string1 = SQLUtil.normalize("yO(ojRB", false);
      assertEquals("yO (ojRB", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("[>%r+");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[>%r+";
      stringArray0[1] = "[>%r+";
      stringArray0[2] = "[>%r+";
      stringArray0[3] = "[>%r+";
      stringArray0[4] = "[>%r+";
      stringArray0[5] = "[>%r+";
      stringArray0[6] = "[>%r+";
      stringArray0[7] = "[>%r+";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[>%r+", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT [>%r+ PRIMARY KEY ([>%r+, [>%r+, [>%r+, [>%r+, [>%r+, [>%r+, [>%r+, [>%r+)", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(833, "<OIq#)l");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y;`^ks/", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("7|;}&", defaultDBTable0, dBDataType0, (Integer) null);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      TableContainer tableContainer0 = new TableContainer("]_N1Pw TrM5990%B");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session={+z");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 44);
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("drop mater", "drop mater", versionNumber0);
      defaultDatabase0.getTable("drop mater", false);
      DBDataType dBDataType0 = DBDataType.getInstance(568, "$z>>v");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop mater", (DBTable) null, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("drop mater", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("ater index", true);
      TableContainer tableContainer0 = new TableContainer("drop materialized view");
      SQLUtil.normalize("QQ8v&]hhrX*@>7vQ`&", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "C+Mp+Z!L";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ater index", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      DBDataType dBDataType0 = DBDataType.getInstance(7, "op_info_sql ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized viewselect intoohniujc", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("a$eJ7Y\"<c3wL5", defaultDBTable0, dBDataType0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      defaultDBTable1.addColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(120, dynamicByteArrayOutputStream0.getPosition());
      
      String string0 = SQLUtil.normalize("K0MP)o-$O>f?RF", true);
      assertEquals("K0MP) o - $ O > f ? R  F", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BEGIN_EXE_TIME";
      stringArray0[1] = ", ";
      stringArray0[2] = "select";
      stringArray0[3] = ", ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      MockFile mockFile0 = new MockFile("bZ`};&nt5j-W%2*9o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("qk>w:YZH");
      tableContainer0.getTable("renameseect intoohnijc");
      DBDataType dBDataType0 = DBDataType.getInstance(32, "renameseect intoohnijc");
      Integer integer0 = new Integer(90006);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SEQUENCE_CATALOG", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SEQUENCE_CATALOG", (DBTable) null, dBDataType0);
      defaultDBColumn1.setTable((DBTable) null);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("renameseect intoohnijc", (DBTable) null, 30, "SEQUENCE_CATALOG RENAMESEECT INTOOHNIJC(90006) NULL");
      // Undeclared exception!
      try { 
        defaultDBColumn2.setNullable(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6326309271543518
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BEGIN_EXE_TIME";
      stringArray0[1] = ", ";
      stringArray0[2] = "select";
      stringArray0[3] = ", ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT select FOREIGN KEY (BEGIN_EXE_TIME, , , select, , ) REFERENCES null(BEGIN_EXE_TIME, , , select, , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BEGIN_EXE_TIME\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[G%'>M}A@61QGX", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "M0lxJ2#W", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "dH?%kqX", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("d;0b*,eT{(hB1;_u");
      StringBuilder stringBuilder1 = stringBuilder0.append((-2.147483648E9));
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("d;0b*,eT{(hB1;_u-2.147483648E9CONSTRAINT dH?%kqX ", stringBuilder1.toString());
      
      String string0 = SQLUtil.normalize("drop materialized view42y90", false);
      assertEquals("drop materialized view42y90", string0);
  }
}
