/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:31:23 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      jRip0.usePruningTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1130.7710076983;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance0.dataset();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-1533));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      jRip0.globalInfo();
      AbstractClassifier.makeCopies(jRip0, 250007);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      jRip0.setMinNo(1088.8906458315);
      jRip0.setDebug(true);
      assertEquals(1088.8906458315, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r\"zQ##,[@r=,U", arrayList0, 2);
      jRip_NumericAntd0.splitData(instances0, 4, (-1.0));
      attribute1.toString();
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd0.toString();
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~x};kRrFlOE?j!";
      stringArray0[1] = "";
      stringArray0[2] = ">=:Of34m0U";
      stringArray0[3] = "fxdcVZ97r\"mEc= ";
      stringArray0[4] = "9Hw";
      stringArray0[5] = "";
      stringArray0[6] = "Quit rule";
      stringArray0[7] = ") {\n";
      jRip0.setOptions(stringArray0);
      jRip0.getCheckErrorRate();
      int int0 = jRip0.getFolds();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.setSeed(0L);
      decisionTable0.getSearchSpec();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = arrayList0.subList(0, 0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("$Revision: 0$", list2, protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">z(PJ8`u6mC&N3+,e";
      stringArray0[1] = "(if<";
      stringArray0[2] = "=*";
      stringArray0[3] = "";
      stringArray0[4] = "$V!%<GYUmpWCtOI=";
      stringArray0[5] = "Too few positives.";
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      stringArray0[6] = " (";
      stringArray0[7] = "An iterated version of the Lovins stemmer. It stems the word (in case it's longer than 2 characters) until it no further changes.\n\nFor more information about the Lovins stemmer see:\n\n";
      stringArray0[8] = "#I: R";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.listOptions();
      jRip0.getTechnicalInformation();
      jRip0.globalInfo();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.setOptimizations(0);
      Utils.SMALL = (-1368.5398207176);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N7IVKWa";
      stringArray0[1] = "FNl@-/#$6]6W;3$";
      stringArray0[2] = "Whether to generate a regression tree/rule instead of a model tree/rule.";
      AbstractClassifier.makeCopy(jRip0);
      stringArray0[3] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setOptimizations(101);
      jRip0.getOptions();
      jRip0.setUsePruning(true);
      jRip0.getTechnicalInformation();
      int int0 = jRip0.getOptimizations();
      assertEquals(101, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.getOptions();
      jRip0.getUsePruning();
      CoverTree coverTree0 = new CoverTree();
      Instance instance0 = null;
      int int0 = (-531);
      int int1 = 0;
      jRip0.setOptimizations(0);
      try { 
        coverTree0.kNearestNeighbours((Instance) null, (-531));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1130.7710076983;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\nrevDL: ";
      stringArray0[1] = "Whether pruning is performed.";
      jRip0.setOptions(stringArray0);
      jRip_RipperRule0.size();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.getFolds();
      jRip0.toString();
      JRip jRip1 = new JRip();
      DenseInstance denseInstance0 = new DenseInstance(3);
      jRip1.setFolds(0);
      jRip0.setDebug(true);
      AbstractClassifier.makeCopy((Classifier) null);
      AbstractClassifier.runClassifier((Classifier) null, (String[]) null);
      jRip0.setOptimizations(11);
      jRip0.getOptions();
      jRip1.setUsePruning(false);
      JRip jRip2 = new JRip();
      jRip2.getTechnicalInformation();
      jRip2.getOptimizations();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      assertEquals(11, jRip0.getOptimizations());
      
      System.setCurrentTimeMillis(425L);
      long long0 = jRip2.getSeed();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.getMinNo();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W>S";
      stringArray0[1] = "hHv_";
      stringArray0[2] = "-O";
      stringArray0[3] = "W>S";
      stringArray0[4] = "W>S";
      stringArray0[5] = "W>S";
      stringArray0[6] = "W>S";
      JRip.main(stringArray0);
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"W>S\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.488327743368588
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("W>S", arrayList0, 78);
      Attribute attribute0 = new Attribute("W>S", instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100.0, intArray0, 3);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      double double1 = jRip_NominalAntd0.getAccu();
      assertEquals(Double.NaN, double1, 0.01);
      
      binarySparseInstance0.setDataset(instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean1 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass((-1.0), (Instances) null, 375.391, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.getUsePruning();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      int[] intArray0 = new int[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7.0, intArray0, 0);
      jRip0.getFolds();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 0, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("First set of iterations finished, not enough!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First set of iterations finished, not enough! not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-0.5));
      Attribute attribute0 = new Attribute("", "", 11);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals((-0.5), jRip0.getMinNo(), 0.01);
      assertEquals(" = ", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9730014063936123
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r\"zQ##,[@r=,U", arrayList0, 2);
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      assertTrue(jRip1.getUsePruning());
      
      jRip0.setUsePruning(false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.5, doubleArray0);
      binarySparseInstance0.dataset();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertFalse(jRip0.getUsePruning());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r\"zQ##,[@r=,U", arrayList0, 2);
      jRip_NumericAntd0.splitData(instances0, 4, (-1.0));
      attribute1.toString();
      jRip_NumericAntd0.getSplitPoint();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.toString(attribute0);
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4036404106149494
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("W>S", arrayList0, 78);
      Attribute attribute0 = new Attribute("W>S", instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100.0, intArray0, 3);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      
      jRip0.minNoTipText();
      double double1 = jRip_NominalAntd0.getAccu();
      binarySparseInstance0.setDataset(instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean1 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      double double2 = jRip_NominalAntd0.getAccuRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip0.checkErrorRateTipText();
      double[] doubleArray0 = new double[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Whether check for error rate >= 1/2 is included in stopping criterion.");
      doubleArray0[0] = (-1147.472);
      doubleArray0[1] = (-466.9390733111097);
      int[] intArray0 = new int[3];
      LinearRegression linearRegression0 = new LinearRegression();
      AbstractClassifier.makeCopies(linearRegression0, 0);
      intArray0[0] = (-10);
      int int0 = 975;
      intArray0[1] = 975;
      int int1 = (-262);
      intArray0[2] = (-262);
      SparseInstance sparseInstance0 = new SparseInstance((-466.9390733111097), doubleArray0, intArray0, 2318);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(975);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.338371704803573
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.setCheckErrorRate(false);
      jRip0.enumerateMeasures();
      jRip0.getRevision();
      int int0 = (-281);
      jRip0.setOptimizations((-281));
      jRip0.setUsePruning(false);
      jRip0.getMinNo();
      try { 
        jRip0.rulesetForOneClass((-1.0), (Instances) null, (-1.0), (-1.0));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.setCheckErrorRate(false);
      jRip0.enumerateMeasures();
      jRip0.getRevision();
      jRip0.setOptimizations((-281));
      jRip0.setUsePruning(false);
      jRip0.getMinNo();
      jRip0.setOptimizations(3);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setUsePruning(true);
      jRip0.getTechnicalInformation();
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      attribute0.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r\"zQ##,[@r=,U", arrayList0, 2);
      jRip_NumericAntd0.splitData(instances0, 4, (-6.78214234));
      attribute0.toString();
      jRip_NumericAntd0.getSplitPoint();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getCover();
      jRip_NumericAntd0.toString();
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945934775756114
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      attribute0.copy("");
      jRip0.getRevision();
      jRip0.setOptimizations(0);
      jRip0.setUsePruning(false);
      jRip0.getMinNo();
      Instances instances0 = null;
      try { 
        jRip0.rulesetForOneClass(2, (Instances) null, 2, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      double double0 = 0.964;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      jRip0.setCheckErrorRate(true);
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk(3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("z", arrayList0, 4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[1] = (double) 3;
      jRip0.toString();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("", arrayList0, 1698);
      Attribute attribute0 = new Attribute("", 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances1, 5.874379917393026, 3.0);
      attribute0.toString();
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd0.toString();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 2;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(2373.287, doubleArray0, intArray0, 1);
      instances1.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.toString(attribute0);
      Instances instances2 = new Instances(instances0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances1, 91.3322659825, (-1883.0651146));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4799555205445176
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("The minimum total weight of the instances in a rule.", "", 92);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = (double) 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(92, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.setValueSparse((-155), 1);
      jRip_NominalAntd0.covers(sparseInstance0);
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      binarySparseInstance0.value(attribute0);
      jRip_NominalAntd0.getAttrValue();
      JRip jRip3 = new JRip();
      JRip.NumericAntd jRip_NumericAntd1 = jRip2.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      jRip_NumericAntd1.covers(binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip3.new RipperRule();
      jRip_RipperRule0.copy();
      jRip0.toString();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("    ", "    ");
      Attribute attribute1 = attribute0.copy("#V7;JD(JxC4>p");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      attribute1.addStringValue("string");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
      
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd1 = jRip2.new NumericAntd(attribute1);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      double double1 = jRip_NominalAntd0.getMaxInfoGain();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.479955520544517
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r\"zQ##,[@r=,U", arrayList0, 2);
      jRip_NumericAntd0.splitData(instances0, 4, (-1.0));
      attribute1.toString();
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      Utils.SMALL = (-302.5201122084879);
      jRip_NominalAntd0.splitData(instances0, (-1.0), 2807.8207054);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 2384.65767366111, 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8662160235859526
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk(35);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("z", arrayList1, 7);
      Attribute attribute0 = new Attribute((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1730.4963463136785), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.setValueSparse(23, 2);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd1.covers(binarySparseInstance0);
      JRip jRip1 = new JRip();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 4;
      jRip0.getOptions();
      SparseInstance sparseInstance1 = new SparseInstance(3, doubleArray0, intArray0, 2);
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd1.splitData(instances0, 0.0, 1254.09);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("^j?3,jrt%,MvS", arrayList2, 35);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("z", arrayList1, 7);
      Attribute attribute1 = attribute0.copy(".bsi");
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.setValueSparse(8, 2);
      JRip jRip0 = new JRip();
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      SparseInstance sparseInstance1 = new SparseInstance(351);
      jRip_NumericAntd0.covers(sparseInstance1);
      System.setCurrentTimeMillis(7);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      DenseInstance denseInstance0 = new DenseInstance(16);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance0);
      jRip_RipperRule0.covers(denseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("", 0);
      Attribute attribute1 = attribute0.copy("weka.classifiers.rules.JRip$RipperRule");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean1 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("z", arrayList0, 68);
      Attribute attribute0 = new Attribute(".bsi");
      Attribute attribute1 = new Attribute("numeric", (List<String>) null, 44);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      jRip_NominalAntd0.splitData(instances1, (-620.59), 1);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 350;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(350);
      binarySparseInstance0.dataset();
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass((-45.0), (Instances) null, (-45.0), (-3238.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }
}
