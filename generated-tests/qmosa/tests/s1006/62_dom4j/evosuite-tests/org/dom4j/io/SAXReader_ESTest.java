/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:27:46 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.ElementPath;
import org.dom4j.QName;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.DTDHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      sAXReader1.setIgnoreComments(true);
      try { 
        sAXReader1.setProperty("http://xml.org/sax/features/validation", sAXReader0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'http://xml.org/sax/features/validation' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("/>]");
      sAXReader0.getDispatchHandler();
      try { 
        sAXReader0.read((Reader) stringReader0, "/>]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document />] : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "HvvA+m#Gs9.x0\\VN";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("HvvA+m#Gs9.x0VN");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class HvvA+m#Gs9.x0VN not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.removeHandler("namespace::");
      sAXReader0.setXMLReader(xMLReader0);
      sAXReader0.createXMLReader();
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      boolean boolean0 = false;
      sAXReader0.setStripWhitespaceText(false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setIgnoreComments(false);
      xMLFilterImpl1.startPrefixMapping("", "");
      xMLFilterImpl0.endPrefixMapping(";q D6e/uJ^B]S{Z");
      xMLFilterImpl0.setEntityResolver(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String string0 = "/3V;)B5X]iBgQ:}";
      sAXReader0.createXMLReader();
      dispatchHandler0.addHandler("/3V;)B5X]iBgQ:}", (ElementHandler) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.getDocumentFactory();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setIgnoreComments(false);
      sAXReader0.getDocumentFactory();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.setIgnoreComments(false);
      try { 
        sAXReader0.read("/3V;)B5X]iBgQ:}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: /3V;)B5X]iBgQ:} Nested exception: no protocol: /3V;)B5X]iBgQ:}
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.setValidation(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      parserAdapter0.setDTDHandler((DTDHandler) null);
      sAXReader0.setXMLReader(xMLReader0);
      sAXReader0.createContentHandler(parserAdapter0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.getXMLFilter();
      defaultDocumentFactory0.createDocument("");
      sAXReader0.setValidation(false);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      boolean boolean1 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean1);
      
      sAXReader0.removeHandler("org.dom4j.io.SAXReader$SAXEntityResolver");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler("", dispatchHandler0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      
      sAXReader0.createXMLReader();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setValidation(false);
      boolean boolean2 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(boolean2 == boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      String string0 = "\\ Z";
      try { 
        sAXReader1.setFeature(" Z", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature ' Z' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.resetHandlers();
      sAXReader0.isMergeAdjacentText();
      String string0 = "x=KIEc";
      StringReader stringReader0 = new StringReader("x=KIEc");
      stringReader0.ready();
      stringReader0.markSupported();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "org.dom4j.io.SAXReader$SAXEntityResolver";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.io.SAXReader$SAXEntityResolver");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.io.SAXReader$SAXEntityResolver", "org.dom4j.io.SAXReader$SAXEntityResolver");
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.98296502921777
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("zLDmJ=K-9WpL4G21");
          SAXReader sAXReader0 = new SAXReader(false);
          byte[] byteArray0 = new byte[3];
          byteArray0[0] = (byte)14;
          byte byte0 = (byte)89;
          sAXReader0.resetHandlers();
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1268)
             // java.net.InetAddress.getAllByName(InetAddress.java:1192)
             // java.net.InetAddress.getAllByName(InetAddress.java:1126)
             // java.net.InetAddress.getByName(InetAddress.java:1076)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1268)
             // java.net.InetAddress.getAllByName(InetAddress.java:1192)
             // java.net.InetAddress.getAllByName(InetAddress.java:1126)
             // java.net.InetAddress.getByName(InetAddress.java:1076)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8943995444300383
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K,/f x;XS#3QY;pf+*");
      sAXReader_SAXEntityResolver0.uriPrefix = "K,/f x;XS#3QY;pf+*";
      sAXReader_SAXEntityResolver0.resolveEntity("K,/f x;XS#3QY;pf+*", "K,/f x;XS#3QY;pf+*");
      sAXReader_SAXEntityResolver0.resolveEntity("", "Warning: missing namespace prefix ignored: ");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.createXMLReader();
      StringReader stringReader0 = new StringReader("Miz[_[i~dpFS!");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.createXMLReader();
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = false;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      xMLFilterImpl0.getErrorHandler();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.setValidation(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DOMNamespace dOMNamespace0 = new DOMNamespace("", (String) null);
      QName qName0 = new QName("http://xml.org/sax/properties/lexical-handler", dOMNamespace0);
      qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      sAXReader1.createDefaultEntityResolver((String) null);
      DispatchHandler dispatchHandler1 = sAXReader1.getDispatchHandler();
      dispatchHandler0.addHandler((String) null, dispatchHandler1);
      sAXReader0.setEncoding("http://xml.org/sax/properties/lexical-handler");
      // Undeclared exception!
      try { 
        dispatchHandler0.onStart((ElementPath) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.DispatchHandler", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      sAXReader1.setDispatchHandler(dispatchHandler0);
      sAXReader0.setMergeAdjacentText(true);
      assertTrue(sAXReader0.isMergeAdjacentText());
      
      sAXReader1.setMergeAdjacentText(true);
      assertTrue(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.setStringInternEnabled(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      String string0 = "";
      pruningDispatchHandler0.removeHandler("");
      // Undeclared exception!
      try { 
        pruningDispatchHandler0.onEnd((ElementPath) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8782183066708504
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.addHandler("/3V;)B5X]iBgQ:}", (ElementHandler) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      QName qName0 = namespaceStack0.getAttributeQName("/3V;)B5X]iBgQ:}", "/3V;)B5X]iBgQ:}", "/3V;)B5X]iBgQ:}");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid byte 1 of 1-byte UTF-8 sequence. Nested exception: Invalid byte 1 of 1-byte UTF-8 sequence.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      String string1 = "";
      sAXReader0.setStringInternEnabled(true);
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.toURI();
      mockFile0.setExecutable(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      mockFile0.deleteOnExit();
      mockFile0.toURL();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      sAXReader0.setStripWhitespaceText(false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setIgnoreComments(false);
      xMLFilterImpl0.endPrefixMapping(";q D6e/uJ^B]S{Z");
      xMLFilterImpl0.setEntityResolver(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      XMLReader xMLReader1 = sAXReader0.createXMLReader();
      dispatchHandler0.addHandler("/3V;)B5X]iBgQ:}", (ElementHandler) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLReader1);
      SAXReader sAXReader2 = new SAXReader(xMLReader0);
      assertFalse(sAXReader2.isStripWhitespaceText());
      assertFalse(sAXReader2.isIgnoreComments());
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isMergeAdjacentText());
      
      sAXReader0.setDefaultHandler(dispatchHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9977665653806165
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      sAXReader0.setStripWhitespaceText(false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setIgnoreComments(false);
      xMLFilterImpl1.startPrefixMapping("", "");
      xMLFilterImpl1.endPrefixMapping("");
      xMLFilterImpl1.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.createXMLReader();
      ElementHandler elementHandler0 = null;
      dispatchHandler0.addHandler("", (ElementHandler) null);
      sAXReader0.getDocumentFactory();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setIgnoreComments(false);
      sAXReader0.getDocumentFactory();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.setIgnoreComments(false);
      String string0 = "ATTRIBUTE_NODE";
      try { 
        sAXReader0.read("ATTRIBUTE_NODE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/ATTRIBUTE_NODE (No such file or directory) Nested exception: /home/ubuntu/ext1/evosuite_readability_gen/projects/62_dom4j/ATTRIBUTE_NODE (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1202915653012844
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      Object object0 = new Object();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("-2#UiC$R)'pw)0");
      dispatchHandler0.removeHandler("sw}MjfC!2~=H8L");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      boolean boolean0 = true;
      sAXReader0.setIgnoreComments(true);
      sAXReader0.removeHandler("");
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      sAXReader0.getXMLFilter();
      StringReader stringReader0 = new StringReader("sw}MjfC!2~=H8L");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9381824546861233
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.setValidation(true);
      sAXReader0.getDispatchHandler();
      String string0 = " : ";
      String string1 = "==";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " : ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.87821830667085
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte) (-95);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-26), (byte)3);
      try { 
        sAXReader1.read((InputStream) byteArrayInputStream0, "name");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3523d470 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3523d470 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("TGBfWUB");
      sAXReader_SAXEntityResolver0.resolveEntity("TGBfWUB", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("TGBfWUB", "");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      StringReader stringReader0 = new StringReader("http://xml.org/sax/handlers/LexicalHandler");
      stringReader0.reset();
      try { 
        sAXReader0.read((Reader) stringReader0, "http://xml.org/sax/handlers/LexicalHandler");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document http://xml.org/sax/handlers/LexicalHandler : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.848899705841817
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "http://xml.org/sax/feauresvalidation";
      File file0 = MockFile.createTempFile("http://xml.org/sax/feauresvalidation", (String) null, (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "x=KIEc";
      StringReader stringReader0 = new StringReader("x=KIEc");
      stringReader0.read();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
