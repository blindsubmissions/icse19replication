/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:46:37 GMT 2018
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.RenderingHints;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.RescaleOp;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.media.jai.PlanarImage;
import javax.media.jai.operator.FPXDescriptor;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.event.ListDataListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      visualListModel0.getSize();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.stream();
      visualListModel0.setData(vector0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      visualListModel0.elementsChanged();
      visualListModel0.removeElements(1, 11, true);
      int[] intArray0 = new int[2];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((-782), (Collection<VisualPageListItem>) stack0);
      intArray0[0] = 4511;
      intArray0[1] = 0;
      visualListModel0.undeleteElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(4511, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(4511) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.moveUpIndex(2272);
      int[] intArray0 = new int[6];
      intArray0[0] = 2272;
      intArray0[1] = 2272;
      intArray0[2] = 2272;
      intArray0[3] = 2272;
      intArray0[4] = 2272;
      intArray0[5] = 2272;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.getValidElements();
      visualListModel0.addAllElements(2272, (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 13;
      visualListModel0.getListDataListeners();
      visualListModel0.addAllElements(13, (Collection<VisualPageListItem>) null);
      visualListModel0.getValidElements();
      visualListModel0.clearData();
      visualListModel0.getElementAt(13);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 13;
      intArray0[4] = 13;
      visualListModel0.removeElements(intArray0, true);
      int int1 = (-806);
      visualListModel0.removeElements(13, (-806), false);
      int int2 = 0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-806), 13, (byte[]) null, (-806), false, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.removeElements((-1), (-1654), true);
      visualListModel0.elementsChanged();
      visualListModel0.subList((-1), (-1438));
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>(379);
      visualListModel0.addAllElements(3, (Collection<VisualPageListItem>) arrayDeque0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel0.moveDownIndex(1713);
      intArray0[0] = (-1899);
      intArray0[1] = 5150;
      visualListModel0.subList((-1899), 0);
      visualListModel0.getListDataListeners();
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      UnaryOperator<ChronoField> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector1);
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>(vector0);
      jComboBox0.addNotify();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.clearData();
      visualListModel0.removeElements(32, (-157), false);
      visualListModel0.clearData();
      visualListModel0.moveDownIndex(0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 6;
      intArray0[4] = (-157);
      visualListModel0.undeleteElements(intArray0);
      assertArrayEquals(new int[] {0, 32, 32, 6, (-157)}, intArray0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.getValidElements();
      visualListModel0.subList(0, 0);
      int int0 = 0;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-1059), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.moveUpIndex(0);
      visualListModel0.moveUpIndex(3453);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2101);
      intArray0[1] = 3453;
      intArray0[2] = 3453;
      intArray0[3] = 3453;
      intArray0[4] = 3453;
      intArray0[5] = 3453;
      intArray0[6] = 3453;
      intArray0[7] = 3453;
      intArray0[8] = 3453;
      visualListModel0.getListDataListeners();
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(0, 3453, false);
      visualListModel0.clearData();
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(3453);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, false);
      visualListModel0.addAllElements(0, collection0);
      visualListModel0.addAllElements(collection0);
      visualListModel0.addAllElements(0, collection0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(2, intArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.prependAllElements(vector0);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("$K<Da", 0);
      integerArray0[2] = integer2;
      Integer integer3 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[3] = integer3;
      Integer integer4 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[4] = integer4;
      Integer integer5 = JLayeredPane.POPUP_LAYER;
      integerArray0[5] = integer5;
      Integer integer6 = JLayeredPane.MODAL_LAYER;
      integerArray0[6] = integer6;
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      jComboBox0.getHeight();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.clearData();
      visualListModel0.removeElements((-749), 48, false);
      visualListModel0.clearData();
      visualListModel0.moveDownIndex((-749));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) integerArray0[3];
      intArray0[1] = 6;
      visualListModel0.undeleteElements(intArray0);
      assertEquals(2, intArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex((-28));
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.143952200643869
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(4, 4);
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 4;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.moveDownIndex(9);
      int[] intArray1 = new int[3];
      intArray1[0] = 4;
      intArray1[1] = 4;
      intArray1[2] = 9;
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.addAllElements(4, (Collection<VisualPageListItem>) null);
      visualListModel0.moveUpIndex(4);
      RescaleOp rescaleOp0 = new RescaleOp(9, 4, (RenderingHints) null);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(4, (-433), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (4) and height (-433) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      visualListModel0.getValidElements();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[1];
      visualListModel0.getListDataListeners();
      intArray0[0] = (-1811);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      UnaryOperator<ChronoField> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      vector0.replaceAll(unaryOperator0);
      vector0.ensureCapacity((-3999));
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector1);
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>(vector0);
      jComboBox0.addNotify();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.clearData();
      visualListModel0.removeElements(32, (-157), false);
      visualListModel0.clearData();
      visualListModel0.moveDownIndex(0);
      visualListModel0.setData(vector1);
      visualListModel0.clearData();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(2);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.clearData();
      visualListModel0.updateElementAt(750, (VisualPageListItem) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5403058252265167
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      visualListModel0.getListDataListeners();
      visualListModel0.clearData();
      visualListModel0.getValidElements();
      visualListModel0.subList(0, 0, true);
      visualListModel0.getElements();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      visualListModel0.getValidElements();
      visualListModel0.getValidElements();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.clearData();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-3168));
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jComboBox0, (-3168), 1407L, (-3168), (-3168), 50000, (-1678), 2, (-649), true, 2, (-507), 3);
      jComboBox0.getToolTipLocation(mouseWheelEvent0);
      jComboBox0.getMouseListeners();
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[2];
      visualListModel0.removeListDataListener((ListDataListener) null);
      intArray0[0] = (-3168);
      intArray0[1] = (-3168);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndex((-3168));
      visualListModel0.getValidElements();
      visualListModel0.getElements();
      visualListModel0.moveUpIndex((-3168));
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-3168));
      visualListModel0.subList((-3168), (-3168), true);
      visualListModel0.removeElements((-3168), 1713, true);
      visualListModel0.addElement((VisualPageListItem) null);
      int int0 = visualListModel0.getSize();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.getValidElements();
      visualListModel0.getValidElements();
      visualListModel0.moveUpIndex(11);
      int[] intArray0 = new int[8];
      intArray0[0] = 11;
      intArray0[1] = Integer.MIN_VALUE;
      intArray0[2] = 11;
      intArray0[3] = (-2329);
      intArray0[4] = 11;
      intArray0[5] = 11;
      intArray0[6] = 11;
      intArray0[7] = 0;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-3168));
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jComboBox0, (-3168), 1407L, (-3168), (-3168), 50000, (-1678), 2, (-649), true, 2, (-507), 3);
      jComboBox0.getToolTipLocation(mouseWheelEvent0);
      visualListModel0.addAllElements((-1678), (Collection<VisualPageListItem>) null);
      visualListModel0.moveDownIndex(1269);
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      UnaryOperator<ChronoField> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super ChronoField, ?>) function1);
      vector0.replaceAll(unaryOperator0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector1);
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>(vector0);
      jComboBox0.addNotify();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.getListDataListeners();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.removeElements(intArray0, false);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-2934), (-574), true);
      visualListModel0.addElementAt((VisualPageListItem) null, 125);
      visualListModel0.moveUpIndex(125);
      visualListModel0.elementChanged((VisualPageListItem) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-3630);
      intArray0[3] = Integer.MAX_VALUE;
      visualListModel0.removeElements(intArray0, false);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(7, visualListModel0.getSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.clearData();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2347);
      intArray0[1] = (-1);
      intArray0[2] = (-1086);
      intArray0[3] = (-1517);
      intArray0[4] = (-450);
      intArray0[5] = 4413;
      intArray0[6] = 14;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.addAllElements((-450), (Collection<VisualPageListItem>) stack0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(7, intArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      visualListModel0.clearData();
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.data = null;
      visualListModel1.subList(0, 10, false);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertNull(visualPageListItemArray0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      visualListModel1.addAllElements((Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[0];
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.addAllElements(3336, (Collection<VisualPageListItem>) stack0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.rotateClockwiseElements(intArray0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-32);
      intArray0[0] = 0;
      visualListModel0.undeleteElements(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.reverseElements(intArray0);
      int int0 = (-2199);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function.identity();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(stack0);
      visualListModel0.setData(vector1);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-32);
      intArray0[0] = 0;
      visualListModel0.undeleteElements(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.reverseElements(intArray0);
      stack0.add((VisualPageListItem) null);
      int int0 = (-2199);
      stack0.spliterator();
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.setElementAt((VisualPageListItem) null, 0);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.moveDownIndex(0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel1.moveUpIndexes(intArray0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      stack0.setElementAt((VisualPageListItem) null, 0);
      VisualListModel visualListModel0 = new VisualListModel();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "0?rhfmo,Lce16yhFI");
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.moveDownIndex(0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "0?rhfmo,Lce16yhFI");
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      int int0 = (-32);
      intArray0[0] = (-32);
      intArray0[0] = 0;
      visualListModel0.undeleteElements(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.reverseElements(intArray0);
      stack0.add((VisualPageListItem) null);
      stack0.spliterator();
      visualListModel0.removeElements(0, 0, true);
      visualListModel0.clearData();
      visualListModel0.moveDownIndex(3253);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int int1 = 13;
      VisualPageListItem visualPageListItem1 = null;
      try {
        visualPageListItem1 = new VisualPageListItem(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      VisualPageListItem visualPageListItem0 = null;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      stack0.setElementAt((VisualPageListItem) null, 0);
      VisualListModel visualListModel0 = new VisualListModel();
      stack0.add((VisualPageListItem) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "0?rhfmo,Lce16yhFI");
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.moveDownIndex(0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "0?rhfmo,Lce16yhFI");
      visualListModel0.reverseElements(intArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "T95]+zEt>}J/$acB");
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 5000;
      intArray0[1] = 5000;
      intArray0[2] = 5000;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 5000);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.moveUpIndex(1);
      visualListModel0.elementChanged((VisualPageListItem) null);
      int int0 = visualListModel0.getSize();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.166084939249829
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.undeleteElements(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.spliterator();
      visualListModel0.removeElements(0, 0, false);
      visualListModel0.clearData();
      visualListModel0.reverseElements(intArray0);
      stack0.spliterator();
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      HashMap<RenderingHints.Key, Object> hashMap1 = new HashMap<RenderingHints.Key, Object>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveUpIndexes(intArray0);
      assertFalse(visualListModel2.equals((Object)visualListModel1));
  }
}
