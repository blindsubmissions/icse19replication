/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:15:39 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("k^.3");
      String string0 = null;
      String string1 = "JqX .nn#u#ma*xN4/";
      JSONObject jSONObject1 = jSONObject0.put("JqX .nn#u#ma*xN4/", (-378L));
      jSONObject1.putOpt("mjVz+s", jSONObject0);
      jSONObject0.remove("");
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long1);
      String string0 = "7SHj";
      String string1 = ",";
      jSONObject0.optString("7SHj", ",");
      String string2 = "";
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      stringArray0[4] = "1";
      stringArray0[5] = "1";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONObject$1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Lf<g>1r]mKMD_xTp,", 2498.5802753443836);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "81Zucc:+k%t/b*7";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.length();
      jSONObject0.toString();
      String string1 = "\\u";
      jSONObject0.has(string1);
      jSONObject0.remove("JSONArray initial value should be a string or collection or array.");
      String string2 = "@4Le6RnOuC.QoE";
      jSONObject0.optDouble(string1);
      jSONObject0.append("@4Le6RnOuC.QoE", "");
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5341414639483673
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getInt("\"4C.E;1HTvaczSP<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"4C.E;1HTvaczSP<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1329.56);
      assertEquals("1329.56", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.toString(0);
      jSONObject0.opt("{}");
      JSONObject jSONObject1 = jSONObject0.put("*F8tP]", (Object) null);
      jSONObject1.opt("");
      jSONObject1.toString();
      jSONObject1.put("{}", 0);
      int int0 = jSONObject1.optInt("");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2055983590263932
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "";
      String string1 = "'";
      jSONObject0.append("'", "'");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optInt("");
      jSONObject0.has("jO");
      JSONObject jSONObject1 = jSONObject0.put("jO", 0L);
      jSONObject0.isNull(">k**Nw~5h7_<M@\"qT]m");
      JSONObject jSONObject2 = jSONObject0.put("{}", 1115L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("", (Collection) linkedList0);
      jSONObject2.optBoolean("21Xm?CR", true);
      jSONObject1.optJSONObject("Bad value from toJSONString: ");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = new Boolean("_");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_";
      stringArray0[1] = "_";
      stringArray0[2] = "_";
      String string0 = "IG;";
      stringArray0[3] = "IG;";
      stringArray0[4] = "_";
      stringArray0[5] = "_";
      try { 
        jSONObject0.getString("_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2110688711446103
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      stringArray0[3] = "\t";
      stringArray0[4] = "\t";
      stringArray0[5] = "\t";
      jSONObject0.put("\t", 0);
      stringArray0[6] = "\t";
      stringArray0[7] = "\t";
      stringArray0[8] = "\t";
      JSONObject jSONObject1 = new JSONObject(collection0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(97);
      jSONObject1.write(stringWriter0);
      Float float0 = new Float(0.0);
      hashMap0.put(jSONObject1, float0);
      jSONObject0.putOpt("\t", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      jSONObject1.put("\"#X&LiT=G4h%RXL?&a", 1798.1787767657);
      jSONObject1.optBoolean("\t");
      try { 
        jSONObject1.getJSONArray("Ulkv ]~tQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ulkv ]~tQ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.valueOf("v*yD't33UC`");
      hashMap0.put(boolean0, boolean0);
      Boolean boolean1 = new Boolean(true);
      Boolean.getBoolean("wT3rrot");
      Boolean.logicalOr(true, true);
      hashMap0.put(boolean1, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("JSONArray[", 3165);
      assertEquals(3165, int0);
      
      double double0 = jSONObject0.optDouble("\"\"");
      assertEquals(Double.NaN, double0, 0.01);
      
      Boolean boolean2 = Boolean.valueOf("");
      hashMap0.putIfAbsent(boolean2, boolean2);
      jSONObject0.optJSONArray("JSONArray[");
      jSONObject0.has("JSONArray[");
      long long0 = jSONObject0.optLong(" at character ");
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4779045431407845
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("7SHj");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong(",");
      JSONObject jSONObject2 = jSONObject0.put("", 0L);
      Long.compare(346L, 0L);
      jSONObject2.toString(160);
      jSONObject0.optString("7SHj", "\"java.lang.String@0000000002\"");
      JSONObject.valueToString("\"java.lang.String@0000000002\"");
      jSONObject0.optJSONArray(",");
      jSONObject0.optDouble("\"java.lang.String@0000000002\"", (double) 1);
      boolean boolean0 = jSONObject2.optBoolean("V;'$z", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4936827940650863
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "81Zucc:+k%t/b*7";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.length();
      jSONObject0.toString();
      String string0 = "\\u";
      jSONObject0.has(string0);
      jSONObject0.remove("JSONArray initial value should be a string or collection or array.");
      jSONObject0.optDouble(string0);
      JSONObject jSONObject1 = jSONObject0.append("@4Le6RnOuC.QoE", "");
      jSONObject1.optDouble("istoString", (double) 0);
      JSONObject jSONObject2 = new JSONObject((Object) "");
      jSONObject2.optLong("81Zucc:+k%t/b*7", (-2979L));
      try { 
        jSONObject1.getJSONObject(">,|#b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">,|#b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.41965930743254
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optInt("");
      jSONObject0.has("jO");
      jSONObject0.put("jO", 0L);
      jSONObject0.isNull(">k**Nw~5h7_<M@\"qT]m");
      JSONObject jSONObject1 = jSONObject0.put("{}", 1115L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      JSONObject jSONObject2 = new JSONObject("", stringArray0);
      StringWriter stringWriter0 = new StringWriter(97);
      jSONObject1.write(stringWriter0);
      Float float0 = new Float((double) 97);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      Float float1 = new Float((-2958.0));
      hashMap1.put("", float1);
      Float float2 = new Float(1.0F);
      jSONObject1.putOpt("] is not a number.", float2);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.246881999829547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optLong("{}", (-892L));
      jSONObject0.optInt("");
      jSONObject0.toString(0);
      jSONObject0.opt("iscompare");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "jor\"t@0cU7GV");
      jSONObject1.opt("isequals");
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject1.put("", 0);
      jSONObject2.optInt("yG[Hmo5lh?G");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2281681765327406
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optInt("0]lT+9R}>@9/Bx3(GJq");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", "`");
      jSONObject0.toString(54);
      jSONObject0.opt("w=S");
      JSONObject jSONObject1 = jSONObject0.put("w=S", (Object) "iscompare");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`";
      JSONObject jSONObject2 = new JSONObject(hashMap1, stringArray0);
      jSONObject2.opt("kj(~F*");
      jSONObject1.toString();
      jSONObject2.put("QFR", 51);
      jSONObject0.optInt("5");
      jSONObject0.names();
      Byte byte0 = new Byte((byte)96);
      JSONObject.testValidity(byte0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.toUnsignedString(0L);
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0L);
      JSONObject.valueToString(double0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("0");
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONArray.", 0L);
      Long.compare(0L, (-206L));
      jSONObject1.toString(160);
      jSONObject1.optString("7SHj", "java.lang.Double@0000000002");
      Long long1 = Long.valueOf((-2137L));
      JSONObject.valueToString(long1);
      jSONObject0.optJSONArray("java.lang.Long@0000000005");
      jSONObject2.optDouble((String) null, (-553.19443578272));
      jSONObject1.optBoolean("aU&v;%BV", true);
      jSONObject2.optDouble("7SHj", (-553.19443578272));
      JSONObject jSONObject3 = jSONObject1.put("aU&v;%BV", true);
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1625502645608736
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean.logicalOr(true, true);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("acc");
      JSONObject jSONObject1 = jSONObject0.put("*F8tP]", (Object) hashMap0);
      jSONObject0.opt("acc");
      jSONObject0.toString();
      jSONObject0.optBoolean("{\"java.lang.String@0000000002\":{}}", false);
      jSONObject1.put("PKi=", 4);
      jSONObject1.optInt("yG[Hmo5lh?G");
      jSONObject1.optJSONObject("!aU4RCq");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optInt("");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("{}", "{}");
      jSONObject0.toString(0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      jSONObject1.optBoolean("{}", false);
      jSONObject1.toString();
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3995754777947647
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      jSONObject0.optString("2r.lFnN~KxW%wb", "1");
      jSONObject0.optLong("getrotateLeft");
      String string0 = "m<:{F'Hv!wp`OG\"DM9p";
      jSONObject0.put("m<:{F'Hv!wp`OG\"DM9p", 0L);
      long long0 = 0L;
      Long.compare(623L, 0L);
      jSONObject0.toString(42);
      jSONObject0.optString("Expected a ',' or '}'", "Ri)U+_");
      JSONObject.valueToString("getrotateLeft");
      JSONTokener jSONTokener0 = new JSONTokener("K Sv");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of K Sv
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.577374487834159
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      jSONObject0.has("jO");
      JSONObject jSONObject1 = jSONObject0.put("jO", 0L);
      jSONObject1.keys();
      jSONObject0.isNull(">k**Nw~5h7_<M@\"qT]m");
      JSONObject jSONObject2 = jSONObject0.put("{}", 1115L);
      String[] stringArray0 = new String[3];
      Long long0 = new Long(1115L);
      jSONObject2.accumulate("{}", long0);
      stringArray0[0] = "";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      JSONObject jSONObject3 = new JSONObject("", stringArray0);
      StringWriter stringWriter0 = new StringWriter(97);
      jSONObject2.write(stringWriter0);
      Float float0 = new Float((double) 97);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      Float float1 = new Float((-2958.0));
      hashMap1.put("", float1);
      Float float2 = new Float(1.0F);
      jSONObject2.putOpt("] is not a number.", float2);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.382194806950903
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      jSONObject0.optInt("");
      jSONObject0.has("jO");
      JSONObject jSONObject1 = jSONObject0.put("jO", 0L);
      jSONObject1.keys();
      jSONObject0.isNull(">k**Nw~5h7_<M@\"qT]m");
      JSONObject jSONObject2 = jSONObject0.put("{}", 1115L);
      String[] stringArray0 = new String[3];
      Long long0 = new Long(1115L);
      jSONObject2.accumulate("{}", long0);
      stringArray0[0] = "";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      JSONObject jSONObject3 = new JSONObject("", stringArray0);
      StringWriter stringWriter0 = new StringWriter(97);
      jSONObject2.write(stringWriter0);
      Float float0 = new Float((double) 97);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      Float float1 = new Float((-2958.0));
      hashMap1.put("", float1);
      Float float2 = new Float(1.0F);
      String string1 = JSONObject.numberToString(float2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.252943979297895
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Long long0 = new Long(82L);
      Float float0 = new Float((float) 82L);
      JSONObject jSONObject1 = jSONObject0.accumulate("J", float0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "J";
      stringArray0[1] = "J";
      stringArray0[2] = "J";
      stringArray0[3] = "J";
      JSONObject jSONObject2 = new JSONObject(double0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(97);
      jSONObject1.write(stringWriter0);
      Float float1 = new Float(0.0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Float float2 = new Float((-1.0));
      hashMap0.put("J", float2);
      Float float3 = new Float(911.0F);
      jSONObject0.putOpt("] is not a number.", double0);
      JSONObject.getNames(jSONObject0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3443056113027376
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optLong("wheel.json.JSONObject@0000000001", (-892L));
      jSONObject0.optInt("");
      jSONObject0.toString(0);
      jSONObject0.opt("iscompare");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "jor\"t@0cU7GV");
      jSONObject1.opt("isequals");
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject1.put("", 0);
      jSONObject2.accumulate("{}", "{\"java.lang.String@0000000004\":\"java.lang.String@0000000005\"}");
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }
}
