/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:15:21 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.IEngine;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      String string0 = "";
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox(xmlEntityRef0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "Finder expression didn't evaluate to a boolean value.";
      Form form0 = new Form("Finder expression didn't evaluate to a boolean value.");
      Table table0 = null;
      try {
        table0 = new Table(form0, "Finder expression didn't evaluate to a boolean value.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "Ks";
      // Undeclared exception!
      try { 
        errorPage0.submit("Ks");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Form form0 = new Form("");
      String string0 = "Could not create DynamicSelection model. Label attribute was null or not an el-expression.";
      DateInput dateInput0 = new DateInput(form0, "Could not create DynamicSelection model. Label attribute was null or not an el-expression.", "Could not create DynamicSelection model. Label attribute was null or not an el-expression.", "Could not create DynamicSelection model. Label attribute was null or not an el-expression.");
      TableBlock tableBlock0 = null;
      try {
        tableBlock0 = new TableBlock(dateInput0, "Could not create DynamicSelection model. Label attribute was null or not an el-expression.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "VcAwr[[o-";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("VcAwr[[o-");
      xmlEntityRef0.defaultTagName();
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      Form form0 = new Form("");
      Form form1 = form0.addFormValidationError("");
      String string1 = "yj<.";
      TextArea textArea0 = new TextArea(form1, "", "yj<.");
      XmlPullWrapperFactory.newInstance();
      MXSerializer mXSerializer0 = new MXSerializer();
      // Undeclared exception!
      try { 
        form1.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Form form0 = new Form("return false;");
      // Undeclared exception!
      try { 
        form0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "bdo";
      Form form0 = new Form("bdo");
      Form form1 = form0.addFormValidationRule("bdo", "bdo");
      form1._getForm(false);
      // Undeclared exception!
      try { 
        form1.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "script";
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a component that is not an instance of IContainer.", "Can't add components to a component that is not an instance of IContainer.");
      FormElement formElement0 = checkbox0.addValidationError(" xmlns:");
      TableBlock tableBlock0 = new TableBlock(formElement0, "small");
      // Undeclared exception!
      try { 
        tableBlock0.id("e");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Form form0 = new Form("2Ns_>\u0007x:Z;aSmQDX");
      FileInput fileInput0 = new FileInput(form0, "2Ns_>\u0007x:Z;aSmQDX", "8 siE[:VOo");
      Double double0 = new Double((-2398.6377));
      // Undeclared exception!
      try { 
        fileInput0.i((Object) double0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "j";
      String string1 = "olfvB4#,/z\\LCf#";
      Checkbox checkbox0 = new Checkbox(errorPage0, "j", "olfvB4#,/zLCf#");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a component that is not an instance of IContainer.", "Can't add components to a component that is not an instance of IContainer.");
      Table table0 = new Table(errorPage0, "Can't add components to a component that is not an instance of IContainer.");
      table0.el("dfn");
      table0.tr();
      errorPage0.script();
      Checkbox checkbox1 = new Checkbox(fileInput0, "Th component can be added only to a TableRow.", "");
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox1._isGeneratedId());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      assertNotNull(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      IEngine iEngine0 = tableBlock0.getEngine();
      assertNull(iEngine0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      Any any0 = tableBlock0.col();
      assertNotNull(any0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      
      Any any1 = (Any)errorPage0.addFirst(any0);
      assertNotNull(any1);
      assertSame(any0, any1);
      assertSame(any1, any0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNull(any1.defaultTagName());
      assertEquals("Any_1", any1.getComponentId());
      assertTrue(any1._isGeneratedId());
      
      Block block0 = (Block)errorPage0.pre();
      assertNotNull(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      NumberInput numberInput0 = new NumberInput(any1, (String) null, "% ");
      assertNotNull(numberInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNull(any1.defaultTagName());
      assertEquals("Any_1", any1.getComponentId());
      assertTrue(any1._isGeneratedId());
      assertEquals("% ", numberInput0.getComponentId());
      assertNull(numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = numberInput0._applyFormat(double0);
      assertNotNull(string0);
      assertSame(any0, any1);
      assertSame(any1, any0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNull(any1.defaultTagName());
      assertEquals("Any_1", any1.getComponentId());
      assertTrue(any1._isGeneratedId());
      assertEquals("% ", numberInput0.getComponentId());
      assertNull(numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      
      IEngine iEngine1 = any0.getEngine();
      assertNull(iEngine1);
      assertSame(any0, any1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        tableBlock0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Block block0 = (Block)errorPage0.label();
      assertNotNull(block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "j", "olfvB4#,/zLCf#");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("olfvB4#,/zLCf#", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("j", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("olfvB4#,/zLCf#"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3854286412774823
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      String string0 = "script";
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      
      String string1 = "Can't add components to a coponent that is not an instance of IContainer.";
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a coponent that is not an instance of IContainer.", "Can't add components to a coponent that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      
      FormElement formElement0 = checkbox0.addValidationError("e");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      
      TableBlock tableBlock0 = new TableBlock(formElement0, "small");
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("small", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      
      FileInput fileInput1 = new FileInput(tableBlock0, "script", (String) null);
      assertNotNull(fileInput1);
      assertFalse(fileInput1.equals((Object)fileInput0));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("small", tableBlock0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("FileInput_1", fileInput1.getComponentId());
      assertEquals("input", fileInput1.defaultTagName());
      assertEquals("script", fileInput1.getFormElementName());
      assertTrue(fileInput1.isEmpty());
      assertTrue(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isValid());
      
      String string2 = "xE`W)y9fd+";
      String string3 = "";
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      
      Form form0 = new Form(errorPage0, "xE`W)y9fd+", actionExpression0);
      assertNotNull(form0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertEquals("xE`W)y9fd+", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      Form form1 = form0.addFormElement(fileInput0);
      assertNotNull(form1);
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertNotSame(fileInput0, fileInput1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertNull(actionExpression0.getJavascript());
      assertEquals("", actionExpression0.getActionExpression());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(0, actionExpression0.length());
      assertEquals("", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertEquals("xE`W)y9fd+", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isGeneratedId());
      assertEquals("xE`W)y9fd+", form1.getComponentId());
      
      // Undeclared exception!
      try { 
        form1.id("e");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a component that is not an instance of IContainer.", "Can't add components to a component that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      
      Table table0 = new Table(errorPage0, "Can't add components to a component that is not an instance of IContainer.");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", table0.getComponentId());
      
      ElExpression elExpression0 = table0.el("dfn");
      assertNotNull(elExpression0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", table0.getComponentId());
      assertEquals(3, elExpression0.length());
      assertEquals("dfn", elExpression0.getExpression());
      assertEquals("dfn", elExpression0.toString());
      
      Block block0 = (Block)table0.h1();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", table0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      Submit submit0 = new Submit(block0, (String) null, "span");
      assertNotNull(submit0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", table0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("span", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertNull(submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      
      Submit submit1 = (Submit)submit0.value("");
      assertNotNull(submit1);
      assertSame(submit0, submit1);
      assertSame(submit1, submit0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", table0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("span", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertNull(submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("span", submit1.getComponentId());
      assertTrue(submit1.isValid());
      assertTrue(submit1.isEmpty());
      assertEquals("input", submit1.defaultTagName());
      assertNull(submit1.getFormElementName());
      assertFalse(submit1._isGeneratedId());
      
      FileInput fileInput1 = new FileInput(block0, "", "span");
      assertNotNull(fileInput1);
      assertFalse(fileInput1.equals((Object)fileInput0));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", table0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("", fileInput1.getFormElementName());
      assertEquals("input", fileInput1.defaultTagName());
      assertTrue(fileInput1.isValid());
      assertEquals("span", fileInput1.getComponentId());
      assertTrue(fileInput1.isEmpty());
      assertFalse(fileInput1._isGeneratedId());
      
      Table table1 = new Table(submit1, "dfn");
      assertNotNull(table1);
      assertFalse(table1.equals((Object)table0));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", table0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("span", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertNull(submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("span", submit1.getComponentId());
      assertTrue(submit1.isValid());
      assertTrue(submit1.isEmpty());
      assertEquals("input", submit1.defaultTagName());
      assertNull(submit1.getFormElementName());
      assertFalse(submit1._isGeneratedId());
      assertEquals("dfn", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      
      Block block1 = (Block)table1.abbr();
      assertNotNull(block1);
      assertFalse(table0.equals((Object)table1));
      assertFalse(table1.equals((Object)table0));
      assertFalse(block1.equals((Object)block0));
      assertNotSame(table0, table1);
      assertNotSame(block0, block1);
      assertSame(submit0, submit1);
      assertSame(submit1, submit0);
      assertNotSame(table1, table0);
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", table0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("span", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertNull(submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("span", submit1.getComponentId());
      assertTrue(submit1.isValid());
      assertTrue(submit1.isEmpty());
      assertEquals("input", submit1.defaultTagName());
      assertNull(submit1.getFormElementName());
      assertFalse(submit1._isGeneratedId());
      assertEquals("dfn", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a coponent that is not an instance of IContainer.", "Can't add components to a coponent that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        checkbox0.em((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a coponent that is not an instance of IContainer.", "Can't add components to a coponent that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      
      FormElement formElement0 = checkbox0.addValidationError(" xmlns:");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      
      ActionExpression actionExpression0 = new ActionExpression("legend");
      assertNotNull(actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("legend", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.getActionExpression());
      
      ActionExpression actionExpression1 = actionExpression0.updateComponent("Cannot add a form element. No surrounding form found.");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("legend", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertEquals(6, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("legend", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertEquals("legend", actionExpression1.getActionExpression());
      assertEquals("legend", actionExpression1.getExpression());
      
      Form form0 = new Form(checkbox0, "Cannot add a form element. No surrounding form found.", actionExpression1);
      assertNotNull(form0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("legend", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals(6, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("legend", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("legend", actionExpression1.getActionExpression());
      assertEquals("legend", actionExpression1.getExpression());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("Cannot add a form element. No surrounding form found.", form0.getComponentId());
      
      IntStream intStream0 = actionExpression0.chars();
      assertNotNull(intStream0);
      assertSame(actionExpression0, actionExpression1);
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("legend", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.getActionExpression());
      
      Text text0 = new Text(fileInput0, form0);
      assertNotNull(text0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertNull(actionExpression0.getJavascript());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("legend", actionExpression0.toString());
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertEquals("action", actionExpression1.getEvent());
      assertEquals(6, actionExpression1.length());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression1.getJavascript());
      assertEquals("legend", actionExpression1.toString());
      assertFalse(actionExpression1.isSubmissible());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("legend", actionExpression1.getActionExpression());
      assertEquals("legend", actionExpression1.getExpression());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("Cannot add a form element. No surrounding form found.", form0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertFalse(text0.isCdata());
      assertNull(text0.defaultTagName());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isHtml());
      
      // Undeclared exception!
      try { 
        text0.fileInput("'.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a component that is not an instance of IContainer.", "Can't add components to a component that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      
      FormElement formElement0 = checkbox0.addValidationError(" xmlns:");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      Select select0 = new Select(checkbox0, "Can't add components to a component that is not an instance of IContainer.", "Can't add components to a component that is not an instance of IContainer.", " xmlns:", stringSelectModel0, false);
      assertNotNull(select0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getFormElementName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getComponentId());
      assertFalse(select0._isBuilt());
      
      Submit submit0 = new Submit(select0, "small", "Can't add components to a component that is not an instance of IContainer.");
      assertNotNull(submit0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getFormElementName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("small", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      
      FormElement formElement1 = submit0.value(" xmlns:");
      assertNotNull(formElement1);
      assertSame(checkbox0, formElement0);
      assertSame(submit0, formElement1);
      assertSame(formElement1, submit0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getFormElementName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("small", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals("input", formElement1.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", formElement1.getComponentId());
      assertFalse(formElement1._isGeneratedId());
      assertEquals("small", formElement1.getFormElementName());
      assertTrue(formElement1.isEmpty());
      assertTrue(formElement1.isValid());
      
      Radio radio0 = new Radio(submit0, "script", " xmlns:");
      assertNotNull(radio0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getFormElementName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("small", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals(" xmlns:", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("script", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      
      Table table0 = new Table(radio0, "small");
      assertNotNull(table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getFormElementName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("small", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals(" xmlns:", radio0.getComponentId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("script", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("small", table0.getComponentId());
      
      String string0 = fileInput0.getTempFileLocation();
      assertEquals("/tmp", string0);
      assertNotNull(string0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      
      Submit submit1 = (Submit)formElement1.requestFocus();
      assertNotNull(submit1);
      assertSame(checkbox0, formElement0);
      assertSame(submit0, formElement1);
      assertSame(submit0, submit1);
      assertSame(formElement1, submit0);
      assertSame(formElement1, submit1);
      assertSame(submit1, submit0);
      assertSame(submit1, formElement1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertTrue(fileInput0.isValid());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("select", select0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getFormElementName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("small", submit0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals("input", formElement1.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", formElement1.getComponentId());
      assertFalse(formElement1._isGeneratedId());
      assertEquals("small", formElement1.getFormElementName());
      assertTrue(formElement1.isEmpty());
      assertTrue(formElement1.isValid());
      assertTrue(submit1.isValid());
      assertEquals("input", submit1.defaultTagName());
      assertEquals("small", submit1.getFormElementName());
      assertFalse(submit1._isGeneratedId());
      assertTrue(submit1.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", submit1.getComponentId());
      
      NumberInput numberInput0 = null;
      try {
        numberInput0 = new NumberInput(radio0, "org.mvel.PropertyAccessException", (String) null, "e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize DecimalFormat with pattern 'e'.
         //
         verifyException("wheel.components.NumberInput", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      Label label0 = (Label)errorPage0.h2((Object) "j");
      assertNotNull(label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "j", "olfvB4#,/zLCf#");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(checkbox0.isValid());
      assertEquals("j", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("olfvB4#,/zLCf#", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      
      Checkbox checkbox1 = (Checkbox)checkbox0.clasS("j");
      assertNotNull(checkbox1);
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(checkbox0.isValid());
      assertEquals("j", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("olfvB4#,/zLCf#", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertEquals("olfvB4#,/zLCf#", checkbox1.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("j", checkbox1.getFormElementName());
      assertFalse(checkbox1._isGeneratedId());
      
      // Undeclared exception!
      try { 
        checkbox0.buttonInput("name");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      // Undeclared exception!
      try { 
        errorPage0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      
      String string0 = "PkM";
      Table table0 = new Table(errorPage0, "PkM");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      
      Image image0 = new Image(table0, "PkM", "PkM");
      assertNotNull(image0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      
      Checkbox checkbox0 = new Checkbox(image0, "org.mvel.conversion.ShortCH$7", "org.mvel.conversion.ShortCH$7");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      
      FormElement formElement0 = checkbox0.label("PkM");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getComponentId());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getFormElementName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      
      String string1 = "";
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getJavascript());
      
      // Undeclared exception!
      try { 
        formElement0.noscript();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9812075507356175
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "j", "olfvB4#,/zLCf#");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("j", checkbox0.getFormElementName());
      assertEquals("olfvB4#,/zLCf#", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      
      String string0 = checkbox0.getComponentName();
      assertEquals("Checkbox", string0);
      assertNotNull(string0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("j", checkbox0.getFormElementName());
      assertEquals("olfvB4#,/zLCf#", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      
      // Undeclared exception!
      try { 
        checkbox0.buttonInput("name");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.933809998920632
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "wheel.components.FileInput";
      Form form0 = new Form("wheel.components.FileInput");
      assertNotNull(form0);
      assertEquals("wheel.components.FileInput", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      TextArea textArea0 = new TextArea(form0, "wheel.components.FileInput", "wheel.components.FileInput");
      assertNotNull(textArea0);
      assertEquals("wheel.components.FileInput", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel.components.FileInput", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("wheel.components.FileInput", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      
      Checkbox checkbox0 = new Checkbox(textArea0, "wheel.components.FileInput", "org.mvel.conversion.ShortCH$5");
      assertNotNull(checkbox0);
      assertEquals("wheel.components.FileInput", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel.components.FileInput", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertEquals("wheel.components.FileInput", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("wheel.components.FileInput", checkbox0.getFormElementName());
      assertEquals("org.mvel.conversion.ShortCH$5", checkbox0.getComponentId());
      
      // Undeclared exception!
      try { 
        textArea0.b((Object) checkbox0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a component that is not an instance of IContainer.", "Can't add components to a component that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertTrue(checkbox0.isValid());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      
      TableBlock tableBlock0 = new TableBlock(checkbox0, "small");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertTrue(checkbox0.isValid());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("small", tableBlock0.getComponentId());
      
      Checkbox checkbox1 = new Checkbox(tableBlock0, "", "");
      assertNotNull(checkbox1);
      assertFalse(checkbox1.equals((Object)checkbox0));
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertTrue(checkbox0.isValid());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("small", tableBlock0.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertEquals("", checkbox1.getFormElementName());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      
      // Undeclared exception!
      try { 
        checkbox0.tt((Object) tableBlock0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      String string0 = "PkM";
      Table table0 = new Table(errorPage0, "PkM");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      
      Image image0 = new Image(table0, "PkM", "PkM");
      assertNotNull(image0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      
      String string1 = "org.mvel.conversion.ShortCH$7";
      Checkbox checkbox0 = new Checkbox(image0, "org.mvel.conversion.ShortCH$7", "org.mvel.conversion.ShortCH$7");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getFormElementName());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getComponentId());
      
      FormElement formElement0 = checkbox0.label("PkM");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getFormElementName());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertNull(actionExpression0.getEvent());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      
      Form form0 = new Form(formElement0, "PkM", actionExpression0);
      assertNotNull(form0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getFormElementName());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("PkM", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("");
      assertNotNull(initialFieldValue0);
      assertEquals("", initialFieldValue0.getStringReplacement());
      
      Label label0 = (Label)form0.u((Object) initialFieldValue0);
      assertNotNull(label0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getFormElementName());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("PkM", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("", initialFieldValue0.getStringReplacement());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_2", label0.getComponentId());
      
      Block block0 = (Block)errorPage0.samp();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Label label1 = (Label)label0.acronym((Object) formElement0);
      assertNotNull(label1);
      assertFalse(label1.equals((Object)label0));
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("PkM", table0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getFormElementName());
      assertEquals("org.mvel.conversion.ShortCH$7", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("org.mvel.conversion.ShortCH$7", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isExternalUrl());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("PkM", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("", initialFieldValue0.getStringReplacement());
      assertTrue(label0._isGeneratedId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_2", label0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_3", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      
      // Undeclared exception!
      try { 
        label1.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      
      String string0 = "script";
      FileInput fileInput0 = new FileInput(errorPage0, "script", "script");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("script", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      
      String string1 = "Can't add components to a coponent that is not an instance of IContainer.";
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a coponent that is not an instance of IContainer.", "Can't add components to a coponent that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("script", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      
      FormElement formElement0 = checkbox0.addValidationError("script");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("input", fileInput0.defaultTagName());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isEmpty());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("script", fileInput0.getComponentId());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        checkbox0.dt((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5046920627458835
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a coponent that is not an instance of IContainer.", "Can't add components to a coponent that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      
      FormElement formElement0 = checkbox0.addValidationError(" xmlns:");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      
      ActionExpression actionExpression0 = new ActionExpression("legend");
      assertNotNull(actionExpression0);
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("legend", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      
      ActionExpression actionExpression1 = actionExpression0.updateComponent("Cannot add a form element. No surrounding form found.");
      assertNotNull(actionExpression1);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      assertEquals("legend", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression1.getJavascript());
      assertEquals("legend", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(6, actionExpression1.length());
      assertEquals("legend", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertNull(actionExpression1.getEvent());
      assertEquals("legend", actionExpression1.getExpression());
      
      Form form0 = new Form(checkbox0, "Cannot add a form element. No surrounding form found.", actionExpression1);
      assertNotNull(form0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.toString());
      assertEquals("legend", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression1.getJavascript());
      assertEquals("legend", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("action", actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(6, actionExpression1.length());
      assertEquals("legend", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("legend", actionExpression1.getExpression());
      assertEquals("Cannot add a form element. No surrounding form found.", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      
      IntStream intStream0 = actionExpression0.chars();
      assertNotNull(intStream0);
      assertSame(actionExpression0, actionExpression1);
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.toString());
      assertEquals("legend", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      
      Text text0 = new Text(fileInput0, form0);
      assertNotNull(text0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals(6, actionExpression0.length());
      assertEquals("legend", actionExpression0.toString());
      assertEquals("legend", actionExpression0.getExpression());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("legend", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertNull(actionExpression1.getJavascript());
      assertEquals("legend", actionExpression1.getActionExpression());
      assertFalse(actionExpression1.isSubmissible());
      assertEquals("action", actionExpression1.getEvent());
      assertTrue(actionExpression1.isSubmitForm());
      assertEquals(6, actionExpression1.length());
      assertEquals("legend", actionExpression1.toString());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("legend", actionExpression1.getExpression());
      assertEquals("Cannot add a form element. No surrounding form found.", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(text0.isHtml());
      assertEquals("Text_1", text0.getComponentId());
      assertFalse(text0.isCdata());
      assertNull(text0.defaultTagName());
      assertTrue(text0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "H7Hkc2\"FL'Lw");
      assertNotNull(table0);
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("H7Hkc2\"FL'Lw", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        table0.get("legend");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'legend'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a component that is not an instance of IContainer.", "Can't add components to a component that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      
      Block block0 = (Block)errorPage0.legend();
      assertNotNull(block0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Checkbox checkbox1 = (Checkbox)checkbox0.addValidationError(" xmlns:");
      assertNotNull(checkbox1);
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertEquals("script", fileInput0.getFormElementName());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox1.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("Can't add components to a component that is not an instance of IContainer.", checkbox1.getFormElementName());
      assertFalse(checkbox1.isValid());
      assertFalse(checkbox1._isGeneratedId());
      
      // Undeclared exception!
      try { 
        checkbox0.dfn();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.511299847064725
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      Select select0 = new Select(errorPage0, "j", "j", "olfvB4#,/zLCf#", stringSelectModel0, false);
      assertNotNull(select0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isBuilt());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("j", select0.getFormElementName());
      
      Submit submit0 = new Submit(select0, "no", ";LD+#'k- '.RRgY n");
      assertNotNull(submit0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isBuilt());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("j", select0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertEquals("no", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      
      FormElement formElement0 = submit0.value(" 00&!)!v");
      assertNotNull(formElement0);
      assertSame(submit0, formElement0);
      assertSame(formElement0, submit0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isBuilt());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("j", select0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertEquals("no", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("no", formElement0.getFormElementName());
      assertEquals(";LD+#'k- '.RRgY n", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      
      Radio radio0 = new Radio(submit0, ";LD+#'k- '.RRgY n", ";LD+#'k- '.RRgY n");
      assertNotNull(radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isBuilt());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("j", select0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertEquals("no", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getComponentId());
      
      FormElement formElement1 = radio0.value("olfvB4#,/zLCf#");
      assertNotNull(formElement1);
      assertSame(submit0, formElement0);
      assertSame(radio0, formElement1);
      assertSame(formElement1, radio0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isBuilt());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("j", select0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertEquals("no", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getComponentId());
      assertFalse(formElement1._isGeneratedId());
      assertEquals(";LD+#'k- '.RRgY n", formElement1.getFormElementName());
      assertEquals(";LD+#'k- '.RRgY n", formElement1.getComponentId());
      assertTrue(formElement1.isValid());
      assertEquals("input", formElement1.defaultTagName());
      assertTrue(formElement1.isEmpty());
      
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertNotNull(standaloneComponent0);
      assertSame(errorPage0, standaloneComponent0);
      assertSame(standaloneComponent0, errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals("div", standaloneComponent0.defaultTagName());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertFalse(standaloneComponent0._isBuilt());
      assertTrue(standaloneComponent0.isPage());
      assertFalse(standaloneComponent0._isGeneratedId());
      
      Table table0 = new Table(radio0, "5*35c'H~JD");
      assertNotNull(table0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isBuilt());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("j", select0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertEquals("no", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("5*35c'H~JD", table0.getComponentId());
      
      Block block0 = (Block)table0.abbr();
      assertNotNull(block0);
      assertSame(errorPage0, standaloneComponent0);
      assertSame(submit0, formElement0);
      assertSame(radio0, formElement1);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isBuilt());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("j", select0.getFormElementName());
      assertTrue(submit0.isValid());
      assertEquals("input", submit0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertEquals("no", submit0.getFormElementName());
      assertFalse(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertFalse(radio0._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertTrue(radio0.isValid());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("5*35c'H~JD", table0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      
      select0._setComponentId("olfvB4#,/zLCf#");
      assertSame(errorPage0, standaloneComponent0);
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("select", select0.defaultTagName());
      assertFalse(select0._isBuilt());
      assertEquals("olfvB4#,/zLCf#", select0.getComponentId());
      assertFalse(select0._isGeneratedId());
      assertTrue(select0.isEmpty());
      assertTrue(select0.isValid());
      assertEquals("j", select0.getFormElementName());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      String string0 = "j";
      String string1 = "olfvB4#,/z\\LCf#";
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      
      Block block0 = (Block)tableBlock0.u();
      assertNotNull(block0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      DynamicSelectModel dynamicSelectModel0 = tableBlock0.selectModel();
      assertNotNull(dynamicSelectModel0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty("");
      assertNotNull(dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("j");
      assertNotNull(dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      
      Select select0 = null;
      try {
        select0 = new Select(tableBlock0, "", "j", "j", dynamicSelectModel2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Block block0 = (Block)errorPage0.h2();
      assertNotNull(block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "j", "olfvB4#,/zLCf#");
      assertNotNull(checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("olfvB4#,/zLCf#", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("j", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      
      // Undeclared exception!
      try { 
        checkbox0.buttonInput("olfvB4#,/zLCf#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      
      Any any0 = (Any)errorPage0.hr();
      assertNotNull(any0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      
      IEngine iEngine0 = errorPage0.getEngine();
      assertNull(iEngine0);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(errorPage0._isBuilt());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1957), (-1957), (-1957), (-1957), 6);
      assertNotNull(mockGregorianCalendar0);
      
      InitialFieldValue initialFieldValue0 = new InitialFieldValue(mockGregorianCalendar0, "j");
      assertNotNull(initialFieldValue0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1957,MONTH=-1957,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1957,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1957,HOUR_OF_DAY=-1957,MINUTE=6,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("j", initialFieldValue0.getStringReplacement());
      
      Label label0 = (Label)errorPage0.dd((Object) initialFieldValue0);
      assertNotNull(label0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1957,MONTH=-1957,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1957,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1957,HOUR_OF_DAY=-1957,MINUTE=6,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("j", initialFieldValue0.getStringReplacement());
      assertTrue(label0._isGeneratedId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      assertNotNull(stringSelectModel0);
      assertEquals(0, stringSelectModel0.getOptionCount());
      
      Select select0 = new Select(errorPage0, "j", "j", "olfvB4#,/zLCf#", stringSelectModel0, false);
      assertNotNull(select0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("j", select0.getFormElementName());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isValid());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      
      Submit submit0 = new Submit(select0, "olfvB4#,/zLCf#", ";LD+#'k- '.RRgY n");
      assertNotNull(submit0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("j", select0.getFormElementName());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isValid());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("olfvB4#,/zLCf#", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      
      Submit submit1 = (Submit)submit0.value(" 00&!)!v");
      assertNotNull(submit1);
      assertSame(submit0, submit1);
      assertSame(submit1, submit0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("j", select0.getFormElementName());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isValid());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("olfvB4#,/zLCf#", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", submit1.defaultTagName());
      assertTrue(submit1.isValid());
      assertEquals(";LD+#'k- '.RRgY n", submit1.getComponentId());
      assertEquals("olfvB4#,/zLCf#", submit1.getFormElementName());
      assertTrue(submit1.isEmpty());
      assertFalse(submit1._isGeneratedId());
      
      Radio radio0 = new Radio(submit0, ";LD+#'k- '.RRgY n", ";LD+#'k- '.RRgY n");
      assertNotNull(radio0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("j", select0.getFormElementName());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isValid());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("olfvB4#,/zLCf#", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getComponentId());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      
      Radio radio1 = (Radio)radio0.value("olfvB4#,/zLCf#");
      assertNotNull(radio1);
      assertSame(submit0, submit1);
      assertSame(radio0, radio1);
      assertSame(radio1, radio0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("j", select0.getFormElementName());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isValid());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("olfvB4#,/zLCf#", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getComponentId());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertTrue(radio1.isEmpty());
      assertEquals("input", radio1.defaultTagName());
      assertFalse(radio1._isGeneratedId());
      assertEquals(";LD+#'k- '.RRgY n", radio1.getFormElementName());
      assertEquals(";LD+#'k- '.RRgY n", radio1.getComponentId());
      assertTrue(radio1.isValid());
      
      Table table0 = new Table(radio0, "5*35c'H~JD");
      assertNotNull(table0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("j", select0.getFormElementName());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isValid());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("olfvB4#,/zLCf#", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getComponentId());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertFalse(table0._isGeneratedId());
      assertEquals("5*35c'H~JD", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      
      Block block0 = (Block)table0.abbr();
      assertNotNull(block0);
      assertSame(submit0, submit1);
      assertSame(radio0, radio1);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals(0, stringSelectModel0.getOptionCount());
      assertEquals("j", select0.getFormElementName());
      assertEquals("j", select0.getComponentId());
      assertFalse(select0._isBuilt());
      assertEquals("select", select0.defaultTagName());
      assertTrue(select0.isValid());
      assertTrue(select0.isEmpty());
      assertFalse(select0._isGeneratedId());
      assertEquals(";LD+#'k- '.RRgY n", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertEquals("olfvB4#,/zLCf#", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertFalse(submit0._isGeneratedId());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isValid());
      assertEquals("input", radio0.defaultTagName());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getComponentId());
      assertEquals(";LD+#'k- '.RRgY n", radio0.getFormElementName());
      assertTrue(radio0.isEmpty());
      assertFalse(table0._isGeneratedId());
      assertEquals("5*35c'H~JD", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      
      Label label1 = (Label)errorPage0.span((Object) null);
      assertNotNull(label1);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      
      // Undeclared exception!
      try { 
        submit1.q();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "@1%yH'";
      Form form0 = new Form("@1%yH'");
      assertNotNull(form0);
      assertFalse(form0._isBuilt());
      assertEquals("@1%yH'", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      
      Form form1 = form0.addFormValidationError("sub");
      assertNotNull(form1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(form0._isBuilt());
      assertEquals("@1%yH'", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertEquals("@1%yH'", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        form0.form((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.913172508394483
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      
      FileInput fileInput0 = new FileInput(errorPage0, "script", "e");
      assertNotNull(fileInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      
      Checkbox checkbox0 = new Checkbox(fileInput0, "Can't add components to a coponent that is not an instance of IContainer.", "Can't add components to a coponent that is not an instance of IContainer.");
      assertNotNull(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      
      FormElement formElement0 = checkbox0.addValidationError("e");
      assertNotNull(formElement0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      
      TableBlock tableBlock0 = new TableBlock(formElement0, "small");
      assertNotNull(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("small", tableBlock0.getComponentId());
      
      FileInput fileInput1 = new FileInput(tableBlock0, "script", (String) null);
      assertNotNull(fileInput1);
      assertFalse(fileInput1.equals((Object)fileInput0));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getComponentId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", checkbox0.getFormElementName());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getFormElementName());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("Can't add components to a coponent that is not an instance of IContainer.", formElement0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("small", tableBlock0.getComponentId());
      assertEquals("FileInput_1", fileInput1.getComponentId());
      assertEquals("/tmp", fileInput1.getTempFileLocation());
      assertTrue(fileInput1.isEmpty());
      assertEquals("script", fileInput1.getFormElementName());
      assertEquals(1000, fileInput1.getMaxMemoryFileSize());
      assertEquals("input", fileInput1.defaultTagName());
      assertTrue(fileInput1._isGeneratedId());
      assertTrue(fileInput1.isValid());
      assertEquals(1000, fileInput1.getMaxRequestSize());
      
      Block block0 = (Block)errorPage0.noframes();
      assertNotNull(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_2", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      
      Form form0 = new Form(errorPage0, "xE`W)y9fd+", actionExpression0);
      assertNotNull(form0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertFalse(form0._isGeneratedId());
      assertEquals("xE`W)y9fd+", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.addFormElement(fileInput0);
      assertNotNull(form1);
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertNotSame(fileInput0, fileInput1);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertFalse(form0._isGeneratedId());
      assertEquals("xE`W)y9fd+", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("xE`W)y9fd+", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      
      Form form2 = form1.id("e");
      assertNotNull(form2);
      assertFalse(fileInput0.equals((Object)fileInput1));
      assertNotSame(fileInput0, fileInput1);
      assertSame(form0, form2);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("e", fileInput0.getComponentId());
      assertEquals("script", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertTrue(fileInput0.isEmpty());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("e", form0.getComponentId());
      assertEquals("e", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("e", form2.getComponentId());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "script";
      stringArray0[2] = "";
      Checkbox checkbox1 = new Checkbox(form0, "", (String) null);
      assertNotNull(checkbox1);
      assertFalse(checkbox1.equals((Object)formElement0));
      assertFalse(checkbox1.equals((Object)checkbox0));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getExpression());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getActionExpression());
      assertEquals(0, actionExpression0.length());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("", actionExpression0.toString());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("e", form0.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertEquals("Checkbox_1", checkbox1.getComponentId());
      assertTrue(checkbox1.isValid());
      assertTrue(checkbox1._isGeneratedId());
      assertTrue(checkbox1.isEmpty());
      assertEquals("", checkbox1.getFormElementName());
      
      // Undeclared exception!
      try { 
        checkbox1.buttonInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.851165540472089
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertNotNull(errorPage0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      
      TableBlock tableBlock0 = new TableBlock(errorPage0, "small");
      assertNotNull(tableBlock0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("small", tableBlock0.getComponentId());
      
      FileInput fileInput0 = new FileInput(tableBlock0, "small", "small");
      assertNotNull(fileInput0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("small", tableBlock0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("small", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("small", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      
      ErrorPage errorPage1 = new ErrorPage();
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      
      Block block0 = (Block)errorPage1.noframes();
      assertNotNull(block0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage1, errorPage0);
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      
      ActionExpression actionExpression0 = new ActionExpression("");
      assertNotNull(actionExpression0);
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertNull(actionExpression0.getEvent());
      
      Form form0 = new Form(block0, "8s!t9lNO=d.NH244>^", actionExpression0);
      assertNotNull(form0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertEquals("8s!t9lNO=d.NH244>^", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      Form form1 = form0.addFormElement(fileInput0);
      assertNotNull(form1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(errorPage1, errorPage0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("small", tableBlock0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("small", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("small", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertEquals("8s!t9lNO=d.NH244>^", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("8s!t9lNO=d.NH244>^", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      
      Form form2 = form0.id((String) null);
      assertNotNull(form2);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage1, errorPage0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("null", form0.getComponentId());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("null", form2.getComponentId());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "f;>,^hV}12";
      stringArray0[2] = "small";
      Form form3 = form1._buildFromSerializedString(stringArray0);
      assertNotNull(form3);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(errorPage1, errorPage0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form1, form3);
      assertSame(form3, form2);
      assertSame(form3, form0);
      assertSame(form3, form1);
      assertEquals(3, stringArray0.length);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("small", tableBlock0.getComponentId());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("small", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("small", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("null", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("null", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("null", form3.getComponentId());
      assertEquals("form", form3.defaultTagName());
      assertFalse(form3._isGeneratedId());
      assertFalse(form3._isBuilt());
      
      Form form4 = form0.addFormValidationError((String) null);
      assertNotNull(form4);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertNotSame(errorPage1, errorPage0);
      assertSame(form0, form1);
      assertSame(form0, form4);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form4, form3);
      assertSame(form4, form0);
      assertSame(form4, form1);
      assertSame(form4, form2);
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("null", form0.getComponentId());
      assertFalse(form4._isBuilt());
      assertEquals("null", form4.getComponentId());
      assertEquals("form", form4.defaultTagName());
      assertFalse(form4._isGeneratedId());
      
      Table table0 = new Table(errorPage1, "8s!t9lNO=d.NH244>^");
      assertNotNull(table0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("8s!t9lNO=d.NH244>^", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      
      Table table1 = table0.renderHint("f;>,^hV}12");
      assertNotNull(table1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertSame(table1, table0);
      assertNotSame(errorPage1, errorPage0);
      assertSame(table0, table1);
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("8s!t9lNO=d.NH244>^", table1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("8s!t9lNO=d.NH244>^", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      
      Block block1 = (Block)table1.abbr();
      assertNotNull(block1);
      assertFalse(block1.equals((Object)block0));
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertSame(table1, table0);
      assertNotSame(block1, block0);
      assertNotSame(errorPage1, errorPage0);
      assertSame(table0, table1);
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("8s!t9lNO=d.NH244>^", table1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_3", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("8s!t9lNO=d.NH244>^", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      
      Block block2 = (Block)form1.end();
      assertNotNull(block2);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(block2.equals((Object)block1));
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(block0.equals((Object)block1));
      assertNotSame(errorPage0, errorPage1);
      assertSame(block2, block0);
      assertNotSame(block2, block1);
      assertNotSame(errorPage1, errorPage0);
      assertNotSame(block0, block1);
      assertSame(block0, block2);
      assertSame(form0, form1);
      assertSame(form0, form4);
      assertSame(form0, form2);
      assertSame(form0, form3);
      assertSame(form1, form2);
      assertSame(form1, form0);
      assertSame(form1, form4);
      assertSame(form1, form3);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("small", tableBlock0.getComponentId());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_2", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("small", fileInput0.getFormElementName());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isEmpty());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("small", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("Block_2", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals(0, actionExpression0.length());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("action", actionExpression0.getEvent());
      assertEquals("", actionExpression0.getActionExpression());
      assertTrue(actionExpression0.isSubmitForm());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals("", actionExpression0.getExpression());
      assertEquals("", actionExpression0.toString());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("null", form0.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("null", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Form form0 = new Form((String) null);
      assertNotNull(form0);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      
      String string0 = "";
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      String string1 = "Zu@Z1rU3<B9:ZE";
      ElExpression elExpression0 = new ElExpression("Zu@Z1rU3<B9:ZE");
      assertNotNull(elExpression0);
      assertEquals("Zu@Z1rU3<B9:ZE", elExpression0.toString());
      assertEquals("Zu@Z1rU3<B9:ZE", elExpression0.getExpression());
      assertEquals(14, elExpression0.length());
      
      CheckboxGroup checkboxGroup0 = null;
      try {
        checkboxGroup0 = new CheckboxGroup(form0, "", (String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
