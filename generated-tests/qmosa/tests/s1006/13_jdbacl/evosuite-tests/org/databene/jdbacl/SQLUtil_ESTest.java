/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:23:17 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "::=pG%=$4I|cVOW_";
      stringArray0[2] = "::=pG%=$4I|cVOW_";
      stringArray0[3] = "::=pG%=$4I|cVOW_";
      stringArray0[4] = "::=pG%=$4I|cVOW_";
      SQLUtil.join("::=pG%=$4I|cVOW_", "::=pG%=$4I|cVOW_", stringArray0, ", TYPE = ", (String) null, stringArray0);
      SQLUtil.renderValue((Object) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("[Ex%:`<");
      assertNull(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w*", defaultDBTable0, (-1424), "org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      defaultDBColumn0.setOwner(defaultDBTable0);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("column w*", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("r");
      dBCatalog0.getTable("", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-501), "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("//");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("r", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      SQLUtil.renderValue((Object) null);
      defaultDBColumn0.isEquivalent((DBObject) null);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("r", (String[]) null, "", "null", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBTrigger dBTrigger0 = new DBTrigger("", dBSchema0);
      String string1 = "drop table";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBTrigger0.setTriggerType("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop table", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBSchema0.equals(dBForeignKeyConstraint0);
      dBTrigger0.setDescription("");
      dBTrigger0.setName("");
      SQLUtil.typeAndName(dBTrigger0);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "J*F8tP]KHJO+";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      String string0 = "";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = " join ";
      stringArray0[1] = " join ";
      stringArray0[2] = " join ";
      SQLUtil.renderColumnListWithTableName(" join ", stringArray0);
      String string0 = "org.databene.jdbacl.model.DBRowIterator";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" join ");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9559838465843624
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "nV3nM<\\^<k";
      SQLUtil.mutatesDataOrStructure("nV3nM<^<k");
      StringBuilder stringBuilder0 = new StringBuilder("[473_");
      stringBuilder0.insert(0, 1177);
      SQLUtil.addRequiredCondition("nV3nM<^<k", stringBuilder0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("nV3nM<^<k", dBCatalog0);
      dBSchema0.getTable("nV3nM<^<k");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "H83");
      Integer integer0 = new Integer(0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("v8l", (DBTable) null, dBDataType0, integer0, integer0);
      try { 
        Integer.decode("FAm)=s?tL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"FAm)=s?tL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor";
      SQLUtil.removeComments("org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CALL SCOPE_IDENTITY()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall(": columns=");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ": columns=";
      stringArray0[1] = ": columns=";
      stringArray0[2] = ": columns=";
      stringArray0[3] = "VCFCT`14vbhL5v";
      stringArray0[4] = ": columns=";
      stringArray0[5] = ": columns=";
      stringArray0[6] = ": columns=";
      stringArray0[7] = ": columns=";
      stringArray0[8] = ": columns=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ": columns=", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \": columns=\" PRIMARY KEY (: columns=, : columns=, : columns=, VCFCT`14vbhL5v, : columns=, : columns=, : columns=, : columns=, : columns=)", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LONGTEXT";
      stringArray0[1] = "LONGTEXT";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "LONGTEXT";
      stringArray1[1] = "W";
      stringArray1[2] = "LONGTEXT";
      stringArray1[3] = "";
      stringArray1[4] = "";
      SQLUtil.leftJoin("LONGTEXT", stringArray0, "", "LONGTEXT", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1, "LONGTEXT");
      Integer integer0 = new Integer(1);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable1, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("SELECT * FROM  WHERE LONGTEXT = 'LONGTEXT' AND LONGTEXT = 'LONGTEXT'", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.isDDL("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "M#4YXF1GU";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "L'eP";
      stringArray0[8] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("", (Database) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.io.vfmem.VirtualFile", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(90015, "~Yo?9@r8");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~Yo?9@r8", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(90015, (CharSequence) "~Yo?9@r8 ~YO?9@R8 NULL", 0, 90015);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 90015
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.mutatesStructure("CALL SCOPE_IDENTITY()");
      SQLUtil.isQuery("V.b;hWKR022hsO");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "42802";
      stringArray0[1] = "CALL SCOPE_IDENTITY()";
      stringArray0[2] = ".::?yLbaD^;";
      stringArray0[3] = "V.b;hWKR022hsO";
      stringArray0[4] = "CALL SCOPE_IDENTITY()";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6T'dh(3:lIHF", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("3cQFRIX!b(", "execkmbegxpq9~n\"", defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w*", defaultDBTable0, (-1424), "org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      defaultDBColumn0.setOwner(defaultDBTable0);
      SQLUtil.removeComments("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "execute";
      stringArray0[1] = "org.apache.derby.impl.sql.execute.CreateTableConstantAction";
      stringArray0[2] = "CEILING";
      stringArray0[3] = "org.apache.derby.impl.sql.execute.CreateTableConstantAction";
      stringArray0[4] = "w*";
      stringArray0[5] = "w*";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w*", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (execute, org.apache.derby.impl.sql.execute.CreateTableConstantAction, CEILING, org.apache.derby.impl.sql.execute.CreateTableConstantAction, w*, w*)", string0);
      
      boolean boolean0 = SQLUtil.isQuery("truncate");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sP:l`/*D<R";
      stringArray0[1] = "sP:l`/*D<R";
      stringArray0[2] = "sP:l`/*D<R";
      stringArray0[3] = "f`^;m26)qC93X2?";
      stringArray0[4] = "sP:l`/*D<R";
      stringArray0[5] = "sP:l`/*D<R";
      stringArray0[6] = "sP:l`/*D<R";
      stringArray0[7] = "sP:l`/*D<R";
      stringArray0[8] = "sP:l`/*D<R";
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil.removeComments("zY(");
      SQLUtil.renderValue("sP:l`/*D<R");
      // Undeclared exception!
      SQLUtil.isDDL("sP:l`/*D<R");
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("42X73");
      boolean boolean0 = SQLUtil.isDML("select into");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(34);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition("I$g)4m\rY*}V::;KM'", stringBuilder2);
      stringBuilder0.reverse();
      stringBuilder0.append("s_>\u0007x:Z;aSmQDXyQU");
      SQLUtil.addOptionalCondition("v8W9-v[d@", stringBuilder3);
      SQLUtil.isProcedureCall("");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("s_>\u0007x:Z;aSmQDXyQU");
      assertNull(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Er";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.RemapCRsVisitor";
      stringArray0[4] = "42802";
      stringArray0[5] = "42802";
      stringArray0[6] = "alter materialized view9_nhkw9<:+";
      stringArray0[7] = ".::?yLbaD^;";
      stringArray0[8] = "42802";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable("alter materialized view9_nhkw9<:+");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Er", defaultDBTable0, (DBDataType) null);
      String string0 = SQLUtil.substituteMarkers("insertnv3nm<^<k", "AXr4g=kS.n0? LZObv", "42802");
      assertEquals("insertnv3nm<^<k", string0);
      
      String string1 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w*", defaultDBTable0, (-1424), "org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      defaultDBColumn0.setOwner(defaultDBTable0);
      SQLUtil.removeComments("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "execute";
      stringArray0[1] = "org.apache.derby.impl.sql.execute.CreateTableConstantAction";
      SQLUtil.normalize("org.apache.derby.impl.sql.execute.CreateTableConstantAction", true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("execute", "wR]{*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w*", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("execute", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.normalize("+J<pN-IDKgPiSr-U", false);
      SQLUtil.mutatesStructure("callcall scope_identity()");
      String[] stringArray1 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("wR]{*", true, dBTable0, stringArray0, dBTable0, stringArray1);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6957425341696348
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.mutatesStructure("CALL SCOPE_IDENTITY()");
      StringBuilder stringBuilder0 = new StringBuilder(34);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~=Y>a',?jN<6l@%i");
      DBDataType dBDataType0 = DBDataType.getInstance(34, "@cQMM.cU USU!Jzv>'");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("log recover", defaultDBTable0, dBDataType0, integer0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      SQLUtil.addRequiredCondition("_69G3,", stringBuilder1);
      assertEquals("_69G3,", stringBuilder1.toString());
      assertEquals("_69G3,", stringBuilder0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8043716191528456
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[28];
      stringArray0[0] = "sP:l`/*D<R";
      stringArray0[1] = "sP:l`/*D<R";
      stringArray0[2] = "sP:l`/*D<R";
      stringArray0[3] = "f`^;m26)qC93X2?";
      stringArray0[4] = "sP:l`/*D<R";
      stringArray0[5] = "sP:l`/*D<R";
      stringArray0[6] = "sP:l`/*D<R";
      stringArray0[7] = "sP:l`/*D<R";
      stringArray0[8] = "sP:l`/*D<R";
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sP:l`/*D<R");
      StringBuilder stringBuilder0 = new StringBuilder(2523);
      stringBuilder0.append("sP:l`/*D<R");
      SQLUtil.addOptionalCondition("sP:l`/*D<R", stringBuilder0);
      assertEquals("sP:l`/*D<R or sP:l`/*D<R", stringBuilder0.toString());
      
      SQLUtil.isProcedureCall("_NOTC3_NULL");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectorg.apache.derby.impl.sql.execute.createtableconstantaction");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6434177197931799
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("alter tablecallcall scope_identity()");
      String string0 = "org.postgresql.jdbc3.AbstractJdbc3Statement";
      SQLUtil.normalize("org.postgresql.jdbc3.AbstractJdbc3Statement", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isDDL("alter tablecallcall scope_identity()");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter tablecallcall scope_identity()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8392967479776607
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.impl.sql.execute.CreateTableConstantAction";
      stringArray0[1] = "w*";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.impl.sql.execute.CreateTableConstantAction", true, stringArray0);
      dBUniqueConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.isQuery("H5k@>bsthIdY0r2do");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5527344384934834
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w*", defaultDBTable0, (-1424), "org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      defaultDBColumn0.setOwner(defaultDBTable0);
      SQLUtil.removeComments("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "execute";
      stringArray0[1] = "org.apache.derby.impl.sql.execute.CreateTableConstantAction";
      SQLUtil.normalize("org.apache.derby.impl.sql.execute.CreateTableConstantAction", true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("execute", "wR]{*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('\\');
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w*", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("execute", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.normalize("+J<pN-IDKgPiSr-U", false);
      SQLUtil.mutatesStructure("callcall scope_identity()");
      String[] stringArray1 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("wR]{*", true, dBTable0, stringArray0, dBTable0, stringArray1);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.808045719583997
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter materialized view";
      boolean boolean0 = SQLUtil.isProcedureCall("update");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("insert");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      StringBuilder stringBuilder0 = new StringBuilder(2523);
      StringBuilder stringBuilder1 = stringBuilder0.append("alter materialized view@g");
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("isFirst", stringBuilder1);
      SQLUtil.isProcedureCall("%[H");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("isFirst", false, "alter materialized view@g", "isFirst");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      assertEquals("alter materialized view@g or isFirstCONSTRAINT isFirst ", stringBuilder2.toString());
      
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT isFirst ", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.177604496545693
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3, "a)x9~r)#!");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer.getInteger("delete", integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("delete", string0);
      
      defaultDBColumn0.setSize(integer0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string1 = SQLUtil.typeAndName(dBColumnArray0[0]);
      assertEquals("column delete", string1);
      assertNotNull(string1);
      
      String string2 = SQLUtil.ownerDotComponent(dBColumnArray0[0]);
      assertEquals("null.delete", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("r)XZl'POO/B5|rGsM");
      LinkedList<DBColumn> linkedList1 = new LinkedList<DBColumn>();
      StringBuilder stringBuilder0 = new StringBuilder(1099);
      SQLUtil.addOptionalCondition("r)XZl'POO/B5|rGsM", stringBuilder0);
      SQLUtil.addOptionalCondition("q`Z ?r", stringBuilder0);
      SQLUtil.isProcedureCall("r)XZl'POO/B5|rGsM");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("I$g)4m\rY*}V::;KM'");
      assertNull(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3, "a)x9~r)#!");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.compareUnsigned(3, 2888);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.typeAndName(defaultDBColumn0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      stringArray0[2] = "delete";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("alter tablecallcall scope_identity()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablecallcall scope_identity()");
      DBDataType dBDataType0 = DBDataType.getInstance(42, "alter tablecallcall scope_identity()");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" WHERE ", defaultDBTable0, dBDataType0, integer0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " WHERE ");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("D+|^cBt5so%uB ", stringBuilder0);
      SQLUtil.addRequiredCondition(" WHERE ", stringBuilder1);
      System.setCurrentTimeMillis(42);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "update", false, " WHERE ,  WHERE ,  WHERE ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ' WHERE ,  WHERE ,  WHERE ' not found in table 'alter tablecallcall scope_identity()'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      StringBuilder stringBuilder0 = new StringBuilder(2523);
      StringReader stringReader0 = new StringReader("isFirst");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(68L);
      System.setCurrentTimeMillis(2523);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3, "a)x9~r)#!");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.compareUnsigned(3, 2888);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBColumn0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      stringArray0[2] = "delete";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      assertNull(defaultDBColumn0.getDoc());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter ");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Character character0 = Character.valueOf('a');
      SQLUtil.renderValue(character0);
      System.setCurrentTimeMillis(0L);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "PiKm\"(94bXB^u&8I,!";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("PiKm\"(94bXB^u&8I,!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: PiKm\"(94bXB^u&8I,!
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      StringBuilder stringBuilder0 = new StringBuilder(2523);
      stringBuilder0.codePoints();
      stringBuilder0.append("alter materialized view@g");
      stringBuilder0.appendCodePoint(2523);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view@g");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      VersionNumber versionNumber0 = VersionNumber.valueOf("SALT ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("call", "42X58", versionNumber0);
      defaultDatabase0.getCatalog("TB-'e");
      SQLUtil.typeAndName((DBObject) null);
      TableContainer tableContainer0 = new TableContainer("alter materialized view", defaultDatabase0);
      tableContainer0.getTable("call");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X1b({ps[ch1P5s", (DBTable) null, 2523, "=3obf1Sz/!mRVCY$");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("X1b({ps[ch1P5s =3OBF1SZ/!MRVCY$ NULL", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.38888971472958
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "::=pG%=$4I|cVOW_";
      stringArray0[2] = "::=pG%=$4I|cVOW_";
      stringArray0[3] = "::=pG%=$4I|cVOW_";
      stringArray0[4] = "::=pG%=$4I|cVOW_";
      String string0 = SQLUtil.join("::=pG%=$4I|cVOW_", "::=pG%=$4I|cVOW_", stringArray0, ", TYPE = ", (String) null, stringArray0);
      assertEquals("::=pG%=$4I|cVOW_ join , TYPE =  as null on ::=pG%=$4I|cVOW_. = null. and ::=pG%=$4I|cVOW_.::=pG%=$4I|cVOW_ = null.::=pG%=$4I|cVOW_ and ::=pG%=$4I|cVOW_.::=pG%=$4I|cVOW_ = null.::=pG%=$4I|cVOW_ and ::=pG%=$4I|cVOW_.::=pG%=$4I|cVOW_ = null.::=pG%=$4I|cVOW_ and ::=pG%=$4I|cVOW_.::=pG%=$4I|cVOW_ = null.::=pG%=$4I|cVOW_", string0);
      
      String string1 = SQLUtil.substituteMarkers("", ", TYPE = ", "");
      assertEquals("", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("[Ex%:`<");
      assertNull(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(44, "kwD<wM7DZ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("M0#Wy'$6PDLO", (DBTable) null, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("M0#Wy'$6PDLO KWD<WM7DZ(3) NULL", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[28];
      stringArray0[0] = "sP:l`/*D<R";
      stringArray0[1] = "sP:l`/*D<R";
      stringArray0[2] = "sP:l`/*D<R";
      stringArray0[4] = "sP:l`/*D<R";
      stringArray0[5] = "sP:l`/*D<R";
      stringArray0[6] = "sP:l`/*D<R";
      stringArray0[7] = "sP:l`/*D<R";
      stringArray0[8] = "sP:l`/*D<R";
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      StringBuilder stringBuilder0 = new StringBuilder(2523);
      stringBuilder0.append('`');
      stringBuilder0.append('M');
      stringBuilder0.append("sP:l`/*D<R");
      SQLUtil.addOptionalCondition("sP:l`/*D<R", stringBuilder0);
      assertEquals("`MsP:l`/*D<R or sP:l`/*D<R", stringBuilder0.toString());
      
      SQLUtil.isProcedureCall("_NOTC3_NULL");
      String string0 = SQLUtil.normalize("sP:l`/*D<R", false);
      assertEquals("sP : l ` /* D < R", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0751393240053735
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("r)XZl'POO/B5|rGsM");
      SQLUtil.removeComments("Vms");
      File file0 = MockFile.createTempFile("f`^;m26)qC93X2?", "r)XZl'POO/B5|rGsM");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('f');
      boolean boolean0 = SQLUtil.isProcedureCall("f`^;m26)qC93X2?");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("f`^;m26)qC93X2?", false);
      assertEquals(" f ` ^ ; m26) qC93X2 ?", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6546695645285008
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("sP:l`/*D<R");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      mockPrintWriter0.flush();
      boolean boolean0 = SQLUtil.isProcedureCall("O &:OZY2Tfr~wn");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("$7/KcAR'x!_ I", false);
      assertEquals("$ 7 / KcAR 'x!_ I'", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      String[] stringArray0 = new String[0];
      SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      ArrayList<DBPrimaryKeyConstraint> arrayList0 = new ArrayList<DBPrimaryKeyConstraint>();
      linkedList0.removeAll(arrayList0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "create unique index", linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      StringBuilder stringBuilder0 = new StringBuilder(2523);
      StringBuilder stringBuilder1 = stringBuilder0.append("alter materialized view@g");
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("isFirst", stringBuilder1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("isFirst", true, "alter materialized view@g", "isFirst");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      assertEquals("alter materialized view@g or isFirstCONSTRAINT isFirst ", stringBuilder2.toString());
      
      SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT isFirst CHECK isFirst", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      DBDataType dBDataType0 = DBDataType.getInstance(1271, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("F&FTxa,@3*'jmB[", defaultDBTable0, dBDataType0, integer0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      String string0 = SQLUtil.normalize("F&FTxa,@3*'jmB[", true);
      assertEquals("F & FTxa, @ 3 * 'jmB['", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "J*F8tP]KHJO+";
      stringArray0[2] = "";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("J*F8tP]KHJO+");
      assertNull(boolean0);
      
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.removeComments("drop indexf8tp]khjo+");
      String string0 = SQLUtil.normalize("xY(fz/", false);
      assertEquals("xY ( fz /", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBDataType dBDataType0 = DBDataType.getInstance(1271, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u00C2", defaultDBTable0, dBDataType0, integer0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u0001\u00C2");
      SQLUtil.addOptionalCondition("", stringBuilder0);
      SQLUtil.addRequiredCondition(" ONLY", stringBuilder0);
      assertEquals("\u0001\u00C2 or  and  ONLY", stringBuilder0.toString());
      
      System.setCurrentTimeMillis(1271);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(stringArray0[0], defaultDBTable0, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn1);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("\u0001\u00C2, \u0001\u00C2", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "J*F8tP]KHJO+";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("J*F8tP]KHJO+");
      StringBuilder stringBuilder0 = new StringBuilder(1);
      StringBuilder stringBuilder1 = stringBuilder0.append("deletey=v");
      stringBuilder1.insert(1, (double) 1);
      SQLUtil.addOptionalCondition("", stringBuilder1);
      assertEquals("d1.0eletey=v or ", stringBuilder1.toString());
      
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY (, J*F8tP]KHJO+, , , , , )", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9730014063936123
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      DBDataType dBDataType0 = DBDataType.getInstance(1271, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("F&FTxa,@3*'jmB[", defaultDBTable0, dBDataType0, integer0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      File file0 = MockFile.createTempFile("wR]{*", "F&FTxa,@3*'jmB[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Integer.getInteger("P%`L", 1271);
      mockPrintWriter0.append('f');
      mockPrintWriter0.flush();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, stringArray0[0], true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("O2B_i(7&y:Thg9@bNQC", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , )", string1);
      
      String string2 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("UPD/ATE]ULE");
      StringReader stringReader0 = new StringReader("UPD/ATE]ULE");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create materialized view- 0", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2769.930948250392;
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(86400000L);
      System.setCurrentTimeMillis(86400000L);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("2769.930948250392", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("updateij4q@{.c\"oq>m29", true);
      assertEquals("updateij4q @ {.c \"oq>m29\"", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3379410232242925
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      DBDataType.getInstance(1299, "");
      Integer integer0 = RawTransaction.ABORT;
      String string0 = SQLUtil.normalize("F&FTxa,@3*'jmB[", false);
      assertEquals("F & FTxa, @ 3 * 'jmB['", string0);
      
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ZN tJrj4x.Q|N7", true, defaultDBTable0, stringArray1, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"ZN tJrj4x.Q|N7\" FOREIGN KEY () REFERENCES null(, , , , , , )", string1);
  }
}
