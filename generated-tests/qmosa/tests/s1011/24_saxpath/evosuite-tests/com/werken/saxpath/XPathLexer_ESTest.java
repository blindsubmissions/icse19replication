/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:03:20 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token2 = xPathLexer0.identifier();
      assertEquals("com.werken.saxpath.Token", token2.getTokenText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.div();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.comma();
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer0.pipe();
      assertEquals("c", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(1);
      assertEquals('o', char0);
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      char char1 = xPathLexer0.LA(373);
      assertEquals('\uFFFF', char1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.XPathLexer", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.colon();
      assertEquals(")", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(" ", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.getXPath();
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      xPathLexer0.and();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.consume(3155);
      xPathLexer0.comma();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7253427410034803
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.setXPath(") (");
      Token token3 = xPathLexer0.star();
      assertEquals(")", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2749508733469148
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.comma();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.literal();
      Token token4 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token4);
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      xPathLexer0.LA(118);
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      char char0 = xPathLexer0.LA(1);
      assertEquals('\uFFFF', char0);
      
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token10);
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2663088484374883
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.comma();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      Token token8 = xPathLexer0.star();
      assertEquals("o", token8.getTokenText());
      
      char char0 = xPathLexer0.LA(2302);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.literal();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("c", token9.getTokenText());
      
      xPathLexer0.getXPath();
      Token token10 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9029324993362038
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.weren.saxpath.Token");
      xPathLexer0.setXPath("com.weren.saxpath.Token");
      xPathLexer0.and();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.setXPath("com.weren.saxpath.Token");
      Token token2 = xPathLexer0.colon();
      assertEquals("c", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.identifier();
      assertEquals("om.weren.saxpath.Token", token3.getTokenText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0779947968835402
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2+juG'");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      xPathLexer0.setXPath("g:?trL'XF;RcquI=<`");
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("g:", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("?t", token2.getTokenText());
      
      xPathLexer0.literal();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(18, int0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.div();
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer0.setXPath("g:?trL'XF;RcquI=<`");
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token10 = xPathLexer0.identifier();
      assertEquals("g", token10.getTokenText());
      
      Token token11 = xPathLexer0.identifier();
      assertEquals("", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.473429224811924
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.isIdentifierChar('u');
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.consume((-1));
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.getPreviousToken();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.165417589725619
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpIth]Token");
      xPathLexer0.setXPath("com.werken.saxpIth]Token");
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("com.werken.saxpIth]Token");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2399438073868714
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.literal();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.endPosition();
      xPathLexer0.hasMoreChars();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("-ob#K+Z(x,Y7-h ");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("-ob#K+Z(x,Y7-h ");
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      xPathLexer1.or();
      Token token6 = xPathLexer0.identifier();
      assertEquals("-ob", token6.getTokenText());
      
      Token token7 = xPathLexer1.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.833739963624838
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.or();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer1.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.endPosition();
      xPathLexer1.div();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath(") (");
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer2.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token7 = xPathLexer2.slashes();
      assertEquals("(", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0377914074895607
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o^'5K0<Cfq>) =' x(");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("o^", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("'", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("5", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("K", token3.getTokenText());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1826747867140786
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.div();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9872201024727157
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpIth]Token");
      xPathLexer0.setXPath("com.werken.saxpIth]Token");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("com.werken.saxpIth", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
      
      xPathLexer0.setXPath("com.werken.saxpIth]Token");
      char char0 = xPathLexer0.LA(529);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("com.werken.saxpIth]Token");
      Token token3 = xPathLexer0.dollar();
      assertEquals("c", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpIth]Token", token4.getTokenText());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3362888356828417
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z}j.WZ*>-O5");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierStartChar('f');
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }
}
