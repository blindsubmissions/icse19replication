/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:07:42 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 1;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1);
      int int1 = 2;
      optimization_DynamicIntArray0.addElement(2);
      optimization_DynamicIntArray0.addElement(1);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      int int2 = 1593;
      optimization_DynamicIntArray0.addElement(1593);
      optimization_DynamicIntArray0.removeElementAt(0);
      int int3 = 38;
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(3985);
      optimization_DynamicIntArray0.removeAllElements();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3985;
      doubleArray0[1] = (double) 3985;
      doubleArray0[2] = (double) 3985;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (double) 3985;
      doubleArray0[5] = (double) 3985;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix((double[][]) null, 0, 3000);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(23);
      String string0 = optimization_DynamicIntArray0.getRevision();
      assertEquals("8076", string0);
      assertEquals(0, optimization_DynamicIntArray0.size());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray1, false, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3000;
      doubleArray1[1] = (double) 3000;
      doubleArray1[2] = (double) 3000;
      doubleArray1[3] = (double) 3000;
      doubleArray1[4] = 1.0000000000000018;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 3000;
      doubleArray1[7] = (double) 3000;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0000000000000018;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1.0000000000000018;
      doubleArray3[1] = 1.0000000000000018;
      doubleArray3[2] = 1.0000000000000018;
      doubleArray0[2] = doubleArray3;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 3000, 1486);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray3, true, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(1525);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(3985);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.size();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 3985;
      doubleArray2[1] = (double) 3985;
      doubleArray2[2] = 1.0000000018626451;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 3985;
      doubleArray3[1] = 1.0000000018626451;
      doubleArray3[2] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) 3985;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = 1.0E-4;
      doubleArray4[4] = 1.0000000018626451;
      doubleArray4[5] = (double) 3985;
      doubleArray4[6] = (double) 1525;
      doubleArray4[7] = 1.0000000018626451;
      doubleArray4[8] = (double) 3985;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 3985;
      doubleArray5[1] = 1.0000000018626451;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = 1.0000000018626451;
      doubleArray5[4] = 726.9861061278768;
      doubleArray5[5] = 1.0E-4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (double) 3985;
      doubleArray6[1] = (double) 1525;
      doubleArray6[2] = (-2416.309144);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-2416.309144);
      doubleArray7[1] = 726.9861061278768;
      doubleArray0[6] = doubleArray7;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-687), (-687));
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = 3.0;
      doubleArray8[1] = 726.9861061278768;
      doubleArray8[2] = (double) 0;
      doubleArray8[3] = (double) 0;
      doubleArray8[4] = 1.0000000018626451;
      doubleArray8[5] = (double) (-687);
      doubleArray8[6] = 1.0E-4;
      doubleArray8[7] = (double) 1525;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray8, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(6819);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[] doubleArray1 = Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, false, booleanArray0);
      assertEquals(0, doubleArray1.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix((double[][]) null, (-15), 3000);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3000;
      doubleArray0[1] = (double) 3000;
      doubleArray0[2] = 1.000000000007276;
      doubleArray0[3] = (double) 3000;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (double) 3000;
      doubleArray1[2] = (double) 3000;
      doubleArray1[3] = (double) 3000;
      doubleArray1[4] = 1.0000000000000018;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 3000;
      doubleArray1[7] = (double) 3000;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0000000000000018;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1.0000000000000018;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 3000, 5);
      double[] doubleArray4 = Optimization.solveTriangle(matrix0, doubleArray2, true, (boolean[]) null);
      assertArrayEquals(new double[] {1.0000000000000018}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray4, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom((-256));
      double[][] doubleArray0 = new double[8][8];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-256), 1);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.000000238418579;
      doubleArray1[1] = 0.013331166947768591;
      doubleArray1[1] = (-682.51321970405);
      doubleArray1[3] = (double) (-256);
      doubleArray1[4] = (double) (-256);
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, (boolean[]) null);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NEGATIVE_INFINITY}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom((-256));
      double[][] doubleArray0 = new double[8][8];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-256), 2);
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-256);
      doubleArray1[1] = 1.000000000003638;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = 3263.174118;
      doubleArray1[4] = (double) 2;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix1, doubleArray1, false, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 0.0, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[6] = (double) 3000;
      doubleArray0[1] = (double) 3000;
      doubleArray0[2] = (double) 3000;
      doubleArray0[3] = (double) 3000;
      doubleArray0[4] = 1.0000000000000018;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(3000, 3000);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3000;
      doubleArray1[1] = (double) 3000;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {3000.0, 3000.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0}, doubleArray2, 0.01);
  }
}
