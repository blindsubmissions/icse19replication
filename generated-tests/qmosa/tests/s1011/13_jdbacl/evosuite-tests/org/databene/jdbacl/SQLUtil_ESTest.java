/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:39:25 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.Writer;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.raw.data.BaseDataFileFactoryJ4;
import org.apache.derby.impl.store.raw.xact.ConcurrentXactFactory;
import org.apache.derby.impl.store.raw.xact.GlobalXactId;
import org.apache.derby.impl.store.raw.xact.TransactionTable;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.value.ValueLobDb;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(":", (CompositeDBObject<? extends DBObject>) null);
      String string0 = "S.dx&2swe";
      tableContainer0.getTable("S.dx&2swe");
      SQLUtil.typeAndName((DBObject) null);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("L", false, "", ":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      TableContainer tableContainer0 = new TableContainer((String) null);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) tableContainer0);
      genericDescriptorList0.add((Object) null);
      tableContainer0.getTables(true, (List<DBTable>) genericDescriptorList0);
      SQLUtil.ownerDotComponent(tableContainer0);
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CHECK ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("null", stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"x~>|5%}?dJ`\"o-l4C", defaultDBTable0, 207, "\"x~>|5%}?dJ`\"o-l4C");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'w';
      charArray0[2] = ')';
      charArray0[3] = '_';
      charArray0[4] = '}';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(8, (long) 207);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "JVM_ID";
      stringArray0[2] = "unicodeStream";
      stringArray0[3] = "unicodeStream";
      stringArray0[4] = "unicodeStream";
      stringArray0[5] = "unicodeStream";
      SQLUtil.renderColumnListWithTableName("unicodeStream", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getSchemaDescriptor("9s6$\fLXQV", (TransactionController) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder(2623);
      char[] charArray0 = new char[1];
      stringBuilder0.codePoints();
      charArray0[0] = '@';
      stringBuilder0.insert(0, charArray0);
      SQLUtil.addRequiredCondition("", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("//", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "mx0Y@!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("//", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.substituteMarkers("mx0Y@!", "", defaultDBColumn0);
      assertEquals("// : MX0Y@!m// : MX0Y@!x// : MX0Y@!0// : MX0Y@!Y// : MX0Y@!@// : MX0Y@!!// : MX0Y@!", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("PRIMARY KEY (, , , , , , , )", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      DBColumn dBColumn1 = defaultDBTable0.getColumn("");
      dBColumnArray0[4] = dBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , , PRIMARY KEY (, , , , , , , ), ", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("DATE", compositeDBObject0);
      tableContainer0.getTable("DATE");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "DATE";
      stringArray0[2] = "DATE";
      stringArray0[3] = "!JE4G10";
      stringArray0[4] = "DATE";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Character character0 = Character.valueOf('6');
      Character.isSurrogate('u');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'6'", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-61);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(624, byteArray0, (byte)11);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Not implemented: one-phase commit must be issued using the same connection that was used to start it";
      stringArray0[1] = "A?";
      stringArray0[2] = "A?";
      stringArray0[3] = "A?";
      stringArray0[4] = "";
      stringArray0[5] = "A?";
      stringArray0[6] = "A?";
      SQLUtil.leftJoin("A?", stringArray0, "", "", stringArray0);
      SQLUtil.parseColumnTypeAndSize("A?");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "left join  as  on A?.Not implemented: one-phase commit must be issued using the same connection that was used to start it = .Not implemented: one-phase commit must be issued using the same connection that was used to start it and A?.A? = .A? and A?.A? = .A? and A?.A? = .A? and A?. = . and A?.A? = .A? and A?.A? = .A?";
      stringArray1[1] = "";
      stringArray1[2] = "A?";
      stringArray1[3] = "J|KS~we$UUE&6yWOCZ?";
      stringArray1[4] = "";
      stringArray1[5] = "left join  as  on A?.Not implemented: one-phase commit must be issued using the same connection that was used to start it = .Not implemented: one-phase commit must be issued using the same connection that was used to start it and A?.A? = .A? and A?.A? = .A? and A?.A? = .A? and A?. = . and A?.A? = .A? and A?.A? = .A?";
      SQLUtil.renderColumnNames(stringArray1);
      SQLUtil.isProcedureCall("9QRG[)9");
      SQLUtil.mutatesStructure("");
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("(left join  as  on A?.Not implemented: one-phase commit must be issued using the same connection that was used to start it = .Not implemented: one-phase commit must be issued using the same connection that was used to start it and A?.A? = .A? and A?.A? = .A? and A?.A? = .A? and A?. = . and A?.A? = .A? and A?.A? = .A?, , A?, J|KS~we$UUE&6yWOCZ?, , left join  as  on A?.Not implemented: one-phase commit must be issued using the same connection that was used to start it = .Not implemented: one-phase commit must be issued using the same connection that was used to start it and A?.A? = .A? and A?.A? = .A? and A?.A? = .A? and A?. = . and A?.A? = .A? and A?.A? = .A?)");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("A?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2623);
      char[] charArray0 = new char[1];
      stringBuilder0.codePoints();
      charArray0[0] = '@';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 0L);
      stringBuilder1.append((double) 8);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("alter session", dBCatalog0);
      dBSchema0.getTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2623, "alter session");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.38888971472958
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure(":d{X=$0");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "2G.,<6Dd4G`-ag";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "2G.,<6Dd4G`-ag";
      stringArray0[5] = ":d{X=$0";
      stringArray0[6] = "2G.,<6Dd4G`-ag";
      stringArray0[7] = ":d{X=$0";
      stringArray0[8] = "";
      defaultDBTable0.equals("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("2G.,<6Dd4G`-ag", false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT 2G.,<6Dd4G`-ag FOREIGN KEY (, 2G.,<6Dd4G`-ag, , , 2G.,<6Dd4G`-ag, :d{X=$0, 2G.,<6Dd4G`-ag, :d{X=$0, ) REFERENCES (, 2G.,<6Dd4G`-ag, , , 2G.,<6Dd4G`-ag, :d{X=$0, 2G.,<6Dd4G`-ag, :d{X=$0, )", string0);
      
      defaultDBTable1.setName("");
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      String string1 = SQLUtil.typeAndName(defaultDBTable1);
      assertNotNull(string1);
      assertEquals("table ", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean2 = SQLUtil.isQuery("(LC3 '1W.L");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R\"_g/@*$3^`TW5vh+");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R\"_g/@*$3^`TW5vh+";
      stringArray0[1] = "R\"_g/@*$3^`TW5vh+";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[2] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[3] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[4] = "R\"_g/@*$3^`TW5vh+";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("R\"_g/@*$3^`TW5vh+", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("R\"_g/@*$3^`TW5vh+ = 'R\"_g/@*$3^`TW5vh+' AND R\"_g/@*$3^`TW5vh+ = 'R\"_g/@*$3^`TW5vh+'", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2623);
      char[] charArray0 = new char[1];
      stringBuilder0.codePoints();
      charArray0[0] = '@';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      stringBuilder1.append((double) 8);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("alter session", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOB", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(2623, "alter session");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setFractionDigits(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("@8.0ALTER SESSION(2,2)", stringBuilder1.toString());
      assertEquals("@8.0ALTER SESSION(2,2)", stringBuilder0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-1163L));
      String string0 = "SYSCS_COMPRESS_TABLE";
      String string1 = "(V_YQ";
      DBCatalog dBCatalog0 = new DBCatalog("CONSTRAINT ");
      DBSchema dBSchema0 = new DBSchema("(V_YQ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(V_YQ", dBSchema0);
      int int0 = (-3505);
      String string2 = "J6)";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SYSCS_COMPRESS_TABLE", defaultDBTable0, (-3505), "J6)");
      defaultDBColumn0.isEquivalent(dBSchema0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      SQLUtil.removeComments("CONSTRAINT ");
      StringBuilder stringBuilder0 = new StringBuilder("9+{C*$$lf?r^2[hz");
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-6211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) tableContainer0);
      genericDescriptorList0.add((Object) null);
      tableContainer0.getTables(true, (List<DBTable>) genericDescriptorList0);
      SQLUtil.ownerDotComponent(tableContainer0);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container null", string0);
      assertNotNull(string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index7lygtp+s+0cx:gv");
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string1 = SQLUtil.innerJoin((String) null, stringArray0, "O^^|\"3", (String) null, stringArray0);
      assertEquals("O^^|\"3 as null on null.null = null.null", string1);
      
      String string2 = SQLUtil.normalize("call7lygtp+s+0cx:gv", true);
      assertEquals("call7lygtp + s + 0cx : gv", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9512595041439562
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" or ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop indexsr~p";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XCL31.S", false, stringArray0);
      defaultDBTable1.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "n-DyfVB/d(?0";
      stringArray1[1] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("n-DyfVB/d(?0", true, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      defaultDBTable1.setName("'");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(tableContainer0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT n-DyfVB/d(?0 CONSTRAINT n-DyfVB/d(?0 ", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2623);
      char[] charArray0 = new char[1];
      stringBuilder0.codePoints();
      charArray0[0] = '@';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      StringBuilder stringBuilder2 = new StringBuilder();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOB", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(2623, "BLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setFractionDigits(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("@BLOB", stringBuilder1.toString());
      assertEquals("@BLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3265432531941137
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.normalize("7LYgtp+S+0cx:Gv", false);
      SQLUtil.mutatesStructure("7LYgtp+S+0cx:Gv");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7LYgtp+S+0cx:Gv";
      SQLUtil.innerJoin((String) null, stringArray0, (String) null, "org.fir", stringArray0);
      SQLUtil.mutatesDataOrStructure("7LYgtp+S+0cx:Gv");
      DBDataType dBDataType0 = DBDataType.getInstance((-2145), "7LYgtp+S+0cx:Gv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      basicDatabase0.getId();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintTableDescriptor((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2623);
      char[] charArray0 = new char[1];
      stringBuilder0.codePoints();
      stringBuilder0.insert(0, 0L);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter index";
      stringArray0[1] = null;
      stringArray0[2] = "alter index";
      stringArray0[3] = null;
      String string0 = SQLUtil.innerJoin("alter index", stringArray0, "alter index", (String) null, stringArray0);
      assertEquals("alter index as null on alter index.alter index = null.alter index and alter index.null = null.null and alter index.alter index = null.alter index and alter index.null = null.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter index as null on alter index.alter index = null.alter index and alter index.null = null.null and alter index.alter index = null.alter index and alter index.null = null.null");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("LOCAL_TYPE_NAME", false);
      assertEquals("LOCAL_TYPE_NAME", string0);
      
      boolean boolean0 = SQLUtil.isDDL("LOCAL_TYPE_NAME");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename7lygtp+s+0cx:gv");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "LOCAL_TYPE_NAME";
      stringArray0[1] = "rename7lygtp+s+0cx:gv";
      stringArray0[2] = "rename7lygtp+s+0cx:gv";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("LOCAL_TYPE_NAME", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT LOCAL_TYPE_NAME ", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8201022980949626
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("NCLOB");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      String string0 = SQLUtil.normalize("i6vt.DE1&Se/'Mtwk'L", false);
      assertEquals("i6vt.DE1 & Se / 'Mtwk' L", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2623);
      char[] charArray0 = new char[1];
      stringBuilder0.codePoints();
      charArray0[0] = '@';
      stringBuilder0.insert(0, charArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J7 ~", (DBTable) null, (-1607), "J7 ~");
      defaultDBColumn0.isEquivalent((DBObject) null);
      SQLUtil.normalize("4kcGdCiy^MTx(vK", false);
      SQLUtil.removeComments("~1e5y.qNfb=");
      StringBuilder stringBuilder1 = new StringBuilder("9+{C*$$lf?r^2[hz");
      // Undeclared exception!
      try { 
        stringBuilder1.appendCodePoint((-1607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1546193098639694
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("7LYgtp+S+0cx:Gv", false);
      assertEquals("7LYgtp + S + 0cx : Gv", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("7LYgtp+S+0cx:Gv");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SPSNameDescriptorCache";
      stringArray0[1] = "7LYgtp + S + 0cx : Gv";
      stringArray0[2] = "SPSNameDescriptorCache";
      stringArray0[3] = "-FDu#7,CQGDw222";
      stringArray0[4] = "SPSNameDescriptorCache";
      stringArray0[5] = null;
      stringArray0[6] = "-FDu#7,CQGDw222";
      stringArray0[7] = null;
      String string1 = SQLUtil.innerJoin("-FDu#7,CQGDw222", stringArray0, "7LYgtp + S + 0cx : Gv", "7LYgtp + S + 0cx : Gv", stringArray0);
      assertEquals("7LYgtp + S + 0cx : Gv as 7LYgtp + S + 0cx : Gv on -FDu#7,CQGDw222.SPSNameDescriptorCache = 7LYgtp + S + 0cx : Gv.SPSNameDescriptorCache and -FDu#7,CQGDw222.7LYgtp + S + 0cx : Gv = 7LYgtp + S + 0cx : Gv.7LYgtp + S + 0cx : Gv and -FDu#7,CQGDw222.SPSNameDescriptorCache = 7LYgtp + S + 0cx : Gv.SPSNameDescriptorCache and -FDu#7,CQGDw222.-FDu#7,CQGDw222 = 7LYgtp + S + 0cx : Gv.-FDu#7,CQGDw222 and -FDu#7,CQGDw222.SPSNameDescriptorCache = 7LYgtp + S + 0cx : Gv.SPSNameDescriptorCache and -FDu#7,CQGDw222.null = 7LYgtp + S + 0cx : Gv.null and -FDu#7,CQGDw222.-FDu#7,CQGDw222 = 7LYgtp + S + 0cx : Gv.-FDu#7,CQGDw222 and -FDu#7,CQGDw222.null = 7LYgtp + S + 0cx : Gv.null", string1);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("updateorg.firebirdsql.jca.fbresourcetransactionexception");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      boolean boolean0 = SQLUtil.isProcedureCall(">:HtJ}v.[+ BvB<q");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object object0 = new Object();
      defaultDBTable0.equals(object0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = null;
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, stringArray0[1], "qA5f<", stringArray0);
      assertEquals("null as qA5f< on null.null = qA5f<.null and null.null = qA5f<.null and null.null = qA5f<.null and null. = qA5f<. and null. = qA5f<. and null.null = qA5f<.null", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter session");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) tableContainer0);
      genericDescriptorList0.add((Object) null);
      tableContainer0.getTables(true, (List<DBTable>) genericDescriptorList0);
      TableContainer tableContainer1 = new TableContainer("J7 ~", tableContainer0);
      tableContainer1.getTable((String) null);
      int int0 = (-294237198);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J7 ~", (DBTable) null, (-294237198), "J7 ~");
      defaultDBColumn0.isEquivalent(tableContainer1);
      SQLUtil.normalize("SELECT COMPRESSED, DATA FROM INFORMATION_SCHEMA.LOB_DATA WHERE BLOCK = ?", true);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("G$78|2R 87ff", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" or ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop indexsr~p";
      String string0 = SQLUtil.join((String) null, "%h.g 9v!1g3Lf", stringArray0, "XCL31.S", (String) null, stringArray0);
      String string1 = SQLUtil.removeComments("(_c<Yn+oH");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6182801630239578
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) tableContainer0);
      genericDescriptorList0.add((Object) null);
      tableContainer0.getTables(true, (List<DBTable>) genericDescriptorList0);
      TableContainer tableContainer1 = new TableContainer("J7 ~", tableContainer0);
      tableContainer1.getTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J7 ~", (DBTable) null, (-294237198), "J7 ~");
      SQLUtil.normalize("8I[9P+K!;.Y\")S", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("8I[9P+K!;.Y\")S");
      assertNull(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2623);
      char[] charArray0 = new char[1];
      stringBuilder0.codePoints();
      charArray0[0] = '@';
      SQLUtil.normalize("org.apache.derby.impl.store.replication.ReplicationLogger", false);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.store.replication.ReplicationLogger", (DBTable) null, (-1575), "(B{Tbn/oU~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (B{Tbn/oU~
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5109809482746406
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("");
      assertFalse(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals((Object) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("update");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("update", false, defaultDBTable2, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable2.setName("B4#7dW[k0Q-");
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , ) REFERENCES null(, , )", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.557793860107733
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("NCLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NCLOB", false, (String[]) null);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NCLOB", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      defaultDBTable0.setName("NCLOB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder(266);
      SQLUtil.addOptionalCondition("table NCLOB", stringBuilder1);
      SQLUtil.isQuery("");
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("table NCLOB", stringBuilder0);
      assertEquals("CONSTRAINT NCLOB CONSTRAINT NCLOB  or table NCLOB", stringBuilder0.toString());
      assertEquals("CONSTRAINT NCLOB CONSTRAINT NCLOB  or table NCLOB", stringBuilder2.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4471513082779115
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      boolean boolean0 = SQLUtil.isProcedureCall("create table");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals("create table");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("GpGo1)=t7)a5*'zI}+");
      assertNull(boolean1);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null as null on null.null = null.null and null.null = null.null", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(tableContainer0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("GpGo1)=t7)a5*'zI}+", (DBSchema) null);
      defaultDBTable1.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      defaultDBTable1.addUniqueConstraint(dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-j{Wd++w1Fde1+", false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("GpGo1)=t7)a5*'zI}+");
      defaultDBTable2.setName("Ht5)t(E`0YY}f|x:'9");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT -j{Wd++w1Fde1+ ", stringBuilder0.toString());
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6707441709201767
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("NCLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NCLOB", false, (String[]) null);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NCLOB", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      defaultDBTable0.setName("NCLOB");
      SQLUtil.normalize("=7*ji%\"", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-1498);
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-1498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.223413107799927
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("NCLOB");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("REMARKS", defaultDBTable1, (-4653), "RO4MeZo|q&4!&-<F#66");
      defaultDBColumn0.isEquivalent(defaultDBTable1);
      String string0 = SQLUtil.normalize("REMARKS", false);
      assertEquals("REMARKS", string0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("encryptionProvider", defaultDBTable1, (-32774745), "select into");
      String string1 = SQLUtil.normalize("RO4MeZo|q&4!&-<F#66", false);
      assertEquals("RO4MeZo | q & 4 ! & - < F # 66", string1);
      
      defaultDBColumn0.setDefaultValue("NCLOB");
      Boolean boolean1 = SQLUtil.mutatesStructure("drop tablenclob");
      assertTrue(boolean1);
      
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("REMARKS RO4MEZO|Q&4!&-<F#66 DEFAULT NCLOB NULL", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.normalize("L^bIw$B%m/)P", true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = FileUtil.canonicalFile("L ^ bIw $ B % m /) P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintWriter0.append((CharSequence) "L^bIw$B%m/)P");
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf((Locale) null, "L ^ bIw $ B % m /) P", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'm'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("NCLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("VGv]SP", "SELECT * FROM ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NCLOB");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "TRUE");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("TRUE", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("( /* key:");
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.346925142706134
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Character.isSurrogate('6');
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jHh6)qh 2|TkpO";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Illegal column type format: ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Illegal column type format: ", true, dBUniqueConstraint0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      stringArray0[1] = "jHh6)qh 2|TkpO";
      stringArray0[2] = "*";
      stringArray0[3] = "create tablenclob";
      defaultDBTable0.getColumns();
      stringArray0[4] = "create tablenclob";
      stringArray0[5] = "create tablenclob";
      stringArray0[6] = "_7$vi6|";
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "create tablenclob", false, stringArray0);
      dBUniqueConstraint1.equals("create tablenclob");
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint1);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jHh6)qh 2|TkpO", defaultDBTable0, 154, "_7$vi6|");
      String string0 = SQLUtil.normalize("executegpgo1)=t7)a5*'zi}+", true);
      assertEquals("executegpgo1) = t7) a  5 * 'zi}+'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("executegpgo1) = t7) a  5 * 'zi}+'");
      assertFalse(boolean0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec0);
      assertEquals("UNIQUE (jHh6)qh 2|TkpO, jHh6)qh 2|TkpO, *, create tablenclob, create tablenclob, create tablenclob, _7$vi6|)", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rC-[5/O<aUDS(5");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) nameSpec0;
      objectArray0[2] = (Object) "rC-[5/O<aUDS(5";
      PrintWriter printWriter0 = mockPrintWriter0.format("rC-[5/O<aUDS(5", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String[] stringArray0 = new String[0];
      defaultDBTable0.countProviders();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=>X", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("update9");
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("setNClob(String, Reader)", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec1);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      StringBuilder stringBuilder1 = null;
      try {
        stringBuilder1 = new StringBuilder((-669));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setNClob(String, Reader)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RO4MeZo|q&4!&-<F#66", defaultDBTable0, (-4653), "RO4MeZo|q&4!&-<F#66");
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      defaultDBTable0.countProviders();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setDoc("RO4MeZo|q&4!&-<F#66");
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DATEADD", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("execn2os");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuffer0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, stringBuilder2);
      System.setCurrentTimeMillis((-950L));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8043716191528456
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Character.isSurrogate('6');
      String string0 = SQLUtil.normalize("select", false);
      assertEquals("select", string0);
      
      Random.setNextRandom((-1293));
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.mutatesDataOrStructure("U[ZmP=1D|JRYbHX");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "U[ZmP=1D|JRYbHX";
      stringArray0[3] = null;
      stringArray0[4] = "\"s3";
      stringArray0[5] = "NCLOB";
      stringArray0[6] = "- 0";
      stringArray0[7] = "execute";
      stringArray0[8] = "- 0";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NCLOB", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6459168300174678
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) nameSpec0;
      objectArray0[2] = (Object) "rC-[5/O<aUDS(5";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=>X");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[0];
      defaultDBTable0.countProviders();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=>X", false, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT =>X PRIMARY KEY ()", string0);
      
      dBPrimaryKeyConstraint0.setDoc("not free: ");
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      Random.setNextRandom(3027);
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }
}
