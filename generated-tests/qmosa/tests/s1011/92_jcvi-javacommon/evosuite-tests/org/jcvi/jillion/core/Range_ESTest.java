/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:39:37 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 0L;
      Range.ofLength(0L);
      String string0 = ":W8Kh<_aH<d;IG";
      // Undeclared exception!
      try { 
        Range.parseRange(":W8Kh<_aH<d;IG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse :W8Kh<_aH<d;IG into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-357L), 0L);
      Range range2 = Range.of(range_CoordinateSystem0, (-611L), 0L);
      long long1 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem2);
      Range.of(0L, (-1L));
      range2.startsBefore(range0);
      range2.isSubRangeOf(range1);
      range0.getEnd();
      Range.ofLength(0L);
      range_CoordinateSystem0.getAbbreviatedName();
      range_CoordinateSystem0.getAbbreviatedName();
      Range range3 = Range.of(0L, 0L);
      range3.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4566L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5581992398855653
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L, 0L);
      boolean boolean0 = range1.endsBefore(range0);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.intersects(range1);
      assertFalse(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      range0.equals("m/Cqe!6");
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range2.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 0 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem2);
      range0.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range2.getBegin(range_CoordinateSystem3);
      assertTrue(range2.isEmpty());
      assertTrue(long1 == long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range3 = range_Builder0.build();
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
      
      range1.split(2L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("m/Cqe!6", range_CoordinateSystem4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse m/Cqe!6 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9319232930107053
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 2629L;
      Range range0 = Range.of((-2140L), 2629L);
      Range range1 = Range.of((-2140L));
      range1.isEmpty();
      range0.complement(range1);
      range0.complement(range1);
      Range range2 = Range.of((-2140L));
      range2.getBegin();
      String string0 = "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache";
      Range.of((-223L), 3993L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      long long1 = (-4104L);
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.of((-2140L), (-4104L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.086747917552475
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      range1.endsBefore(range0);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.contractBegin((-3739L));
      range_Builder0.contractBegin(0L);
      range_Builder0.contractEnd((-2493L));
      range_Builder0.shift(204L);
      range_Builder0.expandEnd(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.of((-1L), (-1L));
      Range range1 = null;
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-416L));
      range0.getLength();
      range0.asRange();
      range_Builder0.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("'TT%nweY;", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 'TT%nweY; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9470047701612976
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(620L, 620L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9034007581809185
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      long long0 = 4294967295L;
      Range.ofLength(4294967295L);
      long long1 = 0L;
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-4099L);
      range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      Range.of((-4099L), (-4099L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range0.equals((Object) null);
      range_Builder1.expandEnd((-4099L));
      String string0 = "fsbC.0I!I";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("fsbC.0I!I", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse fsbC.0I!I into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.432874510299261
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L, 0L);
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      range0.equals("m/Cqe!6");
      Range range2 = range1.intersection(range0);
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.865703420347897
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 0L;
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.equals(range_CoordinateSystem0);
      range_Builder1.expandEnd(54L);
      // Undeclared exception!
      try { 
        Range.parseRange("fsbC.0I!I", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse fsbC.0I!I into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1112663269192624
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.8066624897703174
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      range0.getLength();
      range0.complement(range0);
      range1.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder((-1501L), 1L);
      range_Builder0.build();
      Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("or]n8]", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse or]n8] into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.323888220106884
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = 1295L;
      Range.ofLength(1295L);
      Range.of(1295L);
      Range range1 = Range.ofLength(1L);
      range0.getLength();
      range0.startsBefore(range1);
      range1.split(1L);
      range1.equals("");
      Range.Builder range_Builder0 = new Range.Builder(1L);
      long long1 = 1390L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1390L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.412607821464537
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of((-2095L), (-2002L));
      Range range1 = Range.of((-1417L));
      range1.equals(range0);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2095 .. -2001 ]/SB", string0);
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7841896339182655
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      range0.getLength();
      range0.complement(range0);
      range1.equals(range1);
      Range range2 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.equals("m/Cqe!6");
      Range range3 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem3);
      range3.getBegin(range_CoordinateSystem3);
      range2.startsBefore(range0);
      range2.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.Builder range_Builder1 = new Range.Builder((-1L), 1501L);
      range_Builder1.build();
      range3.split(4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange("QIk`u(gjb!SMMjQRkt", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse QIk`u(gjb!SMMjQRkt into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7804663689386815
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.425818013353478
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775777L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775777L);
      range1.endsBefore(range0);
      range1.getLength();
      range0.equals("a}zDi");
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775777L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -63 would make range [9223372036854775777 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.310822360005315
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-4099L);
      Range range0 = range_Builder0.build();
      Range.of((-4099L), (-4099L));
      range_Builder0.copy();
      range_Builder0.copy();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("fsbC.0I!I", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse fsbC.0I!I into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-2095L), (-2002L));
      range0.equals(range0);
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.isEmpty();
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3310890488400386
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 802L;
      Range range0 = Range.of(range_CoordinateSystem0, 802L, 802L);
      Range range1 = Range.of(802L, 802L);
      List<Range> list0 = range0.complement(range1);
      range1.getBegin();
      range1.complementFrom(list0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0921934819475574
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775777L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.733421670525777
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-2140L), 2629L);
      Range range1 = Range.of((-2140L));
      range1.isEmpty();
      range0.complement(range1);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range range2 = Range.of((-2140L));
      range2.getBegin();
      String string0 = range2.toString();
      assertEquals("[ -2140 .. -2140 ]/0B", string0);
      
      Range range3 = Range.of((-223L), 3993L);
      range2.endsBefore(range0);
      long long0 = range0.getLength();
      assertEquals(4770L, long0);
      
      range0.equals("[ -2140 .. -2140 ]/0B");
      range3.startsBefore(range2);
      assertSame(range2, range1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string1 = range3.toString(range_CoordinateSystem0);
      assertEquals("[ -223 .. 3994 ]/SB", string1);
      
      List<Range> list1 = range3.split(2629L);
      assertFalse(list1.contains(range3));
      assertEquals(2, list1.size());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6229754430304775
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 802L, 802L);
      Range range1 = Range.of((-2147483648L), 0L);
      range0.getLength();
      range0.complement(range1);
      range1.equals(range_CoordinateSystem0);
      Range range2 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = new Long(1L);
      Object object0 = new Object();
      range0.equals(object0);
      range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem1);
      range1.getBegin(range_CoordinateSystem2);
      range1.startsBefore(range2);
      range2.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2405L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4746130192958278
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.equals(range_Builder0);
      Range range1 = Range.of(range_CoordinateSystem1, 871L, 4294967295L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      range0.getBegin(range_CoordinateSystem0);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem3);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder((-2147483648L), 871L);
      range_Builder1.build();
      Range range3 = Range.parseRange("[ 1 .. 0 ]/RB");
      // Undeclared exception!
      try { 
        range3.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.551690516986295
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      range0.getLength();
      List<Range> list0 = range0.complement(range0);
      range1.equals(range1);
      Range range2 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range2.getBegin(range_CoordinateSystem1);
      Range range3 = Range.of(2147483647L);
      range0.equals(list0);
      range3.startsBefore(range0);
      range0.toString(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3353161721171696
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775777L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775777L);
      range1.endsBefore(range0);
      Range range2 = Range.of(9223372036854775777L, 9223372036854775777L);
      Range range3 = Range.of(65535L);
      range1.equals(range_CoordinateSystem0);
      range3.intersects(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range2));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.722040203446576
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 802L, 802L);
      Range range1 = Range.of(802L, 802L);
      List<Range> list0 = range0.complement(range1);
      range1.getBegin();
      range1.complementFrom(list0);
      range0.intersects(range1);
      Range range2 = Range.of(802L);
      range2.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(802L);
      range2.equals(long0);
      Range range3 = Range.of((-2530L));
      Range range4 = range1.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      range3.getBegin(range_CoordinateSystem1);
      range2.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.getBegin(range_CoordinateSystem2);
      List<Range> list1 = range3.complement(range0);
      range4.complementFrom(list1);
      Range range5 = range0.intersection(range4);
      Range.CoordinateSystem.values();
      range0.complementFrom(list1);
      Range range6 = Range.of(0L, 0L);
      range6.isEmpty();
      range3.isSubRangeOf(range5);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5734504974788237
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of((-2095L), (-2002L));
      Range range1 = Range.of((-2095L));
      Object object0 = new Object();
      range0.equals((Object) null);
      range0.spliterator();
      Range range2 = Range.ofLength(1996L);
      range2.spliterator();
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
