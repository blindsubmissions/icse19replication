/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 12:50:04 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      stringReader0.ready();
      streamTokenizer0.parseNumbers();
      stringReader0.skip((-2746L));
      JSJshopVars.greaterT = (-1);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.percent = (-1);
      jSTerm0.print();
      jSTerm0.removeAll(jSTerm1);
      streamTokenizer0.ttype = 2;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.lessT = 2;
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.isFunction();
      jSTerm0.isFunction();
      jSTerm0.isEval();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 2;
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#|cR5e<cUg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer0.quoteChar((-479));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NOP?T");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.equalT = 78;
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.exclamation = (-2344);
      jSTerm0.equals(jSTerm1);
      jSTerm0.makeVariable();
      stringReader0.skip((-2344));
      jSTerm1.call();
      jSTerm1.makeEval(true);
      jSTerm0.makeEval(false);
      jSTerm0.toStr();
      jSTerm1.cloneT();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm0.removeAllElements();
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("?E;1zt.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.call();
      JSJshopVars.rightBrac = (-1);
      streamTokenizer0.wordChars((-3763), (-3763));
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NOP?T");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.equalT = 78;
      JSJshopVars.exclamation = (-2344);
      jSTerm0.equals(jSTerm0);
      jSTerm0.makeVariable();
      stringReader0.skip((-2344));
      jSTerm0.call();
      jSTerm0.makeEval(true);
      jSTerm0.makeEval(false);
      jSTerm0.toStr();
      jSTerm0.cloneT();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8018924006588724
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm0.removeAllElements();
      objectArray0[0] = (Object) jSTerm0;
      StringReader stringReader0 = new StringReader("?E;1zt.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add(objectArray0[0]);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate1.or(predicate2);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      predicate2.test((Object) null);
      predicate3.negate();
      jSTerm1.removeIf(predicate2);
      jSTerm2.isEval();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(1323, 1323);
      jSTerm0.makeVariable();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9562971137418599
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      stringReader0.ready();
      streamTokenizer0.parseNumbers();
      stringReader0.skip((-2746L));
      JSJshopVars.greaterT = (-1);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.ensureCapacity(32);
      jSTerm0.print();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSSubstitution0.standarizerSubs();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ldst");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      stringReader0.ready();
      streamTokenizer0.parseNumbers();
      stringReader0.skip((-2746L));
      JSJshopVars.greaterT = (-1);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.print();
      jSTerm0.removeAll(jSTerm1);
      streamTokenizer0.ttype = 2;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.lessT = 2;
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isVariable();
      jSTerm0.isFunction();
      jSTerm0.isEval();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.markSupported();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E)a:LIX3Kww3");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer0);
      jSTerm0.parallelStream();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5577938601077324
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.ensureCapacity((-767));
      JSJshopVars.leftBrac = (-1);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm0.ensureCapacity((-1));
      jSTerm2.print();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution2);
      jSSubstitution1.standarizerSubs();
      jSTerm4.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.cloneT();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm6.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4036404106149494
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm0.removeAllElements();
      jSTerm0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("?E;1zt.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.rightBrac = (-1);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm2.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSSubstitution0.standarizerSubs();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 't';
      charArray0[2] = '3';
      charArray0[3] = 'Q';
      charArray0[4] = 'g';
      charArray0[5] = 'V';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.329871704175466
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.ensureCapacity(61);
      jSTerm0.makeFunction();
      JSTerm jSTerm3 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm0, jSSubstitution0);
      jSTerm4.matches(jSTerm3, jSSubstitution1);
      jSTerm4.ensureCapacity(61);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm2.print();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2240978714293633
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 't';
      charArray0[2] = '3';
      charArray0[3] = 'Q';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm3.standardizerTerm();
      jSTerm4.clone();
      jSTerm3.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.054243296657599
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.ensureCapacity((-767));
      JSJshopVars.leftBrac = (-1);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm0.ensureCapacity((-1));
      jSTerm2.print();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm4.matches(jSTerm1);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm1.makeVariable();
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.ensureCapacity((-1655));
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("%H%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("[%H]", jSTerm0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.524167661673461
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.ensureCapacity((-767));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm3 = new JSTerm();
      streamTokenizer0.sval = "list";
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm0.ensureCapacity((-1));
      jSTerm2.print();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm4.toStr();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.equals(jSTerm2);
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = new JSTerm();
      jSTerm0.equals(jSTerm3);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm5.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.476631175202095
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm3 = new JSTerm();
      streamTokenizer0.sval = "list";
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm0.ensureCapacity((-1));
      jSTerm2.print();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.toStr();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.equals(jSTerm0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm5.equals(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.234335807805511
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.ensureCapacity(64);
      jSTerm0.makeFunction();
      jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSEvaluate.numericValue(jSTerm1);
      streamTokenizer0.parseNumbers();
      stringReader0.skip(0L);
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.cloneT();
      jSTerm2.matches(jSTerm3);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      char[] charArray0 = new char[6];
      charArray0[1] = 't';
      charArray0[2] = '3';
      charArray0[3] = 'Q';
      charArray0[4] = 'g';
      charArray0[5] = 'V';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.remove((Object) null);
      jSTerm0.equals((JSPredicateForm) null);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.matches(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.264772322085991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.ensureCapacity((-767));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm1.sort((Comparator) null);
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      jSTerm3.clone();
      jSTerm4.standardizerTerm();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm5.call();
      jSTerm0.call();
      jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis(395L);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm0.removeAllElements();
      StringReader stringReader0 = new StringReader("?E;1zt.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      jSTerm1.call();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9559838465843624
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E)a:LIX3Kww3");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer0);
      jSTerm0.parallelStream();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      jSTerm2.makeConstant();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      stringReader0.ready();
      long long0 = (-2746L);
      streamTokenizer0.parseNumbers();
      JSJshopVars.greaterT = (-1);
      jSTerm0.makeFunction();
      jSTerm0.addElement("list");
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.percent = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3194365257660667
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      jSTerm0.ensureCapacity((-1));
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.sort((Comparator) null);
      jSTerm1.standardizerTerm();
      jSTerm0.clone();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm4.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.add((Object) jSSubstitution2);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3131536787336344
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      jSTerm0.ensureCapacity((-1));
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.sort((Comparator) null);
      jSTerm1.standardizerTerm();
      jSTerm0.clone();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm4.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) null);
      jSTerm3.add((Object) jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
