/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 13:57:02 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      String string1 = "n:W8Kh<_aH<d;IG /T";
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "n:W8Kh<_aH<d;IG /T");
      FormElement formElement0 = checkbox0.setFormElementName((String) null);
      String string2 = "Component class: ";
      TextArea textArea0 = new TextArea(formElement0, (String) null, "Component class: ");
      // Undeclared exception!
      try { 
        textArea0.body();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Component component0 = null;
      Checkbox checkbox0 = new Checkbox((Component) null, "_P:$PV])[ h;TW{|", "_P:$PV])[ h;TW{|");
      String string0 = null;
      FormElement formElement0 = checkbox0.validationRule("_P:$PV])[ h;TW{|", (String) null);
      formElement0._isGeneratedId();
      // Undeclared exception!
      try { 
        checkbox0.bdo("_P:$PV])[ h;TW{|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Component component0 = link0.meta();
      // Undeclared exception!
      try { 
        component0.dl();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "kf7A{~O~Jv6aiIhYj1";
      TextInput textInput0 = new TextInput(errorPage0, "kf7A{~O~Jv6aiIhYj1", "kf7A{~O~Jv6aiIhYj1");
      Component component0 = errorPage0.kbd((Object) textInput0);
      DateInput dateInput0 = new DateInput(component0, "h5", "xu?", "kf7A{~O~Jv6aiIhYj1");
      dateInput0.validate();
      component0.h3((Object) dateInput0);
      textInput0.addValidationError("kf7A{~O~Jv6aiIhYj1");
      Text text0 = new Text(textInput0, (Object) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1523, 1523, 0);
      component0.tt((Object) mockGregorianCalendar0);
      Image image0 = new Image(text0, "kf7A{~O~Jv6aiIhYj1", "kf7A{~O~Jv6aiIhYj1");
      // Undeclared exception!
      try { 
        image0.s();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "Attributes must be given in name, value pairs.";
      Form form0 = new Form("Attributes must be given in name, value pairs.");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("Attributes must be given in name, value pairs.", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.id("Attributes must be given in name, value pairs.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "|A";
      Form form0 = new Form("|A");
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("|A", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      byte byte0 = (byte)60;
      // Undeclared exception!
      try { 
        form0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Form form0 = new Form((String) null);
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertNotNull(form0);
      
      String string0 = "$$";
      Form form1 = form0.addFormValidationRule((String) null, "$$");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertNotNull(form1);
      
      ElExpression elExpression0 = new ElExpression("vtUS63Z");
      assertEquals(7, elExpression0.length());
      assertEquals("vtUS63Z", elExpression0.getExpression());
      assertEquals("vtUS63Z", elExpression0.toString());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage((String) null);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals(7, elExpression0.length());
      assertEquals("vtUS63Z", elExpression0.getExpression());
      assertEquals("vtUS63Z", elExpression0.toString());
      assertEquals("vtUS63Z", elExpression1.toString());
      assertEquals(7, elExpression1.length());
      assertEquals("vtUS63Z", elExpression1.getExpression());
      assertNotNull(elExpression1);
      
      elExpression1.expression = null;
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertNull(elExpression1.toString());
      assertNull(elExpression1.getExpression());
      
      // Undeclared exception!
      try { 
        form1.fileInput("$$", elExpression1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "`s=#pMK 45`gcaPOe^S";
      Form form0 = new Form("`s=#pMK 45`gcaPOe^S");
      assertEquals("form", form0.defaultTagName());
      assertEquals("`s=#pMK 45`gcaPOe^S", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      Form form1 = form0.addFormValidationError("");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("`s=#pMK 45`gcaPOe^S", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("`s=#pMK 45`gcaPOe^S", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertNotNull(form1);
      
      Checkbox checkbox0 = new Checkbox(form1, "`s=#pMK 45`gcaPOe^S", "`s=#pMK 45`gcaPOe^S");
      assertEquals("form", form0.defaultTagName());
      assertEquals("`s=#pMK 45`gcaPOe^S", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("`s=#pMK 45`gcaPOe^S", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("`s=#pMK 45`gcaPOe^S", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("`s=#pMK 45`gcaPOe^S", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.fieldBinding("nb4(f*;8N5y)3");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("`s=#pMK 45`gcaPOe^S", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("`s=#pMK 45`gcaPOe^S", form1.getComponentId());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("`s=#pMK 45`gcaPOe^S", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("`s=#pMK 45`gcaPOe^S", checkbox0.getComponentId());
      assertEquals("`s=#pMK 45`gcaPOe^S", formElement0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("`s=#pMK 45`gcaPOe^S", formElement0.getFormElementName());
      assertNotNull(formElement0);
      
      String string1 = "";
      String string2 = null;
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea(formElement0, "", (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      assertNull(xmlEntityRef0.defaultTagName());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertNotNull(xmlEntityRef0);
      
      String string1 = "(-ZBkS0 6";
      ElExpression elExpression0 = new ElExpression("");
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression1.getExpression());
      assertEquals(0, elExpression1.length());
      assertEquals("", elExpression1.toString());
      assertNotNull(elExpression1);
      
      // Undeclared exception!
      try { 
        xmlEntityRef0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      String string0 = null;
      Table table0 = new Table(errorPage0, (String) null);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.colgroup();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      Any any0 = tableBlock0.col();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      
      // Undeclared exception!
      try { 
        any0.small((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Form form0 = new Form("samp");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("samp", form0.getComponentId());
      assertNotNull(form0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "samp";
      Form form1 = form0._buildFromSerializedString(stringArray0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("samp", form0.getComponentId());
      assertEquals("samp", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals(1, stringArray0.length);
      assertNotNull(form1);
      
      String string0 = "&^,(+J";
      ElExpression elExpression0 = new ElExpression("&^,(+J");
      assertEquals("&^,(+J", elExpression0.getExpression());
      assertEquals("&^,(+J", elExpression0.toString());
      assertEquals(6, elExpression0.length());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("D56");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("&^,(+J", elExpression0.getExpression());
      assertEquals("&^,(+J", elExpression0.toString());
      assertEquals(6, elExpression0.length());
      assertEquals("&^,(+J", elExpression1.toString());
      assertEquals("&^,(+J", elExpression1.getExpression());
      assertEquals(6, elExpression1.length());
      assertNotNull(elExpression1);
      
      // Undeclared exception!
      try { 
        form0.s((Object) elExpression1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      String string0 = "igKL'Xwlr>w^#`#i";
      Table table0 = new Table(errorPage0, "igKL'Xwlr>w^#`#i");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("igKL'Xwlr>w^#`#i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      TableRow tableRow0 = table0.tr();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("igKL'Xwlr>w^#`#i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertNotNull(tableRow0);
      
      TextArea textArea0 = new TextArea(tableRow0, "igKL'Xwlr>w^#`#i", "igKL'Xwlr>w^#`#i");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("igKL'Xwlr>w^#`#i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("igKL'Xwlr>w^#`#i", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("igKL'Xwlr>w^#`#i", textArea0.getComponentId());
      assertNotNull(textArea0);
      
      FormElement formElement0 = textArea0.value("igKL'Xwlr>w^#`#i");
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("igKL'Xwlr>w^#`#i", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("igKL'Xwlr>w^#`#i", textArea0.getFormElementName());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertEquals("igKL'Xwlr>w^#`#i", textArea0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("igKL'Xwlr>w^#`#i", formElement0.getComponentId());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("igKL'Xwlr>w^#`#i", formElement0.getFormElementName());
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.sup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("fieldError");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Checkbox checkbox0 = new Checkbox(errorPage0, "1F2[SCA,;P", "fieldError");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("1F2[SCA,;P", checkbox0.getFormElementName());
      assertEquals("fieldError", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.label("1F2[SCA,;P");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("1F2[SCA,;P", checkbox0.getFormElementName());
      assertEquals("fieldError", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertTrue(formElement0.isEmpty());
      assertEquals("1F2[SCA,;P", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("fieldError", formElement0.getComponentId());
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.li();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Component component0 = null;
      Checkbox checkbox0 = new Checkbox((Component) null, "_P:$PV])[ h;TW{|", "_P:$PV])[ h;TW{|");
      assertTrue(checkbox0.isValid());
      assertEquals("_P:$PV])[ h;TW{|", checkbox0.getFormElementName());
      assertEquals("_P:$PV])[ h;TW{|", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      String string0 = null;
      FormElement formElement0 = checkbox0.validationRule("_P:$PV])[ h;TW{|", (String) null);
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(checkbox0.isValid());
      assertEquals("_P:$PV])[ h;TW{|", checkbox0.getFormElementName());
      assertEquals("_P:$PV])[ h;TW{|", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("_P:$PV])[ h;TW{|", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("_P:$PV])[ h;TW{|", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertNotNull(formElement0);
      
      boolean boolean0 = formElement0._isGeneratedId();
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(checkbox0.isValid());
      assertEquals("_P:$PV])[ h;TW{|", checkbox0.getFormElementName());
      assertEquals("_P:$PV])[ h;TW{|", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("_P:$PV])[ h;TW{|", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("_P:$PV])[ h;TW{|", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(boolean0);
      
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection((String) null);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.translator("");
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertNotNull(dynamicSelectModel2);
      
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.label("Iiy+K");
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel0, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel3);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertSame(dynamicSelectModel2, dynamicSelectModel3);
      assertSame(dynamicSelectModel3, dynamicSelectModel1);
      assertSame(dynamicSelectModel3, dynamicSelectModel2);
      assertSame(dynamicSelectModel3, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel3);
      
      // Undeclared exception!
      try { 
        formElement0.multiSelect("zza!;R.16kh", dynamicSelectModel3, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      Form form1 = form0.addFormValidationError((String) null);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form1.defaultTagName());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertFalse(form1._isGeneratedId());
      assertFalse(form1._isBuilt());
      assertNotNull(form1);
      
      // Undeclared exception!
      try { 
        form0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      String string0 = null;
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.colgroup();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      Any any0 = tableBlock0.col();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      
      Block block0 = (Block)errorPage0.dt();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      Block block1 = (Block)tableBlock0.h6();
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block1, block0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotNull(block1);
      
      String string1 = "";
      ElExpression elExpression0 = new ElExpression("");
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertNotNull(elExpression0);
      
      // Undeclared exception!
      try { 
        block0.checkboxGroup("numberInputError", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Link link0 = new Link(errorPage0, errorPage0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("a", link0.defaultTagName());
      assertTrue(link0._isGeneratedId());
      assertEquals("Link_1", link0.getComponentId());
      assertNotNull(link0);
      
      String string0 = "NOP?T";
      // Undeclared exception!
      try { 
        errorPage0.get("@Qj8<u8B<QKT{c@2J&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id '@Qj8<u8B<QKT{c@2J&'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "Attributes must be given in ame, value pairs.";
      Form form0 = new Form("Attributes must be given in ame, value pairs.");
      assertEquals("form", form0.defaultTagName());
      assertEquals("Attributes must be given in ame, value pairs.", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      // Undeclared exception!
      try { 
        form0.dt((Object) "Attributes must be given in ame, value pairs.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "'EhYRqnlL4&", "'EhYRqnlL4&");
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("'EhYRqnlL4&", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("'EhYRqnlL4&", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.fieldBinding("3)xC163.kDVGz!6Ke");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("'EhYRqnlL4&", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("'EhYRqnlL4&", checkbox0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(formElement0.isEmpty());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isValid());
      assertEquals("'EhYRqnlL4&", formElement0.getFormElementName());
      assertEquals("'EhYRqnlL4&", formElement0.getComponentId());
      assertNotNull(formElement0);
      
      DynamicSelectModel dynamicSelectModel0 = checkbox0.selectModel();
      assertSame(checkbox0, formElement0);
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("'EhYRqnlL4&", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("'EhYRqnlL4&", checkbox0.getComponentId());
      assertNotNull(dynamicSelectModel0);
      
      ElExpression elExpression0 = new ElExpression("x.HTd%ke? t>>c?<");
      assertEquals("x.HTd%ke? t>>c?<", elExpression0.getExpression());
      assertEquals(16, elExpression0.length());
      assertEquals("x.HTd%ke? t>>c?<", elExpression0.toString());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("3)xC163.kDVGz!6Ke");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals("x.HTd%ke? t>>c?<", elExpression0.getExpression());
      assertEquals(16, elExpression0.length());
      assertEquals("x.HTd%ke? t>>c?<", elExpression0.toString());
      assertEquals("x.HTd%ke? t>>c?<", elExpression1.getExpression());
      assertEquals("x.HTd%ke? t>>c?<", elExpression1.toString());
      assertEquals(16, elExpression1.length());
      assertNotNull(elExpression1);
      
      CheckboxGroup checkboxGroup0 = null;
      try {
        checkboxGroup0 = new CheckboxGroup(formElement0, "?:YO?YDTiOlW#@Icy@", "Tr component can be added only to a TableBlock.", dynamicSelectModel0, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = "";
      Block block0 = new Block(errorPage0, "");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertNotNull(block0);
      
      NumberInput numberInput0 = new NumberInput(block0, "", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(numberInput0.isEmpty());
      assertEquals("", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("NumberInput_1", numberInput0.getComponentId());
      assertTrue(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertNotNull(numberInput0);
      
      String string1 = "Li+";
      TextInput textInput0 = new TextInput(numberInput0, "Li+", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(numberInput0.isEmpty());
      assertEquals("", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("NumberInput_1", numberInput0.getComponentId());
      assertTrue(numberInput0._isGeneratedId());
      assertTrue(numberInput0.isValid());
      assertTrue(textInput0.isValid());
      assertTrue(textInput0._isGeneratedId());
      assertEquals("input", textInput0.defaultTagName());
      assertEquals("TextInput_1", textInput0.getComponentId());
      assertEquals("Li+", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertNotNull(textInput0);
      
      // Undeclared exception!
      try { 
        textInput0.ins();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4036404106149494
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = "bmIu5";
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "bmIu5");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("bmIu5", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertNotNull(checkbox0);
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      String string1 = null;
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection((String) null);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      Object object0 = elExpression0.eval(dynamicSelectModel0, errorPage0);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      assertNull(object0);
      
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("bmIu5", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("bmIu5", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      ElExpression elExpression1 = elExpression0.errorMessage((String) null);
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      assertNull(elExpression1.getExpression());
      assertNull(elExpression1.toString());
      assertNotNull(elExpression1);
      
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("bmIu5", dynamicSelectModel0, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Calendar calendar0 = errorPage0.date();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      Table table0 = new Table(errorPage0, (String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.colgroup();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      Any any0 = tableBlock0.col();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(any0);
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        any0.object();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7379755558057863
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.dt();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      ElExpression elExpression0 = new ElExpression("");
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertEquals(0, elExpression0.length());
      assertNotNull(elExpression0);
      
      Block block1 = (Block)errorPage0.li();
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block1, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_2", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertNotNull(block1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Table table0 = new Table(block0, "");
      assertFalse(block0.equals((Object)block1));
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.id("(I)C");
      assertFalse(block0.equals((Object)block1));
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("(I)C", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("(I)C", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table1.thead();
      assertFalse(block0.equals((Object)block1));
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("(I)C", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("(I)C", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertFalse(block0.equals((Object)block1));
      assertNotSame(block0, block1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("(I)C", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("(I)C", table1.getComponentId());
      assertFalse(table1._isGeneratedId());
      assertEquals("table", table1.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Form form0 = new Form((String) null);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      String string0 = "$$";
      String string1 = "object";
      Form form1 = form0.addFormValidationRule("Col component can be added only to a TableBlock.", "object");
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("form", form1.defaultTagName());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertNotNull(form1);
      
      String string2 = "Component with id ";
      ElExpression elExpression0 = new ElExpression("Component with id ");
      assertEquals(18, elExpression0.length());
      assertEquals("Component with id ", elExpression0.getExpression());
      assertEquals("Component with id ", elExpression0.toString());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("KDHe99}sEBbj:*]\"'r");
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertEquals(18, elExpression0.length());
      assertEquals("Component with id ", elExpression0.getExpression());
      assertEquals("Component with id ", elExpression0.toString());
      assertEquals(18, elExpression1.length());
      assertEquals("Component with id ", elExpression1.toString());
      assertEquals("Component with id ", elExpression1.getExpression());
      assertNotNull(elExpression1);
      
      Form form2 = form0.renderHint("vtUS63Z");
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form2, form0);
      assertSame(form2, form1);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("form", form2.defaultTagName());
      assertEquals("wheel_components_Form", form2.getComponentId());
      assertFalse(form2._isGeneratedId());
      assertFalse(form2._isBuilt());
      assertNotNull(form2);
      
      // Undeclared exception!
      try { 
        form2.reset("KDHe99}sEBbj:*]\"'r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertNotNull(errorPage0);
      
      TextInput textInput0 = new TextInput(errorPage0, "kf7A{~O~Jv6aiIhYj1", "kf7A{~O~Jv6aiIhYj1");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertNotNull(textInput0);
      
      Label label0 = (Label)errorPage0.kbd((Object) textInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      String string0 = "h5";
      DateInput dateInput0 = new DateInput(label0, "h5", "xu?", "kf7A{~O~Jv6aiIhYj1");
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("xu?", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("h5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertNotNull(dateInput0);
      
      dateInput0.validate();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("xu?", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("h5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      
      Label label1 = (Label)label0.h3((Object) dateInput0);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isValid());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("Label_1", label0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertTrue(label0._isGeneratedId());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("xu?", dateInput0.getComponentId());
      assertTrue(dateInput0.isEmpty());
      assertEquals("h5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertEquals("span", label1.defaultTagName());
      assertTrue(label1._isGeneratedId());
      assertEquals("Label_2", label1.getComponentId());
      assertNotNull(label1);
      
      TextInput textInput1 = (TextInput)textInput0.addValidationError("kf7A{~O~Jv6aiIhYj1");
      assertSame(textInput0, textInput1);
      assertSame(textInput1, textInput0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(textInput0.isEmpty());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertTrue(textInput1.isEmpty());
      assertEquals("input", textInput1.defaultTagName());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput1.getFormElementName());
      assertFalse(textInput1.isValid());
      assertFalse(textInput1._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput1.getComponentId());
      assertNotNull(textInput1);
      
      String string1 = "u";
      Form form0 = new Form("u");
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("u", form0.getComponentId());
      assertNotNull(form0);
      
      form0.afterAdd();
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("u", form0.getComponentId());
      
      // Undeclared exception!
      try { 
        form0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      TextInput textInput0 = new TextInput(errorPage0, "kf7A{~O~Jv6aiIhYj1", "kf7A{~O~Jv6aiIhYj1");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertNotNull(textInput0);
      
      Label label0 = (Label)errorPage0.kbd((Object) textInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertNotNull(label0);
      
      String string0 = "h5";
      DateInput dateInput0 = new DateInput(label0, "h5", "xu?", "kf7A{~O~Jv6aiIhYj1");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("h5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("xu?", dateInput0.getComponentId());
      assertNotNull(dateInput0);
      
      dateInput0.validate();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("h5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("xu?", dateInput0.getComponentId());
      
      Label label1 = (Label)label0.h3((Object) dateInput0);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(textInput0.isValid());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("span", label0.defaultTagName());
      assertEquals("Label_1", label0.getComponentId());
      assertTrue(label0._isGeneratedId());
      assertEquals("input", dateInput0.defaultTagName());
      assertEquals("h5", dateInput0.getFormElementName());
      assertTrue(dateInput0.isValid());
      assertTrue(dateInput0.isEmpty());
      assertFalse(dateInput0._isGeneratedId());
      assertEquals("xu?", dateInput0.getComponentId());
      assertTrue(label1._isGeneratedId());
      assertEquals("span", label1.defaultTagName());
      assertEquals("Label_2", label1.getComponentId());
      assertNotNull(label1);
      
      Block block0 = (Block)errorPage0.big();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      TextInput textInput1 = (TextInput)textInput0.addValidationError("kf7A{~O~Jv6aiIhYj1");
      assertSame(textInput0, textInput1);
      assertSame(textInput1, textInput0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getFormElementName());
      assertTrue(textInput0.isEmpty());
      assertEquals("input", textInput0.defaultTagName());
      assertFalse(textInput0.isValid());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput0.getComponentId());
      assertEquals("input", textInput1.defaultTagName());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput1.getComponentId());
      assertEquals("kf7A{~O~Jv6aiIhYj1", textInput1.getFormElementName());
      assertFalse(textInput1.isValid());
      assertFalse(textInput1._isGeneratedId());
      assertTrue(textInput1.isEmpty());
      assertNotNull(textInput1);
      
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7608099200686347
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      Table table0 = new Table(errorPage0, "Component ");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("Component ", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertNotNull(table0);
      
      TableBlock tableBlock0 = table0.colgroup();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("Component ", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      
      Any any0 = tableBlock0.col();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(table0._isGeneratedId());
      assertEquals("Component ", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      
      Block block0 = (Block)errorPage0.dt();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertNotNull(elExpression0);
      
      Block block1 = (Block)errorPage0.s();
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block1, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      
      // Undeclared exception!
      try { 
        tableBlock0.checkboxGroup("hfaYCDM75", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Attributes must be given in name, value pairs.";
      Form form0 = new Form("Attributes must be given in name, value pairs.");
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("Attributes must be given in name, value pairs.", form0.getComponentId());
      assertNotNull(form0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Attributes must be given in name, value pairs.";
      form0._renderClassReferenceFromHints((XmlSerializer) null);
      assertFalse(form0._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("Attributes must be given in name, value pairs.", form0.getComponentId());
      
      stringArray0[1] = "Attributes must be given in name, value pairs.";
      stringArray0[2] = "Attributes must be given in name, value pairs.";
      // Undeclared exception!
      try { 
        form0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      // Undeclared exception!
      try { 
        errorPage0.getPageUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      String string0 = "bmIu5";
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "bmIu5");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("bmIu5", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      assertNotNull(dynamicSelectModel0);
      
      String string1 = null;
      String string2 = null;
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection((String) null);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("bmIu5", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      Block block0 = tableBlock0.renderHint((CharSequence) null);
      assertSame(tableBlock0, block0);
      assertSame(block0, tableBlock0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("bmIu5", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      FormElement formElement0 = checkbox0.fieldBinding("bmIu5");
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("bmIu5", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("bmIu5", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertNotNull(formElement0);
      
      String string3 = "";
      Submit submit0 = new Submit(formElement0, "bmIu5", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("bmIu5", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertEquals("bmIu5", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertEquals("Submit_1", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0._isGeneratedId());
      assertTrue(submit0.isEmpty());
      assertEquals("bmIu5", submit0.getFormElementName());
      assertNotNull(submit0);
      
      // Undeclared exception!
      try { 
        checkbox0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "Attributes must be given in name, value pairs.";
      Form form0 = new Form("Attributes must be given in name, value pairs.");
      assertEquals("Attributes must be given in name, value pairs.", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        form0.numberInput((String) null, (CharSequence) "Attributes must be given in name, value pairs.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.dt();
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      String string0 = "";
      ElExpression elExpression0 = new ElExpression("");
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.getExpression());
      assertEquals("", elExpression0.toString());
      assertNotNull(elExpression0);
      
      Block block1 = (Block)errorPage0.li();
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block1, block0);
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertNotNull(block1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Table table0 = new Table(block0, "");
      assertFalse(block0.equals((Object)block1));
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertEquals("Block_1", block0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertTrue(table0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
      assertNotNull(table0);
      
      String string1 = "(I)C";
      // Undeclared exception!
      try { 
        table0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.482288979239146
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Block block0 = (Block)errorPage0.dt();
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotNull(block0);
      
      ElExpression elExpression0 = new ElExpression("");
      assertEquals(0, elExpression0.length());
      assertEquals("", elExpression0.toString());
      assertEquals("", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      Block block1 = (Block)errorPage0.li();
      assertFalse(block1.equals((Object)block0));
      assertNotSame(block1, block0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_2", block1.getComponentId());
      assertNotNull(block1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Table table0 = new Table(errorPage0, "o");
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("o", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      
      Table table1 = table0.id("o");
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("o", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertFalse(table1._isGeneratedId());
      assertEquals("o", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertNotNull(table1);
      
      TableBlock tableBlock0 = table0.thead();
      assertSame(table0, table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("o", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertNotNull(tableBlock0);
      
      TableRow tableRow0 = tableBlock0.tr();
      assertSame(table0, table1);
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("o", table0.getComponentId());
      assertEquals("table", table0.defaultTagName());
      assertFalse(table0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableRow_1", tableRow0.getComponentId());
      assertEquals("tr", tableRow0.defaultTagName());
      assertTrue(tableRow0._isGeneratedId());
      assertNotNull(tableRow0);
  }
}
