/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:56:55 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.FileDescriptor;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.SyncFailedException;
import java.nio.CharBuffer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-433);
      SimpleNode simpleNode0 = new SimpleNode((-433));
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      String string0 = "";
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-433));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-1));
      simpleNode0.parent = (Node) simpleNode1;
      String string0 = "Td_O7)X42n-8vf[";
      int int0 = 0;
      simpleNode0.jjtAddChild(simpleNode1, 0);
      javaCharStream0.nextCharInd = 0;
      SimpleNode simpleNode2 = new SimpleNode((-1));
      simpleNode0.jjtSetParent(simpleNode2);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      // Undeclared exception!
      try { 
        simpleNode0.dump("Td_O7)X42n-8vf[", stringWriter1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-392));
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-392));
      simpleNode0.parent = (Node) simpleNode1;
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(675);
      StringWriter stringWriter0 = new StringWriter(1152);
      simpleNode0.dump(">=", stringWriter0);
      simpleNode0.id = 675;
      simpleNode0.setIdentifier(">=");
      simpleNode0.id = 675;
      simpleNode0.jjtClose();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      String string0 = " xPjiRc1N+en_\"";
      simpleNode0.setIdentifier(" xPjiRc1N+en_\"");
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 675
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      jJTJavaParserState0.pushNode(simpleNode0);
      Node node0 = jJTJavaParserState0.rootNode();
      simpleNode0.jjtAddChild(node0, 10);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString("");
      simpleNode0.setIdentifier("EnumConstant");
      simpleNode0.jjtClose();
      simpleNode0.toString("");
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      simpleNode0.parser = javaParser0;
      simpleNode0.setIdentifier("EnumConstant : EnumConstant : ");
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild(node0, 10);
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      simpleNode0.setIdentifier("*lt");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('s');
      simpleNode0.dump("*lt", stringWriter1);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-9));
      Node[] nodeArray0 = new Node[0];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.children = nodeArray0;
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(73);
      stringWriter0.append((CharSequence) charBuffer0, 10, 10);
      stringWriter0.append('<');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) charBuffer0);
      simpleNode0.dump("V9!6mxaf", stringWriter2);
      assertSame(stringWriter2, stringWriter1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6598720137848267
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(95);
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode1.jjtAddChild(simpleNode0, 1);
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "N)yADNu!-G118b._";
      stringWriter0.flush();
      simpleNode1.dump("N)yADNu!-G118b._", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 95);
      simpleNode1.toString();
      int int0 = 0;
      simpleNode0.jjtAddChild((Node) null, 1);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-1313));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1682824501765625
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"?\"");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"?\"", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append('<');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "\"?\"");
      simpleNode0.dump("\"?\"", stringWriter3);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 88);
      assertEquals(89, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8369882167858358
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtClose();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = 'J';
      stringWriter0.close();
      charArray0[2] = '1';
      charArray0[3] = 'B';
      stringWriter0.write(charArray0, 0, 0);
      stringWriter0.close();
      stringWriter0.append((CharSequence) null);
      simpleNode0.dump((String) null, stringWriter0);
      String string0 = "";
      arrayList0.add("");
      simpleNode0.dump("", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('~');
      simpleNode0.dump("}", stringWriter0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.509137344082687
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(2);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      JJTJavaParserState jJTJavaParserState1 = new JJTJavaParserState();
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("PV}84oc^l``hN=/vckR", stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, (-1073741822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      simpleNode0.setIdentifier("RelationalExpression");
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('C');
      stringWriter2.append(' ');
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      simpleNode0.dump("*lt", stringWriter1);
      StringWriter stringWriter3 = stringWriter2.append(' ');
      simpleNode0.dump("SpW/JX+.0C>[3\"", stringWriter3);
      simpleNode0.dump(">>", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>RelationalExpression</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6885673693022826
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.dump("<<", stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      simpleNode0.dump("/F^", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*lshft</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*lshft</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9404479886553264
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"default\"");
      SimpleNode simpleNode0 = new SimpleNode(10);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.toString();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.dump("4$", stringWriter0);
      stringWriter0.append((CharSequence) "{");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("PV}84o'^l``hN=/vckR");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append('5');
      simpleNode0.dump("PV}84o'^l``hN=/vckR", stringWriter1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("PV}84oc^l``hN=/vckR");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      simpleNode0.setIdentifier("&&");
      simpleNode0.dump("&se%|z0#-Jm", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode((byte) (-48));
      simpleNode1.dump("PV}84o'^l``hN=/vckR", stringWriter1);
      simpleNode0.dump((String) null, stringWriter1);
      SimpleNode simpleNode2 = new SimpleNode((-1600));
      simpleNode2.dump("case", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode2.dump("&se%|z0#-Jm", stringWriter2);
      assertNotSame(simpleNode2, simpleNode0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.172993472439513
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(18);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      simpleNode0.toString("{");
      simpleNode0.setIdentifier("b");
      simpleNode0.setIdentifier("b");
      StringWriter stringWriter0 = new StringWriter(18);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 18);
      simpleNode1.dump("", stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "b");
      simpleNode0.dump(" ", stringWriter0);
      simpleNode0.toString();
      simpleNode1.dump("63G7V6#zd+K2ldk{0_", stringWriter1);
      stringWriter1.append((CharSequence) "VariableDeclaratorId : b : b", 18, 18);
      simpleNode0.dump("{VariableDeclaratorId", stringWriter0);
      assertEquals("b<VariableDeclaratorId>\n  <identifier>b</identifier>\n  <identifier>b</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>b</identifier>\n  <identifier>b</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6598720137848267
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('F');
      stringWriter1.append('F');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JJTJavaParserState jJTJavaParserState1 = javaParser0.jjtree;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter2 = new StringWriter();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      simpleNode0.dump("|", stringWriter1);
      simpleNode0.dump("<=", stringWriter2);
      assertEquals("<EnumConstant>\n  <identifier>*le</identifier>\n</EnumConstant>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.40945861869508926
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(18);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("c8HUF_pq*", stringWriter0);
      stringWriter0.append((CharSequence) "{");
      stringWriter0.flush();
      simpleNode0.dump("K8", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(31);
      stringWriter1.append('l');
      simpleNode1.parser = javaParser0;
      simpleNode1.dump("Literal", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n{<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }
}
