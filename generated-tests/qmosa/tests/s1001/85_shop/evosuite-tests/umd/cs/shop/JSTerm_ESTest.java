/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:56:15 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.ListIterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = true;
      String string0 = "N8t;:)~UpYh";
      StringReader stringReader0 = new StringReader("N8t;:)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.interrogation = (-4);
      stringReader0.ready();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.ready();
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm1.retainAll(jSTerm0);
      jSTerm0.makeEval(false);
      jSTerm1.listIterator();
      jSTerm1.isFunction();
      jSTerm1.insertElementAt((Object) null, 0);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("o*84");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeFunction();
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h}T9oX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSJshopVars.minus = 1131;
      jSTerm0.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("WCM*Gd]t\"|,R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) 0;
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSJshopVars.rightBrac = 0;
      jSTerm0.add(0, (Object) jSTerm1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '!';
      charArray0[2] = 'P';
      charArray0[3] = '!';
      charArray0[4] = 'k';
      charArray0[5] = 'n';
      charArray0[6] = 'W';
      charArray0[7] = '*';
      charArray0[8] = 'I';
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      jSSubstitution1.iterator();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      jSTerm2.isConstant();
      jSTerm0.isEval();
      jSTerm1.makeEval(true);
      jSTerm0.makeEval(false);
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.ready();
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(false);
      jSTerm0.isVariable();
      jSTerm0.isVariable();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      
      streamTokenizer0.ordinaryChars(0, 0);
      jSTerm0.isVariable();
      jSTerm0.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9913464134109882
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.skip(67);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.clone();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      jSTerm3.makeVariable();
      jSTerm3.retainAll(jSTerm1);
      jSTerm3.isGround();
      jSTerm2.equals(jSTerm0);
      jSTerm2.stream();
      // Undeclared exception!
      try { 
        jSTerm2.setSize((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashStarComments(true);
      JSJshopVars.rightBrac = (-4);
      stringReader0.skip((-497L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0335620542068176
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.equals(jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.slashStarComments(true);
      stringReader0.skip((-497L));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6859453246697877
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.skip(32);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.spliterator();
      JSJshopVars.rightPar = 32;
      JSJshopVars.interrogation = 1765;
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm3);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.clone();
      JSJshopVars.greaterT = 32;
      jSSubstitution0.sort(comparator0);
      jSTerm1.makeVariable();
      jSTerm3.retainAll(jSTerm2);
      JSJshopVars.colon = 32;
      jSTerm0.isGround();
      boolean boolean0 = jSTerm1.equals(jSTerm4);
      assertFalse(boolean0);
      
      jSTerm1.stream();
      jSTerm2.setSize(1765);
      jSTerm0.toStr();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.matches(jSTerm5);
      JSSubstitution jSSubstitution1 = jSTerm5.matches(jSTerm1);
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0316900029887046
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("WCM*Gd]t\"|,R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) 0;
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSJshopVars.rightBrac = 0;
      jSTerm0.add(0, (Object) jSTerm1);
      char[] charArray0 = new char[9];
      JSJshopVars.interrogation = 6341;
      charArray0[0] = 'P';
      charArray0[1] = '!';
      charArray0[2] = 'P';
      charArray0[3] = '!';
      charArray0[4] = 'k';
      jSTerm0.call();
      charArray0[5] = 'n';
      charArray0[6] = 'W';
      charArray0[7] = '*';
      charArray0[8] = 'I';
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm1.makeFunction();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6859453246697877
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.skip(32);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.spliterator();
      JSJshopVars.rightPar = 32;
      JSJshopVars.interrogation = 1765;
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm3);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm5 = (JSTerm)jSTerm4.clone();
      JSJshopVars.greaterT = 32;
      jSSubstitution0.sort(comparator0);
      jSTerm1.makeVariable();
      jSTerm3.retainAll(jSTerm2);
      jSTerm5.isVariable();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm4.forEach(consumer0);
      jSTerm1.isVariable();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2197606035643385
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("WCM*Gd]t\"|,R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) 0;
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSJshopVars.rightBrac = 0;
      jSTerm0.add(0, (Object) jSTerm1);
      char[] charArray0 = new char[9];
      JSJshopVars.interrogation = 6341;
      charArray0[0] = 'P';
      charArray0[1] = '!';
      charArray0[2] = 'P';
      charArray0[3] = '!';
      charArray0[4] = 'k';
      JSTerm jSTerm2 = jSTerm0.call();
      charArray0[5] = 'n';
      charArray0[6] = 'W';
      charArray0[7] = '*';
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(o~bz9sfVo+s!vD5Sz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      jSTerm0.insertElementAt("o", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm0.isGround();
      jSTerm1.isVariable();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.set((-3), "o");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("WCM*Gd]t\"|,R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) 0;
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSJshopVars.rightBrac = 0;
      jSTerm0.add(0, (Object) jSTerm1);
      char[] charArray0 = new char[9];
      JSJshopVars.interrogation = 6341;
      charArray0[0] = 'P';
      charArray0[1] = '!';
      charArray0[2] = 'P';
      charArray0[3] = '!';
      charArray0[4] = 'k';
      JSTerm jSTerm2 = jSTerm0.call();
      charArray0[5] = 'n';
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.print();
      assertEquals("[[%%%]]", jSTerm0.toString());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.stream();
      jSTerm0.setSize(96);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.026221474036724
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%o~bz9sfVo+s!vD5Sz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.cloneT();
      jSTerm2.cloneT();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?A|//ez1LnPq:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.055586143763578
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%o~bz9sfVo+s!vD5Sz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'v';
      charArray0[2] = 'S';
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?A|//ez1LnPq:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.call();
      JSTerm jSTerm4 = jSTerm3.cloneT();
      assertTrue(jSTerm4.isVariable());
      assertFalse(jSTerm4.isFunction());
      
      jSTerm3.isGround();
      assertEquals("[?%%%]", jSTerm3.toString());
      assertNotSame(jSTerm3, jSTerm4);
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(boolean0);
      
      jSTerm1.call();
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2397458666084575
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.skip(32);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.spliterator();
      JSJshopVars.rightPar = 32;
      JSJshopVars.interrogation = 1760;
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm3);
      JSJshopVars.rightPar = 32;
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.clone();
      JSJshopVars.greaterT = 32;
      jSSubstitution0.sort(comparator0);
      jSTerm1.makeVariable();
      JSJshopVars.apostrophe = 32;
      jSTerm1.isEmpty();
      jSTerm0.equals(jSTerm4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm5 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm5.set(32, jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 32
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4500663010973844
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%o~bz9sfVo+s!vD5Sz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.spliterator();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.makeVariable();
      jSTerm1.isEmpty();
      jSTerm0.isGround();
      jSTerm3.equals(jSTerm0);
      jSTerm1.stream();
      jSTerm0.setSize(1748);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm4.toStr();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.matches(jSTerm5);
      jSTerm3.matches(jSTerm4);
      JSTerm jSTerm6 = jSTerm4.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm6.matches(jSTerm4, jSSubstitution1);
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1548174235771813
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%o~bz9sfVo+s!vD5Sz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.toStr();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm0.isConstant());
      assertNotSame(jSTerm3, jSTerm4);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0896266128350316
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%o~bz9sfVo+s!vD5Sz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(o~bz9sfVo+s!vD5Sz");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      jSTerm0.spliterator();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6357434952314973
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.ready();
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.retainAll(jSTerm0);
      jSTerm0.makeEval(false);
      jSTerm0.listIterator();
      jSTerm0.isFunction();
      jSTerm0.insertElementAt((Object) null, 0);
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9730014063936123
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.J1{a");
      stringReader0.ready();
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.retainAll(jSTerm0);
      jSTerm0.makeEval(false);
      jSTerm0.listIterator();
      jSTerm0.isFunction();
      jSTerm0.insertElementAt((Object) null, 0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1192809219098505
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9uaA1RplYV6a'j");
      stringReader0.ready();
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "9uaA1RplYV6a'j");
      jSTerm0.retainAll(jSSubstitution0);
      jSTerm0.makeEval(true);
      ListIterator listIterator0 = jSTerm0.listIterator();
      jSTerm0.isFunction();
      jSTerm0.insertElementAt(listIterator0, 0);
      jSTerm0.isVariable();
      jSTerm0.isGround();
      jSTerm0.isVariable();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector$ListItr cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("m'>fS){b?PM>TU;");
      StringReader stringReader1 = new StringReader("t4&=C(m),Cq.@I>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.equalT = 59;
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.110016553375461
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.ready();
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.retainAll(jSTerm0);
      jSTerm0.makeEval(false);
      jSTerm0.listIterator();
      jSTerm0.isEval();
      jSTerm0.insertElementAt((Object) null, 0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
