/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 09:45:20 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 255L;
      Range range0 = Range.of(255L, 255L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = (-1046L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1046L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      long long0 = 1055L;
      range_Builder1.expandBegin(1055L);
      range0.split(210L);
      // Undeclared exception!
      try { 
        Range.parseRange("kaPYJSW'=)c~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse kaPYJSW'=)c~ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandEnd((-1688L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(32767L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.214496050675049
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      range0.toString();
      Range range1 = Range.ofLength(0L);
      range1.iterator();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 0L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-2699L));
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("r3V)lpENeGx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.r3V)lpENeGx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder0.shift(0L);
      range_Builder1.copy();
      Range range0 = range_Builder0.build();
      range_Builder1.contractEnd(0L);
      range_Builder0.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder0.copy();
      range0.toString(range_CoordinateSystem0);
      range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange(")CK:sLvM(KiP'_Jq", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )CK:sLvM(KiP'_Jq into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-392L), (-392L));
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.997068727089017
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1159L;
      Range range0 = Range.of(range_CoordinateSystem0, 1159L, 1159L);
      Range.CoordinateSystem.values();
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange("<J:7aD+kCrC)", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse <J:7aD+kCrC) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.32147771836471
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.intersects(range0);
      Range.ofLength(0L);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8286413964890924
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      long long1 = 0L;
      Range range1 = Range.ofLength(0L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of(0L, 0L);
      Range range3 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      range3.toString(range_CoordinateSystem0);
      range0.complement(range2);
      Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6144250530769546
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range1.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.23126159211299
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.of(2147483647L, 2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5460698668031165
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 1L);
      range0.startsBefore(range1);
      long long0 = 1L;
      range0.intersects(range1);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("|t%/PjbeZc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse |t%/PjbeZc into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.831480240067973
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.forEach(consumer0);
      range0.isEmpty();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.431873508656116
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.getLength();
      Range range1 = Range.of(0L);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder1.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 2816L);
      Object object0 = new Object();
      range2.equals(object0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.339085464248101
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1751L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1507L), 0L);
      Range range1 = Range.of(2160L);
      range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.192742100258079
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range1.getBegin();
      Range range2 = Range.ofLength(0L);
      range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      range0.isSubRangeOf(range1);
      range0.iterator();
      range0.isEmpty();
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0280290733074104
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder0.contractEnd(0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9180575260797945
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2467L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(279L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      range0.getEnd();
      Range.Comparators.values();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("r3V)lpENeGx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.r3V)lpENeGx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(4294967295L);
      range0.getEnd();
      Range.Comparators.values();
      Long long0 = new Long(4294967295L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("length can not be less than 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.length can not be less than 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.894399544430038
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 3408L;
      Range range0 = Range.of(3408L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 1L);
      boolean boolean0 = range0.startsBefore(range1);
      boolean boolean1 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      List<Range> list0 = range0.split(1L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8066624897703174
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      long long0 = range1.getBegin();
      assertEquals(0L, long0);
      
      Range range2 = Range.ofLength(0L);
      range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-2698L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem1);
      assertEquals(1L, long1);
      
      Range range3 = Range.ofLength(1L);
      range2.isEmpty();
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range1.isEmpty();
      assertSame(range1, range0);
      assertFalse(range1.equals((Object)range3));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.759052088383298
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-302L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-302L), (-302L));
      range1.isEmpty();
      Range range2 = Range.of(0L);
      range0.complement(range2);
      range0.intersection(range1);
      range0.complement(range1);
      range2.iterator();
      range2.endsBefore(range0);
      range0.getLength();
      range2.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-302L), (-302L));
      Range range3 = range_Builder0.build();
      range_Builder0.shift(1L);
      // Undeclared exception!
      try { 
        range3.split((-2998L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2337475349956297
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1164L), 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getBegin();
      range0.iterator();
      range0.getLength();
      range0.getLength();
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.75574753769298
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range1.getBegin();
      Range range2 = Range.ofLength(0L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-2698L));
      range3.iterator();
      assertTrue(range3.isEmpty());
      
      range1.endsBefore(range0);
      Range range4 = Range.ofLength(8802L);
      range4.getLength();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range range5 = range_Builder0.build();
      assertFalse(range5.isEmpty());
      
      boolean boolean0 = range1.equals(range4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.441035224632577
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(279L);
      Range range1 = Range.ofLength(2147484811L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      List<Range> list0 = range2.complement(range1);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2698L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.086715272448053
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range1.getBegin();
      range0.getEnd();
      Range.Comparators.values();
      boolean boolean0 = range1.equals(range0);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 2147483646 ]/0B", string0);
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      assertSame(range1, range0);
      
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.485587161053814
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      range0.isSubRangeOf(range1);
      range0.iterator();
      range1.equals(range_CoordinateSystem0);
      Range range2 = Range.of(0L, (-1L));
      range2.getEnd();
      Range.Comparators.values();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6629455111209412
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      Range range1 = Range.of(0L);
      Range range2 = Range.of(0L, 0L);
      range0.startsBefore(range1);
      range2.intersects(range1);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range2.getEnd();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Spliterator<Long> spliterator0 = range0.spliterator();
      range0.equals(spliterator0);
      range0.getEnd();
      Range.Comparators.values();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2550904477399483
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(279L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(279L, 9223372034707292161L);
      long long0 = new Long(9223372034707292161L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.316373721686118
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range2.getLength();
      Object object0 = new Object();
      range0.endsBefore(range2);
      range0.equals(object0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.001388573967279
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      long long0 = range1.getBegin();
      assertEquals(2147483647L, long0);
      
      Range range2 = Range.ofLength(2147483647L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      List<Range> list0 = range0.complement(range2);
      range1.complementFrom(list0);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-2698L));
      range3.iterator();
      range1.endsBefore(range0);
      Range range4 = Range.ofLength(8802L);
      long long1 = range4.getLength();
      assertEquals(8802L, long1);
      
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder0.build();
      boolean boolean0 = range1.equals(range4);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Range range5 = range3.asRange();
      assertSame(range2, range0);
      assertSame(range0, range5);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.26688221563626
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(255L);
      Long long1 = new Long(0L);
      range0.equals(range_CoordinateSystem0);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      Range range1 = Range.ofLength(0L);
      range1.spliterator();
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5003390300446027
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1164L), 2147483647L);
      range0.getBegin();
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.iterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-1164L), (-1164L));
      range2.getLength();
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.iterator();
      range0.getEnd();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(4294967295L, (-137L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.351089855039048
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.ofLength(4L);
      range0.spliterator();
      Range range1 = Range.of(4L);
      Range range2 = Range.of(4L, 4L);
      boolean boolean0 = range0.startsBefore(range1);
      boolean boolean1 = range2.intersects(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range3 = Range.of(9223372036854775807L);
      long long0 = range2.getEnd();
      assertSame(range2, range1);
      assertEquals(4L, long0);
      
      Range.CoordinateSystem.values();
      Range.of(4L);
      boolean boolean2 = range3.endsBefore(range0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.4221727236331048
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      range0.isSubRangeOf(range1);
      range0.iterator();
      range0.isEmpty();
      range1.getLength();
      range1.iterator();
      range0.getLength();
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.iterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 8816L);
      range2.getEnd();
      range1.getEnd();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(8815L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.564665268374786
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      Range range1 = Range.of(0L);
      Range range2 = Range.of(0L, 0L);
      range0.startsBefore(range1);
      range2.intersects(range1);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Long long0 = new Long((-2147483648L));
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("r3V)lpENeGx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.r3V)lpENeGx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.877585910557535
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1691L, 1691L);
      Long long0 = new Long(2478L);
      range0.equals("");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("CoordinateSystem can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.CoordinateSystem can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-10741L));
      boolean boolean0 = range0.equals((Object) null);
      Range.Comparators.values();
      range0.isEmpty();
      boolean boolean1 = range0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9170466349593704
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1691L, 1691L);
      long long0 = 2478L;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3252648963708533
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.ofLength(4L);
      range0.spliterator();
      Range range1 = Range.of(4L, 4L);
      range0.startsBefore(range0);
      boolean boolean0 = range1.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = Range.of(9223372036854775807L);
      long long0 = range1.getEnd();
      assertEquals(4L, long0);
      
      Range.CoordinateSystem.values();
      Range.of(4L);
      boolean boolean1 = range2.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      
      boolean boolean2 = range1.intersects(range2);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.7758559484120977
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of((-10L), (-10L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals((Object) null);
      Range range1 = Range.of(1690L);
      Range range2 = Range.of(range_CoordinateSystem0, (-4084L), 1677L);
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2906302387057527
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      range0.complementFrom(list0);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1677L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.422414204014728
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-355L), (-355L));
      long long0 = new Long((-355L));
      Range.Comparators.values();
      Range.of(2507L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("NSR6&;/~OWue=\n~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.NSR6&;/~OWue=
         // ~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.077728697400847
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(127L, 127L);
      range0.spliterator();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8341806269249137
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1164L), 2147483647L);
      range0.getBegin();
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.iterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-1164L), (-1164L));
      range2.isEmpty();
      Range.ofLength(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(1437L);
      range0.complement(range1);
      range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1322L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
