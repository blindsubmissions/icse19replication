/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:03:42 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.keys();
      jSONObject0.names();
      String string0 = "&!IR$O:zs9/K+a-uN\"A";
      jSONObject0.optDouble("&!IR$O:zs9/K+a-uN\"A");
      JSONObject.doubleToString(Double.NaN);
      String string1 = "";
      jSONObject0.optLong("", 0L);
      jSONObject0.optInt("null");
      int int0 = 3224;
      String string2 = "] not found.";
      try { 
        jSONObject0.getJSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short1);
      String string0 = "VM/FI";
      try { 
        jSONObject0.getJSONArray("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.843861437961367
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Short short0 = new Short((short) (-1712));
      Short.compare((short) (-1712), (short) (-1759));
      String[] stringArray0 = new String[4];
      stringArray0[0] = ": ";
      stringArray0[1] = "l~f?9V>w~HE<t*Ht7";
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      stringArray0[3] = "<-bQG}&VRpAgG5)";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.get("<-bQG}&VRpAgG5)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<-bQG}&VRpAgG5)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "Null key.";
      int int0 = 612;
      JSONObject.valueToString("Null key.", 612, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      jSONObject1.optBoolean("\"java.lang.String@0000000001\"", true);
      jSONObject0.has("\"java.lang.String@0000000001\"");
      String string1 = "";
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.optDouble("");
      jSONObject0.toString();
      jSONObject0.opt("{}");
      jSONObject0.remove("");
      // Undeclared exception!
      try { 
        hashMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "D";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of D
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("9^gm5H#Fq");
      assertNull(object0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6245757807017087
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "y^:*-pRDa{J\\$~9h";
      jSONObject0.optJSONArray("y^:*-pRDa{J$~9h");
      jSONObject0.optInt("y^:*-pRDa{J$~9h", (-1349));
      jSONObject0.optInt("z_{B2SNq*},jAj");
      jSONObject0.length();
      int int0 = (-261);
      try { 
        jSONObject0.getJSONObject("y^:*-pRDa{J$~9h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y^:*-pRDa{J$~9h\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(3);
      assertEquals("{}", string0);
      
      long long0 = jSONObject0.optLong("{", (-3578L));
      assertEquals((-3578L), long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8133554045006157
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1L));
      jSONObject1.optDouble("gD?i5LD\b;=~!jo`\"", (-1.0));
      jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      jSONObject0.optDouble((String) null, (-15.7502283403));
      jSONObject0.optJSONArray("gD?i5LD\b;=~!jo`\"");
      StringWriter stringWriter0 = new StringWriter(2882);
      StringWriter stringWriter1 = new StringWriter(2882);
      jSONObject0.write(stringWriter1);
      JSONObject.doubleToString(0.0);
      jSONObject0.names();
      jSONObject0.optJSONArray("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      Float.min(3373.7324F, (-821.927F));
      JSONObject.testValidity(float0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put((Float) null, "id:C\"/e");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      hashMap0.put(float0, ",s|");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Bs`/k|g^I", float0);
      jSONObject1.length();
      try { 
        jSONObject1.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      int int0 = 57;
      jSONObject0.toString(57, 57);
      jSONObject0.optBoolean("gz,#O5{ygn/KF12|");
      Short short0 = new Short((short)59);
      Short.toUnsignedInt((short)10);
      JSONObject.valueToString(short0);
      jSONObject1.optBoolean("gz,#O5{ygn/KF12|");
      try { 
        jSONObject0.append((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5665989181145106
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      jSONTokener0.nextClean();
      jSONTokener0.next();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put((Float) null, "getvalueOf");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      Float float0 = new Float(0.0F);
      hashMap0.put(float0, "`n|4");
      jSONObject0.optBoolean((String) null);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.putOpt("4'*7*l", "Bs`/k|g^I");
      jSONObject0.length();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "gD?i5LD\\b;=~!jo`\"";
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      jSONObject0.optBoolean("gD?i5LD\b;=~!jo`\"");
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", 0);
      jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (Map) hashMap0);
      try { 
        jSONObject1.getInt("gD?i5LD\b;=~!jo`\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gD?i5LD\\b;=~!jo`\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function.identity();
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      hashMap0.computeIfAbsent((Object) null, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.toString();
      try { 
        jSONObject0.getString("D_9zV>x>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D_9zV>x>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      Float.min(3373.7324F, (-821.927F));
      JSONObject.testValidity(float0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put((Float) null, "id:C\"/e");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      hashMap0.put(float0, ",s|");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("Bs`/k|g^I", float0);
      jSONObject0.optString("isjoin");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.78267811358072
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 126;
      JSONObject.valueToString(jSONObject0, 126, 104);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject$Null", (double) (-4895));
      try { 
        jSONObject2.get("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8753327672931013
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("Z}L4}Gq", biFunction0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Short> function1 = (Function<Object, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Short>) function1);
      Short short0 = new Short((short)12);
      hashMap0.put(short0, "Z}L4}Gq");
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function3 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends Integer>) function4);
      function2.compose((Function<? super Integer, ?>) function3);
      hashMap0.computeIfAbsent((Object) null, function2);
      JSONObject.doubleToString(1868.858);
      JSONObject.valueToString(function3, (byte)124, 59);
      Float float0 = new Float((float) 59);
      JSONObject jSONObject0 = new JSONObject();
      Function<Object, JSONObject> function5 = (Function<Object, JSONObject>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Integer, ? extends JSONObject>) function5);
      jSONObject0.optInt((String) null, 106);
      jSONObject0.append("1868.858", function3);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2047854169135204
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, true);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(8192);
      hashMap1.put(integer1, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1038L));
      jSONObject1.optDouble("{}", (double) 87);
      jSONObject1.isNull("gD?i5LD\b;=~!jo`\"");
      String string0 = null;
      jSONObject1.optDouble("8 eE)[;1_", Double.NaN);
      jSONObject0.optJSONArray("lIDb:-l1JTLX");
      StringWriter stringWriter0 = new StringWriter(8192);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "lIDb:-l1JTLX", 2054, 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      Float.min(3373.7324F, (-821.927F));
      JSONObject.testValidity(float0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put((Float) null, "id:C\"/e");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      hashMap0.put(float0, ",s|");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("id:C\"/e");
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.get("java.lang.Float@0000000001.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000001.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      jSONObject1.optBoolean("K%VmS$iKrXB!@");
      Short short0 = new Short((short)59);
      Short.toUnsignedInt((short) (-2300));
      JSONObject.valueToString(integer0);
      jSONObject2.optBoolean("java.lang.Integer@0000000003");
      try { 
        jSONObject1.append((String) null, "java.lang.Integer@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "istoString";
      stringArray0[1] = "getcopyValueOf";
      stringArray0[2] = "isjoin";
      stringArray0[3] = "Khl;y";
      stringArray0[4] = "";
      stringArray0[5] = " jqDk";
      stringArray0[6] = "Fu:4W";
      stringArray0[7] = "gettoLowerCase";
      stringArray0[8] = "wheel.json.JSONObject";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }
}
