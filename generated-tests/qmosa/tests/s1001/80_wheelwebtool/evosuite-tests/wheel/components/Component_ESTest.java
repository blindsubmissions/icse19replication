/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 11:03:56 GMT 2018
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import org.xmlpull.v1.wrapper.classic.XmlSerializerDelegate;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Image;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("body");
      // Undeclared exception!
      try { 
        xmlEntityRef0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "6OJ[@FoC,h`!?JW:0";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6OJ[@FoC,h`!?JW:0");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      Form form0 = new Form((String) null);
      String string1 = "BS]!Vulgf<h`;s`U";
      Table table0 = null;
      try {
        table0 = new Table(form0, "BS]!Vulgf<h`;s`U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "tt";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("tt");
      xmlEntityRef0.afterAdd();
      XmlSerializer xmlSerializer0 = null;
      // Undeclared exception!
      try { 
        xmlEntityRef0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Component component0 = null;
      NumberInput numberInput0 = new NumberInput((Component) null, "?_]-WU4", "?_]-WU4");
      String string0 = "[?Nc+$?$6";
      TableBlock tableBlock0 = null;
      try {
        tableBlock0 = new TableBlock(numberInput0, "[?Nc+$?$6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "Component with id ", "~BdCZy,WUVz;J!a");
      Checkbox checkbox0 = new Checkbox(submit0, "", "Component with id ");
      FormElement formElement0 = checkbox0.validationRule("o4Qw", "pD) {#");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) submit0;
      // Undeclared exception!
      try { 
        formElement0.message("0V", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "JW*BETe#H<B";
      errorPage0.img("JW*BETe#H<B", "JW*BETe#H<B");
      // Undeclared exception!
      try { 
        errorPage0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "end tag name </";
      Form form0 = new Form("end tag name </");
      String string1 = "|z%Y}#nQR$Y;J";
      form0.addFormValidationRule("end tag name </", "|z%Y}#nQR$Y;J");
      // Undeclared exception!
      try { 
        form0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "u]/:IXK}_+4 !", "\"%6s!%(~Z4sP[-o");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "u]/:IXK}_+4 !";
      stringArray0[1] = "u]/:IXK}_+4 !";
      stringArray0[2] = "u]/:IXK}_+4 !";
      stringArray0[3] = "";
      stringArray0[4] = "\"%6s!%(~Z4sP[-o";
      String string0 = "";
      stringArray0[5] = "";
      Component component0 = checkbox0.attributes(stringArray0);
      // Undeclared exception!
      try { 
        component0.param("", "u]/:IXK}_+4 !");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Form form0 = new Form("");
      String string0 = "km86HGzZTS*>Q`q3";
      DateInput dateInput0 = new DateInput(form0, "", "km86HGzZTS*>Q`q3", "km86HGzZTS*>Q`q3");
      // Undeclared exception!
      try { 
        dateInput0.code();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1535324566542537
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Form form0 = new Form("a|(DT|");
      String string0 = "! Jwz?*^;+ys";
      Checkbox checkbox0 = new Checkbox(form0, "#WWLJC1N;R$p", "! Jwz?*^;+ys");
      checkbox0.fieldBinding("a|(DT|");
      // Undeclared exception!
      try { 
        form0.passwordInput("?h3_SkQr1R;KWJ / He");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "Component with id ";
      Submit submit0 = new Submit((Component) null, "Component with id ", "~BdCZy,WUVz;J!a");
      Checkbox checkbox0 = new Checkbox(submit0, "", "Component with id ");
      checkbox0.validationRule("o4Qw", "pD) {#");
      ElExpression elExpression0 = new ElExpression("Component with id ");
      elExpression0.errorMessage("");
      Float float0 = new Float(314.1);
      // Undeclared exception!
      try { 
        checkbox0.h1((Object) float0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "Component with id ", "~BdCZy,WUVz;J!a");
      Checkbox checkbox0 = new Checkbox(submit0, "", "Component with id ");
      FileInput fileInput0 = new FileInput(checkbox0, "Colgroup component can be added only to a Table.", "pD) {#");
      fileInput0.getMaxMemoryFileSize();
      Form form0 = new Form("T-Z3");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pD) {#";
      stringArray0[1] = "Colgroup component can be added only to a Table.";
      stringArray0[2] = "~BdCZy,WUVz;J!a";
      form0._buildFromSerializedString(stringArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        submit0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "Component with id ";
      String string1 = "~BdCZy,WUVz;J!a";
      Submit submit0 = new Submit((Component) null, "Component with id ", "~BdCZy,WUVz;J!a");
      String string2 = "";
      Checkbox checkbox0 = new Checkbox(submit0, "", "Component with id ");
      String string3 = "o4Qw";
      String string4 = "OPLp8P34U%";
      ElExpression elExpression0 = new ElExpression("eGT_h(/NS");
      String string5 = "oE$#.C";
      ElExpression elExpression1 = elExpression0.errorMessage("oE$#.C");
      // Undeclared exception!
      try { 
        checkbox0.fileInput("OPLp8P34U%", elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = null;
      ElExpression elExpression0 = new ElExpression((String) null);
      Component component0 = errorPage0.base(elExpression0);
      // Undeclared exception!
      try { 
        component0.noframes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "Component with id ";
      Submit submit0 = new Submit((Component) null, "Component with id ", "~BdCZy,WUVz;J!a");
      assertEquals("Component with id ", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("~BdCZy,WUVz;J!a", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertNotNull(submit0);
      
      Checkbox checkbox0 = new Checkbox(submit0, "", "Component with id ");
      assertEquals("Component with id ", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("~BdCZy,WUVz;J!a", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("Component with id ", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertNotNull(checkbox0);
      
      FormElement formElement0 = checkbox0.validationRule("o4Qw", "pD) {#");
      assertEquals("Component with id ", submit0.getFormElementName());
      assertEquals("input", submit0.defaultTagName());
      assertEquals("~BdCZy,WUVz;J!a", submit0.getComponentId());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("Component with id ", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertEquals("", formElement0.getFormElementName());
      assertTrue(formElement0.isEmpty());
      assertTrue(formElement0.isValid());
      assertEquals("Component with id ", formElement0.getComponentId());
      assertEquals("input", formElement0.defaultTagName());
      assertFalse(formElement0._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      
      ElExpression elExpression0 = new ElExpression("Component with id ");
      assertEquals(18, elExpression0.length());
      assertEquals("Component with id ", elExpression0.toString());
      assertEquals("Component with id ", elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      ElExpression elExpression1 = elExpression0.errorMessage("");
      assertEquals(18, elExpression0.length());
      assertEquals("Component with id ", elExpression0.toString());
      assertEquals("Component with id ", elExpression0.getExpression());
      assertEquals("Component with id ", elExpression1.toString());
      assertEquals("Component with id ", elExpression1.getExpression());
      assertEquals(18, elExpression1.length());
      assertSame(elExpression0, elExpression1);
      assertSame(elExpression1, elExpression0);
      assertNotNull(elExpression1);
      
      Float float0 = new Float(314.1);
      assertEquals(314.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = (-1296.0266F);
      // Undeclared exception!
      try { 
        submit0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "a|(DT|";
      Form form0 = new Form("a|(DT|");
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      String string1 = "#WWLJC1N;R$p";
      Checkbox checkbox0 = new Checkbox(form0, "#WWLJC1N;R$p", "! Jwz?*^;+ys");
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertNotNull(checkbox0);
      
      String string2 = "ul";
      // Undeclared exception!
      try { 
        checkbox0.div();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNull(elExpression0.toString());
      assertNull(elExpression0.getExpression());
      assertNotNull(elExpression0);
      
      Short short0 = new Short((short)29);
      assertEquals((short)29, (short)short0);
      assertNotNull(short0);
      
      Block block0 = (Block)errorPage0.h4();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertTrue(block0._isGeneratedId());
      assertNotNull(block0);
      
      // Undeclared exception!
      try { 
        elExpression0.store((Object) null, errorPage0, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "u]/:IXK}_+4 !", "u]/:IXK}_+4 !");
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("u]/:IXK}_+4 !", checkbox0.getFormElementName());
      assertEquals("u]/:IXK}_+4 !", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertNotNull(checkbox0);
      
      // Undeclared exception!
      try { 
        checkbox0.address();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Component component0 = null;
      String string0 = "~BdCZy,WUVz;J!a";
      Submit submit0 = new Submit((Component) null, "Component with id ", "~BdCZy,WUVz;J!a");
      assertEquals("Component with id ", submit0.getFormElementName());
      assertEquals("~BdCZy,WUVz;J!a", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertNotNull(submit0);
      
      String string1 = "";
      Checkbox checkbox0 = new Checkbox(submit0, "Component with id ", "Component with id ");
      assertEquals("Component with id ", submit0.getFormElementName());
      assertEquals("~BdCZy,WUVz;J!a", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("Component with id ", checkbox0.getFormElementName());
      assertEquals("Component with id ", checkbox0.getComponentId());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0.isEmpty());
      assertNotNull(checkbox0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        checkbox0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      // Undeclared exception!
      try { 
        errorPage0.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Form form0 = new Form("a|(DT|");
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      String string0 = "! Jwz?*^;+ys";
      Checkbox checkbox0 = new Checkbox(form0, "#WWLJC1N;R$p", "! Jwz?*^;+ys");
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      String string1 = ",/4A4#}\"uS";
      TextArea textArea0 = new TextArea(checkbox0, "W.a;PTU'_`>36Zl0", "W.a;PTU'_`>36Zl0");
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getComponentId());
      assertNotNull(textArea0);
      
      FormElement formElement0 = textArea0.value("");
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotNull(formElement0);
      
      DynamicSelectModel dynamicSelectModel0 = formElement0.selectModel();
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertNotNull(dynamicSelectModel0);
      
      String string2 = null;
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value((String) null);
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertNotNull(dynamicSelectModel1);
      
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.translator("");
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getFormElementName());
      assertTrue(textArea0.isEmpty());
      assertTrue(textArea0.isValid());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", textArea0.getComponentId());
      assertTrue(formElement0.isEmpty());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("W.a;PTU'_`>36Zl0", formElement0.getFormElementName());
      assertEquals("textarea", formElement0.defaultTagName());
      assertEquals("W.a;PTU'_`>36Zl0", formElement0.getComponentId());
      assertTrue(formElement0.isValid());
      assertSame(textArea0, formElement0);
      assertSame(formElement0, textArea0);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
      assertNotNull(dynamicSelectModel2);
      
      ElExpression elExpression0 = new ElExpression("W.a;PTU'_`>36Zl0");
      assertEquals(16, elExpression0.length());
      assertEquals("W.a;PTU'_`>36Zl0", elExpression0.getExpression());
      assertEquals("W.a;PTU'_`>36Zl0", elExpression0.toString());
      assertNotNull(elExpression0);
      
      CheckboxGroup checkboxGroup0 = null;
      try {
        checkboxGroup0 = new CheckboxGroup(checkbox0, ",/4A4#}\"uS", (String) null, dynamicSelectModel2, elExpression0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Form form0 = new Form("a|(DT|");
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertNotNull(form0);
      
      List<RenderableComponent> list0 = form0._getRenderableChildren();
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Checkbox checkbox0 = new Checkbox(form0, "#WWLJC1N;R$p", "! Jwz?*^;+ys");
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      checkbox0.validate();
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      
      FormElement formElement0 = checkbox0.addValidationError("href");
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("! Jwz?*^;+ys", formElement0.getComponentId());
      assertFalse(formElement0.isValid());
      assertFalse(formElement0._isGeneratedId());
      assertEquals("#WWLJC1N;R$p", formElement0.getFormElementName());
      assertEquals("input", formElement0.defaultTagName());
      assertTrue(formElement0.isEmpty());
      assertSame(checkbox0, formElement0);
      assertSame(formElement0, checkbox0);
      assertNotNull(formElement0);
      
      FormElement formElement1 = checkbox0.fieldBinding("a|(DT|");
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("#WWLJC1N;R$p", formElement1.getFormElementName());
      assertEquals("! Jwz?*^;+ys", formElement1.getComponentId());
      assertEquals("input", formElement1.defaultTagName());
      assertTrue(formElement1.isEmpty());
      assertFalse(formElement1.isValid());
      assertFalse(formElement1._isGeneratedId());
      assertSame(checkbox0, formElement0);
      assertSame(checkbox0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, checkbox0);
      assertNotNull(formElement1);
      
      Radio radio0 = new Radio(form0, "! Jwz?*^;+ys", "! Jwz?*^;+ys");
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertTrue(radio0.isValid());
      assertEquals("! Jwz?*^;+ys", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("! Jwz?*^;+ys", radio0.getComponentId());
      assertNotNull(radio0);
      
      String string0 = radio0.defaultDomEvent();
      assertEquals("a|(DT|", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertFalse(form0._isBuilt());
      assertTrue(radio0.isValid());
      assertEquals("! Jwz?*^;+ys", radio0.getFormElementName());
      assertEquals("input", radio0.defaultTagName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertEquals("! Jwz?*^;+ys", radio0.getComponentId());
      assertEquals("onclick", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        radio0.object();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Form form0 = new Form("a|(DT|");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      String string0 = "#WWLJC1N;R$p";
      Checkbox checkbox0 = new Checkbox(form0, "#WWLJC1N;R$p", "! Jwz?*^;+ys");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertNotNull(checkbox0);
      
      String string1 = "ul";
      String string2 = "I$-fK>4*&9~bS!-o";
      String string3 = "kAL3_`/5O/fYQv$F>s7";
      FileInput fileInput0 = new FileInput(checkbox0, "kAL3_`/5O/fYQv$F>s7", "#WWLJC1N;R$p");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("kAL3_`/5O/fYQv$F>s7", fileInput0.getFormElementName());
      assertEquals("#WWLJC1N;R$p", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertNotNull(fileInput0);
      
      int int0 = fileInput0.getMaxMemoryFileSize();
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertTrue(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertTrue(fileInput0.isEmpty());
      assertEquals("kAL3_`/5O/fYQv$F>s7", fileInput0.getFormElementName());
      assertEquals("#WWLJC1N;R$p", fileInput0.getComponentId());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals(1000, int0);
      
      String string4 = "";
      Form form1 = new Form("");
      assertFalse(form1._isGeneratedId());
      assertEquals("wheel_components_Form", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertNotNull(form1);
      assertFalse(form1.equals((Object)form0));
      
      // Undeclared exception!
      try { 
        checkbox0.addFirst(fileInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "a|(DT|";
      Form form0 = new Form("a|(DT|");
      assertEquals("form", form0.defaultTagName());
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      List<RenderableComponent> list0 = form0._getRenderableChildren();
      assertEquals("form", form0.defaultTagName());
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string1 = "#WWLJC1N;R$p";
      Checkbox checkbox0 = new Checkbox(form0, "#WWLJC1N;R$p", "! Jwz?*^;+ys");
      assertEquals("form", form0.defaultTagName());
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertNotNull(checkbox0);
      
      String[] stringArray0 = new String[0];
      Checkbox checkbox1 = (Checkbox)checkbox0.attributes(stringArray0);
      assertEquals("form", form0.defaultTagName());
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox1.isValid());
      assertEquals("! Jwz?*^;+ys", checkbox1.getComponentId());
      assertTrue(checkbox1.isEmpty());
      assertEquals("input", checkbox1.defaultTagName());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("#WWLJC1N;R$p", checkbox1.getFormElementName());
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertNotNull(checkbox1);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        checkbox1.add(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Component component0 = null;
      String string0 = "Component with id ";
      String string1 = "~BdCZy,WUVz;J!a";
      Submit submit0 = new Submit((Component) null, "Component with id ", "~BdCZy,WUVz;J!a");
      assertEquals("Component with id ", submit0.getFormElementName());
      assertEquals("~BdCZy,WUVz;J!a", submit0.getComponentId());
      assertEquals("input", submit0.defaultTagName());
      assertTrue(submit0.isValid());
      assertTrue(submit0.isEmpty());
      assertFalse(submit0._isGeneratedId());
      assertNotNull(submit0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        submit0.em((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2623862541833204
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "a|(DT|";
      Form form0 = new Form("a|(DT|");
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertNotNull(form0);
      
      List<RenderableComponent> list0 = form0._getRenderableChildren();
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string1 = "! Jwz?*^;+ys";
      Checkbox checkbox0 = new Checkbox(form0, "#WWLJC1N;R$p", "! Jwz?*^;+ys");
      assertEquals("a|(DT|", form0.getComponentId());
      assertFalse(form0._isBuilt());
      assertFalse(form0._isGeneratedId());
      assertEquals("form", form0.defaultTagName());
      assertTrue(checkbox0.isValid());
      assertEquals("#WWLJC1N;R$p", checkbox0.getFormElementName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("input", checkbox0.defaultTagName());
      assertEquals("! Jwz?*^;+ys", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertNotNull(checkbox0);
      
      String string2 = "href";
      // Undeclared exception!
      try { 
        checkbox0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Block block0 = errorPage1.placeholder("");
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertFalse(errorPage1._isBuilt());
      assertTrue(block0._isGeneratedId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("div", block0.defaultTagName());
      assertNotSame(errorPage1, errorPage0);
      assertNotNull(block0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      NumberInput numberInput0 = new NumberInput(errorPage0, "", "{vx)&qp)oePYK.$}q");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("{vx)&qp)oePYK.$}q", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertNotNull(numberInput0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      String string0 = "";
      TableBlock tableBlock0 = new TableBlock(numberInput0, "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("{vx)&qp)oePYK.$}q", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Block block1 = (Block)tableBlock0.q();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("{vx)&qp)oePYK.$}q", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Block_1", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(block1, block0);
      assertNotNull(block1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(block1.equals((Object)block0));
      
      Block block2 = (Block)block1.label();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("{vx)&qp)oePYK.$}q", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("Block_1", block1.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block2._isGeneratedId());
      assertEquals("Block_2", block2.getComponentId());
      assertEquals("div", block2.defaultTagName());
      assertNotSame(errorPage0, errorPage1);
      assertNotSame(block1, block2);
      assertNotSame(block1, block0);
      assertNotSame(block2, block0);
      assertNotSame(block2, block1);
      assertNotNull(block2);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(block1.equals((Object)block0));
      assertFalse(block2.equals((Object)block0));
      assertFalse(block2.equals((Object)block1));
      
      TextArea textArea0 = new TextArea(numberInput0, "", "IL2F%~P-[DZ7?");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("{vx)&qp)oePYK.$}q", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertEquals("IL2F%~P-[DZ7?", textArea0.getComponentId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("", textArea0.getFormElementName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isEmpty());
      assertNotNull(textArea0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      ErrorPage errorPage2 = (ErrorPage)numberInput0.getPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("{vx)&qp)oePYK.$}q", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertFalse(errorPage2._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage2.getComponentId());
      assertTrue(errorPage2.isPage());
      assertEquals("div", errorPage2.defaultTagName());
      assertFalse(errorPage2._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(errorPage0, errorPage2);
      assertSame(errorPage2, errorPage0);
      assertNotSame(errorPage2, errorPage1);
      assertNotNull(errorPage2);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(errorPage2.equals((Object)errorPage1));
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = numberInput0.equals("");
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0.isEmpty());
      assertEquals("{vx)&qp)oePYK.$}q", numberInput0.getComponentId());
      assertFalse(numberInput0._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(errorPage0, errorPage2);
      assertFalse(boolean0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      // Undeclared exception!
      try { 
        errorPage1.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      String string0 = "";
      Image image0 = (Image)errorPage0.img("", "");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Block block0 = errorPage0.placeholder("VN6]Cx%O");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertNotNull(block0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Table table0 = new Table(block0, "VN6]Cx%O");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("VN6]Cx%O", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertNotNull(table0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Table table1 = table0.renderHint("");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("VN6]Cx%O", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("VN6]Cx%O", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(table0, table1);
      assertSame(table1, table0);
      assertNotNull(table1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Table table2 = table1.id("");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table1.getComponentId());
      assertEquals("table", table1.defaultTagName());
      assertFalse(table1._isGeneratedId());
      assertEquals("", table2.getComponentId());
      assertEquals("table", table2.defaultTagName());
      assertFalse(table2._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(table0, table2);
      assertSame(table0, table1);
      assertSame(table1, table2);
      assertSame(table1, table0);
      assertSame(table2, table0);
      assertSame(table2, table1);
      assertNotNull(table2);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Table table3 = table0.renderHint("");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertFalse(table3._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table1);
      assertSame(table3, table1);
      assertSame(table3, table0);
      assertSame(table3, table2);
      assertNotNull(table3);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      Table table4 = table3.renderHint("VN6]Cx%O");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertFalse(table3._isGeneratedId());
      assertEquals("", table4.getComponentId());
      assertEquals("table", table4.defaultTagName());
      assertFalse(table4._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table4);
      assertSame(table0, table1);
      assertSame(table3, table4);
      assertSame(table3, table1);
      assertSame(table3, table0);
      assertSame(table3, table2);
      assertSame(table4, table2);
      assertSame(table4, table1);
      assertSame(table4, table0);
      assertSame(table4, table3);
      assertNotNull(table4);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      TableBlock tableBlock0 = table3.colgroup();
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertFalse(table3._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertNotSame(errorPage0, errorPage1);
      assertSame(table0, table2);
      assertSame(table0, table3);
      assertSame(table0, table4);
      assertSame(table0, table1);
      assertSame(table3, table4);
      assertSame(table3, table1);
      assertSame(table3, table0);
      assertSame(table3, table2);
      assertNotNull(tableBlock0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      NumberInput numberInput0 = new NumberInput(tableBlock0, "/", "");
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", errorPage0.defaultTagName());
      assertTrue(errorPage0.isPage());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertEquals("table", table0.defaultTagName());
      assertEquals("", table0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("", table3.getComponentId());
      assertEquals("table", table3.defaultTagName());
      assertFalse(table3._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("NumberInput_1", numberInput0.getComponentId());
      assertEquals("/", numberInput0.getFormElementName());
      assertEquals("input", numberInput0.defaultTagName());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertTrue(numberInput0._isGeneratedId());
      assertNotNull(numberInput0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      String string1 = "vB(H9WF.r}?j`FA9~<";
      String string2 = "*?x0' P]RJ";
      Class<Any> class0 = Any.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance("*?x0' P]RJ", class0);
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNotNull(xmlPullWrapperFactory0);
      
      MXSerializer mXSerializer0 = new MXSerializer();
      assertNull(mXSerializer0.getName());
      assertNull(mXSerializer0.getNamespace());
      assertEquals(0, mXSerializer0.getDepth());
      assertNotNull(mXSerializer0);
      
      XmlSerializerDelegate xmlSerializerDelegate0 = new XmlSerializerDelegate(mXSerializer0);
      assertNull(mXSerializer0.getName());
      assertNull(mXSerializer0.getNamespace());
      assertEquals(0, mXSerializer0.getDepth());
      assertEquals(0, xmlSerializerDelegate0.getDepth());
      assertNull(xmlSerializerDelegate0.getName());
      assertNull(xmlSerializerDelegate0.getNamespace());
      assertNotNull(xmlSerializerDelegate0);
      
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper(mXSerializer0, xmlPullWrapperFactory0);
      assertNull(mXSerializer0.getName());
      assertNull(mXSerializer0.getNamespace());
      assertEquals(0, mXSerializer0.getDepth());
      assertEquals(0, staticXmlSerializerWrapper0.getDepth());
      assertNull(staticXmlSerializerWrapper0.getCurrentNamespaceForElements());
      assertNull(staticXmlSerializerWrapper0.getNamespace());
      assertNull(staticXmlSerializerWrapper0.getName());
      assertFalse(xmlPullWrapperFactory0.isNamespaceAware());
      assertFalse(xmlPullWrapperFactory0.isValidating());
      assertNotNull(staticXmlSerializerWrapper0);
      
      try { 
        staticXmlSerializerWrapper0.startTag("/");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      String string0 = "";
      Image image0 = (Image)errorPage0.img("", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Block block0 = errorPage0.placeholder("VN6]Cx%O");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("div", block0.defaultTagName());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertNotNull(block0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      String string1 = "";
      NumberInput numberInput0 = new NumberInput(errorPage1, "", "claWt>T0{][a@");
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertTrue(numberInput0.isEmpty());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("claWt>T0{][a@", numberInput0.getComponentId());
      assertTrue(numberInput0.isValid());
      assertNotNull(numberInput0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      TableBlock tableBlock0 = new TableBlock(errorPage1, "");
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Block block1 = (Block)tableBlock0.q();
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", tableBlock0.defaultTagName());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("div", block1.defaultTagName());
      assertTrue(block1._isGeneratedId());
      assertEquals("Block_1", block1.getComponentId());
      assertNotSame(errorPage1, errorPage0);
      assertNotSame(block1, block0);
      assertNotNull(block1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(block1.equals((Object)block0));
      
      String string2 = "ins";
      TextArea textArea0 = new TextArea(errorPage0, "ins", "claWt>T0{][a@");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isBuilt());
      assertEquals("claWt>T0{][a@", textArea0.getComponentId());
      assertEquals("ins", textArea0.getFormElementName());
      assertEquals("textarea", textArea0.defaultTagName());
      assertFalse(textArea0._isGeneratedId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertNotNull(textArea0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      ErrorPage errorPage2 = (ErrorPage)numberInput0.getPage();
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertTrue(numberInput0.isEmpty());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("claWt>T0{][a@", numberInput0.getComponentId());
      assertTrue(numberInput0.isValid());
      assertTrue(errorPage2.isPage());
      assertFalse(errorPage2._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage2.getComponentId());
      assertFalse(errorPage2._isGeneratedId());
      assertEquals("div", errorPage2.defaultTagName());
      assertNotSame(errorPage1, errorPage0);
      assertSame(errorPage1, errorPage2);
      assertSame(errorPage2, errorPage1);
      assertNotSame(errorPage2, errorPage0);
      assertNotNull(errorPage2);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertTrue(errorPage2.equals((Object)errorPage0));
      
      String string3 = null;
      Checkbox checkbox0 = new Checkbox(numberInput0, (String) null, "");
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isBuilt());
      assertTrue(numberInput0.isEmpty());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("claWt>T0{][a@", numberInput0.getComponentId());
      assertTrue(numberInput0.isValid());
      assertNull(checkbox0.getFormElementName());
      assertTrue(checkbox0.isValid());
      assertTrue(checkbox0._isGeneratedId());
      assertTrue(checkbox0.isEmpty());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
      assertEquals("input", checkbox0.defaultTagName());
      assertNotNull(checkbox0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("frame");
      assertFalse(xmlEntityRef0._isGeneratedId());
      assertEquals("frame", xmlEntityRef0.getComponentId());
      assertNull(xmlEntityRef0.defaultTagName());
      assertNotNull(xmlEntityRef0);
      
      // Undeclared exception!
      try { 
        numberInput0.del((Object) xmlEntityRef0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertNotNull(errorPage0);
      
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertNotNull(elExpression0);
      
      FileInput fileInput0 = new FileInput(errorPage0, (String) null, "Tr component can be added only to a TableBlock.");
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isBuilt());
      assertEquals("input", fileInput0.defaultTagName());
      assertTrue(fileInput0.isValid());
      assertEquals(1000, fileInput0.getMaxMemoryFileSize());
      assertTrue(fileInput0.isEmpty());
      assertEquals(1000, fileInput0.getMaxRequestSize());
      assertEquals("/tmp", fileInput0.getTempFileLocation());
      assertEquals("Tr component can be added only to a TableBlock.", fileInput0.getComponentId());
      assertFalse(fileInput0._isGeneratedId());
      assertNull(fileInput0.getFormElementName());
      assertNotNull(fileInput0);
      
      String string0 = "Tr component can be added only to a TableBlock.";
      // Undeclared exception!
      try { 
        fileInput0.title("Tr component can be added only to a TableBlock.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7916629309316447
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      Image image0 = (Image)errorPage0.img("", "");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertNotNull(image0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertFalse(errorPage1._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(errorPage1.isPage());
      assertEquals("div", errorPage1.defaultTagName());
      assertFalse(errorPage1._isGeneratedId());
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      ActionExpression actionExpression0 = new ActionExpression("style");
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertNotNull(actionExpression0);
      
      ActionExpression actionExpression1 = actionExpression0.event((String) null);
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertNotNull(actionExpression1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) actionExpression1;
      objectArray0[1] = (Object) errorPage0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) actionExpression0;
      objectArray0[4] = (Object) actionExpression1;
      ActionExpression actionExpression2 = actionExpression1.parameters(objectArray0);
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertNull(actionExpression0.getEvent());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertNull(actionExpression1.getEvent());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertNull(actionExpression2.getEvent());
      assertFalse(actionExpression2.isExternalUrl());
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertNotNull(actionExpression2);
      assertEquals(5, objectArray0.length);
      
      Form form0 = new Form(image0, "`6-8AE;vDpF< nV", actionExpression2);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      Form form1 = form0.addFormValidationError("big");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form1, form0);
      assertNotNull(form1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      Radio radio0 = new Radio(form1, "`6-8AE;vDpF< nV", "java.lang.String@0000000009");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("`6-8AE;vDpF< nV", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotNull(radio0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      Form form2 = form0.addFormElement(radio0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("`6-8AE;vDpF< nV", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("`6-8AE;vDpF< nV", form2.getComponentId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertNotNull(form2);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      List<RenderableComponent> list0 = form2._getRenderableChildren();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("`6-8AE;vDpF< nV", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertEquals("`6-8AE;vDpF< nV", form2.getComponentId());
      assertEquals("form", form2.defaultTagName());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertNotSame(errorPage0, errorPage1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertNotNull(list0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      Checkbox checkbox0 = new Checkbox(radio0, "", "L@Q;]T;k\"1");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("L@Q;]T;k\"1", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("`6-8AE;vDpF< nV", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotNull(checkbox0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      checkbox0.validate();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(checkbox0.isValid());
      assertEquals("L@Q;]T;k\"1", checkbox0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("`6-8AE;vDpF< nV", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotSame(errorPage0, errorPage1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      Checkbox checkbox1 = (Checkbox)checkbox0.addValidationError("H ");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("L@Q;]T;k\"1", checkbox0.getComponentId());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("", checkbox1.getFormElementName());
      assertTrue(checkbox1.isEmpty());
      assertEquals("L@Q;]T;k\"1", checkbox1.getComponentId());
      assertEquals("input", checkbox1.defaultTagName());
      assertFalse(checkbox1.isValid());
      assertFalse(checkbox1._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("`6-8AE;vDpF< nV", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotSame(errorPage0, errorPage1);
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox1, checkbox0);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertNotNull(checkbox1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      Checkbox checkbox2 = (Checkbox)checkbox0.fieldBinding((String) null);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("L@Q;]T;k\"1", checkbox0.getComponentId());
      assertFalse(checkbox0.isValid());
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("", checkbox0.getFormElementName());
      assertEquals("input", checkbox0.defaultTagName());
      assertTrue(checkbox0.isEmpty());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertTrue(checkbox2.isEmpty());
      assertEquals("", checkbox2.getFormElementName());
      assertFalse(checkbox2.isValid());
      assertFalse(checkbox2._isGeneratedId());
      assertEquals("L@Q;]T;k\"1", checkbox2.getComponentId());
      assertEquals("input", checkbox2.defaultTagName());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("`6-8AE;vDpF< nV", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotSame(errorPage0, errorPage1);
      assertSame(checkbox0, checkbox1);
      assertSame(checkbox0, checkbox2);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(checkbox2, checkbox0);
      assertSame(checkbox2, checkbox1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertNotNull(checkbox2);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertEquals(5, objectArray0.length);
      
      Radio radio1 = new Radio(form1, "tm5Mm)2", "dateInputError");
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertTrue(radio1.isValid());
      assertEquals("input", radio1.defaultTagName());
      assertEquals("dateInputError", radio1.getComponentId());
      assertFalse(radio1._isGeneratedId());
      assertEquals("tm5Mm)2", radio1.getFormElementName());
      assertTrue(radio1.isEmpty());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertNotNull(radio1);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(radio1.equals((Object)radio0));
      assertEquals(5, objectArray0.length);
      
      String string0 = radio0.defaultDomEvent();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(errorPage0.isPage());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertEquals("Image_1", image0.getComponentId());
      assertTrue(image0._isGeneratedId());
      assertEquals("action", actionExpression0.getEvent());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(actionExpression0.isSubmitForm());
      assertEquals("style", actionExpression0.toString());
      assertNull(actionExpression0.getJavascript());
      assertFalse(actionExpression0.isExternalUrl());
      assertEquals(5, actionExpression0.length());
      assertEquals("style", actionExpression0.getActionExpression());
      assertEquals("style", actionExpression0.getExpression());
      assertFalse(actionExpression1.isExternalUrl());
      assertEquals("style", actionExpression1.getExpression());
      assertEquals(5, actionExpression1.length());
      assertEquals("style", actionExpression1.getActionExpression());
      assertEquals("style", actionExpression1.toString());
      assertNull(actionExpression1.getJavascript());
      assertEquals("action", actionExpression1.getEvent());
      assertFalse(actionExpression1.isSubmissible());
      assertTrue(actionExpression1.isSubmitForm());
      assertNull(actionExpression2.getJavascript());
      assertEquals("style", actionExpression2.getExpression());
      assertEquals("action", actionExpression2.getEvent());
      assertTrue(actionExpression2.isSubmitForm());
      assertEquals("style", actionExpression2.toString());
      assertFalse(actionExpression2.isSubmissible());
      assertEquals(5, actionExpression2.length());
      assertEquals("style", actionExpression2.getActionExpression());
      assertFalse(actionExpression2.isExternalUrl());
      assertFalse(form0._isBuilt());
      assertEquals("`6-8AE;vDpF< nV", form0.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isGeneratedId());
      assertEquals("`6-8AE;vDpF< nV", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form1._isGeneratedId());
      assertEquals("input", radio0.defaultTagName());
      assertEquals("`6-8AE;vDpF< nV", radio0.getFormElementName());
      assertFalse(radio0._isGeneratedId());
      assertTrue(radio0.isEmpty());
      assertTrue(radio0.isValid());
      assertNotSame(errorPage0, errorPage1);
      assertSame(actionExpression0, actionExpression2);
      assertSame(actionExpression0, actionExpression1);
      assertSame(actionExpression1, actionExpression0);
      assertSame(actionExpression1, actionExpression2);
      assertSame(actionExpression2, actionExpression1);
      assertSame(actionExpression2, actionExpression0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertNotSame(radio0, radio1);
      assertEquals("onclick", string0);
      assertNotNull(string0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertFalse(radio0.equals((Object)radio1));
      assertEquals(5, objectArray0.length);
      
      // Undeclared exception!
      try { 
        radio0.object();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4600577333354474
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNotNull(errorPage0);
      
      Any any0 = (Any)errorPage0.meta();
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertEquals("Any_1", any0.getComponentId());
      assertNull(any0.defaultTagName());
      assertTrue(any0._isGeneratedId());
      assertNotNull(any0);
      
      ElExpression elExpression0 = new ElExpression((String) null);
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertNotNull(elExpression0);
      
      Any any1 = (Any)errorPage0.base(elExpression0);
      assertFalse(errorPage0._isBuilt());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("div", errorPage0.defaultTagName());
      assertFalse(errorPage0._isGeneratedId());
      assertTrue(errorPage0.isPage());
      assertNull(elExpression0.getExpression());
      assertNull(elExpression0.toString());
      assertTrue(any1._isGeneratedId());
      assertEquals("Any_2", any1.getComponentId());
      assertNull(any1.defaultTagName());
      assertNotSame(any1, any0);
      assertNotNull(any1);
      assertFalse(any1.equals((Object)any0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        any1.kbd(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.632848771746362
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertNotNull(errorPage0);
      
      String string0 = "";
      Image image0 = (Image)errorPage0.img("", "");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("img", image0.defaultTagName());
      assertTrue(image0._isGeneratedId());
      assertEquals("Image_1", image0.getComponentId());
      assertNotNull(image0);
      
      ErrorPage errorPage1 = new ErrorPage();
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertNotNull(errorPage1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      String string1 = "VN6]Cx%O";
      Block block0 = errorPage0.placeholder("VN6]Cx%O");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("div", block0.defaultTagName());
      assertFalse(block0._isGeneratedId());
      assertEquals("VN6]Cx%O", block0.getComponentId());
      assertNotSame(errorPage0, errorPage1);
      assertNotNull(block0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      String string2 = "";
      String string3 = "claWt>T0{][a@";
      NumberInput numberInput0 = new NumberInput(errorPage1, "", "claWt>T0{][a@");
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("claWt>T0{][a@", numberInput0.getComponentId());
      assertNotNull(numberInput0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      TableBlock tableBlock0 = new TableBlock(errorPage1, "");
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertNotNull(tableBlock0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Block block1 = (Block)tableBlock0.q();
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertTrue(block1._isGeneratedId());
      assertEquals("div", block1.defaultTagName());
      assertEquals("Block_1", block1.getComponentId());
      assertNotSame(errorPage1, errorPage0);
      assertNotSame(block1, block0);
      assertNotNull(block1);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertFalse(block1.equals((Object)block0));
      
      TextArea textArea0 = new TextArea(errorPage0, "ins", "claWt>T0{][a@");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertFalse(textArea0._isGeneratedId());
      assertEquals("textarea", textArea0.defaultTagName());
      assertEquals("ins", textArea0.getFormElementName());
      assertEquals("claWt>T0{][a@", textArea0.getComponentId());
      assertTrue(textArea0.isValid());
      assertTrue(textArea0.isEmpty());
      assertNotNull(textArea0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      
      ErrorPage errorPage2 = (ErrorPage)numberInput0.getPage();
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("claWt>T0{][a@", numberInput0.getComponentId());
      assertFalse(errorPage2._isBuilt());
      assertEquals("div", errorPage2.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage2.getComponentId());
      assertFalse(errorPage2._isGeneratedId());
      assertTrue(errorPage2.isPage());
      assertSame(errorPage1, errorPage2);
      assertNotSame(errorPage1, errorPage0);
      assertNotSame(errorPage2, errorPage0);
      assertSame(errorPage2, errorPage1);
      assertNotNull(errorPage2);
      assertTrue(errorPage1.equals((Object)errorPage0));
      assertTrue(errorPage2.equals((Object)errorPage0));
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = numberInput0.equals(tableBlock0);
      assertFalse(errorPage1._isGeneratedId());
      assertTrue(errorPage1.isPage());
      assertFalse(errorPage1._isBuilt());
      assertEquals("div", errorPage1.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertEquals("input", numberInput0.defaultTagName());
      assertEquals("", numberInput0.getFormElementName());
      assertTrue(numberInput0.isEmpty());
      assertTrue(numberInput0.isValid());
      assertFalse(numberInput0._isGeneratedId());
      assertEquals("claWt>T0{][a@", numberInput0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("div", tableBlock0.defaultTagName());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertSame(errorPage1, errorPage2);
      assertNotSame(errorPage1, errorPage0);
      assertFalse(boolean0);
      assertTrue(errorPage1.equals((Object)errorPage0));
      
      Form form0 = new Form("VN6]Cx%O");
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("VN6]Cx%O", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertNotNull(form0);
      
      Form form1 = form0.addFormValidationRule("ins", "claWt>T0{][a@");
      assertFalse(form1._isGeneratedId());
      assertEquals("VN6]Cx%O", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("VN6]Cx%O", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertSame(form1, form0);
      assertSame(form0, form1);
      assertNotNull(form1);
      
      Any any0 = new Any(errorPage0, "");
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNotNull(any0);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(errorPage0.equals((Object)errorPage2));
      
      String string4 = any0.defaultTagName();
      assertEquals("div", errorPage0.defaultTagName());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isBuilt());
      assertTrue(errorPage0.isPage());
      assertFalse(errorPage0._isGeneratedId());
      assertEquals("Any_1", any0.getComponentId());
      assertTrue(any0._isGeneratedId());
      assertNull(any0.defaultTagName());
      assertNotSame(errorPage0, errorPage2);
      assertNotSame(errorPage0, errorPage1);
      assertNull(string4);
      assertTrue(errorPage0.equals((Object)errorPage1));
      assertTrue(errorPage0.equals((Object)errorPage2));
      
      Form form2 = form1.renderHint((CharSequence) null);
      assertFalse(form1._isGeneratedId());
      assertEquals("VN6]Cx%O", form1.getComponentId());
      assertEquals("form", form1.defaultTagName());
      assertFalse(form1._isBuilt());
      assertFalse(form2._isBuilt());
      assertFalse(form2._isGeneratedId());
      assertEquals("form", form2.defaultTagName());
      assertEquals("VN6]Cx%O", form2.getComponentId());
      assertEquals("form", form0.defaultTagName());
      assertFalse(form0._isBuilt());
      assertEquals("VN6]Cx%O", form0.getComponentId());
      assertFalse(form0._isGeneratedId());
      assertSame(form1, form0);
      assertSame(form1, form2);
      assertSame(form2, form1);
      assertSame(form2, form0);
      assertSame(form0, form1);
      assertSame(form0, form2);
      assertNotNull(form2);
      
      // Undeclared exception!
      try { 
        form2.id("02EC\"+;q2(j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
