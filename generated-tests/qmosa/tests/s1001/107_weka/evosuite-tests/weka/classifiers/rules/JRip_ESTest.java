/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:23:19 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.debugTipText();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Whether debug information is output to the console.", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accuRate = (-3494.2161);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.copy();
      // Undeclared exception!
      try { 
        attribute0.parseDate("g(n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only parse date values for date attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3184.706916), intArray0, 2);
      jRip_RipperRule0.covers(binarySparseInstance0);
      Utils.SMALL = 1.0;
      jRip_RipperRule0.copy();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("JRIP rules:\n===========\n\n", arrayList0, (-1731));
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(1.0E-5);
      jRip0.setUsePruning(true);
      jRip0.globalInfo();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5443);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.getMinNo();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("Inside m_Ruleset", linkedList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.cover = 5.7;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("numeric");
      mockFileOutputStream0.write(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-7);
      mockFileOutputStream0.write(byteArray0, 3, (int) (byte)113);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      try { 
        protectedProperties0.storeToXML((OutputStream) mockPrintStream0, "real", "@end");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 1003;
      jRip0.setMinNo(1003);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(1003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1495;
      intArray0[2] = (-3197);
      intArray0[3] = 3815;
      intArray0[4] = 0;
      intArray0[5] = 1581;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0E-6), intArray0, 0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(1504);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      jRip0.enumerateMeasures();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jRip0.setFolds(1832);
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("The seed used for randomizing the data.", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(1832, jRip0.getFolds());
      assertEquals("The seed used for randomizing the data. <= NaN", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "particular";
      stringArray0[1] = "";
      stringArray0[2] = "Improvements to Platt's SMO Algorithm for SVM Classifier Design";
      jRip0.setSeed((-2476L));
      stringArray0[3] = "";
      stringArray0[4] = "z/&*xPP";
      stringArray0[5] = "";
      jRip0.setOptimizations((-1828));
      jRip0.getRevision();
      stringArray0[6] = "Ovs&'t6<&gGnA7PMt[";
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("Improvements to Platt's SMO Algorithm for SVM Classifier Design", (List<String>) null);
      Attribute.typeToString((-1828));
      attribute0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "B2S";
      stringArray0[1] = ";7\"_])FaCL|>q&N";
      stringArray0[2] = "B2S";
      stringArray0[3] = "B2S";
      stringArray0[4] = "B2S";
      jRip0.getOptions();
      stringArray0[5] = "B2S";
      jRip0.enumerateMeasures();
      stringArray0[6] = "B2S";
      stringArray0[7] = "B2S";
      try { 
        AbstractClassifier.forName("B2S", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: B2S
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(0);
      jRip0.minNoTipText();
      jRip0.setMinNo(2.0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      jRip0.setMinNo(0);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 67);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Utils.log2 = 0.0;
      jRip0.getOptimizations();
      jRip0.getMinNo();
      int int0 = 500;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = null;
      String string0 = null;
      JRip jRip1 = new JRip();
      Instances instances0 = null;
      try { 
        jRip1.rulesetForOneClass(2498.782038191068, (Instances) null, 64.0, (-2031.989));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      jRip0.getFolds();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The minimum total weight of the instances in a rule.";
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent(3);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("uo%ac", protectedProperties1);
      properties0.put(jRip_RipperRule0, jRip_RipperRule0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        protectedProperties1.put(jRip_RipperRule1, classOrder0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int int0 = (-17);
      jRip_RipperRule0.getRevision();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      try { 
        AbstractClassifier.forName("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(892.6750447866253);
      jRip_RipperRule0.copy();
      jRip0.getCheckErrorRate();
      String string0 = "B";
      String string1 = "";
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = (-898.8256);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "measureTotalCoordsPerPoint";
      jRip0.getCapabilities();
      stringArray0[1] = "3wC";
      stringArray0[2] = "P-\"`LOEN9}>xC";
      stringArray0[3] = "Replace rule covers: ";
      stringArray0[4] = "\nGrowing and pruning a new rule ...";
      stringArray0[5] = "v5UC`mQL";
      stringArray0[6] = ":<0K";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Utils.log2 = (-898.8256);
      jRip0.checkErrorRateTipText();
      jRip0.getCapabilities();
      jRip0.setSeed(2272L);
      jRip0.setDebug(false);
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(2272L, jRip0.getSeed());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getOptimizations();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2627.6, intArray0, 350);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance0);
      jRip_RipperRule0.copy();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(" He2uay?fl", arrayList0, 9);
      jRip0.minNoTipText();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.getOptimizations();
      Attribute attribute0 = new Attribute("", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[6];
      jRip0.setOptions(stringArray0);
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 59;
      intArray0[5] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Locale locale0 = Locale.FRENCH;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("JRIP rules:\n===========\n\n", arrayList0);
      jRip0.getTechnicalInformation();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("    for (i = 0 ; i < obj.length; i++) {\n", arrayList1, 2);
      jRip_NumericAntd0.splitData(instances0, 1694.0851725, 155.546357654);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.getRevision();
      jRip_NumericAntd0.toString();
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      double double0 = jRip_NumericAntd1.getCover();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2627.6, intArray0, 8);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(" He2uay?fl", arrayList0, 8);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " He2uay?fl");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(Double.NaN, double0, 0.01);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(" He2uay?fl <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      boolean boolean1 = jRip0.getDebug();
      assertFalse(boolean1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("4Z|ocbm;ZEH", list0, protectedProperties1);
      Attribute attribute1 = attribute0.copy("\n");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.getAttrValue();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (-1585.04639538);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean2 = jRip_RipperRule0.covers(sparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.FRENCH;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("JRIP rules:\n===========\n\n", list0);
      jRip0.getTechnicalInformation();
      Attribute attribute1 = new Attribute("", arrayList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList2, 1);
      jRip_NumericAntd0.splitData(instances0, 0, 0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.toString();
      jRip_NumericAntd1.getCover();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.getAccuRate();
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list0, 613);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(" <= NaN", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 802);
      binarySparseInstance0.deleteAttributeAt(802);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance0);
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", (String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      Attribute attribute0 = new Attribute("4h]9E&nIDTM3XR]", 968);
      attribute0.getRevision();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip0.setSeed(0L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip_NominalAntd0.value = (double) 4;
      jRip_NominalAntd0.getRevision();
      jRip0.getOptions();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      jRip_NominalAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 3, 678.8431913478979);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("One rule found after pruning:", arrayList0, 2859);
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("real", linkedList2, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = 4;
      intArray0[5] = 3;
      intArray0[6] = (-3144);
      intArray0[7] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 2242);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("One rule found after pruning:", arrayList0, 2859);
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("real", linkedList2, 3);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList2, 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 0, 64.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = (-1574);
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("One rule found after pruning:", arrayList0, 2859);
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("real", linkedList2, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("string", arrayList2, 2);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute2 = new Attribute("William W. Cohen", instances0, protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      jRip_NumericAntd1.splitData(instances0, 0.0, 3);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1757);
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(3, jRip1.getFolds());
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      AbstractClassifier.runClassifier((Classifier) null, (String[]) null);
      Attribute attribute0 = new Attribute("rnE", "");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleKeys();
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getOptions();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("zt", "!:X9wQ2Y^n<aovP@T", 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'Q'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0253262207700677
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("One rule found after pruning:", arrayList0, 2859);
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setUsePruning(true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("real", linkedList2, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("string", arrayList2, 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0.0, 3);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 0.0, 1677.6292);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.14370838942625
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      jRip0.getTechnicalInformation();
      stringArray0[0] = "ylL$1d 195w1u$9`z";
      stringArray0[1] = "-E";
      stringArray0[2] = "+hC'*";
      jRip0.setOptions(stringArray0);
      jRip0.getOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.UK;
      locale0.getUnicodeLocaleKeys();
      Attribute attribute0 = new Attribute("Use heuristic that avoids cross-validating the number of Logit-Boost iterations at every node. When fitting the logistic regression functions at a node, LMT has to determine the number of LogitBoost iterations to run. Originally, this number was cross-validated at every node in the tree. To save time, this heuristic cross-validates the number only once and then uses that number at every node in the tree. Usually this does not decrease accuracy but improves runtime considerably.", (List<String>) null, 1382);
      Attribute attribute1 = new Attribute((String) null, (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.toString();
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.toString();
      jRip_NumericAntd0.copy();
      jRip_NumericAntd1.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[4] = "Set splitting criterion based on the residuals of LogitBoost. There are two possible splitting criteria for LMT: the default is to use the C4.5 splitting criterion that uses information gain on the class variable. The other splitting criterion tries to improve the purity in the residuals produces when fitting the logistic regression functions. The choice of the splitting criterion does not usually affect classification accuracy much, but can produce different trees.";
      SparseInstance sparseInstance0 = new SparseInstance(2000);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2000);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("", "*", 6);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute(">eWR", "me]8.", 100000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
