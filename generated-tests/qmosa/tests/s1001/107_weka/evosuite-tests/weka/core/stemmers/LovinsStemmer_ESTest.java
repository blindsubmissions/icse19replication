/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 24 08:23:13 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[1] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("|bc~'a]Hr{/");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("month");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.001833778359595
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("arizer");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0236517322492742
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("CHAPTER");
      assertEquals("chapter", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CHAPTER";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("icance");
      assertEquals("icanc", string1);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("a5O4|K6*V");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("(?C{f/8i`D[E)Q'j");
      assertEquals("(?c{f/8i`d[e)q'j", string3);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("a5o4|k6*v");
      lovinsStemmer0.stem("a5o4|k6*v");
      lovinsStemmer0.stemString("ZH(oJc>2%b(4");
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9735584326028659
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("EUMkX8t\"R56b)HeD");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{Gi<L0p9{v$j&$";
      LovinsStemmer.main(stringArray0);
      String string0 = "icance";
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("zu51tex");
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.7606176920415182
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("zu51ticyt");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0086074596411065
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("!rUOUc`l~2B");
      assertEquals("!ruouc`l~2b", string0);
      
      String string1 = lovinsStemmer0.stemString("M{]Tw6t{;s0>y$xZ@I");
      assertEquals("m{]tw6t{;s0>y$xz@i", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!ruouc`l~2b";
      stringArray0[1] = "!rUOUc`l~2B";
      stringArray0[2] = "lid";
      stringArray0[3] = "M{]Tw6t{;s0>y$xZ@I";
      stringArray0[4] = "address";
      stringArray0[5] = "!rUOUc`l~2B";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("!rUOUc`l~2B");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9729150497179929
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("key");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("nvHB");
      lovinsStemmer0.stemString("08<j-i8l6>nrpand");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer0.stemString("08<j-i8l6>nrpans");
      assertEquals("08<j-i8l6>nrpan", string0);
      
      lovinsStemmer2.toString();
      lovinsStemmer2.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer1.stemString("08<j-i8l6>nrond");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer2.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0310521697523976
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ement");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("ement");
      lovinsStemmer0.stemString("ement");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("OSR");
      String string0 = lovinsStemmer1.stemString("aS.%%~TLUlVf*");
      assertEquals("as.%%~tlulvf*", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("atively");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("atively");
      assertEquals("at", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7830925218068525
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("atyz");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("71Va9T`{ah");
      assertEquals("71va9t`{ah", string0);
      
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("atyz");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("8034");
      assertEquals("8034", string3);
      
      lovinsStemmer0.stem("6<&gGnA");
      lovinsStemmer0.stem("08<J-I8l6>nry");
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer0.getRevision();
      assertTrue(string4.equals((Object)string3));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0086074596411065
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = lovinsStemmer0.stemString("address");
      assertEquals("addres", string0);
      
      stringArray0[3] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("08<j-i8l6>nrcid");
      String string2 = lovinsStemmer0.stemString("wj#KjU$");
      assertEquals("wj#kju$", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9398473390054318
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A Master's thesis.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("71Va9T`{ah");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("A Master's thesis.");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("end");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("end");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8993098830849456
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("zU51s");
      assertEquals("zu51", string0);
      
      String string1 = lovinsStemmer0.stemString("!rUOUc`l~2B");
      assertEquals("!ruouc`l~2b", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("zu51");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "!rUOUc`l~2B";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "zU51s";
      stringArray0[3] = "!rUOUc`l~2B";
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("school");
      String string3 = lovinsStemmer0.stemString("erid");
      assertEquals("eris", string3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0472559679279883
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("@=s#QS3;%D(f>");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("U8dfI");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ez0V6W9W");
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("8034");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.stemmers.LovinsStemmer", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("izable");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8537447706086106
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("@=s#QS3;%D(f>");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stem("ert");
      assertEquals("ers", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.getRevision();
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("8034");
      String string3 = lovinsStemmer3.stemString("school");
      assertEquals("school", string3);
  }
}
